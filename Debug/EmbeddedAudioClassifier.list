
EmbeddedAudioClassifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000305ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004fb0  08030780  08030780  00040780  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035730  08035730  00050644  2**0
                  CONTENTS
  4 .ARM          00000008  08035730  08035730  00045730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035738  08035738  00050644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08035738  08035738  00045738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08035744  08035744  00045744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000644  20000000  0803574c  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a98  20000648  08035d90  00050648  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200070e0  08035d90  000570e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050644  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00050674  2**0
                  CONTENTS, READONLY
 13 .debug_info   0021487e  00000000  00000000  000506b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00018fc3  00000000  00000000  00264f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00006718  00000000  00000000  0027def8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00004ee1  00000000  00000000  00284610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004442b  00000000  00000000  002894f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0008f932  00000000  00000000  002cd91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001fcff6  00000000  00000000  0035d24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0001ebfc  00000000  00000000  0055a244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00578e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000648 	.word	0x20000648
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08030764 	.word	0x08030764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000064c 	.word	0x2000064c
 80001cc:	08030764 	.word	0x08030764

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9f1 	b.w	800108c <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9a6 	b.w	800108c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9e08      	ldr	r6, [sp, #32]
 8000dca:	460d      	mov	r5, r1
 8000dcc:	4604      	mov	r4, r0
 8000dce:	460f      	mov	r7, r1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d14a      	bne.n	8000e6a <__udivmoddi4+0xa6>
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	4694      	mov	ip, r2
 8000dd8:	d965      	bls.n	8000ea6 <__udivmoddi4+0xe2>
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	b143      	cbz	r3, 8000df2 <__udivmoddi4+0x2e>
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	f1c3 0220 	rsb	r2, r3, #32
 8000de8:	409f      	lsls	r7, r3
 8000dea:	fa20 f202 	lsr.w	r2, r0, r2
 8000dee:	4317      	orrs	r7, r2
 8000df0:	409c      	lsls	r4, r3
 8000df2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000df6:	fa1f f58c 	uxth.w	r5, ip
 8000dfa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dfe:	0c22      	lsrs	r2, r4, #16
 8000e00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e08:	fb01 f005 	mul.w	r0, r1, r5
 8000e0c:	4290      	cmp	r0, r2
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x62>
 8000e10:	eb1c 0202 	adds.w	r2, ip, r2
 8000e14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e18:	f080 811c 	bcs.w	8001054 <__udivmoddi4+0x290>
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	f240 8119 	bls.w	8001054 <__udivmoddi4+0x290>
 8000e22:	3902      	subs	r1, #2
 8000e24:	4462      	add	r2, ip
 8000e26:	1a12      	subs	r2, r2, r0
 8000e28:	b2a4      	uxth	r4, r4
 8000e2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e36:	fb00 f505 	mul.w	r5, r0, r5
 8000e3a:	42a5      	cmp	r5, r4
 8000e3c:	d90a      	bls.n	8000e54 <__udivmoddi4+0x90>
 8000e3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e46:	f080 8107 	bcs.w	8001058 <__udivmoddi4+0x294>
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	f240 8104 	bls.w	8001058 <__udivmoddi4+0x294>
 8000e50:	4464      	add	r4, ip
 8000e52:	3802      	subs	r0, #2
 8000e54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	b11e      	cbz	r6, 8000e66 <__udivmoddi4+0xa2>
 8000e5e:	40dc      	lsrs	r4, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	e9c6 4300 	strd	r4, r3, [r6]
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0xbc>
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	f000 80ed 	beq.w	800104e <__udivmoddi4+0x28a>
 8000e74:	2100      	movs	r1, #0
 8000e76:	e9c6 0500 	strd	r0, r5, [r6]
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e80:	fab3 f183 	clz	r1, r3
 8000e84:	2900      	cmp	r1, #0
 8000e86:	d149      	bne.n	8000f1c <__udivmoddi4+0x158>
 8000e88:	42ab      	cmp	r3, r5
 8000e8a:	d302      	bcc.n	8000e92 <__udivmoddi4+0xce>
 8000e8c:	4282      	cmp	r2, r0
 8000e8e:	f200 80f8 	bhi.w	8001082 <__udivmoddi4+0x2be>
 8000e92:	1a84      	subs	r4, r0, r2
 8000e94:	eb65 0203 	sbc.w	r2, r5, r3
 8000e98:	2001      	movs	r0, #1
 8000e9a:	4617      	mov	r7, r2
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	d0e2      	beq.n	8000e66 <__udivmoddi4+0xa2>
 8000ea0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ea4:	e7df      	b.n	8000e66 <__udivmoddi4+0xa2>
 8000ea6:	b902      	cbnz	r2, 8000eaa <__udivmoddi4+0xe6>
 8000ea8:	deff      	udf	#255	; 0xff
 8000eaa:	fab2 f382 	clz	r3, r2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8090 	bne.w	8000fd4 <__udivmoddi4+0x210>
 8000eb4:	1a8a      	subs	r2, r1, r2
 8000eb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eba:	fa1f fe8c 	uxth.w	lr, ip
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ec4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec8:	0c22      	lsrs	r2, r4, #16
 8000eca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ece:	fb0e f005 	mul.w	r0, lr, r5
 8000ed2:	4290      	cmp	r0, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x124>
 8000ed6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eda:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x122>
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	f200 80cb 	bhi.w	800107c <__udivmoddi4+0x2b8>
 8000ee6:	4645      	mov	r5, r8
 8000ee8:	1a12      	subs	r2, r2, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ef0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ef4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef8:	fb0e fe00 	mul.w	lr, lr, r0
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x14e>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x14c>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f200 80bb 	bhi.w	8001086 <__udivmoddi4+0x2c2>
 8000f10:	4610      	mov	r0, r2
 8000f12:	eba4 040e 	sub.w	r4, r4, lr
 8000f16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f1a:	e79f      	b.n	8000e5c <__udivmoddi4+0x98>
 8000f1c:	f1c1 0720 	rsb	r7, r1, #32
 8000f20:	408b      	lsls	r3, r1
 8000f22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f32:	40fd      	lsrs	r5, r7
 8000f34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f38:	4323      	orrs	r3, r4
 8000f3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f3e:	fa1f fe8c 	uxth.w	lr, ip
 8000f42:	fb09 5518 	mls	r5, r9, r8, r5
 8000f46:	0c1c      	lsrs	r4, r3, #16
 8000f48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f50:	42a5      	cmp	r5, r4
 8000f52:	fa02 f201 	lsl.w	r2, r2, r1
 8000f56:	fa00 f001 	lsl.w	r0, r0, r1
 8000f5a:	d90b      	bls.n	8000f74 <__udivmoddi4+0x1b0>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f64:	f080 8088 	bcs.w	8001078 <__udivmoddi4+0x2b4>
 8000f68:	42a5      	cmp	r5, r4
 8000f6a:	f240 8085 	bls.w	8001078 <__udivmoddi4+0x2b4>
 8000f6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f72:	4464      	add	r4, ip
 8000f74:	1b64      	subs	r4, r4, r5
 8000f76:	b29d      	uxth	r5, r3
 8000f78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f88:	45a6      	cmp	lr, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x1da>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f94:	d26c      	bcs.n	8001070 <__udivmoddi4+0x2ac>
 8000f96:	45a6      	cmp	lr, r4
 8000f98:	d96a      	bls.n	8001070 <__udivmoddi4+0x2ac>
 8000f9a:	3b02      	subs	r3, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fa6:	eba4 040e 	sub.w	r4, r4, lr
 8000faa:	42ac      	cmp	r4, r5
 8000fac:	46c8      	mov	r8, r9
 8000fae:	46ae      	mov	lr, r5
 8000fb0:	d356      	bcc.n	8001060 <__udivmoddi4+0x29c>
 8000fb2:	d053      	beq.n	800105c <__udivmoddi4+0x298>
 8000fb4:	b156      	cbz	r6, 8000fcc <__udivmoddi4+0x208>
 8000fb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fba:	eb64 040e 	sbc.w	r4, r4, lr
 8000fbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000fc2:	40ca      	lsrs	r2, r1
 8000fc4:	40cc      	lsrs	r4, r1
 8000fc6:	4317      	orrs	r7, r2
 8000fc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	f1c3 0120 	rsb	r1, r3, #32
 8000fd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000fe0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fe4:	409d      	lsls	r5, r3
 8000fe6:	432a      	orrs	r2, r5
 8000fe8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fec:	fa1f fe8c 	uxth.w	lr, ip
 8000ff0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ff4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ff8:	0c11      	lsrs	r1, r2, #16
 8000ffa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ffe:	fb00 f50e 	mul.w	r5, r0, lr
 8001002:	428d      	cmp	r5, r1
 8001004:	fa04 f403 	lsl.w	r4, r4, r3
 8001008:	d908      	bls.n	800101c <__udivmoddi4+0x258>
 800100a:	eb1c 0101 	adds.w	r1, ip, r1
 800100e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001012:	d22f      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001014:	428d      	cmp	r5, r1
 8001016:	d92d      	bls.n	8001074 <__udivmoddi4+0x2b0>
 8001018:	3802      	subs	r0, #2
 800101a:	4461      	add	r1, ip
 800101c:	1b49      	subs	r1, r1, r5
 800101e:	b292      	uxth	r2, r2
 8001020:	fbb1 f5f7 	udiv	r5, r1, r7
 8001024:	fb07 1115 	mls	r1, r7, r5, r1
 8001028:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800102c:	fb05 f10e 	mul.w	r1, r5, lr
 8001030:	4291      	cmp	r1, r2
 8001032:	d908      	bls.n	8001046 <__udivmoddi4+0x282>
 8001034:	eb1c 0202 	adds.w	r2, ip, r2
 8001038:	f105 38ff 	add.w	r8, r5, #4294967295
 800103c:	d216      	bcs.n	800106c <__udivmoddi4+0x2a8>
 800103e:	4291      	cmp	r1, r2
 8001040:	d914      	bls.n	800106c <__udivmoddi4+0x2a8>
 8001042:	3d02      	subs	r5, #2
 8001044:	4462      	add	r2, ip
 8001046:	1a52      	subs	r2, r2, r1
 8001048:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800104c:	e738      	b.n	8000ec0 <__udivmoddi4+0xfc>
 800104e:	4631      	mov	r1, r6
 8001050:	4630      	mov	r0, r6
 8001052:	e708      	b.n	8000e66 <__udivmoddi4+0xa2>
 8001054:	4639      	mov	r1, r7
 8001056:	e6e6      	b.n	8000e26 <__udivmoddi4+0x62>
 8001058:	4610      	mov	r0, r2
 800105a:	e6fb      	b.n	8000e54 <__udivmoddi4+0x90>
 800105c:	4548      	cmp	r0, r9
 800105e:	d2a9      	bcs.n	8000fb4 <__udivmoddi4+0x1f0>
 8001060:	ebb9 0802 	subs.w	r8, r9, r2
 8001064:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001068:	3b01      	subs	r3, #1
 800106a:	e7a3      	b.n	8000fb4 <__udivmoddi4+0x1f0>
 800106c:	4645      	mov	r5, r8
 800106e:	e7ea      	b.n	8001046 <__udivmoddi4+0x282>
 8001070:	462b      	mov	r3, r5
 8001072:	e794      	b.n	8000f9e <__udivmoddi4+0x1da>
 8001074:	4640      	mov	r0, r8
 8001076:	e7d1      	b.n	800101c <__udivmoddi4+0x258>
 8001078:	46d0      	mov	r8, sl
 800107a:	e77b      	b.n	8000f74 <__udivmoddi4+0x1b0>
 800107c:	3d02      	subs	r5, #2
 800107e:	4462      	add	r2, ip
 8001080:	e732      	b.n	8000ee8 <__udivmoddi4+0x124>
 8001082:	4608      	mov	r0, r1
 8001084:	e70a      	b.n	8000e9c <__udivmoddi4+0xd8>
 8001086:	4464      	add	r4, ip
 8001088:	3802      	subs	r0, #2
 800108a:	e742      	b.n	8000f12 <__udivmoddi4+0x14e>

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	4798      	blx	r3
    }
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf0c      	ite	eq
 800110a:	2301      	moveq	r3, #1
 800110c:	2300      	movne	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	1e5a      	subs	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4013      	ands	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 800113a:	2137      	movs	r1, #55	; 0x37
 800113c:	4817      	ldr	r0, [pc, #92]	; (800119c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 800113e:	f02c fc1b 	bl	802d978 <__assert_func>

	if(align && size)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d01f      	beq.n	8001188 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01c      	beq.n	8001188 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3301      	adds	r3, #1
 8001152:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4413      	add	r3, r2
 800115a:	2101      	movs	r1, #1
 800115c:	4618      	mov	r0, r3
 800115e:	f024 f997 	bl	8025490 <_Z9ei_callocjj>
 8001162:	60f8      	str	r0, [r7, #12]

		if(p)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00e      	beq.n	8001188 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	425b      	negs	r3, r3
 8001176:	4013      	ands	r3, r2
 8001178:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1ad2      	subs	r2, r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3b02      	subs	r3, #2
 8001184:	b292      	uxth	r2, r2
 8001186:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8001188:	697b      	ldr	r3, [r7, #20]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	08030780 	.word	0x08030780
 8001198:	0803079c 	.word	0x0803079c
 800119c:	080307d4 	.word	0x080307d4

080011a0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	assert(ptr);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d105      	bne.n	80011ba <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 80011b2:	215a      	movs	r1, #90	; 0x5a
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 80011b6:	f02c fbdf 	bl	802d978 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80011c0:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	425b      	negs	r3, r3
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	f024 f96d 	bl	80254ac <_Z7ei_freePv>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	08030860 	.word	0x08030860
 80011e0:	08030864 	.word	0x08030864
 80011e4:	080307d4 	.word	0x080307d4

080011e8 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	731a      	strb	r2, [r3, #12]
 8001208:	e00e      	b.n	8001228 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	fb02 f303 	mul.w	r3, r2, r3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	2101      	movs	r1, #1
 8001216:	4618      	mov	r0, r3
 8001218:	f024 f93a 	bl	8025490 <_Z9ei_callocjj>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d008      	beq.n	8001260 <_ZN2ei9ei_matrixD1Ev+0x22>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7b1b      	ldrb	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f024 f926 	bl	80254ac <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	6839      	ldr	r1, [r7, #0]
 800127e:	fb01 f303 	mul.w	r3, r1, r3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
    }
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	ed87 0a01 	vstr	s0, [r7, #4]
 800129c:	ed97 0a01 	vldr	s0, [r7, #4]
 80012a0:	f029 ff2a 	bl	802b0f8 <ceilf>
 80012a4:	eef0 7a40 	vmov.f32	s15, s0
 80012a8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	ed87 0a01 	vstr	s0, [r7, #4]
 80012bc:	ed97 0a01 	vldr	s0, [r7, #4]
 80012c0:	f029 fc02 	bl	802aac8 <expf>
 80012c4:	eef0 7a40 	vmov.f32	s15, s0
 80012c8:	eeb0 0a67 	vmov.f32	s0, s15
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	ed87 0a01 	vstr	s0, [r7, #4]
 80012dc:	ed97 0a01 	vldr	s0, [r7, #4]
 80012e0:	f029 ff4c 	bl	802b17c <floorf>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	ed87 0a01 	vstr	s0, [r7, #4]
 80012fc:	ed97 0a01 	vldr	s0, [r7, #4]
 8001300:	f029 ff82 	bl	802b208 <roundf>
 8001304:	eef0 7a40 	vmov.f32	s15, s0
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	ed87 0a01 	vstr	s0, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001326:	edd7 7a05 	vldr	s15, [r7, #20]
 800132a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	db09      	blt.n	8001348 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001334:	ed97 0a05 	vldr	s0, [r7, #20]
 8001338:	f029 fc2a 	bl	802ab90 <sqrtf>
 800133c:	eef0 7a40 	vmov.f32	s15, s0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001346:	e004      	b.n	8001352 <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001350:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <_ZN2ei5numpy4rollEPfji>:
     * @param input_array
     * @param input_array_size
     * @param shift The number of places by which elements are shifted.
     * @returns EIDSP_OK if OK
     */
    static int roll(float *input_array, size_t input_array_size, int shift) {
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
        if (shift < 0) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	da03      	bge.n	800137e <_ZN2ei5numpy4rollEPfji+0x1a>
            shift = input_array_size + shift;
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	607b      	str	r3, [r7, #4]
        }

        if (shift == 0) {
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <_ZN2ei5numpy4rollEPfji+0x24>
            return EIDSP_OK;
 8001384:	2400      	movs	r4, #0
 8001386:	e030      	b.n	80013ea <_ZN2ei5numpy4rollEPfji+0x86>
        }

        // so we need to allocate a buffer of the size of shift...
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	f107 0010 	add.w	r0, r7, #16
 800138e:	2300      	movs	r3, #0
 8001390:	2101      	movs	r1, #1
 8001392:	f7ff ff29 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <_ZN2ei5numpy4rollEPfji+0x3c>
 800139c:	4c15      	ldr	r4, [pc, #84]	; (80013f4 <_ZN2ei5numpy4rollEPfji+0x90>)
 800139e:	e01f      	b.n	80013e0 <_ZN2ei5numpy4rollEPfji+0x7c>

        // we copy from the end of the buffer into the shift buffer
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
 80013a0:	6938      	ldr	r0, [r7, #16]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	18d1      	adds	r1, r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	461a      	mov	r2, r3
 80013b4:	f02d fa99 	bl	802e8ea <memcpy>

        // now we do a memmove to shift the array
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	18d0      	adds	r0, r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	461a      	mov	r2, r3
 80013ca:	68f9      	ldr	r1, [r7, #12]
 80013cc:	f02d f9a0 	bl	802e710 <memmove>

        // and copy the shift buffer back to the beginning of the array
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
 80013d0:	6939      	ldr	r1, [r7, #16]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	461a      	mov	r2, r3
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f02d fa86 	bl	802e8ea <memcpy>

        return EIDSP_OK;
 80013de:	2400      	movs	r4, #0
    }
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff2a 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 80013ea:	4623      	mov	r3, r4
 80013ec:	4618      	mov	r0, r3
 80013ee:	3724      	adds	r7, #36	; 0x24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}
 80013f4:	fffffc16 	.word	0xfffffc16

080013f8 <_ZN2ei5numpy3sumEPfj>:
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(int16_t));

        return EIDSP_OK;
    }

    static float sum(float *input_array, size_t input_array_size) {
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	e00e      	b.n	800142c <_ZN2ei5numpy3sumEPfj+0x34>
            res += input_array[ix];
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	ed97 7a03 	vldr	s14, [r7, #12]
 800141e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001422:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3301      	adds	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d3ec      	bcc.n	800140e <_ZN2ei5numpy3sumEPfj+0x16>
        }
        return res;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	ee07 3a90 	vmov	s15, r3
    }
 800143a:	eeb0 0a67 	vmov.f32	s0, s15
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_>:
     * @param matrix1_cols matrix1 row size (1xN)
     * @param matrix2 Pointer to matrix2 (NxK)
     * @param out_matrix Pointer to out matrix (MxK)
     * @returns EIDSP_OK if OK
     */
    static  int dot_by_row(int i, float *row, uint32_t matrix1_cols, matrix_t *matrix2, matrix_t *out_matrix) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
        if (matrix1_cols != matrix2->rows) {
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_+0xc8>)
 8001462:	e051      	b.n	8001508 <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_+0xc0>
        }

#if EIDSP_USE_CMSIS_DSP
        if (matrix1_cols > EI_MAX_UINT16 || matrix2->rows > EI_MAX_UINT16 || matrix2->cols > EI_MAX_UINT16 ||
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146a:	d20e      	bcs.n	800148a <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_+0x42>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001474:	d209      	bcs.n	800148a <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_+0x42>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147e:	d204      	bcs.n	800148a <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_+0x42>
            out_matrix->cols > EI_MAX_UINT16) {
 8001480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001482:	689b      	ldr	r3, [r3, #8]
        if (matrix1_cols > EI_MAX_UINT16 || matrix2->rows > EI_MAX_UINT16 || matrix2->cols > EI_MAX_UINT16 ||
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d301      	bcc.n	800148e <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_+0x46>
            return EIDSP_NARROWING;
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_+0xcc>)
 800148c:	e03c      	b.n	8001508 <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_+0xc0>
        }

        const arm_matrix_instance_f32 m1 = { 1, static_cast<uint16_t>(matrix1_cols), row };
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	2301      	movs	r3, #1
 800149a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
        const arm_matrix_instance_f32 m2 = { static_cast<uint16_t>(matrix2->rows), static_cast<uint16_t>(matrix2->cols), matrix2->buffer };
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	83bb      	strh	r3, [r7, #28]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	83fb      	strh	r3, [r7, #30]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 mo = { 1, static_cast<uint16_t>(out_matrix->cols), out_matrix->buffer + (i * out_matrix->cols) };
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	2301      	movs	r3, #1
 80014c8:	82bb      	strh	r3, [r7, #20]
 80014ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	82fb      	strh	r3, [r7, #22]
 80014d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	68f9      	ldr	r1, [r7, #12]
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        int status = arm_mat_mult_f32(&m1, &m2, &mo);
 80014e6:	f107 0214 	add.w	r2, r7, #20
 80014ea:	f107 011c 	add.w	r1, r7, #28
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	4618      	mov	r0, r3
 80014f4:	f00e fcda 	bl	800feac <arm_mat_mult_f32>
 80014f8:	4603      	mov	r3, r0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (status != ARM_MATH_SUCCESS) {
 80014fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_+0xbe>
            EIDSP_ERR(status);
 8001502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001504:	e000      	b.n	8001508 <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_+0xc0>
            }
            out_matrix->buffer[i * matrix2->cols + j] += tmp;
        }
#endif

        return EIDSP_OK;
 8001506:	2300      	movs	r3, #0
    }
 8001508:	4618      	mov	r0, r3
 800150a:	3730      	adds	r7, #48	; 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	fffffc14 	.word	0xfffffc14
 8001514:	fffffc0c 	.word	0xfffffc0c

08001518 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE>:
     * Return the Discrete Cosine Transform of arbitrary type sequence 2.
     * @param input Input array (of size N)
     * @param N number of items in input and output array
     * @returns EIDSP_OK if OK
     */
    static int dct2(float *input, size_t N, DCT_NORMALIZATION_MODE normalization = DCT_NORMALIZATION_NONE) {
 8001518:	b580      	push	{r7, lr}
 800151a:	ed2d 8b02 	vpush	{d8}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	4613      	mov	r3, r2
 8001528:	71fb      	strb	r3, [r7, #7]
        if (N == 0) {
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x1c>
            return EIDSP_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	e065      	b.n	8001600 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xe8>
        }

        int ret = ei::dct::transform(input, N);
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f022 f936 	bl	80237a8 <_ZN2ei3dct9transformEPfj>
 800153c:	6178      	str	r0, [r7, #20]
        if (ret != EIDSP_OK) {
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x30>
            EIDSP_ERR(ret);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	e05b      	b.n	8001600 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xe8>
        }

        // for some reason the output is 2x too low...
        for (size_t ix = 0; ix < N; ix++) {
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	e010      	b.n	8001570 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x58>
            input[ix] *= 2;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4413      	add	r3, r2
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001566:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < N; ix++) {
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	429a      	cmp	r2, r3
 8001576:	d3ea      	bcc.n	800154e <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x36>
        }

        if (normalization == DCT_NORMALIZATION_ORTHO) {
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d13f      	bne.n	80015fe <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xe6>
            input[0] = input[0] * sqrt(1.0f / static_cast<float>(4 * N));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	ed93 8a00 	vldr	s16, [r3]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001598:	eeb0 0a47 	vmov.f32	s0, s14
 800159c:	f7ff feb9 	bl	8001312 <_ZN2ei5numpy4sqrtEf>
 80015a0:	eef0 7a40 	vmov.f32	s15, s0
 80015a4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	edc3 7a00 	vstr	s15, [r3]
            for (size_t ix = 1; ix < N; ix++) {
 80015ae:	2301      	movs	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	e020      	b.n	80015f6 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xde>
                input[ix] = input[ix] * sqrt(1.0f / static_cast<float>(2 * N));
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	ed93 8a00 	vldr	s16, [r3]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015d4:	eeb0 0a47 	vmov.f32	s0, s14
 80015d8:	f7ff fe9b 	bl	8001312 <_ZN2ei5numpy4sqrtEf>
 80015dc:	eef0 7a40 	vmov.f32	s15, s0
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80015ec:	edc3 7a00 	vstr	s15, [r3]
            for (size_t ix = 1; ix < N; ix++) {
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	3301      	adds	r3, #1
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d3da      	bcc.n	80015b4 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x9c>
            }
        }

        return EIDSP_OK;
 80015fe:	2300      	movs	r3, #0
    }
 8001600:	4618      	mov	r0, r3
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	ecbd 8b02 	vpop	{d8}
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE>:
    /**
     * Discrete Cosine Transform of arbitrary type sequence 2 on a matrix.
     * @param matrix
     * @returns EIDSP_OK if OK
     */
    static int dct2(matrix_t *matrix, DCT_NORMALIZATION_MODE normalization = DCT_NORMALIZATION_NONE) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	e017      	b.n	800164e <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x42>
            int r = dct2(matrix->buffer + (row * matrix->cols), matrix->cols, normalization);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	68f9      	ldr	r1, [r7, #12]
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	18d0      	adds	r0, r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff ff6e 	bl	8001518 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE>
 800163c:	60b8      	str	r0, [r7, #8]
            if (r != EIDSP_OK) {
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x3c>
                return r;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	e008      	b.n	800165a <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x4e>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3301      	adds	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d3e2      	bcc.n	800161e <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x12>
            }
        }

        return EIDSP_OK;
 8001658:	2300      	movs	r3, #0
    }
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
     * @param output Output matrix of size (M+pad_before+pad_after x N)
     * @param pad_before Number of items to pad before
     * @param pad_after Number of items to pad after
     * @returns 0 if OK
     */
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	460b      	mov	r3, r1
 8001674:	80fb      	strh	r3, [r7, #6]
 8001676:	4613      	mov	r3, r2
 8001678:	80bb      	strh	r3, [r7, #4]
        if (output->cols != input->cols) {
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	429a      	cmp	r2, r3
 8001684:	d001      	beq.n	800168a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001686:	4b66      	ldr	r3, [pc, #408]	; (8001820 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1bc>)
 8001688:	e0c5      	b.n	8001816 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        if (output->rows != input->rows + pad_before + pad_after) {
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6859      	ldr	r1, [r3, #4]
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	4419      	add	r1, r3
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	440b      	add	r3, r1
 800169a:	429a      	cmp	r2, r3
 800169c:	d001      	beq.n	80016a2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800169e:	4b60      	ldr	r3, [pc, #384]	; (8001820 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1bc>)
 80016a0:	e0b9      	b.n	8001816 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        if (input->rows == 0) {
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x4a>
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
 80016aa:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1c0>)
 80016ac:	e0b3      	b.n	8001816 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        uint32_t pad_before_index = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
        bool pad_before_direction_up = true;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	e041      	b.n	8001744 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe0>
            memcpy(output->buffer + (input->cols * ix),
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	69f9      	ldr	r1, [r7, #28]
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_before_index * input->cols),
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * ix),
 80016ea:	461a      	mov	r2, r3
 80016ec:	f02d f8fd 	bl	802e8ea <memcpy>

            if (pad_before_index == 0 && !pad_before_direction_up) {
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xa8>
 80016f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016fa:	f083 0301 	eor.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xa8>
                pad_before_direction_up = true;
 8001704:	2301      	movs	r3, #1
 8001706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800170a:	e018      	b.n	800173e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xda>
            }
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	3b01      	subs	r3, #1
 8001712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001714:	429a      	cmp	r2, r3
 8001716:	d107      	bne.n	8001728 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc4>
 8001718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc4>
                pad_before_direction_up = false;
 8001720:	2300      	movs	r3, #0
 8001722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001726:	e00a      	b.n	800173e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xda>
            }
            else if (pad_before_direction_up) {
 8001728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd4>
                pad_before_index++;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	3301      	adds	r3, #1
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
 8001736:	e002      	b.n	800173e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xda>
            }
            else {
                pad_before_index--;
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	3b01      	subs	r3, #1
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b01      	subs	r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	2b00      	cmp	r3, #0
 8001748:	daba      	bge.n	80016c0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x5c>
            }
        }

        memcpy(output->buffer + (input->cols * pad_before),
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	88f9      	ldrh	r1, [r7, #6]
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	18d0      	adds	r0, r2, r3
            input->buffer,
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6819      	ldr	r1, [r3, #0]
            input->rows * input->cols * sizeof(float));
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	6892      	ldr	r2, [r2, #8]
 8001768:	fb02 f303 	mul.w	r3, r2, r3
 800176c:	009b      	lsls	r3, r3, #2
        memcpy(output->buffer + (input->cols * pad_before),
 800176e:	461a      	mov	r2, r3
 8001770:	f02d f8bb 	bl	802e8ea <memcpy>

        int32_t pad_after_index = input->rows - 1;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	3b01      	subs	r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
        bool pad_after_direction_up = false;
 800177c:	2300      	movs	r3, #0
 800177e:	75fb      	strb	r3, [r7, #23]

        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	e042      	b.n	800180c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a8>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	88f8      	ldrh	r0, [r7, #6]
 8001790:	6939      	ldr	r1, [r7, #16]
 8001792:	4401      	add	r1, r0
 8001794:	4608      	mov	r0, r1
 8001796:	68f9      	ldr	r1, [r7, #12]
 8001798:	6849      	ldr	r1, [r1, #4]
 800179a:	4401      	add	r1, r0
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_after_index * input->cols),
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	69b9      	ldr	r1, [r7, #24]
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 80017bc:	461a      	mov	r2, r3
 80017be:	f02d f894 	bl	802e8ea <memcpy>

            if (pad_after_index == 0 && !pad_after_direction_up) {
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d108      	bne.n	80017da <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x176>
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	f083 0301 	eor.w	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x176>
                pad_after_direction_up = true;
 80017d4:	2301      	movs	r3, #1
 80017d6:	75fb      	strb	r3, [r7, #23]
 80017d8:	e015      	b.n	8001806 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a2>
            }
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d105      	bne.n	80017f2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x18e>
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x18e>
                pad_after_direction_up = false;
 80017ec:	2300      	movs	r3, #0
 80017ee:	75fb      	strb	r3, [r7, #23]
 80017f0:	e009      	b.n	8001806 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a2>
            }
            else if (pad_after_direction_up) {
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x19c>
                pad_after_index++;
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	3301      	adds	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	e002      	b.n	8001806 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a2>
            }
            else {
                pad_after_index--;
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	3b01      	subs	r3, #1
 8001804:	61bb      	str	r3, [r7, #24]
        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	3301      	adds	r3, #1
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	429a      	cmp	r2, r3
 8001812:	dbb8      	blt.n	8001786 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x122>
            }
        }

        return EIDSP_OK;
 8001814:	2300      	movs	r3, #0
    }
 8001816:	4618      	mov	r0, r3
 8001818:	3728      	adds	r7, #40	; 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	fffffc14 	.word	0xfffffc14
 8001824:	fffffc12 	.word	0xfffffc12

08001828 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001834:	edd7 7a00 	vldr	s15, [r7]
 8001838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800183c:	eef4 7a47 	vcmp.f32	s15, s14
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	d101      	bne.n	800184a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001846:	2300      	movs	r3, #0
 8001848:	e033      	b.n	80018b2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001852:	d204      	bcs.n	800185e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d301      	bcc.n	8001862 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001860:	e027      	b.n	80018b2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	b29b      	uxth	r3, r3
 8001868:	82bb      	strh	r3, [r7, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	b29b      	uxth	r3, r3
 8001870:	82fb      	strh	r3, [r7, #22]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	b29b      	uxth	r3, r3
 800187e:	81bb      	strh	r3, [r7, #12]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	b29b      	uxth	r3, r3
 8001886:	81fb      	strh	r3, [r7, #14]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 800188e:	f107 020c 	add.w	r2, r7, #12
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4611      	mov	r1, r2
 8001898:	ed97 0a00 	vldr	s0, [r7]
 800189c:	4618      	mov	r0, r3
 800189e:	f00e fb7f 	bl	800ffa0 <arm_mat_scale_f32>
 80018a2:	4603      	mov	r3, r0
 80018a4:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	e000      	b.n	80018b2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 80018b0:	2300      	movs	r3, #0
    }
 80018b2:	4618      	mov	r0, r3
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	fffffc0c 	.word	0xfffffc0c

080018c0 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e014      	b.n	80018fc <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x3c>
            matrix->buffer[ix] -= subtraction;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	ed93 7a00 	vldr	s14, [r3]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	edd7 7a00 	vldr	s15, [r7]
 80018ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f2:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3301      	adds	r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6892      	ldr	r2, [r2, #8]
 8001904:	fb02 f303 	mul.w	r3, r2, r3
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	429a      	cmp	r2, r3
 800190c:	d3e1      	bcc.n	80018d2 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x12>
        }
        return EIDSP_OK;
 800190e:	2300      	movs	r3, #0
    }
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>:
     * Calculate the mean over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int mean_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
        if (input_matrix->cols != output_matrix->rows) {
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	d001      	beq.n	8001936 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001932:	4b26      	ldr	r3, [pc, #152]	; (80019cc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xb0>)
 8001934:	e043      	b.n	80019be <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xa2>
        }

        if (output_matrix->cols != 1) {
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d001      	beq.n	8001942 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xb0>)
 8001940:	e03d      	b.n	80019be <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t col = 0; col < input_matrix->cols; col++) {
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e034      	b.n	80019b2 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x96>
            // gathering up the current columnand moving it into sequential memory to use
            // SIMD to calculate the mean would take more time than the simple loop
            // so disable this case. The alternative is to use 2 transposes and on a "big" ARM
            // platform that will take more time

            float sum = 0.0f;
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	613b      	str	r3, [r7, #16]

            for (size_t row = 0; row < input_matrix->rows; row++) {
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e015      	b.n	8001980 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x64>
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	fb03 f101 	mul.w	r1, r3, r1
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	440b      	add	r3, r1
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001976:	edc7 7a04 	vstr	s15, [r7, #16]
            for (size_t row = 0; row < input_matrix->rows; row++) {
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3301      	adds	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	429a      	cmp	r2, r3
 8001988:	d3e4      	bcc.n	8001954 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x38>
            }

            output_matrix->buffer[col] = sum / input_matrix->rows;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	edd7 6a04 	vldr	s13, [r7, #16]
 80019a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a8:	edc3 7a00 	vstr	s15, [r3]
        for (size_t col = 0; col < input_matrix->cols; col++) {
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	3301      	adds	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d3c5      	bcc.n	8001948 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x2c>
        }

        return EIDSP_OK;
 80019bc:	2300      	movs	r3, #0
    }
 80019be:	4618      	mov	r0, r3
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	fffffc14 	.word	0xfffffc14

080019d0 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>:
     * Calculate the standard deviation over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int std_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
#if EIDSP_USE_CMSIS_DSP
        return std_axis0_CMSIS(input_matrix, output_matrix);
 80019da:	6839      	ldr	r1, [r7, #0]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fdd9 	bl	8002594 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
 80019e2:	4603      	mov	r3, r0
            output_matrix->buffer[col] = sqrt(std / input_matrix->rows);
        }

        return EIDSP_OK;
#endif
    }
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>:
    /**
     * Get the minimum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int min(matrix_t *input_matrix, matrix_t *output_matrix) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d001      	beq.n	8001a06 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001a04:	e029      	b.n	8001a5a <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d001      	beq.n	8001a12 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001a10:	e023      	b.n	8001a5a <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e01a      	b.n	8001a4e <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x62>
#if EIDSP_USE_CMSIS_DSP
            float min;
            uint32_t ix;
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	6979      	ldr	r1, [r7, #20]
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	18d0      	adds	r0, r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6899      	ldr	r1, [r3, #8]
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	f107 0210 	add.w	r2, r7, #16
 8001a36:	f00e fb62 	bl	80100fe <arm_min_f32>
            output_matrix->buffer[row] = min;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d3df      	bcc.n	8001a18 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = min;
#endif
        }

        return EIDSP_OK;
 8001a58:	2300      	movs	r3, #0
    }
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	fffffc14 	.word	0xfffffc14

08001a68 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>:
    /**
     * Get the maximum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int max(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001a80:	e029      	b.n	8001ad6 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001a8c:	e023      	b.n	8001ad6 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e01a      	b.n	8001aca <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x62>
#if EIDSP_USE_CMSIS_DSP
            float max;
            uint32_t ix;
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	18d0      	adds	r0, r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6899      	ldr	r1, [r3, #8]
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	f107 0210 	add.w	r2, r7, #16
 8001ab2:	f00e faec 	bl	801008e <arm_max_f32>
            output_matrix->buffer[row] = max;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3df      	bcc.n	8001a94 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = max;
#endif
        }

        return EIDSP_OK;
 8001ad4:	2300      	movs	r3, #0
    }
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	fffffc14 	.word	0xfffffc14

08001ae4 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	b098      	sub	sp, #96	; 0x60
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	3301      	adds	r3, #1
 8001af8:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d001      	beq.n	8001b06 <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001b02:	4c65      	ldr	r4, [pc, #404]	; (8001c98 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8001b04:	e0c2      	b.n	8001c8c <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d901      	bls.n	8001b12 <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8001b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b10:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001b12:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001b16:	2300      	movs	r3, #0
 8001b18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	f7ff fb64 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8001b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001b26:	4c5d      	ldr	r4, [pc, #372]	; (8001c9c <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001b28:	e0ab      	b.n	8001c82 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 8001b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001b30:	4c5a      	ldr	r4, [pc, #360]	; (8001c9c <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001b32:	e0a6      	b.n	8001c82 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001b34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68f9      	ldr	r1, [r7, #12]
 8001b3e:	f02c fed4 	bl	802e8ea <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	18d0      	adds	r0, r2, r3
 8001b4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	461a      	mov	r2, r3
 8001b54:	2100      	movs	r1, #0
 8001b56:	f02c fdf5 	bl	802e744 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d025      	beq.n	8001bac <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b62:	2b40      	cmp	r3, #64	; 0x40
 8001b64:	d022      	beq.n	8001bac <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b68:	2b80      	cmp	r3, #128	; 0x80
 8001b6a:	d01f      	beq.n	8001bac <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b72:	d01b      	beq.n	8001bac <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001b74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b7a:	d017      	beq.n	8001bac <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b82:	d013      	beq.n	8001bac <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001b84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b8a:	d00f      	beq.n	8001bac <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b92:	d00b      	beq.n	8001bac <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001b94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f000 fb4e 	bl	800223c <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001ba0:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d068      	beq.n	8001c7a <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 8001ba8:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001baa:	e06a      	b.n	8001c82 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fd7e 	bl	80026b4 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001bb8:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8001bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8001bc0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001bc2:	e05d      	b.n	8001c80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001bc4:	f107 0014 	add.w	r0, r7, #20
 8001bc8:	2300      	movs	r3, #0
 8001bca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001bcc:	2101      	movs	r1, #1
 8001bce:	f7ff fb0b 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 8001bd8:	4c30      	ldr	r4, [pc, #192]	; (8001c9c <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001bda:	2500      	movs	r5, #0
 8001bdc:	e045      	b.n	8001c6a <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001be4:	4c2d      	ldr	r4, [pc, #180]	; (8001c9c <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001be6:	2500      	movs	r5, #0
 8001be8:	e03f      	b.n	8001c6a <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001bea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f010 fdee 	bl	80127d4 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	440b      	add	r3, r1
 8001c10:	6852      	ldr	r2, [r2, #4]
 8001c12:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001c14:	2302      	movs	r3, #2
 8001c16:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001c18:	2301      	movs	r3, #1
 8001c1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c1c:	e01f      	b.n	8001c5e <_ZN2ei5numpy4rfftEPKfjPfjj+0x17a>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	f107 0210 	add.w	r2, r7, #16
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f00e fa9e 	bl	801016e <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001c32:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001c36:	f7ff fb6c 	bl	8001312 <_ZN2ei5numpy4sqrtEf>
 8001c3a:	eeb0 7a40 	vmov.f32	s14, s0
 8001c3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4e:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 8001c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c54:	3302      	adds	r3, #2
 8001c56:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c60:	3b01      	subs	r3, #1
 8001c62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d3da      	bcc.n	8001c1e <_ZN2ei5numpy4rfftEPKfjPfjj+0x13a>
            }
        }
 8001c68:	2501      	movs	r5, #1
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fae5 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8001c74:	2d01      	cmp	r5, #1
 8001c76:	d103      	bne.n	8001c80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 8001c78:	e000      	b.n	8001c7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
        }
 8001c7a:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	e000      	b.n	8001c82 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 8001c80:	bf00      	nop
    }
 8001c82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fad9 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3760      	adds	r7, #96	; 0x60
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bdb0      	pop	{r4, r5, r7, pc}
 8001c96:	bf00      	nop
 8001c98:	fffffc11 	.word	0xfffffc11
 8001c9c:	fffffc16 	.word	0xfffffc16

08001ca0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	b098      	sub	sp, #96	; 0x60
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb0:	085b      	lsrs	r3, r3, #1
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d001      	beq.n	8001cc2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001cbe:	4c6f      	ldr	r4, [pc, #444]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8001cc0:	e0d6      	b.n	8001e70 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d901      	bls.n	8001cce <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8001cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ccc:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d101      	bne.n	8001cde <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001cde:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	f7ff fa7e 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8001cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 8001cf2:	4c63      	ldr	r4, [pc, #396]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001cf4:	e0b7      	b.n	8001e66 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001cfc:	4c60      	ldr	r4, [pc, #384]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001cfe:	e0b2      	b.n	8001e66 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 8001d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d112      	bne.n	8001d2c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001d06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68f9      	ldr	r1, [r7, #12]
 8001d10:	f02c fdeb 	bl	802e8ea <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8001d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	18d0      	adds	r0, r2, r3
 8001d1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	461a      	mov	r2, r3
 8001d26:	2100      	movs	r1, #0
 8001d28:	f02c fd0c 	bl	802e744 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	d025      	beq.n	8001d7e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d34:	2b40      	cmp	r3, #64	; 0x40
 8001d36:	d022      	beq.n	8001d7e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d3a:	2b80      	cmp	r3, #128	; 0x80
 8001d3c:	d01f      	beq.n	8001d7e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d44:	d01b      	beq.n	8001d7e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4c:	d017      	beq.n	8001d7e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d54:	d013      	beq.n	8001d7e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d5c:	d00f      	beq.n	8001d7e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d64:	d00b      	beq.n	8001d7e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001d66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	f000 fad7 	bl	8002320 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 8001d72:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 8001d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d071      	beq.n	8001e5e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 8001d7a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001d7c:	e073      	b.n	8001e66 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fc95 	bl	80026b4 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001d8a:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8001d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 8001d92:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001d94:	e066      	b.n	8001e64 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001d96:	f107 0010 	add.w	r0, r7, #16
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d9e:	2101      	movs	r1, #1
 8001da0:	f7ff fa22 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8001daa:	4c35      	ldr	r4, [pc, #212]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001dac:	2500      	movs	r5, #0
 8001dae:	e04e      	b.n	8001e4e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001db6:	4c32      	ldr	r4, [pc, #200]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001db8:	2500      	movs	r5, #0
 8001dba:	e048      	b.n	8001e4e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001dbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	f107 0020 	add.w	r0, r7, #32
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f010 fd05 	bl	80127d4 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dde:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001de2:	3b01      	subs	r3, #1
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	440b      	add	r3, r1
 8001dea:	6852      	ldr	r2, [r2, #4]
 8001dec:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8001dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001df4:	3b01      	subs	r3, #1
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 8001e02:	2302      	movs	r3, #2
 8001e04:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001e06:	2301      	movs	r3, #1
 8001e08:	657b      	str	r3, [r7, #84]	; 0x54
 8001e0a:	e01a      	b.n	8001e42 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1a2>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	441a      	add	r2, r3
 8001e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	440b      	add	r3, r1
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e24:	3301      	adds	r3, #1
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	441a      	add	r2, r3
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	440b      	add	r3, r1
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 8001e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e38:	3302      	adds	r3, #2
 8001e3a:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3e:	3301      	adds	r3, #1
 8001e40:	657b      	str	r3, [r7, #84]	; 0x54
 8001e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e44:	3b01      	subs	r3, #1
 8001e46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d3df      	bcc.n	8001e0c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16c>
            }
        }
 8001e4c:	2501      	movs	r5, #1
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f9f3 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8001e58:	2d01      	cmp	r5, #1
 8001e5a:	d103      	bne.n	8001e64 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 8001e5c:	e000      	b.n	8001e60 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
        }
 8001e5e:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001e60:	2400      	movs	r4, #0
 8001e62:	e000      	b.n	8001e66 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 8001e64:	bf00      	nop
    }
 8001e66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f9e7 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8001e70:	4623      	mov	r3, r4
 8001e72:	4618      	mov	r0, r3
 8001e74:	3760      	adds	r7, #96	; 0x60
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	fffffc11 	.word	0xfffffc11
 8001e80:	fffffc16 	.word	0xfffffc16

08001e84 <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 8001ea4:	e03f      	b.n	8001f26 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d104      	bne.n	8001eb6 <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e037      	b.n	8001f26 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 8001eb6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ebe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed2:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e015      	b.n	8001f08 <_ZN2ei5numpy8linspaceEffmPf+0x84>
            out[ix] = start + ix * step;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ee6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efe:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d3e4      	bcc.n	8001edc <_ZN2ei5numpy8linspaceEffmPf+0x58>
        }

        // last entry always stop
        out[number - 1] = stop;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 8001f24:	2300      	movs	r3, #0
    }
 8001f26:	4618      	mov	r0, r3
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	fffffc10 	.word	0xfffffc10

08001f38 <_ZN2ei5numpy14int16_to_floatEPKsPfj>:
     * @param input
     * @param output
     * @param length
     * @returns 0 if OK
     */
    static int int16_to_float(const EIDSP_i16 *input, float *output, size_t length) {
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
        for (size_t ix = 0; ix < length; ix++) {
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e012      	b.n	8001f70 <_ZN2ei5numpy14int16_to_floatEPKsPfj+0x38>
            output[ix] = static_cast<float>((input[ix]));
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4413      	add	r3, r2
 8001f52:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	ee07 1a90 	vmov	s15, r1
 8001f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f66:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < length; ix++) {
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3e8      	bcc.n	8001f4a <_ZN2ei5numpy14int16_to_floatEPKsPfj+0x12>
        }
        return EIDSP_OK;
 8001f78:	2300      	movs	r3, #0
    }
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_ZZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tEENKUljjPfE_clEjjS5_>:
    {
        signal->total_length = data_size;
#ifdef __MBED__
        signal->get_data = mbed::callback(&numpy::signal_get_data, data);
#else
        signal->get_data = [data](size_t offset, size_t length, float *out_ptr) {
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6818      	ldr	r0, [r3, #0]
            return numpy::signal_get_data(data, offset, length, out_ptr);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	f000 f9e5 	bl	800236c <_ZN2ei5numpy15signal_get_dataEPKfjjPf>
 8001fa2:	4603      	mov	r3, r0
        };
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_ZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tE>:
    static int signal_from_buffer(const float *data, size_t data_size, signal_t *signal)
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
        signal->total_length = data_size;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	611a      	str	r2, [r3, #16]
        };
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f006 fe2e 	bl	8008c2c <_ZNSt8functionIFijjPfEEaSIZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES2_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JjjS0_EEEE5valueERS2_E4typeEOSD_>
#endif
        return EIDSP_OK;
 8001fd0:	2300      	movs	r3, #0
    }
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <_ZN2ei5numpy3logEPNS_9ei_matrixE>:
    /**
     * Calculate the natural log value of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log(matrix_t *matrix)
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b08d      	sub	sp, #52	; 0x34
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe8:	e06d      	b.n	80020c6 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0xea>
            matrix->buffer[ix] = numpy::log(matrix->buffer[ix]);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6811      	ldr	r1, [r2, #0]
 8001ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffc:	0092      	lsls	r2, r2, #2
 8001ffe:	188c      	adds	r4, r1, r2
 8002000:	60fb      	str	r3, [r7, #12]
        int32_t g = (int32_t) * ((int32_t *)&a);
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60bb      	str	r3, [r7, #8]
        int32_t e = (g - 0x3f2aaaab) & 0xff800000;
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x108>)
 800200e:	4413      	add	r3, r2
 8002010:	0ddb      	lsrs	r3, r3, #23
 8002012:	05db      	lsls	r3, r3, #23
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
        g = g - e;
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	60bb      	str	r3, [r7, #8]
        float m = (float) * ((float *)&g);
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
        float i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002030:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80020e8 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x10c>
 8002034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002038:	edc7 7a08 	vstr	s15, [r7, #32]
        float f = m - 1.0f;
 800203c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002044:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002048:	edc7 7a07 	vstr	s15, [r7, #28]
        float s = f * f;
 800204c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002050:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002054:	edc7 7a06 	vstr	s15, [r7, #24]
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8002058:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80020ec <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x110>
 800205c:	edd7 0a07 	vldr	s1, [r7, #28]
 8002060:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80020f0 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x114>
 8002064:	f029 f8cc 	bl	802b200 <fmaf>
 8002068:	ed87 0a05 	vstr	s0, [r7, #20]
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 800206c:	ed9f 1a21 	vldr	s2, [pc, #132]	; 80020f4 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x118>
 8002070:	edd7 0a07 	vldr	s1, [r7, #28]
 8002074:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80020f8 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x11c>
 8002078:	f029 f8c2 	bl	802b200 <fmaf>
 800207c:	ed87 0a04 	vstr	s0, [r7, #16]
        r = fmaf(r, s, t);
 8002080:	ed97 1a04 	vldr	s2, [r7, #16]
 8002084:	edd7 0a06 	vldr	s1, [r7, #24]
 8002088:	ed97 0a05 	vldr	s0, [r7, #20]
 800208c:	f029 f8b8 	bl	802b200 <fmaf>
 8002090:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, f);
 8002094:	ed97 1a07 	vldr	s2, [r7, #28]
 8002098:	edd7 0a06 	vldr	s1, [r7, #24]
 800209c:	ed97 0a05 	vldr	s0, [r7, #20]
 80020a0:	f029 f8ae 	bl	802b200 <fmaf>
 80020a4:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 80020a8:	ed97 1a05 	vldr	s2, [r7, #20]
 80020ac:	eddf 0a13 	vldr	s1, [pc, #76]	; 80020fc <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x120>
 80020b0:	ed97 0a08 	vldr	s0, [r7, #32]
 80020b4:	f029 f8a4 	bl	802b200 <fmaf>
 80020b8:	ed87 0a05 	vstr	s0, [r7, #20]
        return r;
 80020bc:	697b      	ldr	r3, [r7, #20]
            matrix->buffer[ix] = numpy::log(matrix->buffer[ix]);
 80020be:	6023      	str	r3, [r4, #0]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c2:	3301      	adds	r3, #1
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6892      	ldr	r2, [r2, #8]
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d388      	bcc.n	8001fea <_ZN2ei5numpy3logEPNS_9ei_matrixE+0xe>
        }

        return EIDSP_OK;
 80020d8:	2300      	movs	r3, #0
    }
 80020da:	4618      	mov	r0, r3
 80020dc:	3734      	adds	r7, #52	; 0x34
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	c0d55555 	.word	0xc0d55555
 80020e8:	34000000 	.word	0x34000000
 80020ec:	be8ef46d 	.word	0xbe8ef46d
 80020f0:	3e6c6078 	.word	0x3e6c6078
 80020f4:	beff712d 	.word	0xbeff712d
 80020f8:	3ea9e51a 	.word	0x3ea9e51a
 80020fc:	3f317218 	.word	0x3f317218

08002100 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>:
    /**
     * Normalize a matrix to 0..1. Does an in-place replacement.
     * Normalization done per row.
     * @param matrix
     */
    static int normalize(matrix_t *matrix) {
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b093      	sub	sp, #76	; 0x4c
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
        // Python implementation:
        //  matrix = (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))
        int r;

        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6892      	ldr	r2, [r2, #8]
 8002110:	fb03 f202 	mul.w	r2, r3, r2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800211c:	2101      	movs	r1, #1
 800211e:	f7ff f863 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>

        matrix_t min_matrix(1, 1);
 8002122:	f107 001c 	add.w	r0, r7, #28
 8002126:	2300      	movs	r3, #0
 8002128:	2201      	movs	r2, #1
 800212a:	2101      	movs	r1, #1
 800212c:	f7ff f85c 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
        if (!min_matrix.buffer) {
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002136:	4c40      	ldr	r4, [pc, #256]	; (8002238 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
 8002138:	e06a      	b.n	8002210 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x110>
        }
        r = min(&temp_matrix, &min_matrix);
 800213a:	f107 021c 	add.w	r2, r7, #28
 800213e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fc51 	bl	80019ec <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>
 800214a:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 800214c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x56>
            EIDSP_ERR(r);
 8002152:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002154:	e05c      	b.n	8002210 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x110>
        }

        matrix_t max_matrix(1, 1);
 8002156:	f107 000c 	add.w	r0, r7, #12
 800215a:	2300      	movs	r3, #0
 800215c:	2201      	movs	r2, #1
 800215e:	2101      	movs	r1, #1
 8002160:	f7ff f842 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
        if (!max_matrix.buffer) {
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x6e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800216a:	4c33      	ldr	r4, [pc, #204]	; (8002238 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
 800216c:	e04b      	b.n	8002206 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }
        r = max(&temp_matrix, &max_matrix);
 800216e:	f107 020c 	add.w	r2, r7, #12
 8002172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fc75 	bl	8001a68 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>
 800217e:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 8002180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x8a>
            EIDSP_ERR(r);
 8002186:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002188:	e03d      	b.n	8002206 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        /* Prevent divide by 0 by setting minimum value for divider */
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
 800219e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80021a0:	f7fe f9d2 	bl	8000548 <__aeabi_f2d>
 80021a4:	a322      	add	r3, pc, #136	; (adr r3, 8002230 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fc97 	bl	8000adc <__aeabi_dcmplt>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xba>
 80021b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80021b8:	e005      	b.n	80021c6 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xc6>
 80021ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021be:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80021c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        r = subtract(&temp_matrix, min_matrix.buffer[0]);
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d4:	eeb0 0a67 	vmov.f32	s0, s15
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fb71 	bl	80018c0 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 80021de:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 80021e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xea>
            EIDSP_ERR(r);
 80021e6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80021e8:	e00d      	b.n	8002206 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        r = scale(&temp_matrix, row_scale);
 80021ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ee:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fb18 	bl	8001828 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80021f8:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 80021fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x104>
            EIDSP_ERR(r);
 8002200:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002202:	e000      	b.n	8002206 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        return EIDSP_OK;
 8002204:	2400      	movs	r4, #0
    }
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f817 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff f812 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 800221a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f80d 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8002224:	4623      	mov	r3, r4
 8002226:	4618      	mov	r0, r3
 8002228:	374c      	adds	r7, #76	; 0x4c
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}
 800222e:	bf00      	nop
 8002230:	d2f1a9fc 	.word	0xd2f1a9fc
 8002234:	3f50624d 	.word	0x3f50624d
 8002238:	fffffc16 	.word	0xfffffc16

0800223c <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 800223c:	b5b0      	push	{r4, r5, r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4618      	mov	r0, r3
 8002250:	f023 f912 	bl	8025478 <_Z9ei_mallocj>
 8002254:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800225c:	4b2f      	ldr	r3, [pc, #188]	; (800231c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800225e:	e058      	b.n	8002312 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2300      	movs	r3, #0
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	f022 fd67 	bl	8024d40 <kiss_fftr_alloc>
 8002272:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 800227a:	69b8      	ldr	r0, [r7, #24]
 800227c:	f023 f916 	bl	80254ac <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002280:	4b26      	ldr	r3, [pc, #152]	; (800231c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002282:	e046      	b.n	8002312 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	68f9      	ldr	r1, [r7, #12]
 8002288:	6978      	ldr	r0, [r7, #20]
 800228a:	f022 fe79 	bl	8024f80 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	e033      	b.n	80022fc <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc0>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4413      	add	r3, r2
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	2002      	movs	r0, #2
 80022a2:	eeb0 0a67 	vmov.f32	s0, s15
 80022a6:	f006 fce0 	bl	8008c6a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80022aa:	ec55 4b10 	vmov	r4, r5, d0
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4413      	add	r3, r2
 80022b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80022ba:	2002      	movs	r0, #2
 80022bc:	eeb0 0a67 	vmov.f32	s0, s15
 80022c0:	f006 fcd3 	bl	8008c6a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80022c4:	ec53 2b10 	vmov	r2, r3, d0
 80022c8:	4620      	mov	r0, r4
 80022ca:	4629      	mov	r1, r5
 80022cc:	f7fd ffde 	bl	800028c <__adddf3>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7fe fc86 	bl	8000be8 <__aeabi_d2f>
 80022dc:	4601      	mov	r1, r0
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	18d4      	adds	r4, r2, r3
 80022e6:	ee00 1a10 	vmov	s0, r1
 80022ea:	f7ff f812 	bl	8001312 <_ZN2ei5numpy4sqrtEf>
 80022ee:	eef0 7a40 	vmov.f32	s15, s0
 80022f2:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d3c7      	bcc.n	8002294 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x58>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8002304:	6978      	ldr	r0, [r7, #20]
 8002306:	f023 f8d1 	bl	80254ac <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 800230a:	69b8      	ldr	r0, [r7, #24]
 800230c:	f023 f8ce 	bl	80254ac <_Z7ei_freePv>

        return EIDSP_OK;
 8002310:	2300      	movs	r3, #0
    }
 8002312:	4618      	mov	r0, r3
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bdb0      	pop	{r4, r5, r7, pc}
 800231a:	bf00      	nop
 800231c:	fffffc16 	.word	0xfffffc16

08002320 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2300      	movs	r3, #0
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	f022 fd00 	bl	8024d40 <kiss_fftr_alloc>
 8002340:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 800234a:	e008      	b.n	800235e <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	68f9      	ldr	r1, [r7, #12]
 8002350:	6978      	ldr	r0, [r7, #20]
 8002352:	f022 fe15 	bl	8024f80 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f023 f8a8 	bl	80254ac <_Z7ei_freePv>

        return EIDSP_OK;
 800235c:	2300      	movs	r3, #0
    }
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	fffffc16 	.word	0xfffffc16

0800236c <_ZN2ei5numpy15signal_get_dataEPKfjjPf>:

    static int signal_get_data(const float *in_buffer, size_t offset, size_t length, float *out_ptr)
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
    {
        memcpy(out_ptr, in_buffer + offset, length * sizeof(float));
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	18d1      	adds	r1, r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	461a      	mov	r2, r3
 8002388:	6838      	ldr	r0, [r7, #0]
 800238a:	f02c faae 	bl	802e8ea <memcpy>
        return 0;
 800238e:	2300      	movs	r3, #0
    }
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 8002398:	b480      	push	{r7}
 800239a:	b08b      	sub	sp, #44	; 0x2c
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d804      	bhi.n	80023c4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
            return;
 80023c2:	e0e2      	b.n	800258a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80023ca:	e02e      	b.n	800242a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x92>
            sum += *pInput++;
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	1d1a      	adds	r2, r3, #4
 80023d0:	61ba      	str	r2, [r7, #24]
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80023da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023de:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	1d1a      	adds	r2, r3, #4
 80023e6:	61ba      	str	r2, [r7, #24]
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	1d1a      	adds	r2, r3, #4
 80023fc:	61ba      	str	r2, [r7, #24]
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	ed97 7a08 	vldr	s14, [r7, #32]
 8002406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240a:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1d1a      	adds	r2, r3, #4
 8002412:	61ba      	str	r2, [r7, #24]
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	ed97 7a08 	vldr	s14, [r7, #32]
 800241c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002420:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	3b01      	subs	r3, #1
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1cd      	bne.n	80023cc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x34>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002438:	e00d      	b.n	8002456 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xbe>
            sum += *pInput++;
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1d1a      	adds	r2, r3, #4
 800243e:	61ba      	str	r2, [r7, #24]
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	ed97 7a08 	vldr	s14, [r7, #32]
 8002448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244c:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	3b01      	subs	r3, #1
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1ee      	bne.n	800243a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa2>
        }

        fMean = sum / (float32_t)blockSize;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002466:	edd7 6a08 	vldr	s13, [r7, #32]
 800246a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800246e:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 800247c:	e056      	b.n	800252c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x194>
            fValue = *pInput++ - fMean;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1d1a      	adds	r2, r3, #4
 8002482:	61ba      	str	r2, [r7, #24]
 8002484:	ed93 7a00 	vldr	s14, [r3]
 8002488:	edd7 7a05 	vldr	s15, [r7, #20]
 800248c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002490:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002494:	edd7 7a04 	vldr	s15, [r7, #16]
 8002498:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800249c:	ed97 7a07 	vldr	s14, [r7, #28]
 80024a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a4:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1d1a      	adds	r2, r3, #4
 80024ac:	61ba      	str	r2, [r7, #24]
 80024ae:	ed93 7a00 	vldr	s14, [r3]
 80024b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ba:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80024be:	edd7 7a04 	vldr	s15, [r7, #16]
 80024c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	1d1a      	adds	r2, r3, #4
 80024d6:	61ba      	str	r2, [r7, #24]
 80024d8:	ed93 7a00 	vldr	s14, [r3]
 80024dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80024e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e4:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80024e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80024f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f8:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1d1a      	adds	r2, r3, #4
 8002500:	61ba      	str	r2, [r7, #24]
 8002502:	ed93 7a00 	vldr	s14, [r3]
 8002506:	edd7 7a05 	vldr	s15, [r7, #20]
 800250a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250e:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002512:	edd7 7a04 	vldr	s15, [r7, #16]
 8002516:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800251a:	ed97 7a07 	vldr	s14, [r7, #28]
 800251e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002522:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	3b01      	subs	r3, #1
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1a5      	bne.n	800247e <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe6>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 800253a:	e017      	b.n	800256c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1d4>
            fValue = *pInput++ - fMean;
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	1d1a      	adds	r2, r3, #4
 8002540:	61ba      	str	r2, [r7, #24]
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	edd7 7a05 	vldr	s15, [r7, #20]
 800254a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254e:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002552:	edd7 7a04 	vldr	s15, [r7, #16]
 8002556:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800255a:	ed97 7a07 	vldr	s14, [r7, #28]
 800255e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002562:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	3b01      	subs	r3, #1
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e4      	bne.n	800253c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a4>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800257c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	edc3 7a00 	vstr	s15, [r3]
    }
 800258a:	372c      	adds	r7, #44	; 0x2c
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
     * @param      input_matrix   The input matrix
     * @param      output_matrix  The output matrix
     *
     * @return     EIDSP error
     */
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 8002594:	b580      	push	{r7, lr}
 8002596:	b08c      	sub	sp, #48	; 0x30
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
    {
        arm_matrix_instance_f32 arm_in_matrix, arm_transposed_matrix;

        if (input_matrix->cols != output_matrix->rows) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80025aa:	4b40      	ldr	r3, [pc, #256]	; (80026ac <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x118>)
 80025ac:	e07a      	b.n	80026a4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        if (output_matrix->cols != 1) {
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d001      	beq.n	80025ba <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x118>)
 80025b8:	e074      	b.n	80026a4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        /* Copy input matrix to arm matrix */
        arm_in_matrix.numRows = input_matrix->rows;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	833b      	strh	r3, [r7, #24]
        arm_in_matrix.numCols = input_matrix->cols;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	837b      	strh	r3, [r7, #26]
        arm_in_matrix.pData = &input_matrix->buffer[0];
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61fb      	str	r3, [r7, #28]
        /* Create transposed matrix */
        arm_transposed_matrix.numRows = input_matrix->cols;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	823b      	strh	r3, [r7, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	827b      	strh	r3, [r7, #18]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6852      	ldr	r2, [r2, #4]
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f022 ff4d 	bl	8025490 <_Z9ei_callocjj>
 80025f6:	4603      	mov	r3, r0
 80025f8:	617b      	str	r3, [r7, #20]

        if (arm_transposed_matrix.pData == NULL) {
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x70>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x11c>)
 8002602:	e04f      	b.n	80026a4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
 8002604:	f107 0210 	add.w	r2, r7, #16
 8002608:	f107 0318 	add.w	r3, r7, #24
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f00d fcfc 	bl	801000c <arm_mat_trans_f32>
 8002614:	4603      	mov	r3, r0
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
        if (ret != EIDSP_OK) {
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x8e>
            EIDSP_ERR(ret);
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	e040      	b.n	80026a4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002626:	e033      	b.n	8002690 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xfc>
            float std;
            float var;

            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	8a7b      	ldrh	r3, [r7, #18]
 800262c:	4619      	mov	r1, r3
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
                               arm_transposed_matrix.numCols, &var);
 8002638:	8a7a      	ldrh	r2, [r7, #18]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 800263a:	4611      	mov	r1, r2
 800263c:	f107 0208 	add.w	r2, r7, #8
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fea9 	bl	8002398 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	623b      	str	r3, [r7, #32]
    if (in >= 0.0f)
 8002650:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002654:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265c:	db09      	blt.n	8002672 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xde>
      *pOut = sqrtf(in);
 800265e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002662:	f028 fa95 	bl	802ab90 <sqrtf>
 8002666:	eef0 7a40 	vmov.f32	s15, s0
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8002670:	e004      	b.n	800267c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xe8>
      *pOut = 0.0f;
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800267a:	bf00      	nop

            output_matrix->buffer[row] = std;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	3301      	adds	r3, #1
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002690:	8a3b      	ldrh	r3, [r7, #16]
 8002692:	461a      	mov	r2, r3
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	4293      	cmp	r3, r2
 8002698:	d3c6      	bcc.n	8002628 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x94>
        }

        ei_free(arm_transposed_matrix.pData);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	4618      	mov	r0, r3
 800269e:	f022 ff05 	bl	80254ac <_Z7ei_freePv>

        return EIDSP_OK;
 80026a2:	2300      	movs	r3, #0
    }
 80026a4:	4618      	mov	r0, r3
 80026a6:	3730      	adds	r7, #48	; 0x30
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	fffffc14 	.word	0xfffffc14
 80026b0:	fffffc16 	.word	0xfffffc16

080026b4 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
    {
// ARM cores (ex M55) with Helium extensions (MVEF) need special treatment (Issue 2843)
#if EI_CLASSIFIER_HAS_FFT_INFO == 1 && !defined(ARM_MATH_MVEF) && !defined(EI_CLASSIFIER_LOAD_ALL_FFTS)
        arm_status status;
        switch (n_fft) {
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d004      	beq.n	80026ce <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x1a>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ca:	d01d      	beq.n	8002708 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x54>
 80026cc:	e03a      	b.n	8002744 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x90>
#if EI_CLASSIFIER_LOAD_FFT_32 == 1
            case 32: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]
                S->fftLen = 16U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2210      	movs	r2, #16
 80026d6:	801a      	strh	r2, [r3, #0]
                S->pTwiddle = NULL;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	605a      	str	r2, [r3, #4]
                S->bitRevLength = arm_cfft_sR_f32_len16.bitRevLength;
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xa4>)
 80026e0:	899a      	ldrh	r2, [r3, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	819a      	strh	r2, [r3, #12]
                S->pBitRevTable = arm_cfft_sR_f32_len16.pBitRevTable;
 80026e6:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xa4>)
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	609a      	str	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len16.pTwiddle;
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xa4>)
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]
                rfft_instance->fftLenRFFT = 32U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	821a      	strh	r2, [r3, #16]
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_32;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a17      	ldr	r2, [pc, #92]	; (800275c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xa8>)
 8002700:	615a      	str	r2, [r3, #20]
                status = ARM_MATH_SUCCESS;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
                break;
 8002706:	e01f      	b.n	8002748 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x94>
                break;
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_256 == 1
            case 256: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	613b      	str	r3, [r7, #16]
                S->fftLen = 128U;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	801a      	strh	r2, [r3, #0]
                S->pTwiddle = NULL;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2200      	movs	r2, #0
 8002716:	605a      	str	r2, [r3, #4]
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xac>)
 800271a:	899a      	ldrh	r2, [r3, #12]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	819a      	strh	r2, [r3, #12]
                S->pBitRevTable = arm_cfft_sR_f32_len128.pBitRevTable;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xac>)
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
 8002728:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xac>)
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	605a      	str	r2, [r3, #4]
                rfft_instance->fftLenRFFT = 256U;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002736:	821a      	strh	r2, [r3, #16]
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xb0>)
 800273c:	615a      	str	r2, [r3, #20]
                status = ARM_MATH_SUCCESS;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]
                break;
 8002742:	e001      	b.n	8002748 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x94>
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0xb4>)
 8002746:	e001      	b.n	800274c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x98>
        }

        return status;
 8002748:	f997 3017 	ldrsb.w	r3, [r7, #23]
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 800274c:	4618      	mov	r0, r3
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	08033fc4 	.word	0x08033fc4
 800275c:	08033b44 	.word	0x08033b44
 8002760:	08033fd4 	.word	0x08033fd4
 8002764:	08033bc4 	.word	0x08033bc4
 8002768:	fffffc08 	.word	0xfffffc08

0800276c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 800276c:	b5b0      	push	{r4, r5, r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 800277a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	b29b      	uxth	r3, r3
 8002780:	3301      	adds	r3, #1
 8002782:	461a      	mov	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4293      	cmp	r3, r2
 8002788:	d001      	beq.n	800278e <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800278a:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 800278c:	e050      	b.n	8002830 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 800278e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff f9a3 	bl	8001ae4 <_ZN2ei5numpy4rfftEPKfjPfjj>
 800279e:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	e042      	b.n	8002830 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e03a      	b.n	8002826 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xba>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80027b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ba:	ee17 0a90 	vmov	r0, s15
 80027be:	f7fd fec3 	bl	8000548 <__aeabi_f2d>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	f04f 0000 	mov.w	r0, #0
 80027ca:	491c      	ldr	r1, [pc, #112]	; (800283c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 80027cc:	f7fe f83e 	bl	800084c <__aeabi_ddiv>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4614      	mov	r4, r2
 80027d6:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	ed93 7a00 	vldr	s14, [r3]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f4:	ee17 0a90 	vmov	r0, s15
 80027f8:	f7fd fea6 	bl	8000548 <__aeabi_f2d>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 8002800:	4620      	mov	r0, r4
 8002802:	4629      	mov	r1, r5
 8002804:	f7fd fef8 	bl	80005f8 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	18d4      	adds	r4, r2, r3
 8002818:	f7fe f9e6 	bl	8000be8 <__aeabi_d2f>
 800281c:	4603      	mov	r3, r0
 800281e:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3301      	adds	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d3c0      	bcc.n	80027b0 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x44>
        }

        return EIDSP_OK;
 800282e:	2300      	movs	r3, #0
    }
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bdb0      	pop	{r4, r5, r7, pc}
 8002838:	fffffc14 	.word	0xfffffc14
 800283c:	3ff00000 	.word	0x3ff00000

08002840 <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	e013      	b.n	8002878 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
            if (input[ix] == 0) {
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	4413      	add	r3, r2
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002864:	d105      	bne.n	8002872 <_ZN2ei5numpy13zero_handlingEPfj+0x32>
                input[ix] = 1e-10;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	4a08      	ldr	r2, [pc, #32]	; (8002890 <_ZN2ei5numpy13zero_handlingEPfj+0x50>)
 8002870:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3301      	adds	r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d3e7      	bcc.n	8002850 <_ZN2ei5numpy13zero_handlingEPfj+0x10>
            }
        }
    }
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2edbe6ff 	.word	0x2edbe6ff

08002894 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>:
     * This function handle the issue with zero values if the are exposed
     * to become an argument for any log function.
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input)
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
    {
        zero_handling(input->buffer, input->rows * input->cols);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6892      	ldr	r2, [r2, #8]
 80028a8:	fb02 f303 	mul.w	r3, r2, r3
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7ff ffc7 	bl	8002840 <_ZN2ei5numpy13zero_handlingEPfj>
    }
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZN18ei_impulse_state_tC1EPK10ei_impulse>:
typedef DspHandle* _dsp_handle_ptr_t;
public:
    const ei_impulse_t *impulse; // keep a pointer to the impulse
    _dsp_handle_ptr_t *dsp_handles;
    bool is_temp_handle = false; // to know if we're using the old (stateless) API
    ei_impulse_state_t(const ei_impulse_t *impulse)
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
        : impulse(impulse)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	721a      	strb	r2, [r3, #8]
    {
        const auto num_dsp_blocks = impulse->dsp_blocks_size;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	60bb      	str	r3, [r7, #8]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4618      	mov	r0, r3
 80028dc:	f022 fdcc 	bl	8025478 <_Z9ei_mallocj>
 80028e0:	4602      	mov	r2, r0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	605a      	str	r2, [r3, #4]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	e009      	b.n	8002900 <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x46>
            dsp_handles[ix] = nullptr;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3301      	adds	r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	429a      	cmp	r2, r3
 8002906:	d3f1      	bcc.n	80028ec <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x32>
        }
    }
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_ZN18ei_impulse_state_t5resetEv>:
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config);
        }
        return dsp_handles[ix];
    }

    void reset()
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
    {
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e01e      	b.n	800295e <_ZN18ei_impulse_state_t5resetEv+0x4c>
            if (dsp_handles[ix] != nullptr) {
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <_ZN18ei_impulse_state_t5resetEv+0x46>
                delete dsp_handles[ix];
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <_ZN18ei_impulse_state_t5resetEv+0x38>
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	320c      	adds	r2, #12
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	4790      	blx	r2
                dsp_handles[ix] = nullptr;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3301      	adds	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	429a      	cmp	r2, r3
 8002968:	d3da      	bcc.n	8002920 <_ZN18ei_impulse_state_t5resetEv+0xe>
            }
        }
    }
 800296a:	bf00      	nop
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_ZN18ei_impulse_state_tD1Ev>:

    void operator delete[](void* ptr) {
        ei_free(ptr);
    }

    ~ei_impulse_state_t()
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    {
        reset();
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ffc8 	bl	8002912 <_ZN18ei_impulse_state_t5resetEv>
        ei_free(dsp_handles);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	f022 fd90 	bl	80254ac <_Z7ei_freePv>
    }
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>:
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
        : state(impulse), impulse(impulse) {};
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6839      	ldr	r1, [r7, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff88 	bl	80028ba <_ZN18ei_impulse_state_tC1EPK10ei_impulse>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	60da      	str	r2, [r3, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	0000      	movs	r0, r0
 80029bc:	0000      	movs	r0, r0
	...

080029c0 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
     * Converting from frequency to Mel scale
     *
     * @param f The frequency values(or a single frequency) in Hz.
     * @returns The mel scale values(or a single mel).
     */
    static float frequency_to_mel(float f) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	ed87 0a01 	vstr	s0, [r7, #4]
#if EI_PORTING_RENESASRA65 == 1
        return 1127.0 * log(1.0 + f / 700.0f);
#else
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
 80029ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80029ce:	eddf 6a42 	vldr	s13, [pc, #264]	; 8002ad8 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x118>
 80029d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029de:	edc7 7a04 	vstr	s15, [r7, #16]
        int32_t g = (int32_t) * ((int32_t *)&a);
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
        int32_t e = (g - 0x3f2aaaab) & 0xff800000;
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <_ZN2ei8speechpy9functions16frequency_to_melEf+0x11c>)
 80029ee:	4413      	add	r3, r2
 80029f0:	0ddb      	lsrs	r3, r3, #23
 80029f2:	05db      	lsls	r3, r3, #23
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        g = g - e;
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	60fb      	str	r3, [r7, #12]
        float m = (float) * ((float *)&g);
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
        float i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a10:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002ae0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x120>
 8002a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        float f = m - 1.0f;
 8002a1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a28:	edc7 7a08 	vstr	s15, [r7, #32]
        float s = f * f;
 8002a2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a34:	edc7 7a07 	vstr	s15, [r7, #28]
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8002a38:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8002ae4 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x124>
 8002a3c:	edd7 0a08 	vldr	s1, [r7, #32]
 8002a40:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8002ae8 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x128>
 8002a44:	f028 fbdc 	bl	802b200 <fmaf>
 8002a48:	ed87 0a06 	vstr	s0, [r7, #24]
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8002a4c:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8002aec <_ZN2ei8speechpy9functions16frequency_to_melEf+0x12c>
 8002a50:	edd7 0a08 	vldr	s1, [r7, #32]
 8002a54:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002af0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x130>
 8002a58:	f028 fbd2 	bl	802b200 <fmaf>
 8002a5c:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, t);
 8002a60:	ed97 1a05 	vldr	s2, [r7, #20]
 8002a64:	edd7 0a07 	vldr	s1, [r7, #28]
 8002a68:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a6c:	f028 fbc8 	bl	802b200 <fmaf>
 8002a70:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(r, s, f);
 8002a74:	ed97 1a08 	vldr	s2, [r7, #32]
 8002a78:	edd7 0a07 	vldr	s1, [r7, #28]
 8002a7c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a80:	f028 fbbe 	bl	802b200 <fmaf>
 8002a84:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8002a88:	ed97 1a06 	vldr	s2, [r7, #24]
 8002a8c:	eddf 0a19 	vldr	s1, [pc, #100]	; 8002af4 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x134>
 8002a90:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002a94:	f028 fbb4 	bl	802b200 <fmaf>
 8002a98:	ed87 0a06 	vstr	s0, [r7, #24]
        return r;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fd52 	bl	8000548 <__aeabi_f2d>
 8002aa4:	a30a      	add	r3, pc, #40	; (adr r3, 8002ad0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x110>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd fda5 	bl	80005f8 <__aeabi_dmul>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f7fe f897 	bl	8000be8 <__aeabi_d2f>
 8002aba:	4603      	mov	r3, r0
 8002abc:	ee07 3a90 	vmov	s15, r3
#endif
    }
 8002ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac4:	3730      	adds	r7, #48	; 0x30
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	f3af 8000 	nop.w
 8002ad0:	00000000 	.word	0x00000000
 8002ad4:	40919c00 	.word	0x40919c00
 8002ad8:	442f0000 	.word	0x442f0000
 8002adc:	c0d55555 	.word	0xc0d55555
 8002ae0:	34000000 	.word	0x34000000
 8002ae4:	be8ef46d 	.word	0xbe8ef46d
 8002ae8:	3e6c6078 	.word	0x3e6c6078
 8002aec:	beff712d 	.word	0xbeff712d
 8002af0:	3ea9e51a 	.word	0x3ea9e51a
 8002af4:	3f317218 	.word	0x3f317218

08002af8 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>:
     * Converting from Mel scale to frequency.
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	ed87 0a01 	vstr	s0, [r7, #4]
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
 8002b02:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b06:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002b34 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x3c>
 8002b0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b12:	f7fe fbce 	bl	80012b2 <_ZSt3expf>
 8002b16:	eef0 7a40 	vmov.f32	s15, s0
 8002b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b22:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b38 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x40>
 8002b26:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8002b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	448ce000 	.word	0x448ce000
 8002b38:	442f0000 	.word	0x442f0000

08002b3c <_ZN2ei8speechpy9functions8triangleEPfjiii>:
     * @param x_size Size of the linspace output
     * @param left Starting index (assigned 0)
     * @param middle Index where 1.0 will be placed
     * @param right Ending index (assigned 0)
     */
    static int triangle(float *x, size_t x_size, int left, int middle, int right) {
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b08b      	sub	sp, #44	; 0x2c
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
        EI_DSP_MATRIX(out, 1, x_size);
 8002b4a:	f107 0014 	add.w	r0, r7, #20
 8002b4e:	2300      	movs	r3, #0
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	2101      	movs	r1, #1
 8002b54:	f7fe fb48 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x26>
 8002b5e:	4c4b      	ldr	r4, [pc, #300]	; (8002c8c <_ZN2ei8speechpy9functions8triangleEPfjiii+0x150>)
 8002b60:	e089      	b.n	8002c76 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x13a>

        for (size_t ix = 0; ix < x_size; ix++) {
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	e07a      	b.n	8002c5e <_ZN2ei8speechpy9functions8triangleEPfjiii+0x122>
            if (x[ix] > left && x[ix] <= middle) {
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	ed93 7a00 	vldr	s14, [r3]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b86:	dd2b      	ble.n	8002be0 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xa4>
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	ed93 7a00 	vldr	s14, [r3]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba6:	d81b      	bhi.n	8002be0 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xa4>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	ed93 7a00 	vldr	s14, [r3]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bbe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bdc:	edc3 7a00 	vstr	s15, [r3]
            }

            if (x[ix] < right && middle <= x[ix]) {
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	ed93 7a00 	vldr	s14, [r3]
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	ee07 3a90 	vmov	s15, r3
 8002bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfe:	d52b      	bpl.n	8002c58 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x11c>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4413      	add	r3, r2
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1e:	d81b      	bhi.n	8002c58 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x11c>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 8002c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4413      	add	r3, r2
 8002c32:	edd3 7a00 	vldr	s15, [r3]
 8002c36:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c54:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < x_size; ix++) {
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d380      	bcc.n	8002b68 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x2c>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
 8002c66:	6979      	ldr	r1, [r7, #20]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f02b fe3b 	bl	802e8ea <memcpy>

        return EIDSP_OK;
 8002c74:	2400      	movs	r4, #0
    }
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fadf 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8002c80:	4623      	mov	r3, r4
 8002c82:	4618      	mov	r0, r3
 8002c84:	372c      	adds	r7, #44	; 0x2c
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd90      	pop	{r4, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	fffffc16 	.word	0xfffffc16

08002c90 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>:
     * @param shift (int): The shift step.
     * @param cof (float): The preemphasising coefficient. 0 equals to no filtering.
     */
    class preemphasis {
public:
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6178      	str	r0, [r7, #20]
 8002c98:	6139      	str	r1, [r7, #16]
 8002c9a:	60fa      	str	r2, [r7, #12]
 8002c9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ca0:	71fb      	strb	r3, [r7, #7]
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	79fa      	ldrb	r2, [r7, #7]
 8002cb8:	761a      	strb	r2, [r3, #24]
        {
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f022 fbe5 	bl	8025490 <_Z9ei_callocjj>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	60da      	str	r2, [r3, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f022 fbdc 	bl	8025490 <_Z9ei_callocjj>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	611a      	str	r2, [r3, #16]
            _next_offset_should_be = 0;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	615a      	str	r2, [r3, #20]

            if (shift < 0) {
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	da06      	bge.n	8002cf8 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x68>
                _shift = signal->total_length + shift;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	605a      	str	r2, [r3, #4]
            }

            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00e      	beq.n	8002d1e <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x8e>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x8e>

            // we need to get the shift bytes from the end of the buffer...
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
 8002d08:	6938      	ldr	r0, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad1      	subs	r1, r2, r3
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f006 f80f 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002d1c:	e000      	b.n	8002d20 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x90>
            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002d1e:	bf00      	nop
        }
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
         * Get preemphasized data from the underlying audio buffer...
         * This retrieves data from the signal then preemphasizes it.
         * @param offset Offset in the audio signal
         * @param length Length of the audio signal
         */
        int get_data(size_t offset, size_t length, float *out_buffer) {
 8002d2c:	b5b0      	push	{r4, r5, r7, lr}
 8002d2e:	b08c      	sub	sp, #48	; 0x30
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
            if (!_prev_buffer || !_end_of_signal_buffer) {
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1e>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x22>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002d4a:	4c5e      	ldr	r4, [pc, #376]	; (8002ec4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x198>)
 8002d4c:	e0b5      	b.n	8002eba <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x18e>
            }
            if (offset + length > _signal->total_length) {
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	441a      	add	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d901      	bls.n	8002d62 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x36>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
 8002d5e:	4c5a      	ldr	r4, [pc, #360]	; (8002ec8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 8002d60:	e0ab      	b.n	8002eba <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x18e>
            }

            int ret;
            if (static_cast<int32_t>(offset) - _shift >= 0) {
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db14      	blt.n	8002d98 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x6c>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1a99      	subs	r1, r3, r2
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f005 ffd7 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002d8c:	62b8      	str	r0, [r7, #40]	; 0x28
                if (ret != 0) {
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x6c>
                    EIDSP_ERR(ret);
 8002d94:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002d96:	e090      	b.n	8002eba <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x18e>
                }
            }
            // else we'll use the end_of_signal_buffer; so no need to check

            ret = _signal->get_data(offset, length, out_buffer);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	f005 ffc9 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002da8:	62b8      	str	r0, [r7, #40]	; 0x28
            if (ret != 0) {
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x88>
                EIDSP_ERR(ret);
 8002db0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002db2:	e082      	b.n	8002eba <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x18e>
            }

            // now we have the signal and we can preemphasize
            for (size_t ix = 0; ix < length; ix++) {
 8002db4:	2300      	movs	r3, #0
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db8:	e053      	b.n	8002e62 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x136>
                float now = out_buffer[ix];
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24

                // under shift? read from end
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	4413      	add	r3, r2
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	6852      	ldr	r2, [r2, #4]
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d218      	bcs.n	8002e06 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xda>
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	440b      	add	r3, r1
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e00:	edc3 7a00 	vstr	s15, [r3]
 8002e04:	e012      	b.n	8002e2c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x100>
                }
                // otherwise read from history buffer
                else {
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	edd3 7a00 	vldr	s15, [r3]
 8002e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e28:	edc3 7a00 	vstr	s15, [r3]
                }

                // roll through and overwrite last element
                if (_shift != 1) {
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d008      	beq.n	8002e46 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x11a>
                    numpy::roll(_prev_buffer, _shift, -1);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68d8      	ldr	r0, [r3, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e40:	4619      	mov	r1, r3
 8002e42:	f7fe fa8f 	bl	8001364 <_ZN2ei5numpy4rollEPfji>
                }
                _prev_buffer[_shift - 1] = now;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e52:	3b01      	subs	r3, #1
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < length; ix++) {
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	3301      	adds	r3, #1
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d3a7      	bcc.n	8002dba <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x8e>
            }

            _next_offset_should_be += length;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	441a      	add	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	615a      	str	r2, [r3, #20]

            // rescale from [-1 .. 1] ?
            if (_rescale) {
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	7e1b      	ldrb	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01c      	beq.n	8002eb8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x18c>
                matrix_t scale_matrix(length, 1, out_buffer);
 8002e7e:	f107 0014 	add.w	r0, r7, #20
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2201      	movs	r2, #1
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	f7fe f9ae 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
                ret = numpy::scale(&scale_matrix, 1.0f / 32768.0f);
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002ecc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fcc7 	bl	8001828 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8002e9a:	62b8      	str	r0, [r7, #40]	; 0x28
                if (ret != 0) {
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x17c>
                    EIDSP_ERR(ret);
 8002ea2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002ea4:	2500      	movs	r5, #0
 8002ea6:	e000      	b.n	8002eaa <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x17e>
                }
            }
 8002ea8:	2501      	movs	r5, #1
 8002eaa:	f107 0314 	add.w	r3, r7, #20
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f9c5 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8002eb4:	2d01      	cmp	r5, #1
 8002eb6:	d100      	bne.n	8002eba <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x18e>

            return EIDSP_OK;
 8002eb8:	2400      	movs	r4, #0
        }
 8002eba:	4623      	mov	r3, r4
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3730      	adds	r7, #48	; 0x30
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec4:	fffffc16 	.word	0xfffffc16
 8002ec8:	fffffc0e 	.word	0xfffffc0e
 8002ecc:	38000000 	.word	0x38000000

08002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>:

        ~preemphasis() {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
            if (_prev_buffer) {
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x1a>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f022 fae1 	bl	80254ac <_Z7ei_freePv>
            }
            if (_end_of_signal_buffer) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d004      	beq.n	8002efc <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x2c>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f022 fad8 	bl	80254ac <_Z7ei_freePv>
            }
        }
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>:
    /**
     * frame_length is a float and can thus be off by a little bit, e.g.
     * frame_length = 0.018f actually can yield 0.018000011f
     * thus screwing up our frame calculations here...
     */
    static float ceil_unless_very_close_to_floor(float v) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	ed87 0a01 	vstr	s0, [r7, #4]
        if (v > floor(v) && v - floor(v) < 0.001f) {
 8002f12:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f16:	f7fe f9dc 	bl	80012d2 <_ZSt5floorf>
 8002f1a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2a:	dd12      	ble.n	8002f52 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4a>
 8002f2c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f30:	f7fe f9cf 	bl	80012d2 <_ZSt5floorf>
 8002f34:	eeb0 7a40 	vmov.f32	s14, s0
 8002f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f40:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002f84 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x7c>
 8002f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4c:	d501      	bpl.n	8002f52 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4a>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4c>
 8002f52:	2300      	movs	r3, #0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x5e>
            v = (floor(v));
 8002f58:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f5c:	f7fe f9b9 	bl	80012d2 <_ZSt5floorf>
 8002f60:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f64:	e005      	b.n	8002f72 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x6a>
        }
        else {
            v = (ceil(v));
 8002f66:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f6a:	f7fe f992 	bl	8001292 <_ZSt4ceilf>
 8002f6e:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        return v;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	ee07 3a90 	vmov	s15, r3
    }
 8002f78:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	3a83126f 	.word	0x3a83126f

08002f88 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt>:
        uint32_t sampling_frequency,
        float frame_length,
        float frame_stride,
        bool zero_padding,
        uint16_t version)
    {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	; 0x30
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6178      	str	r0, [r7, #20]
 8002f90:	6139      	str	r1, [r7, #16]
 8002f92:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f96:	edc7 0a02 	vstr	s1, [r7, #8]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	71fb      	strb	r3, [r7, #7]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	80bb      	strh	r3, [r7, #4]
        int frame_sample_length;
        int length;
        if (version == 1) {
 8002fa6:	88bb      	ldrh	r3, [r7, #4]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d125      	bne.n	8002ff8 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt+0x70>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc2:	f7fe f996 	bl	80012f2 <_ZSt5roundf>
 8002fc6:	eef0 7a40 	vmov.f32	s15, s0
 8002fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fce:	ee17 3a90 	vmov	r3, s15
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fde:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fea:	f7fe f982 	bl	80012f2 <_ZSt5roundf>
 8002fee:	ed87 0a02 	vstr	s0, [r7, #8]
            length = frame_sample_length;
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff6:	e02d      	b.n	8003054 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt+0xcc>
        }
        else {
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003002:	edd7 7a03 	vldr	s15, [r7, #12]
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300a:	eeb0 0a67 	vmov.f32	s0, s15
 800300e:	f7ff ff7b 	bl	8002f08 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 8003012:	eef0 7a40 	vmov.f32	s15, s0
 8003016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800301a:	ee17 3a90 	vmov	r3, s15
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
            float frame_stride_arg = frame_stride;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800302e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003036:	eeb0 0a67 	vmov.f32	s0, s15
 800303a:	f7ff ff65 	bl	8002f08 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 800303e:	ed87 0a02 	vstr	s0, [r7, #8]
            length = (frame_sample_length - (int)frame_stride);
 8003042:	edd7 7a02 	vldr	s15, [r7, #8]
 8003046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800304a:	ee17 2a90 	vmov	r2, s15
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        volatile int numframes;
        volatile int len_sig;

        if (zero_padding) {
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d026      	beq.n	80030a8 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt+0x120>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(signal_size - length) / frame_stride));
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	ee07 3a90 	vmov	s15, r3
 8003064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003068:	edd7 7a02 	vldr	s15, [r7, #8]
 800306c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003070:	eeb0 0a66 	vmov.f32	s0, s13
 8003074:	f7fe f90d 	bl	8001292 <_ZSt4ceilf>
 8003078:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 800307c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003080:	ee17 3a90 	vmov	r3, s15
 8003084:	623b      	str	r3, [r7, #32]

            // Zero padding
            len_sig = static_cast<int>(static_cast<float>(numframes) * frame_stride) + frame_sample_length;
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003090:	edd7 7a02 	vldr	s15, [r7, #8]
 8003094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800309c:	ee17 2a90 	vmov	r2, s15
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	4413      	add	r3, r2
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	e02b      	b.n	8003100 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt+0x178>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(signal_size - length) / frame_stride));
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80030ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030be:	eeb0 0a66 	vmov.f32	s0, s13
 80030c2:	f7fe f906 	bl	80012d2 <_ZSt5floorf>
 80030c6:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 80030ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ce:	ee17 3a90 	vmov	r3, s15
 80030d2:	623b      	str	r3, [r7, #32]
            len_sig = static_cast<int>(
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80030e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f2:	ee77 7a27 	vadd.f32	s15, s14, s15
            len_sig = static_cast<int>(
 80030f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030fa:	ee17 3a90 	vmov	r3, s15
 80030fe:	61fb      	str	r3, [r7, #28]
        }

        return len_sig;
 8003100:	69fb      	ldr	r3, [r7, #28]
    }
 8003102:	4618      	mov	r0, r3
 8003104:	3730      	adds	r7, #48	; 0x30
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt>:
                            float sampling_frequency,
                            float frame_length,
                            float frame_stride,
                            bool zero_padding,
                            uint16_t version)
    {
 800310c:	b580      	push	{r7, lr}
 800310e:	b090      	sub	sp, #64	; 0x40
 8003110:	af00      	add	r7, sp, #0
 8003112:	6178      	str	r0, [r7, #20]
 8003114:	ed87 0a04 	vstr	s0, [r7, #16]
 8003118:	edc7 0a03 	vstr	s1, [r7, #12]
 800311c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003120:	460b      	mov	r3, r1
 8003122:	71fb      	strb	r3, [r7, #7]
 8003124:	4613      	mov	r3, r2
 8003126:	80bb      	strh	r3, [r7, #4]
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00f      	beq.n	8003150 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x44>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f005 fe2e 	bl	8008d96 <_ZNKSt8functionIFijjPfEEcvbEv>
 800313a:	4603      	mov	r3, r0
 800313c:	f083 0301 	eor.w	r3, r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d104      	bne.n	8003150 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x44>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x48>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x4a>
 8003154:	2300      	movs	r3, #0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x52>
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
 800315a:	4b76      	ldr	r3, [pc, #472]	; (8003334 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x228>)
 800315c:	e0e5      	b.n	800332a <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x21e>
        }

        size_t length_signal = info->signal->total_length;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
        int frame_sample_length;
        int length;
        if (version == 1) {
 8003166:	88bb      	ldrh	r3, [r7, #4]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d11f      	bne.n	80031ac <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0xa0>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 800316c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003170:	edd7 7a03 	vldr	s15, [r7, #12]
 8003174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003178:	eeb0 0a67 	vmov.f32	s0, s15
 800317c:	f7fe f8b9 	bl	80012f2 <_ZSt5roundf>
 8003180:	eef0 7a40 	vmov.f32	s15, s0
 8003184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003188:	ee17 3a90 	vmov	r3, s15
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 800318e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003192:	edd7 7a02 	vldr	s15, [r7, #8]
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319a:	eeb0 0a67 	vmov.f32	s0, s15
 800319e:	f7fe f8a8 	bl	80012f2 <_ZSt5roundf>
 80031a2:	ed87 0a02 	vstr	s0, [r7, #8]
            length = frame_sample_length;
 80031a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031aa:	e027      	b.n	80031fc <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0xf0>
        }
        else {
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 80031ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80031b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80031b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b8:	eeb0 0a67 	vmov.f32	s0, s15
 80031bc:	f7ff fea4 	bl	8002f08 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 80031c0:	eef0 7a40 	vmov.f32	s15, s0
 80031c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031c8:	ee17 3a90 	vmov	r3, s15
 80031cc:	63fb      	str	r3, [r7, #60]	; 0x3c
            float frame_stride_arg = frame_stride;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 80031d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80031d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80031da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031de:	eeb0 0a67 	vmov.f32	s0, s15
 80031e2:	f7ff fe91 	bl	8002f08 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 80031e6:	ed87 0a02 	vstr	s0, [r7, #8]
            length = (frame_sample_length - (int)frame_stride);
 80031ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f2:	ee17 2a90 	vmov	r2, s15
 80031f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        volatile int numframes;
        volatile int len_sig;

        if (zero_padding) {
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d02a      	beq.n	8003258 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x14c>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(length_signal - length) / frame_stride));
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003210:	edd7 7a02 	vldr	s15, [r7, #8]
 8003214:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003218:	eeb0 0a66 	vmov.f32	s0, s13
 800321c:	f7fe f839 	bl	8001292 <_ZSt4ceilf>
 8003220:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8003224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003228:	ee17 3a90 	vmov	r3, s15
 800322c:	623b      	str	r3, [r7, #32]

            // Zero padding
            len_sig = static_cast<int>(static_cast<float>(numframes) * frame_stride) + frame_sample_length;
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003238:	edd7 7a02 	vldr	s15, [r7, #8]
 800323c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003244:	ee17 2a90 	vmov	r2, s15
 8003248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324a:	4413      	add	r3, r2
 800324c:	61fb      	str	r3, [r7, #28]

            info->signal->total_length = static_cast<size_t>(len_sig);
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	611a      	str	r2, [r3, #16]
 8003256:	e02f      	b.n	80032b8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x1ac>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(length_signal - length) / frame_stride));
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003266:	edd7 7a02 	vldr	s15, [r7, #8]
 800326a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800326e:	eeb0 0a66 	vmov.f32	s0, s13
 8003272:	f7fe f82e 	bl	80012d2 <_ZSt5floorf>
 8003276:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 800327a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800327e:	ee17 3a90 	vmov	r3, s15
 8003282:	623b      	str	r3, [r7, #32]
            len_sig = static_cast<int>(
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	3b01      	subs	r3, #1
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003290:	edd7 7a02 	vldr	s15, [r7, #8]
 8003294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032a2:	ee77 7a27 	vadd.f32	s15, s14, s15
            len_sig = static_cast<int>(
 80032a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032aa:	ee17 3a90 	vmov	r3, s15
 80032ae:	61fb      	str	r3, [r7, #28]

            info->signal->total_length = static_cast<size_t>(len_sig);
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	611a      	str	r2, [r3, #16]
        }

        info->frame_ixs.clear();
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4618      	mov	r0, r3
 80032be:	f005 fd7a 	bl	8008db6 <_ZNSt6vectorImN2ei7EiAllocImEEE5clearEv>

        int frame_count = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	637b      	str	r3, [r7, #52]	; 0x34

        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 80032c6:	2300      	movs	r3, #0
 80032c8:	633b      	str	r3, [r7, #48]	; 0x30
 80032ca:	e01e      	b.n	800330a <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x1fe>
            if (++frame_count > numframes) break;
 80032cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ce:	3301      	adds	r3, #1
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d6:	429a      	cmp	r2, r3
 80032d8:	bfcc      	ite	gt
 80032da:	2301      	movgt	r3, #1
 80032dc:	2300      	movle	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d11d      	bne.n	8003320 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x214>

            info->frame_ixs.push_back(ix);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	1d1a      	adds	r2, r3, #4
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
 80032ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f005 fd6d 	bl	8008dd2 <_ZNSt6vectorImN2ei7EiAllocImEEE9push_backEOm>
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 80032f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80032fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003300:	ee17 2a90 	vmov	r2, s15
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	4413      	add	r3, r2
 8003308:	633b      	str	r3, [r7, #48]	; 0x30
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	461a      	mov	r2, r3
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	4293      	cmp	r3, r2
 8003312:	bf34      	ite	cc
 8003314:	2301      	movcc	r3, #1
 8003316:	2300      	movcs	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1d6      	bne.n	80032cc <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x1c0>
 800331e:	e000      	b.n	8003322 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x216>
            if (++frame_count > numframes) break;
 8003320:	bf00      	nop
        }

        info->frame_length = frame_sample_length;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003326:	611a      	str	r2, [r3, #16]

        return EIDSP_OK;
 8003328:	2300      	movs	r3, #0
    }
 800332a:	4618      	mov	r0, r3
 800332c:	3740      	adds	r7, #64	; 0x40
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	fffffc15 	.word	0xfffffc15

08003338 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt>:
        uint32_t sampling_frequency,
        float frame_length,
        float frame_stride,
        bool zero_padding,
        uint16_t version)
    {
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6178      	str	r0, [r7, #20]
 8003340:	6139      	str	r1, [r7, #16]
 8003342:	ed87 0a03 	vstr	s0, [r7, #12]
 8003346:	edc7 0a02 	vstr	s1, [r7, #8]
 800334a:	4611      	mov	r1, r2
 800334c:	461a      	mov	r2, r3
 800334e:	460b      	mov	r3, r1
 8003350:	71fb      	strb	r3, [r7, #7]
 8003352:	4613      	mov	r3, r2
 8003354:	80bb      	strh	r3, [r7, #4]
        int frame_sample_length;
        int length;
        if (version == 1) {
 8003356:	88bb      	ldrh	r3, [r7, #4]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d125      	bne.n	80033a8 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x70>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003366:	edd7 7a03 	vldr	s15, [r7, #12]
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	eeb0 0a67 	vmov.f32	s0, s15
 8003372:	f7fd ffbe 	bl	80012f2 <_ZSt5roundf>
 8003376:	eef0 7a40 	vmov.f32	s15, s0
 800337a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800337e:	ee17 3a90 	vmov	r3, s15
 8003382:	623b      	str	r3, [r7, #32]
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800338e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003396:	eeb0 0a67 	vmov.f32	s0, s15
 800339a:	f7fd ffaa 	bl	80012f2 <_ZSt5roundf>
 800339e:	ed87 0a02 	vstr	s0, [r7, #8]
            length = frame_sample_length;
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	e02d      	b.n	8003404 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0xcc>
        }
        else {
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	eeb0 0a67 	vmov.f32	s0, s15
 80033be:	f7ff fda3 	bl	8002f08 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 80033c2:	eef0 7a40 	vmov.f32	s15, s0
 80033c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ca:	ee17 3a90 	vmov	r3, s15
 80033ce:	623b      	str	r3, [r7, #32]
            float frame_stride_arg = frame_stride;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	61fb      	str	r3, [r7, #28]
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033de:	edd7 7a07 	vldr	s15, [r7, #28]
 80033e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e6:	eeb0 0a67 	vmov.f32	s0, s15
 80033ea:	f7ff fd8d 	bl	8002f08 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 80033ee:	ed87 0a02 	vstr	s0, [r7, #8]
            length = (frame_sample_length - (int)frame_stride);
 80033f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033fa:	ee17 2a90 	vmov	r2, s15
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
        }

        volatile int numframes;

        if (zero_padding) {
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x100>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(signal_size - length) / frame_stride));
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003418:	edd7 7a02 	vldr	s15, [r7, #8]
 800341c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003420:	eeb0 0a66 	vmov.f32	s0, s13
 8003424:	f7fd ff35 	bl	8001292 <_ZSt4ceilf>
 8003428:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 800342c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003430:	ee17 3a90 	vmov	r3, s15
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	e015      	b.n	8003464 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x12c>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(signal_size - length) / frame_stride));
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003446:	edd7 7a02 	vldr	s15, [r7, #8]
 800344a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800344e:	eeb0 0a66 	vmov.f32	s0, s13
 8003452:	f7fd ff3e 	bl	80012d2 <_ZSt5floorf>
 8003456:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 800345a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800345e:	ee17 3a90 	vmov	r3, s15
 8003462:	61bb      	str	r3, [r7, #24]
        }

        return numframes;
 8003464:	69bb      	ldr	r3, [r7, #24]
    }
 8003466:	4618      	mov	r0, r3
 8003468:	3728      	adds	r7, #40	; 0x28
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>:
     * @param scale Scale output to 0..1
     * @returns 0 if OK
     */
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false,
        bool scale = false)
    {
 8003470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003474:	b09f      	sub	sp, #124	; 0x7c
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	4608      	mov	r0, r1
 800347c:	4611      	mov	r1, r2
 800347e:	461a      	mov	r2, r3
 8003480:	4603      	mov	r3, r0
 8003482:	807b      	strh	r3, [r7, #2]
 8003484:	460b      	mov	r3, r1
 8003486:	707b      	strb	r3, [r7, #1]
 8003488:	4613      	mov	r3, r2
 800348a:	703b      	strb	r3, [r7, #0]
        if (win_size == 0) {
 800348c:	887b      	ldrh	r3, [r7, #2]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x26>
            return EIDSP_OK;
 8003492:	2400      	movs	r4, #0
 8003494:	e15d      	b.n	8003752 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2e2>
        }

        uint16_t pad_size = (win_size - 1) / 2;
 8003496:	887b      	ldrh	r3, [r7, #2]
 8003498:	3b01      	subs	r3, #1
 800349a:	0fda      	lsrs	r2, r3, #31
 800349c:	4413      	add	r3, r2
 800349e:	105b      	asrs	r3, r3, #1
 80034a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        int ret;
        float *features_buffer_ptr;

        // mean & variance normalization
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80034ac:	0052      	lsls	r2, r2, #1
 80034ae:	1899      	adds	r1, r3, r2
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80034b8:	2300      	movs	r3, #0
 80034ba:	f7fd fe95 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 80034be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x58>
 80034c4:	4ca8      	ldr	r4, [pc, #672]	; (8003768 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80034c6:	e13f      	b.n	8003748 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        if (!vec_pad.buffer) {
 80034c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x62>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80034ce:	4ca6      	ldr	r4, [pc, #664]	; (8003768 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80034d0:	e13a      	b.n	8003748 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        }

        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 80034d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80034d6:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80034da:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe f8c0 	bl	8001664 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
 80034e4:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 80034e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x80>
            EIDSP_ERR(ret);
 80034ec:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80034ee:	e12b      	b.n	8003748 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        }

        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 80034f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034f2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80034f6:	2300      	movs	r3, #0
 80034f8:	2201      	movs	r2, #1
 80034fa:	f7fd fe75 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 80034fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x98>
 8003504:	4c98      	ldr	r4, [pc, #608]	; (8003768 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003506:	e11a      	b.n	800373e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2ce>
        if (!mean_matrix.buffer) {
 8003508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xa2>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800350e:	4c96      	ldr	r4, [pc, #600]	; (8003768 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003510:	e115      	b.n	800373e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2ce>
        }

        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 8003512:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003514:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003518:	2300      	movs	r3, #0
 800351a:	2201      	movs	r2, #1
 800351c:	f7fd fe64 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xba>
 8003526:	4c90      	ldr	r4, [pc, #576]	; (8003768 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003528:	e104      	b.n	8003734 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        if (!window_variance.buffer) {
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xc4>
            return EIDSP_OUT_OF_MEM;
 8003530:	4c8d      	ldr	r4, [pc, #564]	; (8003768 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003532:	e0ff      	b.n	8003734 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        }

        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 8003534:	2300      	movs	r3, #0
 8003536:	673b      	str	r3, [r7, #112]	; 0x70
 8003538:	e062      	b.n	8003600 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x190>
            // create a slice on the vec_pad
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 800353a:	887d      	ldrh	r5, [r7, #2]
 800353c:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 800353e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003542:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	f107 001c 	add.w	r0, r7, #28
 8003550:	4632      	mov	r2, r6
 8003552:	4629      	mov	r1, r5
 8003554:	f7fd fe48 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xf4>
 800355e:	4c82      	ldr	r4, [pc, #520]	; (8003768 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003560:	2500      	movs	r5, #0
 8003562:	e042      	b.n	80035ea <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x17a>
            if (!window.buffer) {
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x100>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800356a:	4c7f      	ldr	r4, [pc, #508]	; (8003768 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 800356c:	2500      	movs	r5, #0
 800356e:	e03c      	b.n	80035ea <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x17a>
            }

            ret = numpy::mean_axis0(&window, &mean_matrix);
 8003570:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003574:	f107 031c 	add.w	r3, r7, #28
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe f9ce 	bl	800191c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>
 8003580:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (ret != EIDSP_OK) {
 8003582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x11e>
                EIDSP_ERR(ret);
 8003588:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800358a:	2500      	movs	r5, #0
 800358c:	e02d      	b.n	80035ea <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x17a>
            }

            // subtract the mean for the features
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 800358e:	2300      	movs	r3, #0
 8003590:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003592:	e024      	b.n	80035de <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x16e>
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800359e:	fb03 f101 	mul.w	r1, r3, r1
 80035a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a4:	440b      	add	r3, r1
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	ed93 7a00 	vldr	s14, [r3]
 80035ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	edd3 7a00 	vldr	s15, [r3]
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80035c4:	fb03 f101 	mul.w	r1, r3, r1
 80035c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ca:	440b      	add	r3, r1
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
 80035d0:	ee77 7a67 	vsub.f32	s15, s14, s15
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
 80035d4:	edc3 7a00 	vstr	s15, [r3]
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 80035d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035da:	3301      	adds	r3, #1
 80035dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d3d5      	bcc.n	8003594 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x124>
            }
        }
 80035e8:	2501      	movs	r5, #1
 80035ea:	f107 031c 	add.w	r3, r7, #28
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fe25 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 80035f4:	2d01      	cmp	r5, #1
 80035f6:	f040 809d 	bne.w	8003734 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 80035fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035fc:	3301      	adds	r3, #1
 80035fe:	673b      	str	r3, [r7, #112]	; 0x70
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003606:	429a      	cmp	r2, r3
 8003608:	d397      	bcc.n	800353a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xca>

        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 800360a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800360e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003612:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe f824 	bl	8001664 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
 800361c:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 800361e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1b8>
            EIDSP_ERR(ret);
 8003624:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003626:	e085      	b.n	8003734 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        }

        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 8003628:	2300      	movs	r3, #0
 800362a:	66bb      	str	r3, [r7, #104]	; 0x68
 800362c:	e070      	b.n	8003710 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2a0>
            // create a slice on the vec_pad
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 800362e:	887d      	ldrh	r5, [r7, #2]
 8003630:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 8003632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003636:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	f107 000c 	add.w	r0, r7, #12
 8003644:	4632      	mov	r2, r6
 8003646:	4629      	mov	r1, r5
 8003648:	f7fd fdce 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d102      	bne.n	8003658 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1e8>
 8003652:	4c45      	ldr	r4, [pc, #276]	; (8003768 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003654:	2500      	movs	r5, #0
 8003656:	e051      	b.n	80036fc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x28c>
            if (!window.buffer) {
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1f4>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800365e:	4c42      	ldr	r4, [pc, #264]	; (8003768 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003660:	2500      	movs	r5, #0
 8003662:	e04b      	b.n	80036fc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x28c>
            }

            if (variance_normalization == true) {
 8003664:	787b      	ldrb	r3, [r7, #1]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d147      	bne.n	80036fa <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x28a>
                ret = numpy::std_axis0(&window, &window_variance);
 800366a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800366e:	f107 030c 	add.w	r3, r7, #12
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe f9ab 	bl	80019d0 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>
 800367a:	65f8      	str	r0, [r7, #92]	; 0x5c
                if (ret != EIDSP_OK) {
 800367c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x218>
                    EIDSP_ERR(ret);
 8003682:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003684:	2500      	movs	r5, #0
 8003686:	e039      	b.n	80036fc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x28c>
                }

                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	677b      	str	r3, [r7, #116]	; 0x74
                for (size_t col = 0; col < vec_pad.cols; col++) {
 800369a:	2300      	movs	r3, #0
 800369c:	667b      	str	r3, [r7, #100]	; 0x64
 800369e:	e028      	b.n	80036f2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x282>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 80036a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc ff4f 	bl	8000548 <__aeabi_f2d>
 80036aa:	4680      	mov	r8, r0
 80036ac:	4689      	mov	r9, r1
                                             (window_variance.buffer[col] + 1e-10);
 80036ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fc ff45 	bl	8000548 <__aeabi_f2d>
 80036be:	a328      	add	r3, pc, #160	; (adr r3, 8003760 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f0>)
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f7fc fde2 	bl	800028c <__adddf3>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 80036cc:	4640      	mov	r0, r8
 80036ce:	4649      	mov	r1, r9
 80036d0:	f7fd f8bc 	bl	800084c <__aeabi_ddiv>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4610      	mov	r0, r2
 80036da:	4619      	mov	r1, r3
 80036dc:	f7fd fa84 	bl	8000be8 <__aeabi_d2f>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e4:	601a      	str	r2, [r3, #0]
                    features_buffer_ptr++;
 80036e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e8:	3304      	adds	r3, #4
 80036ea:	677b      	str	r3, [r7, #116]	; 0x74
                for (size_t col = 0; col < vec_pad.cols; col++) {
 80036ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ee:	3301      	adds	r3, #1
 80036f0:	667b      	str	r3, [r7, #100]	; 0x64
 80036f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3d2      	bcc.n	80036a0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x230>
                }
            }
        }
 80036fa:	2501      	movs	r5, #1
 80036fc:	f107 030c 	add.w	r3, r7, #12
 8003700:	4618      	mov	r0, r3
 8003702:	f7fd fd9c 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8003706:	2d01      	cmp	r5, #1
 8003708:	d114      	bne.n	8003734 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 800370a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800370c:	3301      	adds	r3, #1
 800370e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003716:	429a      	cmp	r2, r3
 8003718:	d389      	bcc.n	800362e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1be>

        if (scale) {
 800371a:	783b      	ldrb	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c2>
            ret = numpy::normalize(features_matrix);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fe fced 	bl	8002100 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
 8003726:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (ret != EIDSP_OK) {
 8003728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c2>
                EIDSP_ERR(ret);
 800372e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003730:	e000      	b.n	8003734 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
            }
        }

        return EIDSP_OK;
 8003732:	2400      	movs	r4, #0
    }
 8003734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003738:	4618      	mov	r0, r3
 800373a:	f7fd fd80 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 800373e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd fd7b 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8003748:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd fd76 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8003752:	4623      	mov	r3, r4
 8003754:	4618      	mov	r0, r3
 8003756:	377c      	adds	r7, #124	; 0x7c
 8003758:	46bd      	mov	sp, r7
 800375a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800375e:	bf00      	nop
 8003760:	d9d7bdbb 	.word	0xd9d7bdbb
 8003764:	3ddb7cdf 	.word	0x3ddb7cdf
 8003768:	fffffc16 	.word	0xfffffc16
 800376c:	00000000 	.word	0x00000000

08003770 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>:
    /**
     * Perform normalization for MFE frames, this converts the signal to dB,
     * then add a hard filter, and quantize / dequantize the output
     * @param features_matrix input feature matrix, will be modified in place
     */
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b08c      	sub	sp, #48	; 0x30
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
        const float noise = static_cast<float>(noise_floor_db * -1);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	425b      	negs	r3, r3
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003786:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	425b      	negs	r3, r3
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003796:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800379a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800379e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a6:	edc7 7a08 	vstr	s15, [r7, #32]

        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 80037aa:	2300      	movs	r3, #0
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ae:	e0b4      	b.n	800391a <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1aa>
            float f = features_matrix->buffer[ix];
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
            if (f < 1e-30) {
 80037be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037c0:	f7fc fec2 	bl	8000548 <__aeabi_f2d>
 80037c4:	a363      	add	r3, pc, #396	; (adr r3, 8003954 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1e4>)
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	f7fd f987 	bl	8000adc <__aeabi_dcmplt>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x68>
                f = 1e-30;
 80037d4:	4b58      	ldr	r3, [pc, #352]	; (8003938 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1c8>)
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	61bb      	str	r3, [r7, #24]
        float f = frexpf(fabsf(a), &e);
 80037e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80037e4:	eef0 7ae7 	vabs.f32	s15, s15
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	4618      	mov	r0, r3
 80037ee:	eeb0 0a67 	vmov.f32	s0, s15
 80037f2:	f027 fa2f 	bl	802ac54 <frexpf>
 80037f6:	ed87 0a05 	vstr	s0, [r7, #20]
        float y = 1.23149591368684f;
 80037fa:	4b50      	ldr	r3, [pc, #320]	; (800393c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1cc>)
 80037fc:	613b      	str	r3, [r7, #16]
        y *= f;
 80037fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8003802:	edd7 7a05 	vldr	s15, [r7, #20]
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	edc7 7a04 	vstr	s15, [r7, #16]
        y += -4.11852516267426f;
 800380e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003812:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003940 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1d0>
 8003816:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800381a:	edc7 7a04 	vstr	s15, [r7, #16]
        y *= f;
 800381e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003822:	edd7 7a05 	vldr	s15, [r7, #20]
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	edc7 7a04 	vstr	s15, [r7, #16]
        y += 6.02197014179219f;
 800382e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003832:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003944 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1d4>
 8003836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800383a:	edc7 7a04 	vstr	s15, [r7, #16]
        y *= f;
 800383e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003842:	edd7 7a05 	vldr	s15, [r7, #20]
 8003846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384a:	edc7 7a04 	vstr	s15, [r7, #16]
        y += -3.13396450166353f;
 800384e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003852:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003948 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1d8>
 8003856:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800385a:	edc7 7a04 	vstr	s15, [r7, #16]
        y += e;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003868:	ed97 7a04 	vldr	s14, [r7, #16]
 800386c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003870:	edc7 7a04 	vstr	s15, [r7, #16]
        return y;
 8003874:	edd7 7a04 	vldr	s15, [r7, #16]
        return numpy::log2(a) * 0.3010299956639812f;
 8003878:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800394c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1dc>
 800387c:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
            f = numpy::log10(f);
 8003880:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            f *= 10.0f; // scale by 10
 8003884:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003888:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800388c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003890:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            f += noise;
 8003894:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003898:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800389c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            f *= noise_scale;
 80038a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80038a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80038ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            # clip to 2**8
            mfe = np.clip(mfe, 0, 255)
            mfe = np.float32(mfe / 2**8)
            */

            f = roundf(f*256)/256;
 80038b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80038b8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003950 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1e0>
 80038bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038c0:	eeb0 0a67 	vmov.f32	s0, s15
 80038c4:	f027 fca0 	bl	802b208 <roundf>
 80038c8:	eeb0 7a40 	vmov.f32	s14, s0
 80038cc:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003950 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1e0>
 80038d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

            if (f < 0.0f) f = 0.0f;
 80038d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80038dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e4:	d503      	bpl.n	80038ee <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x17e>
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ec:	e00b      	b.n	8003906 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x196>
            else if (f > 1.0f) f = 1.0f;
 80038ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80038f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fe:	dd02      	ble.n	8003906 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x196>
 8003900:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
            features_matrix->buffer[ix] = f;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003912:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003916:	3301      	adds	r3, #1
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003928:	429a      	cmp	r2, r3
 800392a:	f4ff af41 	bcc.w	80037b0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x40>
        }

        return EIDSP_OK;
 800392e:	2300      	movs	r3, #0
    }
 8003930:	4618      	mov	r0, r3
 8003932:	3730      	adds	r7, #48	; 0x30
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	0da24260 	.word	0x0da24260
 800393c:	3f9da1a8 	.word	0x3f9da1a8
 8003940:	4083caf5 	.word	0x4083caf5
 8003944:	40c0b3fb 	.word	0x40c0b3fb
 8003948:	404892e0 	.word	0x404892e0
 800394c:	3e9a209b 	.word	0x3e9a209b
 8003950:	43800000 	.word	0x43800000
 8003954:	feebc2a0 	.word	0xfeebc2a0
 8003958:	39b4484b 	.word	0x39b4484b
 800395c:	00000000 	.word	0x00000000

08003960 <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib>:
    /**
     * Perform normalization for spectrogram frames, this converts the signal to dB,
     * then add a hard filter
     * @param features_matrix input feature matrix, will be modified in place
     */
    static int spectrogram_normalization(matrix_t *features_matrix, int noise_floor_db, bool clip_at_one) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b08e      	sub	sp, #56	; 0x38
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	71fb      	strb	r3, [r7, #7]
        const float noise = static_cast<float>(noise_floor_db * -1);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	425b      	negs	r3, r3
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800397a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	425b      	negs	r3, r3
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800398a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800398e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800399a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 800399e:	2300      	movs	r3, #0
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
 80039a2:	e0a5      	b.n	8003af0 <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x190>
            float f = features_matrix->buffer[ix];
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
            if (f < 1e-30) {
 80039b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039b4:	f7fc fdc8 	bl	8000548 <__aeabi_f2d>
 80039b8:	a35b      	add	r3, pc, #364	; (adr r3, 8003b28 <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x1c8>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f7fd f88d 	bl	8000adc <__aeabi_dcmplt>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x6c>
                f = 1e-30;
 80039c8:	4b51      	ldr	r3, [pc, #324]	; (8003b10 <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x1b0>)
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	623b      	str	r3, [r7, #32]
        float f = frexpf(fabsf(a), &e);
 80039d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80039d8:	eef0 7ae7 	vabs.f32	s15, s15
 80039dc:	f107 0314 	add.w	r3, r7, #20
 80039e0:	4618      	mov	r0, r3
 80039e2:	eeb0 0a67 	vmov.f32	s0, s15
 80039e6:	f027 f935 	bl	802ac54 <frexpf>
 80039ea:	ed87 0a07 	vstr	s0, [r7, #28]
        float y = 1.23149591368684f;
 80039ee:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x1b4>)
 80039f0:	61bb      	str	r3, [r7, #24]
        y *= f;
 80039f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80039f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80039fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fe:	edc7 7a06 	vstr	s15, [r7, #24]
        y += -4.11852516267426f;
 8003a02:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a06:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003b18 <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x1b8>
 8003a0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a0e:	edc7 7a06 	vstr	s15, [r7, #24]
        y *= f;
 8003a12:	ed97 7a06 	vldr	s14, [r7, #24]
 8003a16:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	edc7 7a06 	vstr	s15, [r7, #24]
        y += 6.02197014179219f;
 8003a22:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a26:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003b1c <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x1bc>
 8003a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a2e:	edc7 7a06 	vstr	s15, [r7, #24]
        y *= f;
 8003a32:	ed97 7a06 	vldr	s14, [r7, #24]
 8003a36:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3e:	edc7 7a06 	vstr	s15, [r7, #24]
        y += -3.13396450166353f;
 8003a42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a46:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003b20 <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x1c0>
 8003a4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a4e:	edc7 7a06 	vstr	s15, [r7, #24]
        y += e;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a64:	edc7 7a06 	vstr	s15, [r7, #24]
        return y;
 8003a68:	edd7 7a06 	vldr	s15, [r7, #24]
        return numpy::log2(a) * 0.3010299956639812f;
 8003a6c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003b24 <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x1c4>
 8003a70:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
            f = numpy::log10(f);
 8003a74:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            f *= 10.0f; // scale by 10
 8003a78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003a7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a84:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            f += noise;
 8003a88:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003a8c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a94:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            f *= noise_scale;
 8003a98:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003a9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            // clip again
            if (f < 0.0f) f = 0.0f;
 8003aa8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003aac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab4:	d503      	bpl.n	8003abe <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x15e>
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
 8003abc:	e00e      	b.n	8003adc <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x17c>
            else if (f > 1.0f && clip_at_one) f = 1.0f;
 8003abe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ace:	dd05      	ble.n	8003adc <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x17c>
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x17c>
 8003ad6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003ada:	633b      	str	r3, [r7, #48]	; 0x30
            features_matrix->buffer[ix] = f;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae8:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	3301      	adds	r3, #1
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	6892      	ldr	r2, [r2, #8]
 8003af8:	fb02 f303 	mul.w	r3, r2, r3
 8003afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003afe:	429a      	cmp	r2, r3
 8003b00:	f4ff af50 	bcc.w	80039a4 <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib+0x44>
        }

        return EIDSP_OK;
 8003b04:	2300      	movs	r3, #0
    }
 8003b06:	4618      	mov	r0, r3
 8003b08:	3738      	adds	r7, #56	; 0x38
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	0da24260 	.word	0x0da24260
 8003b14:	3f9da1a8 	.word	0x3f9da1a8
 8003b18:	4083caf5 	.word	0x4083caf5
 8003b1c:	40c0b3fb 	.word	0x40c0b3fb
 8003b20:	404892e0 	.word	0x404892e0
 8003b24:	3e9a209b 	.word	0x3e9a209b
 8003b28:	feebc2a0 	.word	0xfeebc2a0
 8003b2c:	39b4484b 	.word	0x39b4484b

08003b30 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
 8003b30:	b5b0      	push	{r4, r5, r7, lr}
 8003b32:	ed2d 8b02 	vpush	{d8}
 8003b36:	b098      	sub	sp, #96	; 0x60
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	460b      	mov	r3, r1
 8003b42:	817b      	strh	r3, [r7, #10]
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 8003b44:	897b      	ldrh	r3, [r7, #10]
 8003b46:	3302      	adds	r3, #2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	647b      	str	r3, [r7, #68]	; 0x44
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
 8003b4c:	897b      	ldrh	r3, [r7, #10]
 8003b4e:	3302      	adds	r3, #2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);
 8003b54:	897b      	ldrh	r3, [r7, #10]
 8003b56:	3302      	adds	r3, #2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 8003b5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003b5e:	f021 fc8b 	bl	8025478 <_Z9ei_mallocj>
 8003b62:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mels) {
 8003b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x3e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003b6a:	4cb5      	ldr	r4, [pc, #724]	; (8003e40 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x310>)
 8003b6c:	e1bb      	b.n	8003ee6 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x3b6>
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	897b      	ldrh	r3, [r7, #10]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d104      	bne.n	8003b82 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x52>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d001      	beq.n	8003b86 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x56>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003b82:	4cb0      	ldr	r4, [pc, #704]	; (8003e44 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x314>)
 8003b84:	e1af      	b.n	8003ee6 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x3b6>
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
#else
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(float));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	6892      	ldr	r2, [r2, #8]
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	f02a fdd2 	bl	802e744 <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
 8003ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	eeb0 0a67 	vmov.f32	s0, s15
 8003bae:	f7fe ff07 	bl	80029c0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003bb2:	eeb0 8a40 	vmov.f32	s16, s0
 8003bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc4:	f7fe fefc 	bl	80029c0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003bc8:	eef0 7a40 	vmov.f32	s15, s0
            functions::frequency_to_mel(static_cast<float>(low_freq)),
            functions::frequency_to_mel(static_cast<float>(high_freq)),
            num_filter + 2,
 8003bcc:	897b      	ldrh	r3, [r7, #10]
 8003bce:	3302      	adds	r3, #2
        numpy::linspace(
 8003bd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	eef0 0a67 	vmov.f32	s1, s15
 8003bd8:	eeb0 0a48 	vmov.f32	s0, s16
 8003bdc:	f7fe f952 	bl	8001e84 <_ZN2ei5numpy8linspaceEffmPf>
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
 8003be0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003be2:	f021 fc49 	bl	8025478 <_Z9ei_mallocj>
 8003be6:	6378      	str	r0, [r7, #52]	; 0x34
        if (!hertz) {
 8003be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d104      	bne.n	8003bf8 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0xc8>
            ei_dsp_free(mels, mels_mem_size);
 8003bee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bf0:	f021 fc5c 	bl	80254ac <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003bf4:	4c92      	ldr	r4, [pc, #584]	; (8003e40 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x310>)
 8003bf6:	e176      	b.n	8003ee6 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x3b6>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003bfe:	e073      	b.n	8003ce8 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x1b8>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
 8003c00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c08:	4413      	add	r3, r2
 8003c0a:	edd3 7a00 	vldr	s15, [r3]
 8003c0e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c16:	18d5      	adds	r5, r2, r3
 8003c18:	eeb0 0a67 	vmov.f32	s0, s15
 8003c1c:	f7fe ff6c 	bl	8002af8 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
 8003c20:	eef0 7a40 	vmov.f32	s15, s0
 8003c24:	edc5 7a00 	vstr	s15, [r5]
            if (hertz[ix] < low_freq) {
 8003c28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c30:	4413      	add	r3, r2
 8003c32:	ed93 7a00 	vldr	s14, [r3]
 8003c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c38:	ee07 3a90 	vmov	s15, r3
 8003c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c48:	d50b      	bpl.n	8003c62 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x132>
                hertz[ix] = low_freq;
 8003c4a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c52:	4413      	add	r3, r2
 8003c54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c56:	ee07 2a90 	vmov	s15, r2
 8003c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5e:	edc3 7a00 	vstr	s15, [r3]
            }
            if (hertz[ix] > high_freq) {
 8003c62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6a:	4413      	add	r3, r2
 8003c6c:	ed93 7a00 	vldr	s14, [r3]
 8003c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c82:	dd0b      	ble.n	8003c9c <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x16c>
                hertz[ix] = high_freq;
 8003c84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c8c:	4413      	add	r3, r2
 8003c8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c90:	ee07 2a90 	vmov	s15, r2
 8003c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c98:	edc3 7a00 	vstr	s15, [r3]

            // here is a really annoying bug in Speechpy which calculates the frequency index wrong for the last bucket
            // the last 'hertz' value is not 8,000 (with sampling rate 16,000) but 7,999.999999
            // thus calculating the bucket to 64, not 65.
            // we're adjusting this here a tiny bit to ensure we have the same result
            if (ix == num_filter + 2 - 1) {
 8003c9c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003ca0:	897b      	ldrh	r3, [r7, #10]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d11a      	bne.n	8003cde <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x1ae>
                hertz[ix] -= 0.001;
 8003ca8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cb0:	4413      	add	r3, r2
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fc47 	bl	8000548 <__aeabi_f2d>
 8003cba:	a35f      	add	r3, pc, #380	; (adr r3, 8003e38 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x308>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7fc fae2 	bl	8000288 <__aeabi_dsub>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cd4:	18d5      	adds	r5, r2, r3
 8003cd6:	f7fc ff87 	bl	8000be8 <__aeabi_d2f>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	602b      	str	r3, [r5, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003cde:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003ce8:	897b      	ldrh	r3, [r7, #10]
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	da85      	bge.n	8003c00 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0xd0>
            }
        }
        ei_dsp_free(mels, mels_mem_size);
 8003cf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cf6:	f021 fbd9 	bl	80254ac <_Z7ei_freePv>

        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
 8003cfa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003cfc:	f021 fbbc 	bl	8025478 <_Z9ei_mallocj>
 8003d00:	6338      	str	r0, [r7, #48]	; 0x30
        if (!freq_index) {
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x1e2>
            ei_dsp_free(hertz, hertz_mem_size);
 8003d08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d0a:	f021 fbcf 	bl	80254ac <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003d0e:	4c4c      	ldr	r4, [pc, #304]	; (8003e40 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x310>)
 8003d10:	e0e9      	b.n	8003ee6 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x3b6>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003d18:	e02a      	b.n	8003d70 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x240>
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d26:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d2e:	4413      	add	r3, r2
 8003d30:	edd3 7a00 	vldr	s15, [r3]
 8003d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d46:	eeb0 0a66 	vmov.f32	s0, s13
 8003d4a:	f7fd fac2 	bl	80012d2 <_ZSt5floorf>
 8003d4e:	eef0 7a40 	vmov.f32	s15, s0
 8003d52:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5a:	4413      	add	r3, r2
 8003d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d60:	ee17 2a90 	vmov	r2, s15
 8003d64:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003d66:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003d70:	897b      	ldrh	r3, [r7, #10]
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	dace      	bge.n	8003d1a <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x1ea>
        }
        ei_dsp_free(hertz, hertz_mem_size);
 8003d7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d7e:	f021 fb95 	bl	80254ac <_Z7ei_freePv>

        for (size_t i = 0; i < num_filter; i++) {
 8003d82:	2300      	movs	r3, #0
 8003d84:	653b      	str	r3, [r7, #80]	; 0x50
 8003d86:	e097      	b.n	8003eb8 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x388>
            int left = freq_index[i];
 8003d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8e:	4413      	add	r3, r2
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
            int middle = freq_index[i + 1];
 8003d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d96:	3301      	adds	r3, #1
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d9c:	4413      	add	r3, r2
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
            int right = freq_index[i + 2];
 8003da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da4:	3302      	adds	r3, #2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003daa:	4413      	add	r3, r2
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	623b      	str	r3, [r7, #32]

            EI_DSP_MATRIX(z, 1, (right - left + 1));
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	3301      	adds	r3, #1
 8003db8:	461a      	mov	r2, r3
 8003dba:	f107 0010 	add.w	r0, r7, #16
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	f7fd fa11 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d102      	bne.n	8003dd2 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x2a2>
 8003dcc:	4c1c      	ldr	r4, [pc, #112]	; (8003e40 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x310>)
 8003dce:	2500      	movs	r5, #0
 8003dd0:	e068      	b.n	8003ea4 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x374>
            if (!z.buffer) {
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d105      	bne.n	8003de4 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x2b4>
                ei_dsp_free(freq_index, freq_index_mem_size);
 8003dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dda:	f021 fb67 	bl	80254ac <_Z7ei_freePv>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003dde:	4c18      	ldr	r4, [pc, #96]	; (8003e40 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x310>)
 8003de0:	2500      	movs	r5, #0
 8003de2:	e05f      	b.n	8003ea4 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x374>
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	ee07 3a10 	vmov	s14, r3
 8003df4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003df8:	6a3a      	ldr	r2, [r7, #32]
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	461a      	mov	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4619      	mov	r1, r3
 8003e06:	4610      	mov	r0, r2
 8003e08:	eef0 0a47 	vmov.f32	s1, s14
 8003e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e10:	f7fe f838 	bl	8001e84 <_ZN2ei5numpy8linspaceEffmPf>
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
 8003e14:	6938      	ldr	r0, [r7, #16]
 8003e16:	6a3a      	ldr	r2, [r7, #32]
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e28:	f7fe fe88 	bl	8002b3c <_ZN2ei8speechpy9functions8triangleEPfjiii>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e30:	e031      	b.n	8003e96 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x366>
 8003e32:	bf00      	nop
 8003e34:	f3af 8000 	nop.w
 8003e38:	d2f1a9fc 	.word	0xd2f1a9fc
 8003e3c:	3f50624d 	.word	0x3f50624d
 8003e40:	fffffc16 	.word	0xfffffc16
 8003e44:	fffffc14 	.word	0xfffffc14
                size_t index = (i * filterbanks->cols) + (left + zx);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e56:	440a      	add	r2, r1
 8003e58:	4413      	add	r3, r2
 8003e5a:	64bb      	str	r3, [r7, #72]	; 0x48

                if (output_transposed) {
 8003e5c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x34a>
                    index = ((left + zx) * filterbanks->rows) + i;
 8003e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e68:	4413      	add	r3, r2
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e76:	4413      	add	r3, r2
 8003e78:	64bb      	str	r3, [r7, #72]	; 0x48
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
#else
                filterbanks->buffer[index] = z.buffer[zx];
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	441a      	add	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	601a      	str	r2, [r3, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e92:	3301      	adds	r3, #1
 8003e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e96:	6a3a      	ldr	r2, [r7, #32]
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	ddd2      	ble.n	8003e48 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x318>
#endif
            }
        }
 8003ea2:	2501      	movs	r5, #1
 8003ea4:	f107 0310 	add.w	r3, r7, #16
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fd f9c8 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8003eae:	2d01      	cmp	r5, #1
 8003eb0:	d119      	bne.n	8003ee6 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x3b6>
        for (size_t i = 0; i < num_filter; i++) {
 8003eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	653b      	str	r3, [r7, #80]	; 0x50
 8003eb8:	897b      	ldrh	r3, [r7, #10]
 8003eba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	f4ff af63 	bcc.w	8003d88 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x258>

        if (output_transposed) {
 8003ec2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb+0x3ae>
            uint16_t r = filterbanks->rows;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	85fb      	strh	r3, [r7, #46]	; 0x2e
            filterbanks->rows = filterbanks->cols;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]
            filterbanks->cols = r;
 8003ed8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	609a      	str	r2, [r3, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
 8003ede:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ee0:	f021 fae4 	bl	80254ac <_Z7ei_freePv>

        return EIDSP_OK;
 8003ee4:	2400      	movs	r4, #0
    }
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3758      	adds	r7, #88	; 0x58
 8003eec:	46bd      	mov	sp, r7
 8003eee:	ecbd 8b02 	vpop	{d8}
 8003ef2:	bdb0      	pop	{r4, r5, r7, pc}

08003ef4 <_ZN2ei8speechpy7feature22get_fft_bin_from_hertzEtfm>:
     * @param fft_size Size of fft
     * @param hertz Desired hertz
     * @param sampling_freq In Hz
     * @return int the index of the bin closest to the hertz
     */
    static int get_fft_bin_from_hertz(uint16_t fft_size, float hertz, uint32_t sampling_freq)
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f00:	6079      	str	r1, [r7, #4]
 8003f02:	81fb      	strh	r3, [r7, #14]
    {
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 8003f04:	89fb      	ldrh	r3, [r7, #14]
 8003f06:	3301      	adds	r3, #1
 8003f08:	ee07 3a90 	vmov	s15, r3
 8003f0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f10:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f26:	eeb0 0a66 	vmov.f32	s0, s13
 8003f2a:	f7fd f9d2 	bl	80012d2 <_ZSt5floorf>
 8003f2e:	eef0 7a40 	vmov.f32	s15, s0
 8003f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f36:	ee17 3a90 	vmov	r3, s15
    }
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f004 ff51 	bl	8008df4 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE12_Vector_implC1Ev>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZNSt6vectorImN2ei7EiAllocImEEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff ffeb 	bl	8003f42 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEEC1Ev>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>:
typedef struct ei_stack_frames_info {
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4618      	mov	r0, r3
 8003f84:	f004 ff58 	bl	8008e38 <_ZNSt6vectorImN2ei7EiAllocImEEED1Ev>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	0000      	movs	r0, r0
 8003f94:	0000      	movs	r0, r0
	...

08003f98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	ed2d 8b02 	vpush	{d8}
 8003f9e:	b0ab      	sub	sp, #172	; 0xac
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	6178      	str	r0, [r7, #20]
 8003fa4:	6139      	str	r1, [r7, #16]
 8003fa6:	60fa      	str	r2, [r7, #12]
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	ed87 0a01 	vstr	s0, [r7, #4]
 8003fae:	edc7 0a00 	vstr	s1, [r7]
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t fft_length, uint32_t low_frequency, uint32_t high_frequency,
        uint16_t version
        )
    {
        int ret = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        if (high_frequency == 0) {
 8003fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d103      	bne.n	8003fc8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x30>
            high_frequency = sampling_frequency / 2;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        }

        if (version<4) {
 8003fc8:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d807      	bhi.n	8003fe0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x48>
            if (low_frequency == 0) {
 8003fd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d103      	bne.n	8003fe0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x48>
                low_frequency = 300;
 8003fd8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            }
        }

        stack_frames_info_t stack_frame_info = { 0 };
 8003fe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	611a      	str	r2, [r3, #16]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ffc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004000:	3304      	adds	r3, #4
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff ffaa 	bl	8003f5c <_ZNSt6vectorImN2ei7EiAllocImEEEC1Ev>
        stack_frame_info.signal = signal;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	643b      	str	r3, [r7, #64]	; 0x40

        ret = processing::stack_frames(
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004016:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 800401a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800401e:	2100      	movs	r1, #0
 8004020:	ed97 1a00 	vldr	s2, [r7]
 8004024:	edd7 0a01 	vldr	s1, [r7, #4]
 8004028:	eeb0 0a67 	vmov.f32	s0, s15
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff f86d 	bl	800310c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt>
 8004032:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
 8004036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xac>
            EIDSP_ERR(ret);
 800403e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8004042:	e308      	b.n	8004656 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6be>
        }

        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
 8004044:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004048:	3304      	adds	r3, #4
 800404a:	4618      	mov	r0, r3
 800404c:	f004 ff0f 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 8004050:	4602      	mov	r2, r0
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	bf14      	ite	ne
 800405a:	2301      	movne	r3, #1
 800405c:	2300      	moveq	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xd0>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004064:	4cc6      	ldr	r4, [pc, #792]	; (8004380 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3e8>)
 8004066:	e2f6      	b.n	8004656 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6be>
        }

        if (num_filters != out_features->cols) {
 8004068:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xe0>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004074:	4cc2      	ldr	r4, [pc, #776]	; (8004380 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3e8>)
 8004076:	e2ee      	b.n	8004656 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6be>
        }

        if (out_energies) {
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d015      	beq.n	80040aa <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x112>
            if (stack_frame_info.frame_ixs.size() != out_energies->rows || out_energies->cols != 1) {
 800407e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004082:	3304      	adds	r3, #4
 8004084:	4618      	mov	r0, r3
 8004086:	f004 fef2 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	d103      	bne.n	800409c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x104>
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d001      	beq.n	80040a0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x108>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x10a>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x112>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80040a6:	4cb6      	ldr	r4, [pc, #728]	; (8004380 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3e8>)
 80040a8:	e2d5      	b.n	8004656 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6be>
            }
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040b0:	e00d      	b.n	80040ce <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x136>
            *(out_features->buffer + i) = 0;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 80040c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040c8:	3301      	adds	r3, #1
 80040ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	6892      	ldr	r2, [r2, #8]
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80040de:	429a      	cmp	r2, r3
 80040e0:	d3e7      	bcc.n	80040b2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x11a>
        }

        const size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 80040e2:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3301      	adds	r3, #1
 80040ec:	67fb      	str	r3, [r7, #124]	; 0x7c
        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        float *mels;
        const int MELS_SIZE = num_filters + 2;
 80040ee:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80040f2:	3302      	adds	r3, #2
 80040f4:	67bb      	str	r3, [r7, #120]	; 0x78
        mels = (float*)ei_calloc(MELS_SIZE, sizeof(float));
 80040f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f8:	2104      	movs	r1, #4
 80040fa:	4618      	mov	r0, r3
 80040fc:	f021 f9c8 	bl	8025490 <_Z9ei_callocjj>
 8004100:	6778      	str	r0, [r7, #116]	; 0x74
        EI_ERR_AND_RETURN_ON_NULL(mels, EIDSP_OUT_OF_MEM);
 8004102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004104:	2b00      	cmp	r3, #0
 8004106:	d104      	bne.n	8004112 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x17a>
 8004108:	489e      	ldr	r0, [pc, #632]	; (8004384 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3ec>)
 800410a:	f004 fd43 	bl	8008b94 <_Z9ei_printfPKcz>
 800410e:	4c9e      	ldr	r4, [pc, #632]	; (8004388 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3f0>)
 8004110:	e2a1      	b.n	8004656 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6be>
        ei_unique_ptr_t __ptr__(mels,ei_free);
 8004112:	4b9e      	ldr	r3, [pc, #632]	; (800438c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3f4>)
 8004114:	657b      	str	r3, [r7, #84]	; 0x54
 8004116:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800411a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800411e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004120:	4618      	mov	r0, r3
 8004122:	f004 fdd4 	bl	8008cce <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        uint16_t* bins = reinterpret_cast<uint16_t*>(mels); // alias the mels array so we can reuse the space
 8004126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004128:	673b      	str	r3, [r7, #112]	; 0x70

        numpy::linspace(
 800412a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004136:	eeb0 0a67 	vmov.f32	s0, s15
 800413a:	f7fe fc41 	bl	80029c0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 800413e:	eeb0 8a40 	vmov.f32	s16, s0
 8004142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414e:	eeb0 0a67 	vmov.f32	s0, s15
 8004152:	f7fe fc35 	bl	80029c0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8004156:	eef0 7a40 	vmov.f32	s15, s0
            functions::frequency_to_mel(static_cast<float>(low_frequency)),
            functions::frequency_to_mel(static_cast<float>(high_frequency)),
            num_filters + 2,
 800415a:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800415e:	3302      	adds	r3, #2
        numpy::linspace(
 8004160:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004162:	4618      	mov	r0, r3
 8004164:	eef0 0a67 	vmov.f32	s1, s15
 8004168:	eeb0 0a48 	vmov.f32	s0, s16
 800416c:	f7fd fe8a 	bl	8001e84 <_ZN2ei5numpy8linspaceEffmPf>
            mels);

        uint16_t max_bin = version >= 4 ? fft_length : power_spectrum_frame_size; // preserve a bug in v<4
 8004170:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004174:	2b03      	cmp	r3, #3
 8004176:	d802      	bhi.n	800417e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1e6>
 8004178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800417a:	b29b      	uxth	r3, r3
 800417c:	e001      	b.n	8004182 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1ea>
 800417e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8004182:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        // go to -1 size b/c special handling, see after
        for (uint16_t ix = 0; ix < MELS_SIZE-1; ix++) {
 8004186:	2300      	movs	r3, #0
 8004188:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800418c:	e06d      	b.n	800426a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2d2>
            mels[ix] = functions::mel_to_frequency(mels[ix]);
 800418e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004196:	4413      	add	r3, r2
 8004198:	edd3 7a00 	vldr	s15, [r3]
 800419c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80041a4:	18d4      	adds	r4, r2, r3
 80041a6:	eeb0 0a67 	vmov.f32	s0, s15
 80041aa:	f7fe fca5 	bl	8002af8 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
 80041ae:	eef0 7a40 	vmov.f32	s15, s0
 80041b2:	edc4 7a00 	vstr	s15, [r4]
            if (mels[ix] < low_frequency) {
 80041b6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80041be:	4413      	add	r3, r2
 80041c0:	ed93 7a00 	vldr	s14, [r3]
 80041c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041c8:	ee07 3a90 	vmov	s15, r3
 80041cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d8:	d50c      	bpl.n	80041f4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x25c>
                mels[ix] = low_frequency;
 80041da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80041e2:	4413      	add	r3, r2
 80041e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041e8:	ee07 2a90 	vmov	s15, r2
 80041ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f0:	edc3 7a00 	vstr	s15, [r3]
            }
            if (mels[ix] > high_frequency) {
 80041f4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80041fc:	4413      	add	r3, r2
 80041fe:	ed93 7a00 	vldr	s14, [r3]
 8004202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004216:	dd0c      	ble.n	8004232 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x29a>
                mels[ix] = high_frequency;
 8004218:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004220:	4413      	add	r3, r2
 8004222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004226:	ee07 2a90 	vmov	s15, r2
 800422a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422e:	edc3 7a00 	vstr	s15, [r3]
            }
            bins[ix] = get_fft_bin_from_hertz(max_bin, mels[ix], sampling_frequency);
 8004232:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800423a:	4413      	add	r3, r2
 800423c:	edd3 7a00 	vldr	s15, [r3]
 8004240:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	eeb0 0a67 	vmov.f32	s0, s15
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fe52 	bl	8003ef4 <_ZN2ei8speechpy7feature22get_fft_bin_from_hertzEtfm>
 8004250:	4601      	mov	r1, r0
 8004252:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800425a:	4413      	add	r3, r2
 800425c:	b28a      	uxth	r2, r1
 800425e:	801a      	strh	r2, [r3, #0]
        for (uint16_t ix = 0; ix < MELS_SIZE-1; ix++) {
 8004260:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004264:	3301      	adds	r3, #1
 8004266:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800426a:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800426e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004270:	3b01      	subs	r3, #1
 8004272:	429a      	cmp	r2, r3
 8004274:	db8b      	blt.n	800418e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1f6>

        // here is a really annoying bug in Speechpy which calculates the frequency index wrong for the last bucket
        // the last 'hertz' value is not 8,000 (with sampling rate 16,000) but 7,999.999999
        // thus calculating the bucket to 64, not 65.
        // we're adjusting this here a tiny bit to ensure we have the same result
        mels[MELS_SIZE-1] = functions::mel_to_frequency(mels[MELS_SIZE-1]);
 8004276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004278:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800427c:	3b01      	subs	r3, #1
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004282:	4413      	add	r3, r2
 8004284:	edd3 7a00 	vldr	s15, [r3]
 8004288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800428a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800428e:	3b01      	subs	r3, #1
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004294:	18d4      	adds	r4, r2, r3
 8004296:	eeb0 0a67 	vmov.f32	s0, s15
 800429a:	f7fe fc2d 	bl	8002af8 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
 800429e:	eef0 7a40 	vmov.f32	s15, s0
 80042a2:	edc4 7a00 	vstr	s15, [r4]
        if (mels[MELS_SIZE-1] > high_frequency) {
 80042a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042ac:	3b01      	subs	r3, #1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80042b2:	4413      	add	r3, r2
 80042b4:	ed93 7a00 	vldr	s14, [r3]
 80042b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042cc:	dd0e      	ble.n	80042ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x354>
            mels[MELS_SIZE-1] = high_frequency;
 80042ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042d4:	3b01      	subs	r3, #1
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80042da:	4413      	add	r3, r2
 80042dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042e0:	ee07 2a90 	vmov	s15, r2
 80042e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e8:	edc3 7a00 	vstr	s15, [r3]
        }
        mels[MELS_SIZE-1] -= 0.001;
 80042ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042f2:	3b01      	subs	r3, #1
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80042f8:	4413      	add	r3, r2
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc f923 	bl	8000548 <__aeabi_f2d>
 8004302:	a31d      	add	r3, pc, #116	; (adr r3, 8004378 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3e0>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f7fb ffbe 	bl	8000288 <__aeabi_dsub>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004316:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800431a:	3b01      	subs	r3, #1
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004320:	18d4      	adds	r4, r2, r3
 8004322:	f7fc fc61 	bl	8000be8 <__aeabi_d2f>
 8004326:	4603      	mov	r3, r0
 8004328:	6023      	str	r3, [r4, #0]
        bins[MELS_SIZE-1] = get_fft_bin_from_hertz(max_bin, mels[MELS_SIZE-1], sampling_frequency);
 800432a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800432c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004330:	3b01      	subs	r3, #1
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004336:	4413      	add	r3, r2
 8004338:	edd3 7a00 	vldr	s15, [r3]
 800433c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	eeb0 0a67 	vmov.f32	s0, s15
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fdd4 	bl	8003ef4 <_ZN2ei8speechpy7feature22get_fft_bin_from_hertzEtfm>
 800434c:	4601      	mov	r1, r0
 800434e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004350:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004354:	3b01      	subs	r3, #1
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800435a:	4413      	add	r3, r2
 800435c:	b28a      	uxth	r2, r1
 800435e:	801a      	strh	r2, [r3, #0]

        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 8004360:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004364:	2300      	movs	r3, #0
 8004366:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004368:	2101      	movs	r1, #1
 800436a:	f7fc ff3d 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10d      	bne.n	8004390 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3f8>
 8004374:	4c04      	ldr	r4, [pc, #16]	; (8004388 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3f0>)
 8004376:	e164      	b.n	8004642 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6aa>
 8004378:	d2f1a9fc 	.word	0xd2f1a9fc
 800437c:	3f50624d 	.word	0x3f50624d
 8004380:	fffffc14 	.word	0xfffffc14
 8004384:	0803091c 	.word	0x0803091c
 8004388:	fffffc16 	.word	0xfffffc16
 800438c:	080254ad 	.word	0x080254ad
        if (!power_spectrum_frame.buffer) {
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x402>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004396:	4cb6      	ldr	r4, [pc, #728]	; (8004670 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6d8>)
 8004398:	e153      	b.n	8004642 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6aa>
        }

        // get signal data from the audio file
        EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 800439a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800439c:	461a      	mov	r2, r3
 800439e:	f107 0018 	add.w	r0, r7, #24
 80043a2:	2300      	movs	r3, #0
 80043a4:	2101      	movs	r1, #1
 80043a6:	f7fc ff1f 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x41c>
 80043b0:	4caf      	ldr	r4, [pc, #700]	; (8004670 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6d8>)
 80043b2:	e141      	b.n	8004638 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6a0>

        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 80043b4:	2300      	movs	r3, #0
 80043b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043ba:	e128      	b.n	800460e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x676>
            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
 80043bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043c0:	3304      	adds	r3, #4
 80043c2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80043c6:	4618      	mov	r0, r3
 80043c8:	f004 fd61 	bl	8008e8e <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>
 80043cc:	4603      	mov	r3, r0
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	66bb      	str	r3, [r7, #104]	; 0x68
            size_t signal_length = stack_frame_info.frame_length;
 80043d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 80043d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043de:	441a      	add	r2, r3
 80043e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d90b      	bls.n	8004400 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x468>
                signal_length = signal_length -
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
 80043e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043ee:	441a      	add	r2, r3
 80043f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f2:	691b      	ldr	r3, [r3, #16]
                signal_length = signal_length -
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80043fa:	4413      	add	r3, r2
 80043fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            }

            ret = stack_frame_info.signal->get_data(
 8004400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004402:	4618      	mov	r0, r3
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800440a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800440c:	f004 fc95 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8004410:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 8004414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x48a>
                EIDSP_ERR(ret);
 800441c:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8004420:	e10a      	b.n	8004638 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6a0>
            }

            ret = numpy::power_spectrum(
 8004422:	69b8      	ldr	r0, [r7, #24]
                signal_frame.buffer,
                stack_frame_info.frame_length,
 8004424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
            ret = numpy::power_spectrum(
 8004426:	4619      	mov	r1, r3
 8004428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800442a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004432:	f7fe f99b 	bl	800276c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 8004436:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
 800443a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x4b0>
                EIDSP_ERR(ret);
 8004442:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8004446:	e0f7      	b.n	8004638 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6a0>
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800444c:	4618      	mov	r0, r3
 800444e:	f7fc ffd3 	bl	80013f8 <_ZN2ei5numpy3sumEPfj>
 8004452:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            if (energy == 0) {
 8004456:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800445a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004462:	d102      	bne.n	800446a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x4d2>
                energy = 1e-10;
 8004464:	4b83      	ldr	r3, [pc, #524]	; (8004674 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6dc>)
 8004466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            if (out_energies) {
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x4ea>
                out_energies->buffer[ix] = energy;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004480:	601a      	str	r2, [r3, #0]
            }

            auto row_ptr = out_features->get_row_ptr(ix);
 8004482:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004486:	6978      	ldr	r0, [r7, #20]
 8004488:	f7fc feef 	bl	800126a <_ZN2ei9ei_matrix11get_row_ptrEj>
 800448c:	6678      	str	r0, [r7, #100]	; 0x64
            for (size_t i = 0; i < num_filters; i++) {
 800448e:	2300      	movs	r3, #0
 8004490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004494:	e0a8      	b.n	80045e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x650>
                size_t left = bins[i];
 8004496:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	663b      	str	r3, [r7, #96]	; 0x60
                size_t middle = bins[i+1];
 80044a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044a8:	3301      	adds	r3, #1
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	65fb      	str	r3, [r7, #92]	; 0x5c
                size_t right = bins[i+2];
 80044b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044b8:	3302      	adds	r3, #2
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	65bb      	str	r3, [r7, #88]	; 0x58

                assert(right < power_spectrum_frame_size);
 80044c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d306      	bcc.n	80044da <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x542>
 80044cc:	4b6a      	ldr	r3, [pc, #424]	; (8004678 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6e0>)
 80044ce:	4a6b      	ldr	r2, [pc, #428]	; (800467c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6e4>)
 80044d0:	f240 115f 	movw	r1, #351	; 0x15f
 80044d4:	486a      	ldr	r0, [pc, #424]	; (8004680 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6e8>)
 80044d6:	f029 fa4f 	bl	802d978 <__assert_func>
                // now we have weights and locations to move from fft to mel sgram
                // both left and right become zero weights, so skip them

                // middle always has weight of 1.0
                // since we skip left and right, if left = middle we need to handle that
                row_ptr[i] = power_spectrum_frame.buffer[middle];
 80044da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80044ea:	440b      	add	r3, r1
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	601a      	str	r2, [r3, #0]

                for (size_t bin = left+1; bin < right; bin++) {
 80044f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f2:	3301      	adds	r3, #1
 80044f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f8:	e06c      	b.n	80045d4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x63c>
                    if (bin < middle) {
 80044fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80044fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004500:	429a      	cmp	r2, r3
 8004502:	d22e      	bcs.n	8004562 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x5ca>
                        row_ptr[i] +=
 8004504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800450c:	4413      	add	r3, r2
 800450e:	ed93 7a00 	vldr	s14, [r3]
                            ((static_cast<float>(bin) - left) / (middle - left)) * // weight *
 8004512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004528:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800452c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800452e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453a:	eec6 6a27 	vdiv.f32	s13, s12, s15
                            power_spectrum_frame.buffer[bin];
 800453e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	edd3 7a00 	vldr	s15, [r3]
                            ((static_cast<float>(bin) - left) / (middle - left)) * // weight *
 800454c:	ee66 7aa7 	vmul.f32	s15, s13, s15
                        row_ptr[i] +=
 8004550:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004558:	4413      	add	r3, r2
 800455a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800455e:	edc3 7a00 	vstr	s15, [r3]
                    }
                    // intentionally skip middle, handled above
                    if (bin > middle) {
 8004562:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004568:	429a      	cmp	r2, r3
 800456a:	d92e      	bls.n	80045ca <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x632>
                        row_ptr[i] +=
 800456c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004574:	4413      	add	r3, r2
 8004576:	ed93 7a00 	vldr	s14, [r3]
                            ((right - static_cast<float>(bin)) / (right - middle)) * // weight *
 800457a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004590:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	eec6 6a27 	vdiv.f32	s13, s12, s15
                            power_spectrum_frame.buffer[bin];
 80045a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	edd3 7a00 	vldr	s15, [r3]
                            ((right - static_cast<float>(bin)) / (right - middle)) * // weight *
 80045b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
                        row_ptr[i] +=
 80045b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80045c0:	4413      	add	r3, r2
 80045c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c6:	edc3 7a00 	vstr	s15, [r3]
                for (size_t bin = left+1; bin < right; bin++) {
 80045ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045ce:	3301      	adds	r3, #1
 80045d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80045d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045da:	429a      	cmp	r2, r3
 80045dc:	d38d      	bcc.n	80044fa <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x562>
            for (size_t i = 0; i < num_filters; i++) {
 80045de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045e2:	3301      	adds	r3, #1
 80045e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045e8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80045ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80045f0:	429a      	cmp	r2, r3
 80045f2:	f4ff af50 	bcc.w	8004496 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x4fe>
                    }
                }
            }

            if (ret != 0) {
 80045f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x66c>
                EIDSP_ERR(ret);
 80045fe:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8004602:	e019      	b.n	8004638 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x6a0>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 8004604:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004608:	3301      	adds	r3, #1
 800460a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800460e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004612:	3304      	adds	r3, #4
 8004614:	4618      	mov	r0, r3
 8004616:	f004 fc2a 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 800461a:	4602      	mov	r2, r0
 800461c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004620:	4293      	cmp	r3, r2
 8004622:	bf34      	ite	cc
 8004624:	2301      	movcc	r3, #1
 8004626:	2300      	movcs	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	f47f aec6 	bne.w	80043bc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x424>
            }
        }

        numpy::zero_handling(out_features);
 8004630:	6978      	ldr	r0, [r7, #20]
 8004632:	f7fe f92f 	bl	8002894 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>

        return EIDSP_OK;
 8004636:	2400      	movs	r4, #0
    }
 8004638:	f107 0318 	add.w	r3, r7, #24
 800463c:	4618      	mov	r0, r3
 800463e:	f7fc fdfe 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8004642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004646:	4618      	mov	r0, r3
 8004648:	f7fc fdf9 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 800464c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004650:	4618      	mov	r0, r3
 8004652:	f004 fb51 	bl	8008cf8 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 8004656:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fc8b 	bl	8003f76 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
 8004660:	4623      	mov	r3, r4
 8004662:	4618      	mov	r0, r3
 8004664:	37a4      	adds	r7, #164	; 0xa4
 8004666:	46bd      	mov	sp, r7
 8004668:	ecbd 8b02 	vpop	{d8}
 800466c:	bd90      	pop	{r4, r7, pc}
 800466e:	bf00      	nop
 8004670:	fffffc16 	.word	0xfffffc16
 8004674:	2edbe6ff 	.word	0x2edbe6ff
 8004678:	08030930 	.word	0x08030930
 800467c:	08030954 	.word	0x08030954
 8004680:	080309f4 	.word	0x080309f4

08004684 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe_v3(matrix_t *out_features, matrix_t *out_energies,
 8004684:	b5b0      	push	{r4, r5, r7, lr}
 8004686:	b0a4      	sub	sp, #144	; 0x90
 8004688:	af04      	add	r7, sp, #16
 800468a:	6178      	str	r0, [r7, #20]
 800468c:	6139      	str	r1, [r7, #16]
 800468e:	60fa      	str	r2, [r7, #12]
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	ed87 0a01 	vstr	s0, [r7, #4]
 8004696:	edc7 0a00 	vstr	s1, [r7]
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t fft_length, uint32_t low_frequency, uint32_t high_frequency,
        uint16_t version
        )
    {
        int ret = 0;
 800469a:	2300      	movs	r3, #0
 800469c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (high_frequency == 0) {
 800469e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d103      	bne.n	80046ae <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2a>
            high_frequency = sampling_frequency / 2;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        if (low_frequency == 0) {
 80046ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a>
            low_frequency = 300;
 80046b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80046ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        stack_frames_info_t stack_frame_info = { 0 };
 80046be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	605a      	str	r2, [r3, #4]
 80046c8:	609a      	str	r2, [r3, #8]
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	611a      	str	r2, [r3, #16]
 80046ce:	2300      	movs	r3, #0
 80046d0:	653b      	str	r3, [r7, #80]	; 0x50
 80046d2:	2300      	movs	r3, #0
 80046d4:	657b      	str	r3, [r7, #84]	; 0x54
 80046d6:	2300      	movs	r3, #0
 80046d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80046da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046de:	3304      	adds	r3, #4
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fc3b 	bl	8003f5c <_ZNSt6vectorImN2ei7EiAllocImEEEC1Ev>
        stack_frame_info.signal = signal;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ret = processing::stack_frames(
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f4:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80046f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046fc:	2100      	movs	r1, #0
 80046fe:	ed97 1a00 	vldr	s2, [r7]
 8004702:	edd7 0a01 	vldr	s1, [r7, #4]
 8004706:	eeb0 0a67 	vmov.f32	s0, s15
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fcfe 	bl	800310c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt>
 8004710:	66f8      	str	r0, [r7, #108]	; 0x6c
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x98>
            EIDSP_ERR(ret);
 8004718:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800471a:	e138      	b.n	800498e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x30a>
        }

        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
 800471c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f004 fba3 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 8004728:	4602      	mov	r2, r0
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	429a      	cmp	r2, r3
 8004730:	bf14      	ite	ne
 8004732:	2301      	movne	r3, #1
 8004734:	2300      	moveq	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xbc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800473c:	4c99      	ldr	r4, [pc, #612]	; (80049a4 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 800473e:	e126      	b.n	800498e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x30a>
        }

        if (num_filters != out_features->cols) {
 8004740:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xcc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800474c:	4c95      	ldr	r4, [pc, #596]	; (80049a4 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 800474e:	e11e      	b.n	800498e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x30a>
        }

        if (out_energies) {
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d015      	beq.n	8004782 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xfe>
            if (stack_frame_info.frame_ixs.size() != out_energies->rows || out_energies->cols != 1) {
 8004756:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800475a:	3304      	adds	r3, #4
 800475c:	4618      	mov	r0, r3
 800475e:	f004 fb86 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	d103      	bne.n	8004774 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xf0>
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d001      	beq.n	8004778 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xf4>
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xf6>
 8004778:	2300      	movs	r3, #0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xfe>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800477e:	4c89      	ldr	r4, [pc, #548]	; (80049a4 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 8004780:	e105      	b.n	800498e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x30a>
            }
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8004782:	2300      	movs	r3, #0
 8004784:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004786:	e00a      	b.n	800479e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x11a>
            *(out_features->buffer + i) = 0;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8004798:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800479a:	3301      	adds	r3, #1
 800479c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	6892      	ldr	r2, [r2, #8]
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d3eb      	bcc.n	8004788 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x104>
        }

        uint16_t coefficients = fft_length / 2 + 1;
 80047b0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
#else
        EI_DSP_MATRIX(filterbanks, num_filters, coefficients);
 80047be:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 80047c2:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80047c6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80047ca:	2300      	movs	r3, #0
 80047cc:	f7fc fd0c 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 80047d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x156>
 80047d6:	4c74      	ldr	r4, [pc, #464]	; (80049a8 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x324>)
 80047d8:	e0d4      	b.n	8004984 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x300>
#endif
        if (!filterbanks.buffer) {
 80047da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x160>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80047e0:	4c71      	ldr	r4, [pc, #452]	; (80049a8 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x324>)
 80047e2:	e0cf      	b.n	8004984 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x300>
        }

        ret = feature::filterbanks(
 80047e4:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80047e8:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 80047ec:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80047f0:	2301      	movs	r3, #1
 80047f2:	9302      	str	r3, [sp, #8]
 80047f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f7ff f995 	bl	8003b30 <_ZN2ei8speechpy7feature11filterbanksEPNS_9ei_matrixEtimmmb>
 8004806:	66f8      	str	r0, [r7, #108]	; 0x6c
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
 8004808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x18e>
            EIDSP_ERR(ret);
 800480e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8004810:	e0b8      	b.n	8004984 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x300>
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 8004812:	2300      	movs	r3, #0
 8004814:	67bb      	str	r3, [r7, #120]	; 0x78
 8004816:	e0a1      	b.n	800495c <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2d8>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 8004818:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800481c:	085b      	lsrs	r3, r3, #1
 800481e:	b29b      	uxth	r3, r3
 8004820:	3301      	adds	r3, #1
 8004822:	667b      	str	r3, [r7, #100]	; 0x64

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 8004824:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004828:	2300      	movs	r3, #0
 800482a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800482c:	2101      	movs	r1, #1
 800482e:	f7fc fcdb 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d102      	bne.n	800483e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1ba>
 8004838:	4c5b      	ldr	r4, [pc, #364]	; (80049a8 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x324>)
 800483a:	2500      	movs	r5, #0
 800483c:	e084      	b.n	8004948 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c4>
            if (!power_spectrum_frame.buffer) {
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1c6>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004844:	4c58      	ldr	r4, [pc, #352]	; (80049a8 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x324>)
 8004846:	2500      	movs	r5, #0
 8004848:	e07e      	b.n	8004948 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c4>
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 800484a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800484c:	461a      	mov	r2, r3
 800484e:	f107 001c 	add.w	r0, r7, #28
 8004852:	2300      	movs	r3, #0
 8004854:	2101      	movs	r1, #1
 8004856:	f7fc fcc7 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1e2>
 8004860:	4c51      	ldr	r4, [pc, #324]	; (80049a8 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x324>)
 8004862:	2500      	movs	r5, #0
 8004864:	e066      	b.n	8004934 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2b0>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
 8004866:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800486a:	3304      	adds	r3, #4
 800486c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800486e:	4618      	mov	r0, r3
 8004870:	f004 fb0d 	bl	8008e8e <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>
 8004874:	4603      	mov	r3, r0
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	663b      	str	r3, [r7, #96]	; 0x60
            size_t signal_length = stack_frame_info.frame_length;
 800487a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487c:	677b      	str	r3, [r7, #116]	; 0x74
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 800487e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004882:	441a      	add	r2, r3
 8004884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	429a      	cmp	r2, r3
 800488a:	d908      	bls.n	800489e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21a>
                signal_length = signal_length -
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
 800488c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800488e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004890:	441a      	add	r2, r3
 8004892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004894:	691b      	ldr	r3, [r3, #16]
                signal_length = signal_length -
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800489a:	4413      	add	r3, r2
 800489c:	677b      	str	r3, [r7, #116]	; 0x74
            }

            ret = stack_frame_info.signal->get_data(
 800489e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a0:	4618      	mov	r0, r3
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80048a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80048a8:	f004 fa47 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 80048ac:	66f8      	str	r0, [r7, #108]	; 0x6c
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 80048ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x236>
                EIDSP_ERR(ret);
 80048b4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80048b6:	2500      	movs	r5, #0
 80048b8:	e03c      	b.n	8004934 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2b0>
            }

            ret = numpy::power_spectrum(
 80048ba:	69f8      	ldr	r0, [r7, #28]
                signal_frame.buffer,
                stack_frame_info.frame_length,
 80048bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
            ret = numpy::power_spectrum(
 80048be:	4619      	mov	r1, r3
 80048c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048c2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ca:	f7fd ff4f 	bl	800276c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 80048ce:	66f8      	str	r0, [r7, #108]	; 0x6c
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
 80048d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x258>
                EIDSP_ERR(ret);
 80048d6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80048d8:	2500      	movs	r5, #0
 80048da:	e02b      	b.n	8004934 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2b0>
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fc fd89 	bl	80013f8 <_ZN2ei5numpy3sumEPfj>
 80048e6:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
            if (energy == 0) {
 80048ea:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80048ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80048f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f6:	d101      	bne.n	80048fc <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x278>
                energy = 1e-10;
 80048f8:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x328>)
 80048fa:	673b      	str	r3, [r7, #112]	; 0x70
            }

            if (out_energies) {
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d006      	beq.n	8004910 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x28c>
                out_energies->buffer[ix] = energy;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800490e:	601a      	str	r2, [r3, #0]
            }

            // calculate the out_features directly here
            ret = numpy::dot_by_row(
 8004910:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004914:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	4613      	mov	r3, r2
 800491e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004920:	f7fc fd92 	bl	8001448 <_ZN2ei5numpy10dot_by_rowEiPfmPNS_9ei_matrixES3_>
 8004924:	66f8      	str	r0, [r7, #108]	; 0x6c
                power_spectrum_frame_size,
                &filterbanks,
                out_features
            );

            if (ret != 0) {
 8004926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2ae>
                EIDSP_ERR(ret);
 800492c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800492e:	2500      	movs	r5, #0
 8004930:	e000      	b.n	8004934 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2b0>
            }
        }
 8004932:	2501      	movs	r5, #1
 8004934:	f107 031c 	add.w	r3, r7, #28
 8004938:	4618      	mov	r0, r3
 800493a:	f7fc fc80 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 800493e:	2d01      	cmp	r5, #1
 8004940:	d101      	bne.n	8004946 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c2>
 8004942:	2501      	movs	r5, #1
 8004944:	e000      	b.n	8004948 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c4>
 8004946:	2500      	movs	r5, #0
 8004948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800494c:	4618      	mov	r0, r3
 800494e:	f7fc fc76 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8004952:	2d01      	cmp	r5, #1
 8004954:	d116      	bne.n	8004984 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x300>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 8004956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004958:	3301      	adds	r3, #1
 800495a:	67bb      	str	r3, [r7, #120]	; 0x78
 800495c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004960:	3304      	adds	r3, #4
 8004962:	4618      	mov	r0, r3
 8004964:	f004 fa83 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 8004968:	4602      	mov	r2, r0
 800496a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496c:	4293      	cmp	r3, r2
 800496e:	bf34      	ite	cc
 8004970:	2301      	movcc	r3, #1
 8004972:	2300      	movcs	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	f47f af4e 	bne.w	8004818 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x194>

        numpy::zero_handling(out_features);
 800497c:	6978      	ldr	r0, [r7, #20]
 800497e:	f7fd ff89 	bl	8002894 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>

        return EIDSP_OK;
 8004982:	2400      	movs	r4, #0
    }
 8004984:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004988:	4618      	mov	r0, r3
 800498a:	f7fc fc58 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 800498e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff faef 	bl	8003f76 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
 8004998:	4623      	mov	r3, r4
 800499a:	4618      	mov	r0, r3
 800499c:	3780      	adds	r7, #128	; 0x80
 800499e:	46bd      	mov	sp, r7
 80049a0:	bdb0      	pop	{r4, r5, r7, pc}
 80049a2:	bf00      	nop
 80049a4:	fffffc14 	.word	0xfffffc14
 80049a8:	fffffc16 	.word	0xfffffc16
 80049ac:	2edbe6ff 	.word	0x2edbe6ff

080049b0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt>:
     * @param frame_stride (float): the step between successive frames in seconds.
     *     Default is 0.02s (means no overlap)
     * @param fft_length (int): number of FFT points. Default is 512.
     * @EIDSP_OK if OK
     */
    static int spectrogram(matrix_t *out_features,
 80049b0:	b5b0      	push	{r4, r5, r7, lr}
 80049b2:	b09a      	sub	sp, #104	; 0x68
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	6178      	str	r0, [r7, #20]
 80049b8:	6139      	str	r1, [r7, #16]
 80049ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80049be:	edc7 0a02 	vstr	s1, [r7, #8]
 80049c2:	ed87 1a01 	vstr	s2, [r7, #4]
 80049c6:	4611      	mov	r1, r2
 80049c8:	461a      	mov	r2, r3
 80049ca:	460b      	mov	r3, r1
 80049cc:	807b      	strh	r3, [r7, #2]
 80049ce:	4613      	mov	r3, r2
 80049d0:	803b      	strh	r3, [r7, #0]
        signal_t *signal, float sampling_frequency,
        float frame_length, float frame_stride, uint16_t fft_length,
        uint16_t version
        )
    {
        int ret = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	64bb      	str	r3, [r7, #72]	; 0x48

        stack_frames_info_t stack_frame_info = { 0 };
 80049d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	605a      	str	r2, [r3, #4]
 80049e0:	609a      	str	r2, [r3, #8]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	2300      	movs	r3, #0
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ea:	2300      	movs	r3, #0
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
 80049ee:	2300      	movs	r3, #0
 80049f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80049f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049f6:	3304      	adds	r3, #4
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff faaf 	bl	8003f5c <_ZNSt6vectorImN2ei7EiAllocImEEEC1Ev>
        stack_frame_info.signal = signal;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c

        ret = processing::stack_frames(
 8004a02:	883a      	ldrh	r2, [r7, #0]
 8004a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a08:	2100      	movs	r1, #0
 8004a0a:	ed97 1a01 	vldr	s2, [r7, #4]
 8004a0e:	edd7 0a02 	vldr	s1, [r7, #8]
 8004a12:	ed97 0a03 	vldr	s0, [r7, #12]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe fb78 	bl	800310c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt>
 8004a1c:	64b8      	str	r0, [r7, #72]	; 0x48
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
 8004a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x78>
            EIDSP_ERR(ret);
 8004a24:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8004a26:	e0f1      	b.n	8004c0c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x25c>
        }

        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
 8004a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f004 fa1d 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 8004a34:	4602      	mov	r2, r0
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	bf14      	ite	ne
 8004a3e:	2301      	movne	r3, #1
 8004a40:	2300      	moveq	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x9c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004a48:	4c75      	ldr	r4, [pc, #468]	; (8004c20 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x270>)
 8004a4a:	e0df      	b.n	8004c0c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x25c>
        }

        uint16_t coefficients = fft_length / 2 + 1;
 8004a4c:	887b      	ldrh	r3, [r7, #2]
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3301      	adds	r3, #1
 8004a54:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

        if (coefficients != out_features->cols) {
 8004a58:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0xb8>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004a64:	4c6e      	ldr	r4, [pc, #440]	; (8004c20 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x270>)
 8004a66:	e0d1      	b.n	8004c0c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x25c>
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8004a68:	2300      	movs	r3, #0
 8004a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a6c:	e00a      	b.n	8004a84 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0xd4>
            *(out_features->buffer + i) = 0;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8004a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a80:	3301      	adds	r3, #1
 8004a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	6892      	ldr	r2, [r2, #8]
 8004a8c:	fb02 f303 	mul.w	r3, r2, r3
 8004a90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d3eb      	bcc.n	8004a6e <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0xbe>
        }

        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 8004a96:	2300      	movs	r3, #0
 8004a98:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a9a:	e0a3      	b.n	8004be4 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x234>
            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 8004a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f107 001c 	add.w	r0, r7, #28
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	f7fc fb9e 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x108>
 8004ab2:	4c5c      	ldr	r4, [pc, #368]	; (8004c24 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x274>)
 8004ab4:	2500      	movs	r5, #0
 8004ab6:	e08b      	b.n	8004bd0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x220>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
 8004ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004abc:	3304      	adds	r3, #4
 8004abe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f004 f9e4 	bl	8008e8e <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	643b      	str	r3, [r7, #64]	; 0x40
            size_t signal_length = stack_frame_info.frame_length;
 8004acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ace:	657b      	str	r3, [r7, #84]	; 0x54
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 8004ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad4:	441a      	add	r2, r3
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d908      	bls.n	8004af0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x140>
                signal_length = signal_length -
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
 8004ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae2:	441a      	add	r2, r3
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	691b      	ldr	r3, [r3, #16]
                signal_length = signal_length -
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004aec:	4413      	add	r3, r2
 8004aee:	657b      	str	r3, [r7, #84]	; 0x54
            }

            ret = stack_frame_info.signal->get_data(
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	4618      	mov	r0, r3
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004af8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004afa:	f004 f91e 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8004afe:	64b8      	str	r0, [r7, #72]	; 0x48
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 8004b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x15c>
                EIDSP_ERR(ret);
 8004b06:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8004b08:	2500      	movs	r5, #0
 8004b0a:	e061      	b.n	8004bd0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x220>
            }

            // normalize data (only when version is 3)
            if (version == 3) {
 8004b0c:	883b      	ldrh	r3, [r7, #0]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d142      	bne.n	8004b98 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x1e8>
                // it might be that everything is already normalized here...
                bool all_between_min_1_and_1 = true;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                for (size_t ix = 0; ix < signal_frame.rows * signal_frame.cols; ix++) {
 8004b18:	2300      	movs	r3, #0
 8004b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b1c:	e020      	b.n	8004b60 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x1b0>
                    if (signal_frame.buffer[ix] < -1.0f || signal_frame.buffer[ix] > 1.0f) {
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	edd3 7a00 	vldr	s15, [r3]
 8004b2a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b36:	d40c      	bmi.n	8004b52 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x1a2>
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	edd3 7a00 	vldr	s15, [r3]
 8004b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b50:	dd03      	ble.n	8004b5a <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x1aa>
                        all_between_min_1_and_1 = false;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                        break;
 8004b58:	e009      	b.n	8004b6e <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x1be>
                for (size_t ix = 0; ix < signal_frame.rows * signal_frame.cols; ix++) {
 8004b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d3d7      	bcc.n	8004b1e <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x16e>
                    }
                }

                if (!all_between_min_1_and_1) {
 8004b6e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004b72:	f083 0301 	eor.w	r3, r3, #1
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x1e8>
                    ret = numpy::scale(&signal_frame, 1.0f / 32768.0f);
 8004b7c:	f107 031c 	add.w	r3, r7, #28
 8004b80:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8004c28 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x278>
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fc fe4f 	bl	8001828 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8004b8a:	64b8      	str	r0, [r7, #72]	; 0x48
                    if (ret != 0) {
 8004b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x1e8>
                        EIDSP_ERR(ret);
 8004b92:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8004b94:	2500      	movs	r5, #0
 8004b96:	e01b      	b.n	8004bd0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x220>
                    }
                }
            }

            ret = numpy::power_spectrum(
 8004b98:	69f8      	ldr	r0, [r7, #28]
                signal_frame.buffer,
                stack_frame_info.frame_length,
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
            ret = numpy::power_spectrum(
 8004b9c:	461d      	mov	r5, r3
                out_features->buffer + (ix * coefficients),
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ba6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	009b      	lsls	r3, r3, #2
            ret = numpy::power_spectrum(
 8004bae:	441a      	add	r2, r3
 8004bb0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8004bb4:	887b      	ldrh	r3, [r7, #2]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4629      	mov	r1, r5
 8004bbc:	f7fd fdd6 	bl	800276c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 8004bc0:	64b8      	str	r0, [r7, #72]	; 0x48
                coefficients,
                fft_length
            );

            if (ret != 0) {
 8004bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x21e>
                EIDSP_ERR(ret);
 8004bc8:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8004bca:	2500      	movs	r5, #0
 8004bcc:	e000      	b.n	8004bd0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x220>
            }
        }
 8004bce:	2501      	movs	r5, #1
 8004bd0:	f107 031c 	add.w	r3, r7, #28
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fc fb32 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8004bda:	2d01      	cmp	r5, #1
 8004bdc:	d116      	bne.n	8004c0c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x25c>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 8004bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004be0:	3301      	adds	r3, #1
 8004be2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004be8:	3304      	adds	r3, #4
 8004bea:	4618      	mov	r0, r3
 8004bec:	f004 f93f 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	bf34      	ite	cc
 8004bf8:	2301      	movcc	r3, #1
 8004bfa:	2300      	movcs	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f47f af4c 	bne.w	8004a9c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0xec>

        numpy::zero_handling(out_features);
 8004c04:	6978      	ldr	r0, [r7, #20]
 8004c06:	f7fd fe45 	bl	8002894 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>

        return EIDSP_OK;
 8004c0a:	2400      	movs	r4, #0
    }
 8004c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff f9b0 	bl	8003f76 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
 8004c16:	4623      	mov	r3, r4
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3760      	adds	r7, #96	; 0x60
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c20:	fffffc14 	.word	0xfffffc14
 8004c24:	fffffc16 	.word	0xfffffc16
 8004c28:	38000000 	.word	0x38000000

08004c2c <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_filters
     */
    static matrix_size_t calculate_mfe_buffer_size(
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6178      	str	r0, [r7, #20]
 8004c34:	6139      	str	r1, [r7, #16]
 8004c36:	60fa      	str	r2, [r7, #12]
 8004c38:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004c40:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
 8004c42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c44:	2200      	movs	r2, #0
 8004c46:	edd7 0a01 	vldr	s1, [r7, #4]
 8004c4a:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c4e:	68f9      	ldr	r1, [r7, #12]
 8004c50:	6938      	ldr	r0, [r7, #16]
 8004c52:	f7fe fb71 	bl	8003338 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt>
 8004c56:	61f8      	str	r0, [r7, #28]
            sampling_frequency,
            frame_length,
            frame_stride,
            false,
            version);
        int32_t cols = num_filters;
 8004c58:	887b      	ldrh	r3, [r7, #2]
 8004c5a:	61bb      	str	r3, [r7, #24]

        matrix_size_t size_matrix;
        size_matrix.rows = (uint32_t)rows;
 8004c5c:	69fa      	ldr	r2, [r7, #28]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	601a      	str	r2, [r3, #0]
        size_matrix.cols = (uint32_t)cols;
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	605a      	str	r2, [r3, #4]
        return size_matrix;
 8004c68:	bf00      	nop
    }
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt>:
     *     In Hz, default is samplerate/2
     * @param dc_elimination Whether the first dc component should
     *     be eliminated or not.
     * @returns 0 if OK
     */
    static int mfcc(matrix_t *out_features, signal_t *signal,
 8004c74:	b590      	push	{r4, r7, lr}
 8004c76:	b0a5      	sub	sp, #148	; 0x94
 8004c78:	af06      	add	r7, sp, #24
 8004c7a:	6178      	str	r0, [r7, #20]
 8004c7c:	6139      	str	r1, [r7, #16]
 8004c7e:	60fa      	str	r2, [r7, #12]
 8004c80:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c84:	edc7 0a01 	vstr	s1, [r7, #4]
 8004c88:	70fb      	strb	r3, [r7, #3]
        uint32_t sampling_frequency, float frame_length, float frame_stride,
        uint8_t num_cepstral, uint16_t num_filters, uint16_t fft_length,
        uint32_t low_frequency, uint32_t high_frequency, bool dc_elimination,
        uint16_t version)
    {
        if (out_features->cols != num_cepstral) {
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d001      	beq.n	8004c98 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x24>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004c94:	4c94      	ldr	r4, [pc, #592]	; (8004ee8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x274>)
 8004c96:	e121      	b.n	8004edc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x268>
        }

        matrix_size_t mfe_matrix_size =
            calculate_mfe_buffer_size(
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	6919      	ldr	r1, [r3, #16]
 8004c9c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8004ca0:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8004ca4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	edd7 0a01 	vldr	s1, [r7, #4]
 8004cb0:	ed97 0a02 	vldr	s0, [r7, #8]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	f7ff ffb9 	bl	8004c2c <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>
                frame_length,
                frame_stride,
                num_filters,
                version);

        if (out_features->rows != mfe_matrix_size.rows) {
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x54>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004cc4:	4c88      	ldr	r4, [pc, #544]	; (8004ee8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x274>)
 8004cc6:	e109      	b.n	8004edc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x268>
        }

        int ret = EIDSP_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	66bb      	str	r3, [r7, #104]	; 0x68

        // allocate some memory for the MFE result
        EI_DSP_MATRIX(features_matrix, mfe_matrix_size.rows, mfe_matrix_size.cols);
 8004ccc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cd0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f7fc fa87 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8004cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x70>
 8004ce0:	4c82      	ldr	r4, [pc, #520]	; (8004eec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x278>)
 8004ce2:	e0f6      	b.n	8004ed2 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x25e>
        if (!features_matrix.buffer) {
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x7a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004cea:	4c80      	ldr	r4, [pc, #512]	; (8004eec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x278>)
 8004cec:	e0f1      	b.n	8004ed2 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x25e>
        }

        EI_DSP_MATRIX(energy_matrix, mfe_matrix_size.rows, 1);
 8004cee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cf0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f7fc fa76 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x92>
 8004d02:	4c7a      	ldr	r4, [pc, #488]	; (8004eec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x278>)
 8004d04:	e0e0      	b.n	8004ec8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x254>
        if (!energy_matrix.buffer) {
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x9c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004d0c:	4c77      	ldr	r4, [pc, #476]	; (8004eec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x278>)
 8004d0e:	e0db      	b.n	8004ec8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x254>
        }

        ret = mfe(&features_matrix, &energy_matrix, signal,
 8004d10:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004d14:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004d18:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8004d1c:	9304      	str	r3, [sp, #16]
 8004d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d22:	9303      	str	r3, [sp, #12]
 8004d24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d28:	9302      	str	r3, [sp, #8]
 8004d2a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	edd7 0a01 	vldr	s1, [r7, #4]
 8004d3a:	ed97 0a02 	vldr	s0, [r7, #8]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	f7ff f929 	bl	8003f98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
 8004d46:	66b8      	str	r0, [r7, #104]	; 0x68
            sampling_frequency, frame_length, frame_stride, num_filters, fft_length,
            low_frequency, high_frequency, version);
        if (ret != EIDSP_OK) {
 8004d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0xde>
            EIDSP_ERR(ret);
 8004d4e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8004d50:	e0ba      	b.n	8004ec8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x254>
        }

        // ok... now we need to calculate the MFCC from this...
        // first do log() over all features...
        ret = numpy::log(&features_matrix);
 8004d52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd f940 	bl	8001fdc <_ZN2ei5numpy3logEPNS_9ei_matrixE>
 8004d5c:	66b8      	str	r0, [r7, #104]	; 0x68
        if (ret != EIDSP_OK) {
 8004d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0xf4>
            EIDSP_ERR(ret);
 8004d64:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8004d66:	e0af      	b.n	8004ec8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x254>
        }

        // now do DST type 2
        ret = numpy::dct2(&features_matrix, DCT_NORMALIZATION_ORTHO);
 8004d68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fc fc4c 	bl	800160c <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE>
 8004d74:	66b8      	str	r0, [r7, #104]	; 0x68
        if (ret != EIDSP_OK) {
 8004d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x10c>
            EIDSP_ERR(ret);
 8004d7c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8004d7e:	e0a3      	b.n	8004ec8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x254>
        }

        // replace first cepstral coefficient with log of frame energy for DC elimination
        if (dc_elimination) {
 8004d80:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d075      	beq.n	8004e74 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x200>
            for (size_t row = 0; row < features_matrix.rows; row++) {
 8004d88:	2300      	movs	r3, #0
 8004d8a:	677b      	str	r3, [r7, #116]	; 0x74
 8004d8c:	e06e      	b.n	8004e6c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x1f8>
                features_matrix.buffer[row * features_matrix.cols] = numpy::log(energy_matrix.buffer[row]);
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d9c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004d9e:	fb00 f202 	mul.w	r2, r0, r2
 8004da2:	0092      	lsls	r2, r2, #2
 8004da4:	188c      	adds	r4, r1, r2
 8004da6:	623b      	str	r3, [r7, #32]
        int32_t g = (int32_t) * ((int32_t *)&a);
 8004da8:	f107 0320 	add.w	r3, r7, #32
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	61fb      	str	r3, [r7, #28]
        int32_t e = (g - 0x3f2aaaab) & 0xff800000;
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	4b4f      	ldr	r3, [pc, #316]	; (8004ef0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x27c>)
 8004db4:	4413      	add	r3, r2
 8004db6:	0ddb      	lsrs	r3, r3, #23
 8004db8:	05db      	lsls	r3, r3, #23
 8004dba:	667b      	str	r3, [r7, #100]	; 0x64
        g = g - e;
 8004dbc:	69fa      	ldr	r2, [r7, #28]
 8004dbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	61fb      	str	r3, [r7, #28]
        float m = (float) * ((float *)&g);
 8004dc4:	f107 031c 	add.w	r3, r7, #28
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	663b      	str	r3, [r7, #96]	; 0x60
        float i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 8004dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dd6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004ef4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x280>
 8004dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dde:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        float f = m - 1.0f;
 8004de2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dee:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        float s = f * f;
 8004df2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004df6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004dfa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8004dfe:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8004ef8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x284>
 8004e02:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8004e06:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8004efc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x288>
 8004e0a:	f026 f9f9 	bl	802b200 <fmaf>
 8004e0e:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8004e12:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8004f00 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x28c>
 8004e16:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8004e1a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8004f04 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x290>
 8004e1e:	f026 f9ef 	bl	802b200 <fmaf>
 8004e22:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
        r = fmaf(r, s, t);
 8004e26:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 8004e2a:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8004e2e:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8004e32:	f026 f9e5 	bl	802b200 <fmaf>
 8004e36:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        r = fmaf(r, s, f);
 8004e3a:	ed97 1a16 	vldr	s2, [r7, #88]	; 0x58
 8004e3e:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8004e42:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8004e46:	f026 f9db 	bl	802b200 <fmaf>
 8004e4a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8004e4e:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8004e52:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8004f08 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x294>
 8004e56:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8004e5a:	f026 f9d1 	bl	802b200 <fmaf>
 8004e5e:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        return r;
 8004e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e64:	6023      	str	r3, [r4, #0]
            for (size_t row = 0; row < features_matrix.rows; row++) {
 8004e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e68:	3301      	adds	r3, #1
 8004e6a:	677b      	str	r3, [r7, #116]	; 0x74
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d38c      	bcc.n	8004d8e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x11a>
            }
        }

        // copy to the output...
        for (size_t row = 0; row < features_matrix.rows; row++) {
 8004e74:	2300      	movs	r3, #0
 8004e76:	673b      	str	r3, [r7, #112]	; 0x70
 8004e78:	e021      	b.n	8004ebe <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x24a>
            for(int i = 0; i < num_cepstral; i++) {
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e7e:	e017      	b.n	8004eb0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x23c>
                *(out_features->buffer + (num_cepstral * row) + i) = *(features_matrix.buffer + (features_matrix.cols * row) + i);
 8004e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e84:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004e86:	fb03 f101 	mul.w	r1, r3, r1
 8004e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8c:	440b      	add	r3, r1
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	441a      	add	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	6819      	ldr	r1, [r3, #0]
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004e9a:	fb03 f000 	mul.w	r0, r3, r0
 8004e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea0:	4403      	add	r3, r0
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	601a      	str	r2, [r3, #0]
            for(int i = 0; i < num_cepstral; i++) {
 8004eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eac:	3301      	adds	r3, #1
 8004eae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	dbe3      	blt.n	8004e80 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x20c>
        for (size_t row = 0; row < features_matrix.rows; row++) {
 8004eb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eba:	3301      	adds	r3, #1
 8004ebc:	673b      	str	r3, [r7, #112]	; 0x70
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d3d9      	bcc.n	8004e7a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x206>
            }
        }

        return EIDSP_OK;
 8004ec6:	2400      	movs	r4, #0
    }
 8004ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fc f9b6 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8004ed2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fc f9b1 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8004edc:	4623      	mov	r3, r4
 8004ede:	4618      	mov	r0, r3
 8004ee0:	377c      	adds	r7, #124	; 0x7c
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd90      	pop	{r4, r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	fffffc14 	.word	0xfffffc14
 8004eec:	fffffc16 	.word	0xfffffc16
 8004ef0:	c0d55555 	.word	0xc0d55555
 8004ef4:	34000000 	.word	0x34000000
 8004ef8:	be8ef46d 	.word	0xbe8ef46d
 8004efc:	3e6c6078 	.word	0x3e6c6078
 8004f00:	beff712d 	.word	0xbeff712d
 8004f04:	3ea9e51a 	.word	0x3ea9e51a
 8004f08:	3f317218 	.word	0x3f317218

08004f0c <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfftt>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_cepstral
     */
    static matrix_size_t calculate_mfcc_buffer_size(
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6178      	str	r0, [r7, #20]
 8004f14:	6139      	str	r1, [r7, #16]
 8004f16:	60fa      	str	r2, [r7, #12]
 8004f18:	ed87 0a02 	vstr	s0, [r7, #8]
 8004f1c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004f20:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_cepstral,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
 8004f22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f24:	2200      	movs	r2, #0
 8004f26:	edd7 0a01 	vldr	s1, [r7, #4]
 8004f2a:	ed97 0a02 	vldr	s0, [r7, #8]
 8004f2e:	68f9      	ldr	r1, [r7, #12]
 8004f30:	6938      	ldr	r0, [r7, #16]
 8004f32:	f7fe fa01 	bl	8003338 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt>
 8004f36:	61f8      	str	r0, [r7, #28]
            sampling_frequency,
            frame_length,
            frame_stride,
            false,
            version);
        int32_t cols = num_cepstral;
 8004f38:	887b      	ldrh	r3, [r7, #2]
 8004f3a:	61bb      	str	r3, [r7, #24]

        matrix_size_t size_matrix;
        size_matrix.rows = (uint32_t)rows;
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	601a      	str	r2, [r3, #0]
        size_matrix.cols = (uint32_t)cols;
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	605a      	str	r2, [r3, #4]
        return size_matrix;
 8004f48:	bf00      	nop
    }
 8004f4a:	6978      	ldr	r0, [r7, #20]
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fc f8b9 	bl	80010d4 <_ZNSt14_Function_baseD1Ev>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <_ZN2ei11ei_signal_tC1Ev>:
} DCT_NORMALIZATION_MODE;

/**
 * Sensor signal structure
 */
typedef struct ei_signal_t {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f003 ffae 	bl	8008ed8 <_ZNSt8functionIFijjPfEEC1Ev>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_ZN2ei11ei_signal_tD1Ev>:
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff ffde 	bl	8004f52 <_ZNSt8functionIFijjPfEED1Ev>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <_ZN15SignalWithRangeC1EPN2ei11ei_signal_tEmm>:

using namespace ei;

class SignalWithRange {
public:
    SignalWithRange(signal_t *original_signal, uint32_t range_start, uint32_t range_end):
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _range_start(range_start), _range_end(range_end)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	609a      	str	r2, [r3, #8]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ffd1 	bl	8004f6c <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <_ZZN15SignalWithRange10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _range_end - _range_start;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithRange::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	f000 f82f 	bl	800504e <_ZN15SignalWithRange8get_dataEjjPf>
 8004ff0:	4603      	mov	r3, r0
        };
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <_ZN15SignalWithRange10get_signalEv>:
    signal_t * get_signal() {
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
        if (this->_range_start == 0 && this->_range_end == this->_original_signal->total_length) {
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <_ZN15SignalWithRange10get_signalEv+0x24>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	429a      	cmp	r2, r3
 8005016:	d102      	bne.n	800501e <_ZN15SignalWithRange10get_signalEv+0x24>
            return this->_original_signal;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	e013      	b.n	8005046 <_ZN15SignalWithRange10get_signalEv+0x4c>
        wrapped_signal.total_length = _range_end - _range_start;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	1ad2      	subs	r2, r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	61da      	str	r2, [r3, #28]
        };
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f103 020c 	add.w	r2, r3, #12
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	f107 030c 	add.w	r3, r7, #12
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f003 ff61 	bl	8008f04 <_ZNSt8functionIFijjPfEEaSIZN15SignalWithRange10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>
#endif
        return &wrapped_signal;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	330c      	adds	r3, #12
    }
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <_ZN15SignalWithRange8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	603b      	str	r3, [r7, #0]
        return _original_signal->get_data(offset + _range_start, length, out_ptr);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	18d1      	adds	r1, r2, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	f003 fe64 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8005072:	4603      	mov	r3, r0
    }
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:
    delete handle;
    return ret;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
    return preemphasis->get_data(offset, length, out_ptr);
 8005088:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x24>)
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	68f9      	ldr	r1, [r7, #12]
 8005092:	f7fd fe4b 	bl	8002d2c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
 8005096:	4603      	mov	r3, r0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000670 	.word	0x20000670

080050a4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

__attribute__((unused)) int extract_mfcc_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 80050a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a6:	b0a9      	sub	sp, #164	; 0xa4
 80050a8:	af06      	add	r7, sp, #24
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80050ba:	461d      	mov	r5, r3
 80050bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	6023      	str	r3, [r4, #0]

    if (config.axes != 1) {
 80050cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d001      	beq.n	80050d6 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80050d2:	4c6b      	ldr	r4, [pc, #428]	; (8005280 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1dc>)
 80050d4:	e0ce      	b.n	8005274 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
    }

    if((config.implementation_version == 0) || (config.implementation_version > 4)) {
 80050d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x42>
 80050de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d902      	bls.n	80050ec <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x48>
        EIDSP_ERR(EIDSP_BLOCK_VERSION_INCORRECT);
 80050e6:	f46f 747d 	mvn.w	r4, #1012	; 0x3f4
 80050ea:	e0c3      	b.n	8005274 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
    }

    if (signal->total_length == 0) {
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x54>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 80050f4:	4c63      	ldr	r4, [pc, #396]	; (8005284 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e0>)
 80050f6:	e0bd      	b.n	8005274 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
    }

    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 80050f8:	edd7 7a00 	vldr	s15, [r7]
 80050fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005100:	ee17 3a90 	vmov	r3, s15
 8005104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    // preemphasis class to preprocess the audio...
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof, false);
 8005108:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800510a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800510e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8005112:	2300      	movs	r3, #0
 8005114:	eeb0 0a67 	vmov.f32	s0, s15
 8005118:	68f9      	ldr	r1, [r7, #12]
 800511a:	f7fd fdb9 	bl	8002c90 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
    preemphasis = &pre;
 800511e:	4a5a      	ldr	r2, [pc, #360]	; (8005288 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e4>)
 8005120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005124:	6013      	str	r3, [r2, #0]

    signal_t preemphasized_audio_signal;
 8005126:	f107 0318 	add.w	r3, r7, #24
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff ff1e 	bl	8004f6c <_ZN2ei11ei_signal_tC1Ev>
    preemphasized_audio_signal.total_length = signal->total_length;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
    preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 8005136:	4b55      	ldr	r3, [pc, #340]	; (800528c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e8>)
 8005138:	67fb      	str	r3, [r7, #124]	; 0x7c
 800513a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800513e:	f107 0318 	add.w	r3, r7, #24
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f003 fefc 	bl	8008f42 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>

    // calculate the size of the MFCC matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfcc_buffer_size(
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6919      	ldr	r1, [r3, #16]
 800514e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005152:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.implementation_version);
 8005156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
        speechpy::feature::calculate_mfcc_buffer_size(
 8005158:	b29a      	uxth	r2, r3
 800515a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800515e:	f107 0010 	add.w	r0, r7, #16
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	eef0 0a47 	vmov.f32	s1, s14
 800516a:	eeb0 0a67 	vmov.f32	s0, s15
 800516e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005172:	f7ff fecb 	bl	8004f0c <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfftt>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	fb03 f202 	mul.w	r2, r3, r2
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	6889      	ldr	r1, [r1, #8]
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	429a      	cmp	r2, r3
 800518c:	d911      	bls.n	80051b2 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x10e>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4619      	mov	r1, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	461a      	mov	r2, r3
 800519a:	483d      	ldr	r0, [pc, #244]	; (8005290 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ec>)
 800519c:	f003 fcfa 	bl	8008b94 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4619      	mov	r1, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	461a      	mov	r2, r3
 80051a8:	483a      	ldr	r0, [pc, #232]	; (8005294 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f0>)
 80051aa:	f003 fcf3 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80051ae:	4c34      	ldr	r4, [pc, #208]	; (8005280 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1dc>)
 80051b0:	e056      	b.n	8005260 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>
    }

    output_matrix->rows = out_matrix_size.rows;
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	609a      	str	r2, [r3, #8]

    // and run the MFCC extraction
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 80051be:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80051c2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 80051c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 80051c8:	b2dc      	uxtb	r4, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 80051ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 80051cc:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 80051ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 80051d0:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency, true, config.implementation_version);
 80051d2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 80051d4:	460d      	mov	r5, r1
        config.low_frequency, config.high_frequency, true, config.implementation_version);
 80051d6:	6f39      	ldr	r1, [r7, #112]	; 0x70
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 80051d8:	460e      	mov	r6, r1
 80051da:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80051de:	f107 0018 	add.w	r0, r7, #24
 80051e2:	9105      	str	r1, [sp, #20]
 80051e4:	2101      	movs	r1, #1
 80051e6:	9104      	str	r1, [sp, #16]
 80051e8:	9603      	str	r6, [sp, #12]
 80051ea:	9502      	str	r5, [sp, #8]
 80051ec:	9201      	str	r2, [sp, #4]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	4623      	mov	r3, r4
 80051f2:	eef0 0a47 	vmov.f32	s1, s14
 80051f6:	eeb0 0a67 	vmov.f32	s0, s15
 80051fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80051fe:	4601      	mov	r1, r0
 8005200:	68b8      	ldr	r0, [r7, #8]
 8005202:	f7ff fd37 	bl	8004c74 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt>
 8005206:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (ret != EIDSP_OK) {
 800520a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x17e>
        ei_printf("ERR: MFCC failed (%d)\n", ret);
 8005212:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005216:	4820      	ldr	r0, [pc, #128]	; (8005298 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>)
 8005218:	f003 fcbc 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 800521c:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8005220:	e01e      	b.n	8005260 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>
    }

    // cepstral mean and variance normalization
    ret = speechpy::processing::cmvnw(output_matrix, config.win_size, true, false);
 8005222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005224:	b299      	uxth	r1, r3
 8005226:	2300      	movs	r3, #0
 8005228:	2201      	movs	r2, #1
 800522a:	68b8      	ldr	r0, [r7, #8]
 800522c:	f7fe f920 	bl	8003470 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
 8005230:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (ret != EIDSP_OK) {
 8005234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
 800523c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005240:	4816      	ldr	r0, [pc, #88]	; (800529c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f8>)
 8005242:	f003 fca7 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8005246:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800524a:	e009      	b.n	8005260 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	fb03 f202 	mul.w	r2, r3, r2
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2201      	movs	r2, #1
 800525c:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 800525e:	2400      	movs	r4, #0
}
 8005260:	f107 0318 	add.w	r3, r7, #24
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff fe8e 	bl	8004f86 <_ZN2ei11ei_signal_tD1Ev>
 800526a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800526e:	4618      	mov	r0, r3
 8005270:	f7fd fe2e 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8005274:	4623      	mov	r3, r4
 8005276:	4618      	mov	r0, r3
 8005278:	378c      	adds	r7, #140	; 0x8c
 800527a:	46bd      	mov	sp, r7
 800527c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800527e:	bf00      	nop
 8005280:	fffffc14 	.word	0xfffffc14
 8005284:	fffffc10 	.word	0xfffffc10
 8005288:	20000670 	.word	0x20000670
 800528c:	0800507d 	.word	0x0800507d
 8005290:	08030a98 	.word	0x08030a98
 8005294:	08030aac 	.word	0x08030aac
 8005298:	08030ac8 	.word	0x08030ac8
 800529c:	08030ae0 	.word	0x08030ae0

080052a0 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi>:


__attribute__((unused)) static int extract_mfcc_run_slice(signal_t *signal, matrix_t *output_matrix, ei_dsp_config_mfcc_t *config, const float sampling_frequency, matrix_size_t *matrix_size_out, int implementation_version) {
 80052a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a2:	b097      	sub	sp, #92	; 0x5c
 80052a4:	af06      	add	r7, sp, #24
 80052a6:	6178      	str	r0, [r7, #20]
 80052a8:	6139      	str	r1, [r7, #16]
 80052aa:	60fa      	str	r2, [r7, #12]
 80052ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80052b0:	607b      	str	r3, [r7, #4]
    uint32_t frequency = (uint32_t)sampling_frequency;
 80052b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80052b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ba:	ee17 3a90 	vmov	r3, s15
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c

    int x;

    // calculate the size of the spectrogram matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfcc_buffer_size(
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	6919      	ldr	r1, [r3, #16]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	ed93 7a05 	vldr	s14, [r3, #20]
            signal->total_length, frequency, config->frame_length, config->frame_stride, config->num_cepstral,
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	68db      	ldr	r3, [r3, #12]
        speechpy::feature::calculate_mfcc_buffer_size(
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	eef0 0a47 	vmov.f32	s1, s14
 80052e6:	eeb0 0a67 	vmov.f32	s0, s15
 80052ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052ec:	f7ff fe0e 	bl	8004f0c <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfftt>
            implementation_version);

    // we roll the output matrix back so we have room at the end...
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	6892      	ldr	r2, [r2, #8]
 80052fc:	fb02 f103 	mul.w	r1, r2, r3
        -(out_matrix_size.rows * out_matrix_size.cols));
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005304:	fb02 f303 	mul.w	r3, r2, r3
 8005308:	425b      	negs	r3, r3
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
 800530a:	461a      	mov	r2, r3
 800530c:	f7fc f82a 	bl	8001364 <_ZN2ei5numpy4rollEPfji>
 8005310:	63b8      	str	r0, [r7, #56]	; 0x38
    if (x != EIDSP_OK) {
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x7c>
        EIDSP_ERR(x);
 8005318:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800531a:	e05c      	b.n	80053d6 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x136>
    }

    // slice in the output matrix to write to
    // the offset in the classification matrix here is always at the end
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	6892      	ldr	r2, [r2, #8]
 8005324:	fb03 f202 	mul.w	r2, r3, r2
        (out_matrix_size.rows * out_matrix_size.cols);
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800532c:	fb01 f303 	mul.w	r3, r1, r3
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	637b      	str	r3, [r7, #52]	; 0x34

    matrix_t output_matrix_slice(out_matrix_size.rows, out_matrix_size.cols, output_matrix->buffer + output_matrix_offset);
 8005334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005336:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	f107 001c 	add.w	r0, r7, #28
 8005346:	4622      	mov	r2, r4
 8005348:	f7fb ff4e 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>

    // and run the MFCC extraction
    x = speechpy::feature::mfcc(&output_matrix_slice, signal,
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	ed93 7a05 	vldr	s14, [r3, #20]
        frequency, config->frame_length, config->frame_stride, config->num_cepstral, config->num_filters, config->fft_length,
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68db      	ldr	r3, [r3, #12]
    x = speechpy::feature::mfcc(&output_matrix_slice, signal,
 800535c:	b2dc      	uxtb	r4, r3
        frequency, config->frame_length, config->frame_stride, config->num_cepstral, config->num_filters, config->fft_length,
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	699b      	ldr	r3, [r3, #24]
    x = speechpy::feature::mfcc(&output_matrix_slice, signal,
 8005362:	b29b      	uxth	r3, r3
        frequency, config->frame_length, config->frame_stride, config->num_cepstral, config->num_filters, config->fft_length,
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	69d2      	ldr	r2, [r2, #28]
    x = speechpy::feature::mfcc(&output_matrix_slice, signal,
 8005368:	b292      	uxth	r2, r2
        config->low_frequency, config->high_frequency, true, implementation_version);
 800536a:	68f9      	ldr	r1, [r7, #12]
 800536c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    x = speechpy::feature::mfcc(&output_matrix_slice, signal,
 800536e:	460d      	mov	r5, r1
        config->low_frequency, config->high_frequency, true, implementation_version);
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	6a89      	ldr	r1, [r1, #40]	; 0x28
    x = speechpy::feature::mfcc(&output_matrix_slice, signal,
 8005374:	460e      	mov	r6, r1
 8005376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005378:	b289      	uxth	r1, r1
 800537a:	f107 001c 	add.w	r0, r7, #28
 800537e:	9105      	str	r1, [sp, #20]
 8005380:	2101      	movs	r1, #1
 8005382:	9104      	str	r1, [sp, #16]
 8005384:	9603      	str	r6, [sp, #12]
 8005386:	9502      	str	r5, [sp, #8]
 8005388:	9201      	str	r2, [sp, #4]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	4623      	mov	r3, r4
 800538e:	eef0 0a47 	vmov.f32	s1, s14
 8005392:	eeb0 0a67 	vmov.f32	s0, s15
 8005396:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005398:	6979      	ldr	r1, [r7, #20]
 800539a:	f7ff fc6b 	bl	8004c74 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt>
 800539e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (x != EIDSP_OK) {
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x112>
        ei_printf("ERR: MFCC failed (%d)\n", x);
 80053a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053a8:	480d      	ldr	r0, [pc, #52]	; (80053e0 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x140>)
 80053aa:	f003 fbf3 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(x);
 80053ae:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80053b0:	e00c      	b.n	80053cc <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x12c>
    }

    matrix_size_out->rows += out_matrix_size.rows;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	601a      	str	r2, [r3, #0]
    if (out_matrix_size.cols > 0) {
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x12a>
        matrix_size_out->cols = out_matrix_size.cols;
 80053c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	605a      	str	r2, [r3, #4]
    }

    return EIDSP_OK;
 80053ca:	2400      	movs	r4, #0
}
 80053cc:	f107 031c 	add.w	r3, r7, #28
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fb ff34 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 80053d6:	4623      	mov	r3, r4
 80053d8:	4618      	mov	r0, r3
 80053da:	3744      	adds	r7, #68	; 0x44
 80053dc:	46bd      	mov	sp, r7
 80053de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053e0:	08030ac8 	.word	0x08030ac8

080053e4 <_ZN15SignalWithRangeD1Ev>:
class SignalWithRange {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	330c      	adds	r3, #12
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff fdc8 	bl	8004f86 <_ZN2ei11ei_signal_tD1Ev>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE>:

__attribute__((unused)) int extract_mfcc_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency, matrix_size_t *matrix_size_out) {
 8005400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005402:	b0bb      	sub	sp, #236	; 0xec
 8005404:	af02      	add	r7, sp, #8
 8005406:	6178      	str	r0, [r7, #20]
 8005408:	6139      	str	r1, [r7, #16]
 800540a:	60fa      	str	r2, [r7, #12]
 800540c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005410:	607b      	str	r3, [r7, #4]
#if defined(__cplusplus) && EI_C_LINKAGE == 1
    ei_printf("ERR: Continuous audio is not supported when EI_C_LINKAGE is defined\n");
    EIDSP_ERR(EIDSP_NOT_SUPPORTED);
#else

    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8005418:	461d      	mov	r5, r3
 800541a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800541c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800541e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	6023      	str	r3, [r4, #0]

    if (config.axes != 1) {
 800542a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800542e:	2b01      	cmp	r3, #1
 8005430:	d001      	beq.n	8005436 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x36>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005432:	4eb7      	ldr	r6, [pc, #732]	; (8005710 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 8005434:	e217      	b.n	8005866 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x466>
    }

    if((config.implementation_version == 0) || (config.implementation_version > 4)) {
 8005436:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x46>
 800543e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8005442:	2b04      	cmp	r3, #4
 8005444:	d902      	bls.n	800544c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4c>
        EIDSP_ERR(EIDSP_BLOCK_VERSION_INCORRECT);
 8005446:	f46f 767d 	mvn.w	r6, #1012	; 0x3f4
 800544a:	e20c      	b.n	8005866 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x466>
    }

    if (signal->total_length == 0) {
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x58>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8005454:	4eaf      	ldr	r6, [pc, #700]	; (8005714 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x314>)
 8005456:	e206      	b.n	8005866 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x466>
    }

    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 8005458:	edd7 7a02 	vldr	s15, [r7, #8]
 800545c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005460:	ee17 3a90 	vmov	r3, s15
 8005464:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    // preemphasis class to preprocess the audio...
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof, false);
 8005468:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800546c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005470:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8005474:	2300      	movs	r3, #0
 8005476:	eeb0 0a67 	vmov.f32	s0, s15
 800547a:	6979      	ldr	r1, [r7, #20]
 800547c:	f7fd fc08 	bl	8002c90 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
    preemphasis = &pre;
 8005480:	4aa5      	ldr	r2, [pc, #660]	; (8005718 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 8005482:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005486:	6013      	str	r3, [r2, #0]

    signal_t preemphasized_audio_signal;
 8005488:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fd6d 	bl	8004f6c <_ZN2ei11ei_signal_tC1Ev>
    preemphasized_audio_signal.total_length = signal->total_length;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	65fb      	str	r3, [r7, #92]	; 0x5c
    preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 8005498:	4ba0      	ldr	r3, [pc, #640]	; (800571c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x31c>)
 800549a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800549e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80054a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f003 fd4a 	bl	8008f42 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>

    // Go from the time (e.g. 0.25 seconds to number of frames based on freq)
    const size_t frame_length_values = frequency * config.frame_length;
 80054ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054ba:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80054be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054c6:	ee17 3a90 	vmov	r3, s15
 80054ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    const size_t frame_stride_values = frequency * config.frame_stride;
 80054ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054da:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80054de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e6:	ee17 3a90 	vmov	r3, s15
 80054ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    const int frame_overlap_values = static_cast<int>(frame_length_values) - static_cast<int>(frame_stride_values);
 80054ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    if (frame_overlap_values < 0) {
 80054fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005500:	2b00      	cmp	r3, #0
 8005502:	da16      	bge.n	8005532 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x132>
        ei_printf("ERR: frame_length (");
 8005504:	4886      	ldr	r0, [pc, #536]	; (8005720 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x320>)
 8005506:	f003 fb45 	bl	8008b94 <_Z9ei_printfPKcz>
        ei_printf_float(config.frame_length);
 800550a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800550e:	eeb0 0a67 	vmov.f32	s0, s15
 8005512:	f01f fead 	bl	8025270 <_Z15ei_printf_floatf>
        ei_printf(") cannot be lower than frame_stride (");
 8005516:	4883      	ldr	r0, [pc, #524]	; (8005724 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x324>)
 8005518:	f003 fb3c 	bl	8008b94 <_Z9ei_printfPKcz>
        ei_printf_float(config.frame_stride);
 800551c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005520:	eeb0 0a67 	vmov.f32	s0, s15
 8005524:	f01f fea4 	bl	8025270 <_Z15ei_printf_floatf>
        ei_printf(") for continuous classification\n");
 8005528:	487f      	ldr	r0, [pc, #508]	; (8005728 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x328>)
 800552a:	f003 fb33 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800552e:	4e79      	ldr	r6, [pc, #484]	; (8005714 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x314>)
 8005530:	e18f      	b.n	8005852 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x452>
    }

    int x;

    // have current frame, but wrong size? then free
    if (ei_dsp_cont_current_frame && ei_dsp_cont_current_frame_size != frame_length_values) {
 8005532:	4b7e      	ldr	r3, [pc, #504]	; (800572c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x156>
 800553a:	4b7d      	ldr	r3, [pc, #500]	; (8005730 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x330>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005542:	429a      	cmp	r2, r3
 8005544:	d007      	beq.n	8005556 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x156>
        ei_free(ei_dsp_cont_current_frame);
 8005546:	4b79      	ldr	r3, [pc, #484]	; (800572c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f01f ffae 	bl	80254ac <_Z7ei_freePv>
        ei_dsp_cont_current_frame = nullptr;
 8005550:	4b76      	ldr	r3, [pc, #472]	; (800572c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
    }

    int implementation_version = config.implementation_version;
 8005556:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800555a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    // this is the offset in the signal from which we'll work
    size_t offset_in_signal = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    if (!ei_dsp_cont_current_frame) {
 8005564:	4b71      	ldr	r3, [pc, #452]	; (800572c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d116      	bne.n	800559a <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x19a>
        ei_dsp_cont_current_frame = (float*)ei_calloc(frame_length_values * sizeof(float), 1);
 800556c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	2101      	movs	r1, #1
 8005574:	4618      	mov	r0, r3
 8005576:	f01f ff8b 	bl	8025490 <_Z9ei_callocjj>
 800557a:	4603      	mov	r3, r0
 800557c:	4a6b      	ldr	r2, [pc, #428]	; (800572c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 800557e:	6013      	str	r3, [r2, #0]
        if (!ei_dsp_cont_current_frame) {
 8005580:	4b6a      	ldr	r3, [pc, #424]	; (800572c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x18c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8005588:	4e6a      	ldr	r6, [pc, #424]	; (8005734 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x334>)
 800558a:	e162      	b.n	8005852 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x452>
        }
        ei_dsp_cont_current_frame_size = frame_length_values;
 800558c:	4a68      	ldr	r2, [pc, #416]	; (8005730 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x330>)
 800558e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005592:	6013      	str	r3, [r2, #0]
        ei_dsp_cont_current_frame_ix = 0;
 8005594:	4b68      	ldr	r3, [pc, #416]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
    }


    if ((frame_length_values) > preemphasized_audio_signal.total_length  + ei_dsp_cont_current_frame_ix) {
 800559a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800559c:	4a66      	ldr	r2, [pc, #408]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	4413      	add	r3, r2
 80055a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d90c      	bls.n	80055c4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1c4>
        ei_printf("ERR: frame_length (%d) cannot be larger than signal's total length (%d) for continuous classification\n",
 80055aa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
            (int)frame_length_values, (int)preemphasized_audio_signal.total_length  + ei_dsp_cont_current_frame_ix);
 80055ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055b0:	461a      	mov	r2, r3
        ei_printf("ERR: frame_length (%d) cannot be larger than signal's total length (%d) for continuous classification\n",
 80055b2:	4b61      	ldr	r3, [pc, #388]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4413      	add	r3, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	4860      	ldr	r0, [pc, #384]	; (800573c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x33c>)
 80055bc:	f003 faea 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 80055c0:	4e54      	ldr	r6, [pc, #336]	; (8005714 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x314>)
 80055c2:	e146      	b.n	8005852 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x452>
    }

    matrix_size_out->rows = 0;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
    matrix_size_out->cols = 0;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	605a      	str	r2, [r3, #4]

    // for continuous use v2 stack frame calculations
    if (implementation_version == 1) {
 80055d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d102      	bne.n	80055de <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1de>
        implementation_version = 2;
 80055d8:	2302      	movs	r3, #2
 80055da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    }

    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
 80055de:	4b56      	ldr	r3, [pc, #344]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a53      	ldr	r2, [pc, #332]	; (8005730 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x330>)
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	4293      	cmp	r3, r2
 80055e8:	dd73      	ble.n	80056d2 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2d2>
        ei_printf("ERR: ei_dsp_cont_current_frame_ix is larger than frame size (ix=%d size=%d)\n",
 80055ea:	4b53      	ldr	r3, [pc, #332]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a50      	ldr	r2, [pc, #320]	; (8005730 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x330>)
 80055f0:	6812      	ldr	r2, [r2, #0]
 80055f2:	4619      	mov	r1, r3
 80055f4:	4852      	ldr	r0, [pc, #328]	; (8005740 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x340>)
 80055f6:	f003 facd 	bl	8008b94 <_Z9ei_printfPKcz>
            ei_dsp_cont_current_frame_ix, (int)ei_dsp_cont_current_frame_size);
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 80055fa:	4e46      	ldr	r6, [pc, #280]	; (8005714 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x314>)
 80055fc:	e129      	b.n	8005852 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x452>

    // if we still have some code from previous run
    while (ei_dsp_cont_current_frame_ix > 0) {
        // then from the current frame we need to read `frame_length_values - ei_dsp_cont_current_frame_ix`
        // starting at offset 0
        x = preemphasized_audio_signal.get_data(0, frame_length_values - ei_dsp_cont_current_frame_ix, ei_dsp_cont_current_frame + ei_dsp_cont_current_frame_ix);
 80055fe:	4b4e      	ldr	r3, [pc, #312]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005608:	1a99      	subs	r1, r3, r2
 800560a:	4b48      	ldr	r3, [pc, #288]	; (800572c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b4a      	ldr	r3, [pc, #296]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800561a:	460a      	mov	r2, r1
 800561c:	2100      	movs	r1, #0
 800561e:	f003 fb8c 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8005622:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
        if (x != EIDSP_OK) {
 8005626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x234>
            EIDSP_ERR(x);
 800562e:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 8005632:	e10d      	b.n	8005850 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x450>
        }

        // now ei_dsp_cont_current_frame is complete
        signal_t frame_signal;
 8005634:	f107 0318 	add.w	r3, r7, #24
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fc97 	bl	8004f6c <_ZN2ei11ei_signal_tC1Ev>
        x = numpy::signal_from_buffer(ei_dsp_cont_current_frame, frame_length_values, &frame_signal);
 800563e:	4b3b      	ldr	r3, [pc, #236]	; (800572c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f107 0218 	add.w	r2, r7, #24
 8005646:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800564a:	4618      	mov	r0, r3
 800564c:	f7fc fcae 	bl	8001fac <_ZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tE>
 8005650:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
        if (x != EIDSP_OK) {
 8005654:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x264>
            EIDSP_ERR(x);
 800565c:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 8005660:	2400      	movs	r4, #0
 8005662:	e02e      	b.n	80056c2 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2c2>
        }

        x = extract_mfcc_run_slice(&frame_signal, output_matrix, &config, sampling_frequency, matrix_size_out, implementation_version);
 8005664:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005668:	f107 0018 	add.w	r0, r7, #24
 800566c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	ed97 0a02 	vldr	s0, [r7, #8]
 8005678:	6939      	ldr	r1, [r7, #16]
 800567a:	f7ff fe11 	bl	80052a0 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi>
 800567e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
        if (x != EIDSP_OK) {
 8005682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x292>
            EIDSP_ERR(x);
 800568a:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 800568e:	2400      	movs	r4, #0
 8005690:	e017      	b.n	80056c2 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2c2>
        }

        // if there's overlap between frames we roll through
        if (frame_stride_values > 0) {
 8005692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2ae>
            numpy::roll(ei_dsp_cont_current_frame, frame_length_values, -frame_stride_values);
 800569a:	4b24      	ldr	r3, [pc, #144]	; (800572c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056a2:	425b      	negs	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80056aa:	f7fb fe5b 	bl	8001364 <_ZN2ei5numpy4rollEPfji>
        }

        ei_dsp_cont_current_frame_ix -= frame_stride_values;
 80056ae:	4b22      	ldr	r3, [pc, #136]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 80056be:	601a      	str	r2, [r3, #0]
    }
 80056c0:	2401      	movs	r4, #1
 80056c2:	f107 0318 	add.w	r3, r7, #24
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fc5d 	bl	8004f86 <_ZN2ei11ei_signal_tD1Ev>
 80056cc:	2c01      	cmp	r4, #1
 80056ce:	f040 80bf 	bne.w	8005850 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x450>
    while (ei_dsp_cont_current_frame_ix > 0) {
 80056d2:	4b19      	ldr	r3, [pc, #100]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	dc91      	bgt.n	80055fe <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1fe>

    if (ei_dsp_cont_current_frame_ix < 0) {
 80056da:	4b17      	ldr	r3, [pc, #92]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da07      	bge.n	80056f2 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f2>
        offset_in_signal = -ei_dsp_cont_current_frame_ix;
 80056e2:	4b15      	ldr	r3, [pc, #84]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	425b      	negs	r3, r3
 80056e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        ei_dsp_cont_current_frame_ix = 0;
 80056ec:	4b12      	ldr	r3, [pc, #72]	; (8005738 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
    }

    if (offset_in_signal >= signal->total_length) {
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d322      	bcc.n	8005744 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x344>
        offset_in_signal -= signal->total_length;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        return EIDSP_OK;
 800570c:	2600      	movs	r6, #0
 800570e:	e0a0      	b.n	8005852 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x452>
 8005710:	fffffc14 	.word	0xfffffc14
 8005714:	fffffc10 	.word	0xfffffc10
 8005718:	20000670 	.word	0x20000670
 800571c:	0800507d 	.word	0x0800507d
 8005720:	08030af8 	.word	0x08030af8
 8005724:	08030b0c 	.word	0x08030b0c
 8005728:	08030b34 	.word	0x08030b34
 800572c:	20000664 	.word	0x20000664
 8005730:	20000668 	.word	0x20000668
 8005734:	fffffc16 	.word	0xfffffc16
 8005738:	2000066c 	.word	0x2000066c
 800573c:	08030b58 	.word	0x08030b58
 8005740:	08030bc0 	.word	0x08030bc0
    }

    // now... we need to discard part of the signal...
    SignalWithRange signal_with_range(&preemphasized_audio_signal, offset_in_signal, signal->total_length);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800574c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8005750:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005754:	f7ff fc24 	bl	8004fa0 <_ZN15SignalWithRangeC1EPN2ei11ei_signal_tEmm>

    signal_t *range_signal = signal_with_range.get_signal();
 8005758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff fc4c 	bl	8004ffa <_ZN15SignalWithRange10get_signalEv>
 8005762:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    size_t range_signal_orig_length = range_signal->total_length;
 8005766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    // then we'll just go through normal processing of the signal:
    x = extract_mfcc_run_slice(range_signal, output_matrix, &config, sampling_frequency, matrix_size_out, implementation_version);
 8005770:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	ed97 0a02 	vldr	s0, [r7, #8]
 8005780:	6939      	ldr	r1, [r7, #16]
 8005782:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005786:	f7ff fd8b 	bl	80052a0 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi>
 800578a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
    if (x != EIDSP_OK) {
 800578e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x39c>
        EIDSP_ERR(x);
 8005796:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 800579a:	e053      	b.n	8005844 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x444>
    }

    // Make sure v1 model are reset to the original length;
    range_signal->total_length = range_signal_orig_length;
 800579c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057a4:	611a      	str	r2, [r3, #16]

    // update offset
    int length_of_signal_used = speechpy::processing::calculate_signal_used(range_signal->total_length, sampling_frequency,
 80057a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057aa:	6918      	ldr	r0, [r3, #16]
 80057ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80057b0:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80057b4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80057b8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80057bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2200      	movs	r2, #0
 80057c4:	eef0 0a47 	vmov.f32	s1, s14
 80057c8:	eeb0 0a67 	vmov.f32	s0, s15
 80057cc:	ee16 1a90 	vmov	r1, s13
 80057d0:	f7fd fbda 	bl	8002f88 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt>
 80057d4:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        config.frame_length, config.frame_stride, false, implementation_version);
    offset_in_signal += length_of_signal_used;
 80057d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057dc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80057e0:	4413      	add	r3, r2
 80057e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    // see what's left?
    int bytes_left_end_of_frame = signal->total_length - offset_in_signal;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    bytes_left_end_of_frame += frame_overlap_values;
 80057f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057fc:	4413      	add	r3, r2
 80057fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    if (bytes_left_end_of_frame > 0) {
 8005802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005806:	2b00      	cmp	r3, #0
 8005808:	dd14      	ble.n	8005834 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x434>
        // then read that into the ei_dsp_cont_current_frame buffer
        x = preemphasized_audio_signal.get_data(
            (preemphasized_audio_signal.total_length - bytes_left_end_of_frame),
 800580a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800580c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
        x = preemphasized_audio_signal.get_data(
 8005810:	1ad1      	subs	r1, r2, r3
 8005812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005816:	4b16      	ldr	r3, [pc, #88]	; (8005870 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x470>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800581e:	f003 fa8c 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8005822:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            bytes_left_end_of_frame,
            ei_dsp_cont_current_frame);
        if (x != EIDSP_OK) {
 8005826:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x434>
            EIDSP_ERR(x);
 800582e:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 8005832:	e007      	b.n	8005844 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x444>
        }
    }

    ei_dsp_cont_current_frame_ix = bytes_left_end_of_frame;
 8005834:	4a0f      	ldr	r2, [pc, #60]	; (8005874 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x474>)
 8005836:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800583a:	6013      	str	r3, [r2, #0]

    preemphasis = nullptr;
 800583c:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x478>)
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]

    return EIDSP_OK;
 8005842:	2600      	movs	r6, #0
#endif
}
 8005844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fdcb 	bl	80053e4 <_ZN15SignalWithRangeD1Ev>
 800584e:	e000      	b.n	8005852 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x452>
            EIDSP_ERR(x);
 8005850:	bf00      	nop
}
 8005852:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fb95 	bl	8004f86 <_ZN2ei11ei_signal_tD1Ev>
 800585c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005860:	4618      	mov	r0, r3
 8005862:	f7fd fb35 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8005866:	4633      	mov	r3, r6
 8005868:	4618      	mov	r0, r3
 800586a:	37e4      	adds	r7, #228	; 0xe4
 800586c:	46bd      	mov	sp, r7
 800586e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005870:	20000664 	.word	0x20000664
 8005874:	2000066c 	.word	0x2000066c
 8005878:	20000670 	.word	0x20000670

0800587c <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

__attribute__((unused)) int extract_spectrogram_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 800587c:	b5b0      	push	{r4, r5, r7, lr}
 800587e:	b092      	sub	sp, #72	; 0x48
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectrogram_t config = *((ei_dsp_config_spectrogram_t*)config_ptr);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f107 0418 	add.w	r4, r7, #24
 8005892:	461d      	mov	r5, r3
 8005894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005898:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800589c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (config.axes != 1) {
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d001      	beq.n	80058aa <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2e>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80058a6:	4b4b      	ldr	r3, [pc, #300]	; (80059d4 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x158>)
 80058a8:	e08f      	b.n	80059ca <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
    }

    if (signal->total_length == 0) {
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 80058b2:	4b49      	ldr	r3, [pc, #292]	; (80059d8 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x15c>)
 80058b4:	e089      	b.n	80059ca <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
    }

    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 80058b6:	edd7 7a00 	vldr	s15, [r7]
 80058ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058be:	ee17 3a90 	vmov	r3, s15
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c

    // calculate the size of the MFE matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfe_buffer_size(
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6919      	ldr	r1, [r3, #16]
 80058c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80058cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.fft_length / 2 + 1,
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	0fda      	lsrs	r2, r3, #31
 80058d4:	4413      	add	r3, r2
 80058d6:	105b      	asrs	r3, r3, #1
        speechpy::feature::calculate_mfe_buffer_size(
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3301      	adds	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	8bbb      	ldrh	r3, [r7, #28]
 80058e0:	f107 0010 	add.w	r0, r7, #16
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	4613      	mov	r3, r2
 80058e8:	eef0 0a47 	vmov.f32	s1, s14
 80058ec:	eeb0 0a67 	vmov.f32	s0, s15
 80058f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058f2:	f7ff f99b 	bl	8004c2c <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>
            config.implementation_version);
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	fb03 f202 	mul.w	r2, r3, r2
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	6889      	ldr	r1, [r1, #8]
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	429a      	cmp	r2, r3
 800590c:	d911      	bls.n	8005932 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb6>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4619      	mov	r1, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	461a      	mov	r2, r3
 800591a:	4830      	ldr	r0, [pc, #192]	; (80059dc <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x160>)
 800591c:	f003 f93a 	bl	8008b94 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4619      	mov	r1, r3
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	461a      	mov	r2, r3
 8005928:	482d      	ldr	r0, [pc, #180]	; (80059e0 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x164>)
 800592a:	f003 f933 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800592e:	4b29      	ldr	r3, [pc, #164]	; (80059d4 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x158>)
 8005930:	e04b      	b.n	80059ca <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
    }

    output_matrix->rows = out_matrix_size.rows;
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	609a      	str	r2, [r3, #8]

    int ret = speechpy::feature::spectrogram(output_matrix, signal,
 800593e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005942:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
        sampling_frequency, config.frame_length, config.frame_stride, config.fft_length, config.implementation_version);
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int ret = speechpy::feature::spectrogram(output_matrix, signal,
 8005948:	b29a      	uxth	r2, r3
 800594a:	8bbb      	ldrh	r3, [r7, #28]
 800594c:	eeb0 1a47 	vmov.f32	s2, s14
 8005950:	eef0 0a67 	vmov.f32	s1, s15
 8005954:	ed97 0a00 	vldr	s0, [r7]
 8005958:	68f9      	ldr	r1, [r7, #12]
 800595a:	68b8      	ldr	r0, [r7, #8]
 800595c:	f7ff f828 	bl	80049b0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt>
 8005960:	63b8      	str	r0, [r7, #56]	; 0x38
    if (ret != EIDSP_OK) {
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf8>
        ei_printf("ERR: Spectrogram failed (%d)\n", ret);
 8005968:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800596a:	481e      	ldr	r0, [pc, #120]	; (80059e4 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x168>)
 800596c:	f003 f912 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	e02a      	b.n	80059ca <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
    }

    if (config.implementation_version < 3) {
 8005974:	8bbb      	ldrh	r3, [r7, #28]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d808      	bhi.n	800598c <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x110>
        ret = numpy::normalize(output_matrix);
 800597a:	68b8      	ldr	r0, [r7, #8]
 800597c:	f7fc fbc0 	bl	8002100 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
 8005980:	63b8      	str	r0, [r7, #56]	; 0x38
        if (ret != EIDSP_OK) {
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	d016      	beq.n	80059b6 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13a>
            EIDSP_ERR(ret);
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	e01e      	b.n	80059ca <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
        }
    }
    else {
        // normalization
        ret = speechpy::processing::spectrogram_normalization(output_matrix, config.noise_floor_db, config.implementation_version == 3);
 800598c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800598e:	8bbb      	ldrh	r3, [r7, #28]
 8005990:	2b03      	cmp	r3, #3
 8005992:	bf0c      	ite	eq
 8005994:	2301      	moveq	r3, #1
 8005996:	2300      	movne	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	68b8      	ldr	r0, [r7, #8]
 800599e:	f7fd ffdf 	bl	8003960 <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib>
 80059a2:	63b8      	str	r0, [r7, #56]	; 0x38
        if (ret != EIDSP_OK) {
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13a>
            ei_printf("ERR: normalization failed (%d)\n", ret);
 80059aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059ac:	480e      	ldr	r0, [pc, #56]	; (80059e8 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x16c>)
 80059ae:	f003 f8f1 	bl	8008b94 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	e009      	b.n	80059ca <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
        }
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	fb03 f202 	mul.w	r2, r3, r2
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2201      	movs	r2, #1
 80059c6:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3740      	adds	r7, #64	; 0x40
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bdb0      	pop	{r4, r5, r7, pc}
 80059d2:	bf00      	nop
 80059d4:	fffffc14 	.word	0xfffffc14
 80059d8:	fffffc10 	.word	0xfffffc10
 80059dc:	08030a98 	.word	0x08030a98
 80059e0:	08030aac 	.word	0x08030aac
 80059e4:	08030c10 	.word	0x08030c10
 80059e8:	08030c30 	.word	0x08030c30

080059ec <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE>:


__attribute__((unused)) static int extract_spectrogram_run_slice(signal_t *signal, matrix_t *output_matrix, ei_dsp_config_spectrogram_t *config, const float sampling_frequency, matrix_size_t *matrix_size_out) {
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b093      	sub	sp, #76	; 0x4c
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	6178      	str	r0, [r7, #20]
 80059f4:	6139      	str	r1, [r7, #16]
 80059f6:	60fa      	str	r2, [r7, #12]
 80059f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80059fc:	607b      	str	r3, [r7, #4]
    uint32_t frequency = (uint32_t)sampling_frequency;
 80059fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a06:	ee17 3a90 	vmov	r3, s15
 8005a0a:	63fb      	str	r3, [r7, #60]	; 0x3c

    int x;

    // calculate the size of the spectrogram matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfe_buffer_size(
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	6919      	ldr	r1, [r3, #16]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	ed93 7a04 	vldr	s14, [r3, #16]
            signal->total_length, frequency, config->frame_length, config->frame_stride, config->fft_length / 2 + 1,
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	0fda      	lsrs	r2, r3, #31
 8005a22:	4413      	add	r3, r2
 8005a24:	105b      	asrs	r3, r3, #1
        speechpy::feature::calculate_mfe_buffer_size(
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3301      	adds	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	889b      	ldrh	r3, [r3, #4]
 8005a30:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	4613      	mov	r3, r2
 8005a38:	eef0 0a47 	vmov.f32	s1, s14
 8005a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a42:	f7ff f8f3 	bl	8004c2c <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>
            config->implementation_version);

    // we roll the output matrix back so we have room at the end...
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	6892      	ldr	r2, [r2, #8]
 8005a52:	fb02 f103 	mul.w	r1, r2, r3
        -(out_matrix_size.rows * out_matrix_size.cols));
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
 8005a5e:	425b      	negs	r3, r3
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
 8005a60:	461a      	mov	r2, r3
 8005a62:	f7fb fc7f 	bl	8001364 <_ZN2ei5numpy4rollEPfji>
 8005a66:	63b8      	str	r0, [r7, #56]	; 0x38
    if (x != EIDSP_OK) {
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d010      	beq.n	8005a90 <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE+0xa4>
        if (preemphasis) {
 8005a6e:	4b32      	ldr	r3, [pc, #200]	; (8005b38 <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE+0x14c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE+0xa0>
            delete preemphasis;
 8005a76:	4b30      	ldr	r3, [pc, #192]	; (8005b38 <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE+0x14c>)
 8005a78:	681c      	ldr	r4, [r3, #0]
 8005a7a:	2c00      	cmp	r4, #0
 8005a7c:	d006      	beq.n	8005a8c <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE+0xa0>
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7fd fa26 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8005a84:	211c      	movs	r1, #28
 8005a86:	4620      	mov	r0, r4
 8005a88:	f024 fdb2 	bl	802a5f0 <_ZdlPvj>
        }
        EIDSP_ERR(x);
 8005a8c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8005a8e:	e04e      	b.n	8005b2e <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE+0x142>
    }

    // slice in the output matrix to write to
    // the offset in the classification matrix here is always at the end
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	6892      	ldr	r2, [r2, #8]
 8005a98:	fb03 f202 	mul.w	r2, r3, r2
        (out_matrix_size.rows * out_matrix_size.cols);
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aa0:	fb01 f303 	mul.w	r3, r1, r3
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34

    matrix_t output_matrix_slice(out_matrix_size.rows, out_matrix_size.cols, output_matrix->buffer + output_matrix_offset);
 8005aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aaa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f107 0018 	add.w	r0, r7, #24
 8005aba:	4622      	mov	r2, r4
 8005abc:	f7fb fb94 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>

    // and run the spectrogram extraction
    int ret = speechpy::feature::spectrogram(&output_matrix_slice, signal,
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	ed93 7a03 	vldr	s14, [r3, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	edd3 6a04 	vldr	s13, [r3, #16]
        frequency, config->frame_length, config->frame_stride, config->fft_length, config->implementation_version);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	695b      	ldr	r3, [r3, #20]
    int ret = speechpy::feature::spectrogram(&output_matrix_slice, signal,
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	889b      	ldrh	r3, [r3, #4]
 8005ae0:	f107 0018 	add.w	r0, r7, #24
 8005ae4:	eeb0 1a66 	vmov.f32	s2, s13
 8005ae8:	eef0 0a47 	vmov.f32	s1, s14
 8005aec:	eeb0 0a67 	vmov.f32	s0, s15
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	f7fe ff5d 	bl	80049b0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt>
 8005af6:	6338      	str	r0, [r7, #48]	; 0x30

    if (ret != EIDSP_OK) {
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d005      	beq.n	8005b0a <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE+0x11e>
        ei_printf("ERR: Spectrogram failed (%d)\n", ret);
 8005afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b00:	480e      	ldr	r0, [pc, #56]	; (8005b3c <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE+0x150>)
 8005b02:	f003 f847 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8005b06:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8005b08:	e00c      	b.n	8005b24 <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE+0x138>
    }

    matrix_size_out->rows += out_matrix_size.rows;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	441a      	add	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	601a      	str	r2, [r3, #0]
    if (out_matrix_size.cols > 0) {
 8005b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE+0x136>
        matrix_size_out->cols = out_matrix_size.cols;
 8005b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	605a      	str	r2, [r3, #4]
    }

    return EIDSP_OK;
 8005b22:	2400      	movs	r4, #0
}
 8005b24:	f107 0318 	add.w	r3, r7, #24
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fb fb88 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8005b2e:	4623      	mov	r3, r4
 8005b30:	4618      	mov	r0, r3
 8005b32:	3744      	adds	r7, #68	; 0x44
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd90      	pop	{r4, r7, pc}
 8005b38:	20000670 	.word	0x20000670
 8005b3c:	08030c10 	.word	0x08030c10

08005b40 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE>:

__attribute__((unused)) int extract_spectrogram_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency, matrix_size_t *matrix_size_out) {
 8005b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b42:	b0a7      	sub	sp, #156	; 0x9c
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6178      	str	r0, [r7, #20]
 8005b48:	6139      	str	r1, [r7, #16]
 8005b4a:	60fa      	str	r2, [r7, #12]
 8005b4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b50:	607b      	str	r3, [r7, #4]
#if defined(__cplusplus) && EI_C_LINKAGE == 1
    ei_printf("ERR: Continuous audio is not supported when EI_C_LINKAGE is defined\n");
    EIDSP_ERR(EIDSP_NOT_SUPPORTED);
#else

    ei_dsp_config_spectrogram_t config = *((ei_dsp_config_spectrogram_t*)config_ptr);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8005b58:	461e      	mov	r6, r3
 8005b5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b5e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005b62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    static bool first_run = false;

    if (config.axes != 1) {
 8005b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d001      	beq.n	8005b70 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005b6c:	4cb0      	ldr	r4, [pc, #704]	; (8005e30 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f0>)
 8005b6e:	e1dc      	b.n	8005f2a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3ea>
    }

    if (signal->total_length == 0) {
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3c>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8005b78:	4cae      	ldr	r4, [pc, #696]	; (8005e34 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f4>)
 8005b7a:	e1d6      	b.n	8005f2a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3ea>
    }

    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 8005b7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b84:	ee17 3a90 	vmov	r3, s15
 8005b88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* Fake an extra frame_length for stack frames calculations. There, 1 frame_length is always
    subtracted and there for never used. But skip the first slice to fit the feature_matrix
    buffer */
    if(config.implementation_version < 2) {
 8005b8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d819      	bhi.n	8005bc8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x88>

        if (first_run == true) {
 8005b94:	4ba8      	ldr	r3, [pc, #672]	; (8005e38 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f8>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d112      	bne.n	8005bc2 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x82>
            signal->total_length += (size_t)(config.frame_length * (float)frequency);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005ba4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005ba8:	ee07 2a90 	vmov	s15, r2
 8005bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb8:	ee17 2a90 	vmov	r2, s15
 8005bbc:	441a      	add	r2, r3
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	611a      	str	r2, [r3, #16]
        }

        first_run = true;
 8005bc2:	4b9d      	ldr	r3, [pc, #628]	; (8005e38 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f8>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	701a      	strb	r2, [r3, #0]
    }

    // Go from the time (e.g. 0.25 seconds to number of frames based on freq)
    const size_t frame_length_values = frequency * config.frame_length;
 8005bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bcc:	ee07 3a90 	vmov	s15, r3
 8005bd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bd4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be0:	ee17 3a90 	vmov	r3, s15
 8005be4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const size_t frame_stride_values = frequency * config.frame_stride;
 8005be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bec:	ee07 3a90 	vmov	s15, r3
 8005bf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bf4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c00:	ee17 3a90 	vmov	r3, s15
 8005c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    const int frame_overlap_values = static_cast<int>(frame_length_values) - static_cast<int>(frame_stride_values);
 8005c08:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    if (frame_overlap_values < 0) {
 8005c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	da16      	bge.n	8005c4c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x10c>
        ei_printf("ERR: frame_length (");
 8005c1e:	4887      	ldr	r0, [pc, #540]	; (8005e3c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2fc>)
 8005c20:	f002 ffb8 	bl	8008b94 <_Z9ei_printfPKcz>
        ei_printf_float(config.frame_length);
 8005c24:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005c28:	eeb0 0a67 	vmov.f32	s0, s15
 8005c2c:	f01f fb20 	bl	8025270 <_Z15ei_printf_floatf>
        ei_printf(") cannot be lower than frame_stride (");
 8005c30:	4883      	ldr	r0, [pc, #524]	; (8005e40 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x300>)
 8005c32:	f002 ffaf 	bl	8008b94 <_Z9ei_printfPKcz>
        ei_printf_float(config.frame_stride);
 8005c36:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c3e:	f01f fb17 	bl	8025270 <_Z15ei_printf_floatf>
        ei_printf(") for continuous classification\n");
 8005c42:	4880      	ldr	r0, [pc, #512]	; (8005e44 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x304>)
 8005c44:	f002 ffa6 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8005c48:	4c7a      	ldr	r4, [pc, #488]	; (8005e34 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f4>)
 8005c4a:	e16e      	b.n	8005f2a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3ea>
    }

    if (frame_length_values > signal->total_length) {
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d909      	bls.n	8005c6c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x12c>
        ei_printf("ERR: frame_length (%d) cannot be larger than signal's total length (%d) for continuous classification\n",
 8005c58:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
            (int)frame_length_values, (int)signal->total_length);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	691b      	ldr	r3, [r3, #16]
        ei_printf("ERR: frame_length (%d) cannot be larger than signal's total length (%d) for continuous classification\n",
 8005c60:	461a      	mov	r2, r3
 8005c62:	4879      	ldr	r0, [pc, #484]	; (8005e48 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x308>)
 8005c64:	f002 ff96 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8005c68:	4c72      	ldr	r4, [pc, #456]	; (8005e34 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f4>)
 8005c6a:	e15e      	b.n	8005f2a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3ea>
    }

    int x;

    // have current frame, but wrong size? then free
    if (ei_dsp_cont_current_frame && ei_dsp_cont_current_frame_size != frame_length_values) {
 8005c6c:	4b77      	ldr	r3, [pc, #476]	; (8005e4c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00d      	beq.n	8005c90 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x150>
 8005c74:	4b76      	ldr	r3, [pc, #472]	; (8005e50 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d007      	beq.n	8005c90 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x150>
        ei_free(ei_dsp_cont_current_frame);
 8005c80:	4b72      	ldr	r3, [pc, #456]	; (8005e4c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f01f fc11 	bl	80254ac <_Z7ei_freePv>
        ei_dsp_cont_current_frame = nullptr;
 8005c8a:	4b70      	ldr	r3, [pc, #448]	; (8005e4c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30c>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
    }

    if (!ei_dsp_cont_current_frame) {
 8005c90:	4b6e      	ldr	r3, [pc, #440]	; (8005e4c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d116      	bne.n	8005cc6 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x186>
        ei_dsp_cont_current_frame = (float*)ei_calloc(frame_length_values * sizeof(float), 1);
 8005c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f01f fbf5 	bl	8025490 <_Z9ei_callocjj>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4a68      	ldr	r2, [pc, #416]	; (8005e4c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30c>)
 8005caa:	6013      	str	r3, [r2, #0]
        if (!ei_dsp_cont_current_frame) {
 8005cac:	4b67      	ldr	r3, [pc, #412]	; (8005e4c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x178>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8005cb4:	4c67      	ldr	r4, [pc, #412]	; (8005e54 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x314>)
 8005cb6:	e138      	b.n	8005f2a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3ea>
        }
        ei_dsp_cont_current_frame_size = frame_length_values;
 8005cb8:	4a65      	ldr	r2, [pc, #404]	; (8005e50 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 8005cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cbe:	6013      	str	r3, [r2, #0]
        ei_dsp_cont_current_frame_ix = 0;
 8005cc0:	4b65      	ldr	r3, [pc, #404]	; (8005e58 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
    }

    matrix_size_out->rows = 0;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
    matrix_size_out->cols = 0;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	605a      	str	r2, [r3, #4]

    // this is the offset in the signal from which we'll work
    size_t offset_in_signal = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
 8005cd8:	4b5f      	ldr	r3, [pc, #380]	; (8005e58 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a5c      	ldr	r2, [pc, #368]	; (8005e50 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 8005cde:	6812      	ldr	r2, [r2, #0]
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	dd61      	ble.n	8005da8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x268>
        ei_printf("ERR: ei_dsp_cont_current_frame_ix is larger than frame size\n");
 8005ce4:	485d      	ldr	r0, [pc, #372]	; (8005e5c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x31c>)
 8005ce6:	f002 ff55 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8005cea:	4c52      	ldr	r4, [pc, #328]	; (8005e34 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f4>)
 8005cec:	e11d      	b.n	8005f2a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3ea>

    // if we still have some code from previous run
    while (ei_dsp_cont_current_frame_ix > 0) {
        // then from the current frame we need to read `frame_length_values - ei_dsp_cont_current_frame_ix`
        // starting at offset 0
        x = signal->get_data(0, frame_length_values - ei_dsp_cont_current_frame_ix, ei_dsp_cont_current_frame + ei_dsp_cont_current_frame_ix);
 8005cee:	6978      	ldr	r0, [r7, #20]
 8005cf0:	4b59      	ldr	r3, [pc, #356]	; (8005e58 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cfa:	1a99      	subs	r1, r3, r2
 8005cfc:	4b53      	ldr	r3, [pc, #332]	; (8005e4c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30c>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4b55      	ldr	r3, [pc, #340]	; (8005e58 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	460a      	mov	r2, r1
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	f003 f815 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8005d10:	67b8      	str	r0, [r7, #120]	; 0x78
        if (x != EIDSP_OK) {
 8005d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1dc>
            EIDSP_ERR(x);
 8005d18:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8005d1a:	e105      	b.n	8005f28 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3e8>
        }

        // now ei_dsp_cont_current_frame is complete
        signal_t frame_signal;
 8005d1c:	f107 031c 	add.w	r3, r7, #28
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff f923 	bl	8004f6c <_ZN2ei11ei_signal_tC1Ev>
        x = numpy::signal_from_buffer(ei_dsp_cont_current_frame, frame_length_values, &frame_signal);
 8005d26:	4b49      	ldr	r3, [pc, #292]	; (8005e4c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f107 021c 	add.w	r2, r7, #28
 8005d2e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fc f93a 	bl	8001fac <_ZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tE>
 8005d38:	67b8      	str	r0, [r7, #120]	; 0x78
        if (x != EIDSP_OK) {
 8005d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x206>
            EIDSP_ERR(x);
 8005d40:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8005d42:	2500      	movs	r5, #0
 8005d44:	e028      	b.n	8005d98 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x258>
        }

        x = extract_spectrogram_run_slice(&frame_signal, output_matrix, &config, sampling_frequency, matrix_size_out);
 8005d46:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005d4a:	f107 001c 	add.w	r0, r7, #28
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	ed97 0a02 	vldr	s0, [r7, #8]
 8005d54:	6939      	ldr	r1, [r7, #16]
 8005d56:	f7ff fe49 	bl	80059ec <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE>
 8005d5a:	67b8      	str	r0, [r7, #120]	; 0x78
        if (x != EIDSP_OK) {
 8005d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x228>
            EIDSP_ERR(x);
 8005d62:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8005d64:	2500      	movs	r5, #0
 8005d66:	e017      	b.n	8005d98 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x258>
        }

        // if there's overlap between frames we roll through
        if (frame_stride_values > 0) {
 8005d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x244>
            numpy::roll(ei_dsp_cont_current_frame, frame_length_values, -frame_stride_values);
 8005d70:	4b36      	ldr	r3, [pc, #216]	; (8005e4c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30c>)
 8005d72:	6818      	ldr	r0, [r3, #0]
 8005d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d78:	425b      	negs	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005d80:	f7fb faf0 	bl	8001364 <_ZN2ei5numpy4rollEPfji>
        }

        ei_dsp_cont_current_frame_ix -= frame_stride_values;
 8005d84:	4b34      	ldr	r3, [pc, #208]	; (8005e58 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	4b31      	ldr	r3, [pc, #196]	; (8005e58 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 8005d94:	601a      	str	r2, [r3, #0]
    }
 8005d96:	2501      	movs	r5, #1
 8005d98:	f107 031c 	add.w	r3, r7, #28
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff f8f2 	bl	8004f86 <_ZN2ei11ei_signal_tD1Ev>
 8005da2:	2d01      	cmp	r5, #1
 8005da4:	f040 80c0 	bne.w	8005f28 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3e8>
    while (ei_dsp_cont_current_frame_ix > 0) {
 8005da8:	4b2b      	ldr	r3, [pc, #172]	; (8005e58 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	dc9e      	bgt.n	8005cee <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1ae>

    if (ei_dsp_cont_current_frame_ix < 0) {
 8005db0:	4b29      	ldr	r3, [pc, #164]	; (8005e58 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	da07      	bge.n	8005dc8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x288>
        offset_in_signal = -ei_dsp_cont_current_frame_ix;
 8005db8:	4b27      	ldr	r3, [pc, #156]	; (8005e58 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	425b      	negs	r3, r3
 8005dbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        ei_dsp_cont_current_frame_ix = 0;
 8005dc2:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
    }

    if (offset_in_signal >= signal->total_length) {
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d308      	bcc.n	8005de6 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2a6>
        offset_in_signal -= signal->total_length;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        return EIDSP_OK;
 8005de2:	2400      	movs	r4, #0
 8005de4:	e0a1      	b.n	8005f2a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3ea>
    }

    // now... we need to discard part of the signal...
    SignalWithRange signal_with_range(signal, offset_in_signal, signal->total_length);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8005dee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005df2:	6979      	ldr	r1, [r7, #20]
 8005df4:	f7ff f8d4 	bl	8004fa0 <_ZN15SignalWithRangeC1EPN2ei11ei_signal_tEmm>

    signal_t *range_signal = signal_with_range.get_signal();
 8005df8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff f8fc 	bl	8004ffa <_ZN15SignalWithRange10get_signalEv>
 8005e02:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    size_t range_signal_orig_length = range_signal->total_length;
 8005e06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	67fb      	str	r3, [r7, #124]	; 0x7c

    // then we'll just go through normal processing of the signal:
    x = extract_spectrogram_run_slice(range_signal, output_matrix, &config, sampling_frequency, matrix_size_out);
 8005e0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	ed97 0a02 	vldr	s0, [r7, #8]
 8005e18:	6939      	ldr	r1, [r7, #16]
 8005e1a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8005e1e:	f7ff fde5 	bl	80059ec <_ZN12_GLOBAL__N_1L29extract_spectrogram_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP27ei_dsp_config_spectrogram_tfPNS0_13matrix_size_tE>
 8005e22:	67b8      	str	r0, [r7, #120]	; 0x78
    if (x != EIDSP_OK) {
 8005e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01a      	beq.n	8005e60 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x320>
        EIDSP_ERR(x);
 8005e2a:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8005e2c:	e076      	b.n	8005f1c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3dc>
 8005e2e:	bf00      	nop
 8005e30:	fffffc14 	.word	0xfffffc14
 8005e34:	fffffc10 	.word	0xfffffc10
 8005e38:	20000674 	.word	0x20000674
 8005e3c:	08030af8 	.word	0x08030af8
 8005e40:	08030b0c 	.word	0x08030b0c
 8005e44:	08030b34 	.word	0x08030b34
 8005e48:	08030b58 	.word	0x08030b58
 8005e4c:	20000664 	.word	0x20000664
 8005e50:	20000668 	.word	0x20000668
 8005e54:	fffffc16 	.word	0xfffffc16
 8005e58:	2000066c 	.word	0x2000066c
 8005e5c:	08030c50 	.word	0x08030c50
    }

    // update offset
    int length_of_signal_used = speechpy::processing::calculate_signal_used(range_signal->total_length, sampling_frequency,
 8005e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e64:	6918      	ldr	r0, [r3, #16]
 8005e66:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e6a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8005e6e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e72:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005e76:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	eef0 0a47 	vmov.f32	s1, s14
 8005e80:	eeb0 0a67 	vmov.f32	s0, s15
 8005e84:	ee16 1a90 	vmov	r1, s13
 8005e88:	f7fd f87e 	bl	8002f88 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt>
 8005e8c:	6778      	str	r0, [r7, #116]	; 0x74
        config.frame_length, config.frame_stride, false, config.implementation_version);
    offset_in_signal += length_of_signal_used;
 8005e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e94:	4413      	add	r3, r2
 8005e96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // not sure why this is being manipulated...
    range_signal->total_length = range_signal_orig_length;
 8005e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ea0:	611a      	str	r2, [r3, #16]

    // see what's left?
    int bytes_left_end_of_frame = signal->total_length - offset_in_signal;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	673b      	str	r3, [r7, #112]	; 0x70
    bytes_left_end_of_frame += frame_overlap_values;
 8005eae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eb4:	4413      	add	r3, r2
 8005eb6:	673b      	str	r3, [r7, #112]	; 0x70

    if (bytes_left_end_of_frame > 0) {
 8005eb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	dd0f      	ble.n	8005ede <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x39e>
        // then read that into the ei_dsp_cont_current_frame buffer
        x = signal->get_data(
 8005ebe:	6978      	ldr	r0, [r7, #20]
            (signal->total_length - bytes_left_end_of_frame),
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
        x = signal->get_data(
 8005ec6:	1ad1      	subs	r1, r2, r3
 8005ec8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005eca:	4b1a      	ldr	r3, [pc, #104]	; (8005f34 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3f4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f002 ff34 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8005ed2:	67b8      	str	r0, [r7, #120]	; 0x78
            bytes_left_end_of_frame,
            ei_dsp_cont_current_frame);
        if (x != EIDSP_OK) {
 8005ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x39e>
            EIDSP_ERR(x);
 8005eda:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8005edc:	e01e      	b.n	8005f1c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3dc>
        }
    }

    ei_dsp_cont_current_frame_ix = bytes_left_end_of_frame;
 8005ede:	4a16      	ldr	r2, [pc, #88]	; (8005f38 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3f8>)
 8005ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ee2:	6013      	str	r3, [r2, #0]

    if (config.implementation_version < 2) {
 8005ee4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d816      	bhi.n	8005f1a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3da>
        if (first_run == true) {
 8005eec:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3fc>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d112      	bne.n	8005f1a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3da>
            signal->total_length -= (size_t)(config.frame_length * (float)frequency);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005efc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005f00:	ee07 2a90 	vmov	s15, r2
 8005f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f10:	ee17 2a90 	vmov	r2, s15
 8005f14:	1a9a      	subs	r2, r3, r2
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	611a      	str	r2, [r3, #16]
        }
    }

    return EIDSP_OK;
 8005f1a:	2400      	movs	r4, #0
#endif
}
 8005f1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fa5f 	bl	80053e4 <_ZN15SignalWithRangeD1Ev>
 8005f26:	e000      	b.n	8005f2a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3ea>
            EIDSP_ERR(x);
 8005f28:	bf00      	nop
}
 8005f2a:	4623      	mov	r3, r4
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	379c      	adds	r7, #156	; 0x9c
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f34:	20000664 	.word	0x20000664
 8005f38:	2000066c 	.word	0x2000066c
 8005f3c:	20000674 	.word	0x20000674

08005f40 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:


__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 8005f40:	b5b0      	push	{r4, r5, r7, lr}
 8005f42:	b0a0      	sub	sp, #128	; 0x80
 8005f44:	af06      	add	r7, sp, #24
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8005f56:	461d      	mov	r5, r3
 8005f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f64:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    if (config.axes != 1) {
 8005f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d001      	beq.n	8005f72 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005f6e:	4c91      	ldr	r4, [pc, #580]	; (80061b4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x274>)
 8005f70:	e11b      	b.n	80061aa <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x26a>
    }

    if (signal->total_length == 0) {
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8005f7a:	4c8f      	ldr	r4, [pc, #572]	; (80061b8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x278>)
 8005f7c:	e115      	b.n	80061aa <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x26a>
    }

    if ((config.implementation_version == 0) || (config.implementation_version > 4)) {
 8005f7e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
 8005f84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d902      	bls.n	8005f90 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x50>
        EIDSP_ERR(EIDSP_BLOCK_VERSION_INCORRECT);
 8005f8a:	f46f 747d 	mvn.w	r4, #1012	; 0x3f4
 8005f8e:	e10c      	b.n	80061aa <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x26a>
    }

    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 8005f90:	edd7 7a00 	vldr	s15, [r7]
 8005f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f98:	ee17 3a90 	vmov	r3, s15
 8005f9c:	663b      	str	r3, [r7, #96]	; 0x60

    signal_t preemphasized_audio_signal;
 8005f9e:	f107 0318 	add.w	r3, r7, #24
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fe ffe2 	bl	8004f6c <_ZN2ei11ei_signal_tC1Ev>

    // before version 3 we did not have preemphasis
    if (config.implementation_version < 3) {
 8005fa8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d80d      	bhi.n	8005fca <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8a>
        preemphasis = nullptr;
 8005fae:	4b83      	ldr	r3, [pc, #524]	; (80061bc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]

        preemphasized_audio_signal.total_length = signal->total_length;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
        preemphasized_audio_signal.get_data = signal->get_data;
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	f107 0318 	add.w	r3, r7, #24
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f002 ffdc 	bl	8008f80 <_ZNSt8functionIFijjPfEEaSERKS2_>
 8005fc8:	e01d      	b.n	8006006 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc6>
    }
    else {
        // preemphasis class to preprocess the audio...
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
 8005fca:	201c      	movs	r0, #28
 8005fcc:	f024 fb25 	bl	802a61a <_Znwj>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	461c      	mov	r4, r3
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80061c0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x280>
 8005fda:	2201      	movs	r2, #1
 8005fdc:	68f9      	ldr	r1, [r7, #12]
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7fc fe56 	bl	8002c90 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
 8005fe4:	65fc      	str	r4, [r7, #92]	; 0x5c
        preemphasis = pre;
 8005fe6:	4a75      	ldr	r2, [pc, #468]	; (80061bc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8005fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fea:	6013      	str	r3, [r2, #0]

        preemphasized_audio_signal.total_length = signal->total_length;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 8005ff2:	4b74      	ldr	r3, [pc, #464]	; (80061c4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x284>)
 8005ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ff6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005ffa:	f107 0318 	add.w	r3, r7, #24
 8005ffe:	4611      	mov	r1, r2
 8006000:	4618      	mov	r0, r3
 8006002:	f002 ff9e 	bl	8008f42 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>
    }

    // calculate the size of the MFE matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfe_buffer_size(
 8006006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006008:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800600c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
            preemphasized_audio_signal.total_length, frequency, config.frame_length, config.frame_stride, config.num_filters,
 8006010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        speechpy::feature::calculate_mfe_buffer_size(
 8006012:	b29a      	uxth	r2, r3
 8006014:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006016:	f107 0010 	add.w	r0, r7, #16
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	eef0 0a47 	vmov.f32	s1, s14
 8006022:	eeb0 0a67 	vmov.f32	s0, s15
 8006026:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006028:	f7fe fe00 	bl	8004c2c <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>
            config.implementation_version);
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	fb03 f202 	mul.w	r2, r3, r2
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	6889      	ldr	r1, [r1, #8]
 800603c:	fb01 f303 	mul.w	r3, r1, r3
 8006040:	429a      	cmp	r2, r3
 8006042:	d920      	bls.n	8006086 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x146>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	4619      	mov	r1, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	461a      	mov	r2, r3
 8006050:	485d      	ldr	r0, [pc, #372]	; (80061c8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x288>)
 8006052:	f002 fd9f 	bl	8008b94 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	4619      	mov	r1, r3
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	461a      	mov	r2, r3
 800605e:	485b      	ldr	r0, [pc, #364]	; (80061cc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x28c>)
 8006060:	f002 fd98 	bl	8008b94 <_Z9ei_printfPKcz>
        if (preemphasis) {
 8006064:	4b55      	ldr	r3, [pc, #340]	; (80061bc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
            delete preemphasis;
 800606c:	4b53      	ldr	r3, [pc, #332]	; (80061bc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 800606e:	681c      	ldr	r4, [r3, #0]
 8006070:	2c00      	cmp	r4, #0
 8006072:	d006      	beq.n	8006082 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
 8006074:	4620      	mov	r0, r4
 8006076:	f7fc ff2b 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 800607a:	211c      	movs	r1, #28
 800607c:	4620      	mov	r0, r4
 800607e:	f024 fab7 	bl	802a5f0 <_ZdlPvj>
        }
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006082:	4c4c      	ldr	r4, [pc, #304]	; (80061b4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x274>)
 8006084:	e08c      	b.n	80061a0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x260>
    }

    output_matrix->rows = out_matrix_size.rows;
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	609a      	str	r2, [r3, #8]
    int ret;
    // This probably seems incorrect, but the mfe func can actually handle all versions
    // There's a subtle issue with cmvn and v2, not worth tracking down
    // So for v2 and v1, we'll just use the old code
    // (the new mfe does away with the intermediate filterbank matrix)
    if (config.implementation_version > 2) {
 8006092:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006094:	2b02      	cmp	r3, #2
 8006096:	d91f      	bls.n	80060d8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x198>
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 8006098:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800609c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
            frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 80060a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 80060a2:	b29b      	uxth	r3, r3
            frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 80060a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 80060a6:	b292      	uxth	r2, r2
            config.low_frequency, config.high_frequency, config.implementation_version);
 80060a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 80060aa:	460c      	mov	r4, r1
            config.low_frequency, config.high_frequency, config.implementation_version);
 80060ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 80060ae:	460d      	mov	r5, r1
 80060b0:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80060b2:	f107 0018 	add.w	r0, r7, #24
 80060b6:	9104      	str	r1, [sp, #16]
 80060b8:	9503      	str	r5, [sp, #12]
 80060ba:	9402      	str	r4, [sp, #8]
 80060bc:	9201      	str	r2, [sp, #4]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	eef0 0a47 	vmov.f32	s1, s14
 80060c4:	eeb0 0a67 	vmov.f32	s0, s15
 80060c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ca:	4602      	mov	r2, r0
 80060cc:	2100      	movs	r1, #0
 80060ce:	68b8      	ldr	r0, [r7, #8]
 80060d0:	f7fd ff62 	bl	8003f98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
 80060d4:	6678      	str	r0, [r7, #100]	; 0x64
 80060d6:	e01e      	b.n	8006116 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d6>
    } else {
        ret = speechpy::feature::mfe_v3(output_matrix, nullptr, &preemphasized_audio_signal,
 80060d8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80060dc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
            frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 80060e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        ret = speechpy::feature::mfe_v3(output_matrix, nullptr, &preemphasized_audio_signal,
 80060e2:	b29b      	uxth	r3, r3
            frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 80060e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        ret = speechpy::feature::mfe_v3(output_matrix, nullptr, &preemphasized_audio_signal,
 80060e6:	b292      	uxth	r2, r2
            config.low_frequency, config.high_frequency, config.implementation_version);
 80060e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
        ret = speechpy::feature::mfe_v3(output_matrix, nullptr, &preemphasized_audio_signal,
 80060ea:	460c      	mov	r4, r1
            config.low_frequency, config.high_frequency, config.implementation_version);
 80060ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
        ret = speechpy::feature::mfe_v3(output_matrix, nullptr, &preemphasized_audio_signal,
 80060ee:	460d      	mov	r5, r1
 80060f0:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80060f2:	f107 0018 	add.w	r0, r7, #24
 80060f6:	9104      	str	r1, [sp, #16]
 80060f8:	9503      	str	r5, [sp, #12]
 80060fa:	9402      	str	r4, [sp, #8]
 80060fc:	9201      	str	r2, [sp, #4]
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	eef0 0a47 	vmov.f32	s1, s14
 8006104:	eeb0 0a67 	vmov.f32	s0, s15
 8006108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800610a:	4602      	mov	r2, r0
 800610c:	2100      	movs	r1, #0
 800610e:	68b8      	ldr	r0, [r7, #8]
 8006110:	f7fe fab8 	bl	8004684 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
 8006114:	6678      	str	r0, [r7, #100]	; 0x64
    }

    if (preemphasis) {
 8006116:	4b29      	ldr	r3, [pc, #164]	; (80061bc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>
        delete preemphasis;
 800611e:	4b27      	ldr	r3, [pc, #156]	; (80061bc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8006120:	681c      	ldr	r4, [r3, #0]
 8006122:	2c00      	cmp	r4, #0
 8006124:	d006      	beq.n	8006134 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>
 8006126:	4620      	mov	r0, r4
 8006128:	f7fc fed2 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 800612c:	211c      	movs	r1, #28
 800612e:	4620      	mov	r0, r4
 8006130:	f024 fa5e 	bl	802a5f0 <_ZdlPvj>
    }
    if (ret != EIDSP_OK) {
 8006134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x206>
        ei_printf("ERR: MFE failed (%d)\n", ret);
 800613a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800613c:	4824      	ldr	r0, [pc, #144]	; (80061d0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x290>)
 800613e:	f002 fd29 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8006142:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8006144:	e02c      	b.n	80061a0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x260>
    }

    if (config.implementation_version < 3) {
 8006146:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006148:	2b02      	cmp	r3, #2
 800614a:	d810      	bhi.n	800616e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x22e>
        // cepstral mean and variance normalization
        ret = speechpy::processing::cmvnw(output_matrix, config.win_size, false, true);
 800614c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800614e:	b299      	uxth	r1, r3
 8006150:	2301      	movs	r3, #1
 8006152:	2200      	movs	r2, #0
 8006154:	68b8      	ldr	r0, [r7, #8]
 8006156:	f7fd f98b 	bl	8003470 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
 800615a:	6678      	str	r0, [r7, #100]	; 0x64
        if (ret != EIDSP_OK) {
 800615c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615e:	2b00      	cmp	r3, #0
 8006160:	d014      	beq.n	800618c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x24c>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
 8006162:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006164:	481b      	ldr	r0, [pc, #108]	; (80061d4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x294>)
 8006166:	f002 fd15 	bl	8008b94 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 800616a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800616c:	e018      	b.n	80061a0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x260>
        }
    }
    else {
        // normalization
        ret = speechpy::processing::mfe_normalization(output_matrix, config.noise_floor_db);
 800616e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006170:	4619      	mov	r1, r3
 8006172:	68b8      	ldr	r0, [r7, #8]
 8006174:	f7fd fafc 	bl	8003770 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
 8006178:	6678      	str	r0, [r7, #100]	; 0x64
        if (ret != EIDSP_OK) {
 800617a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x24c>
            ei_printf("ERR: normalization failed (%d)\n", ret);
 8006180:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006182:	4815      	ldr	r0, [pc, #84]	; (80061d8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x298>)
 8006184:	f002 fd06 	bl	8008b94 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8006188:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800618a:	e009      	b.n	80061a0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x260>
        }
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	fb03 f202 	mul.w	r2, r3, r2
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2201      	movs	r2, #1
 800619c:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 800619e:	2400      	movs	r4, #0
}
 80061a0:	f107 0318 	add.w	r3, r7, #24
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe feee 	bl	8004f86 <_ZN2ei11ei_signal_tD1Ev>
 80061aa:	4623      	mov	r3, r4
 80061ac:	4618      	mov	r0, r3
 80061ae:	3768      	adds	r7, #104	; 0x68
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bdb0      	pop	{r4, r5, r7, pc}
 80061b4:	fffffc14 	.word	0xfffffc14
 80061b8:	fffffc10 	.word	0xfffffc10
 80061bc:	20000670 	.word	0x20000670
 80061c0:	3f7ae148 	.word	0x3f7ae148
 80061c4:	0800507d 	.word	0x0800507d
 80061c8:	08030a98 	.word	0x08030a98
 80061cc:	08030aac 	.word	0x08030aac
 80061d0:	08030c90 	.word	0x08030c90
 80061d4:	08030ae0 	.word	0x08030ae0
 80061d8:	08030c30 	.word	0x08030c30

080061dc <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE>:

__attribute__((unused)) static int extract_mfe_run_slice(signal_t *signal, matrix_t *output_matrix, ei_dsp_config_mfe_t *config, const float sampling_frequency, matrix_size_t *matrix_size_out) {
 80061dc:	b5b0      	push	{r4, r5, r7, lr}
 80061de:	b096      	sub	sp, #88	; 0x58
 80061e0:	af06      	add	r7, sp, #24
 80061e2:	6178      	str	r0, [r7, #20]
 80061e4:	6139      	str	r1, [r7, #16]
 80061e6:	60fa      	str	r2, [r7, #12]
 80061e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80061ec:	607b      	str	r3, [r7, #4]
    uint32_t frequency = (uint32_t)sampling_frequency;
 80061ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80061f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f6:	ee17 3a90 	vmov	r3, s15
 80061fa:	63bb      	str	r3, [r7, #56]	; 0x38

    int x;

    // calculate the size of the spectrogram matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfe_buffer_size(
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	6919      	ldr	r1, [r3, #16]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	edd3 7a03 	vldr	s15, [r3, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	ed93 7a04 	vldr	s14, [r3, #16]
            signal->total_length, frequency, config->frame_length, config->frame_stride, config->num_filters,
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	695b      	ldr	r3, [r3, #20]
        speechpy::feature::calculate_mfe_buffer_size(
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	889b      	ldrh	r3, [r3, #4]
 8006216:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	4613      	mov	r3, r2
 800621e:	eef0 0a47 	vmov.f32	s1, s14
 8006222:	eeb0 0a67 	vmov.f32	s0, s15
 8006226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006228:	f7fe fd00 	bl	8004c2c <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>
            config->implementation_version);

    // we roll the output matrix back so we have room at the end...
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	6892      	ldr	r2, [r2, #8]
 8006238:	fb02 f103 	mul.w	r1, r2, r3
        -(out_matrix_size.rows * out_matrix_size.cols));
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006240:	fb02 f303 	mul.w	r3, r2, r3
 8006244:	425b      	negs	r3, r3
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
 8006246:	461a      	mov	r2, r3
 8006248:	f7fb f88c 	bl	8001364 <_ZN2ei5numpy4rollEPfji>
 800624c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (x != EIDSP_OK) {
 800624e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x7c>
        EIDSP_ERR(x);
 8006254:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8006256:	e081      	b.n	800635c <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x180>
    }

    // slice in the output matrix to write to
    // the offset in the classification matrix here is always at the end
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	6892      	ldr	r2, [r2, #8]
 8006260:	fb03 f202 	mul.w	r2, r3, r2
        (out_matrix_size.rows * out_matrix_size.cols);
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006268:	fb01 f303 	mul.w	r3, r1, r3
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	637b      	str	r3, [r7, #52]	; 0x34

    matrix_t output_matrix_slice(out_matrix_size.rows, out_matrix_size.cols, output_matrix->buffer + output_matrix_offset);
 8006270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006272:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	f107 001c 	add.w	r0, r7, #28
 8006282:	4622      	mov	r2, r4
 8006284:	f7fa ffb0 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
    // and run the MFE extraction
    // This probably seems incorrect, but the mfe func can actually handle all versions
    // There's a subtle issue with cmvn and v2, not worth tracking down
    // So for v2 and v1, we'll just use the old code
    // (the new mfe does away with the intermediate filterbank matrix)
    if (config->implementation_version > 2) {
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	889b      	ldrh	r3, [r3, #4]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d925      	bls.n	80062dc <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x100>
         x = speechpy::feature::mfe(&output_matrix_slice, nullptr, signal,
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	edd3 7a03 	vldr	s15, [r3, #12]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	ed93 7a04 	vldr	s14, [r3, #16]
            frequency, config->frame_length, config->frame_stride, config->num_filters, config->fft_length,
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	695b      	ldr	r3, [r3, #20]
         x = speechpy::feature::mfe(&output_matrix_slice, nullptr, signal,
 80062a0:	b29b      	uxth	r3, r3
            frequency, config->frame_length, config->frame_stride, config->num_filters, config->fft_length,
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	6992      	ldr	r2, [r2, #24]
         x = speechpy::feature::mfe(&output_matrix_slice, nullptr, signal,
 80062a6:	b292      	uxth	r2, r2
            config->low_frequency, config->high_frequency, config->implementation_version);
 80062a8:	68f9      	ldr	r1, [r7, #12]
 80062aa:	69c9      	ldr	r1, [r1, #28]
         x = speechpy::feature::mfe(&output_matrix_slice, nullptr, signal,
 80062ac:	460c      	mov	r4, r1
            config->low_frequency, config->high_frequency, config->implementation_version);
 80062ae:	68f9      	ldr	r1, [r7, #12]
 80062b0:	6a09      	ldr	r1, [r1, #32]
         x = speechpy::feature::mfe(&output_matrix_slice, nullptr, signal,
 80062b2:	460d      	mov	r5, r1
 80062b4:	68f9      	ldr	r1, [r7, #12]
 80062b6:	8889      	ldrh	r1, [r1, #4]
 80062b8:	f107 001c 	add.w	r0, r7, #28
 80062bc:	9104      	str	r1, [sp, #16]
 80062be:	9503      	str	r5, [sp, #12]
 80062c0:	9402      	str	r4, [sp, #8]
 80062c2:	9201      	str	r2, [sp, #4]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	eef0 0a47 	vmov.f32	s1, s14
 80062ca:	eeb0 0a67 	vmov.f32	s0, s15
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	2100      	movs	r1, #0
 80062d4:	f7fd fe60 	bl	8003f98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
 80062d8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80062da:	e024      	b.n	8006326 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x14a>
    } else {
        x = speechpy::feature::mfe_v3(&output_matrix_slice, nullptr, signal,
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	edd3 7a03 	vldr	s15, [r3, #12]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	ed93 7a04 	vldr	s14, [r3, #16]
            frequency, config->frame_length, config->frame_stride, config->num_filters, config->fft_length,
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	695b      	ldr	r3, [r3, #20]
        x = speechpy::feature::mfe_v3(&output_matrix_slice, nullptr, signal,
 80062ec:	b29b      	uxth	r3, r3
            frequency, config->frame_length, config->frame_stride, config->num_filters, config->fft_length,
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	6992      	ldr	r2, [r2, #24]
        x = speechpy::feature::mfe_v3(&output_matrix_slice, nullptr, signal,
 80062f2:	b292      	uxth	r2, r2
            config->low_frequency, config->high_frequency, config->implementation_version);
 80062f4:	68f9      	ldr	r1, [r7, #12]
 80062f6:	69c9      	ldr	r1, [r1, #28]
        x = speechpy::feature::mfe_v3(&output_matrix_slice, nullptr, signal,
 80062f8:	460c      	mov	r4, r1
            config->low_frequency, config->high_frequency, config->implementation_version);
 80062fa:	68f9      	ldr	r1, [r7, #12]
 80062fc:	6a09      	ldr	r1, [r1, #32]
        x = speechpy::feature::mfe_v3(&output_matrix_slice, nullptr, signal,
 80062fe:	460d      	mov	r5, r1
 8006300:	68f9      	ldr	r1, [r7, #12]
 8006302:	8889      	ldrh	r1, [r1, #4]
 8006304:	f107 001c 	add.w	r0, r7, #28
 8006308:	9104      	str	r1, [sp, #16]
 800630a:	9503      	str	r5, [sp, #12]
 800630c:	9402      	str	r4, [sp, #8]
 800630e:	9201      	str	r2, [sp, #4]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	eef0 0a47 	vmov.f32	s1, s14
 8006316:	eeb0 0a67 	vmov.f32	s0, s15
 800631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	2100      	movs	r1, #0
 8006320:	f7fe f9b0 	bl	8004684 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
 8006324:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
    if (x != EIDSP_OK) {
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x15c>
        ei_printf("ERR: MFE failed (%d)\n", x);
 800632c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800632e:	480e      	ldr	r0, [pc, #56]	; (8006368 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x18c>)
 8006330:	f002 fc30 	bl	8008b94 <_Z9ei_printfPKcz>
        EIDSP_ERR(x);
 8006334:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8006336:	e00c      	b.n	8006352 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x176>
    }

    matrix_size_out->rows += out_matrix_size.rows;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	441a      	add	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	601a      	str	r2, [r3, #0]
    if (out_matrix_size.cols > 0) {
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x174>
        matrix_size_out->cols = out_matrix_size.cols;
 800634a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	605a      	str	r2, [r3, #4]
    }

    return EIDSP_OK;
 8006350:	2400      	movs	r4, #0
}
 8006352:	f107 031c 	add.w	r3, r7, #28
 8006356:	4618      	mov	r0, r3
 8006358:	f7fa ff71 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 800635c:	4623      	mov	r3, r4
 800635e:	4618      	mov	r0, r3
 8006360:	3740      	adds	r7, #64	; 0x40
 8006362:	46bd      	mov	sp, r7
 8006364:	bdb0      	pop	{r4, r5, r7, pc}
 8006366:	bf00      	nop
 8006368:	08030c90 	.word	0x08030c90

0800636c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE>:

__attribute__((unused)) int extract_mfe_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency, matrix_size_t *matrix_size_out) {
 800636c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636e:	b0b1      	sub	sp, #196	; 0xc4
 8006370:	af00      	add	r7, sp, #0
 8006372:	6178      	str	r0, [r7, #20]
 8006374:	6139      	str	r1, [r7, #16]
 8006376:	60fa      	str	r2, [r7, #12]
 8006378:	ed87 0a02 	vstr	s0, [r7, #8]
 800637c:	607b      	str	r3, [r7, #4]
#if defined(__cplusplus) && EI_C_LINKAGE == 1
    ei_printf("ERR: Continuous audio is not supported when EI_C_LINKAGE is defined\n");
    EIDSP_ERR(EIDSP_NOT_SUPPORTED);
#else

    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8006384:	461d      	mov	r5, r3
 8006386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800638a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800638c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800638e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006392:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    // signal is already the right size,
    // output matrix is not the right size, but we can start writing at offset 0 and then it's OK too

    static bool first_run = false;

    if (config.axes != 1) {
 8006396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d001      	beq.n	80063a0 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x34>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800639c:	4eb4      	ldr	r6, [pc, #720]	; (8006670 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x304>)
 800639e:	e2eb      	b.n	8006978 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x60c>
    }

    if ((config.implementation_version == 0) || (config.implementation_version > 4)) {
 80063a0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x44>
 80063a8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d902      	bls.n	80063b6 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4a>
        EIDSP_ERR(EIDSP_BLOCK_VERSION_INCORRECT);
 80063b0:	f46f 767d 	mvn.w	r6, #1012	; 0x3f4
 80063b4:	e2e0      	b.n	8006978 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x60c>
    }

    if (signal->total_length == 0) {
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x56>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 80063be:	4ead      	ldr	r6, [pc, #692]	; (8006674 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x308>)
 80063c0:	e2da      	b.n	8006978 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x60c>
    }

    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 80063c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80063c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ca:	ee17 3a90 	vmov	r3, s15
 80063ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    // Fake an extra frame_length for stack frames calculations. There, 1 frame_length is always
    // subtracted and there for never used. But skip the first slice to fit the feature_matrix
    // buffer
    if (config.implementation_version == 1) {
 80063d2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d119      	bne.n	800640e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xa2>
        if (first_run == true) {
 80063da:	4ba7      	ldr	r3, [pc, #668]	; (8006678 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30c>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d112      	bne.n	8006408 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x9c>
            signal->total_length += (size_t)(config.frame_length * (float)frequency);
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80063ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063ee:	ee07 2a90 	vmov	s15, r2
 80063f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063fe:	ee17 2a90 	vmov	r2, s15
 8006402:	441a      	add	r2, r3
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	611a      	str	r2, [r3, #16]
        }

        first_run = true;
 8006408:	4b9b      	ldr	r3, [pc, #620]	; (8006678 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x30c>)
 800640a:	2201      	movs	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
    }

    // ok all setup, let's construct the signal (with preemphasis for impl version >3)
    signal_t preemphasized_audio_signal;
 800640e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fdaa 	bl	8004f6c <_ZN2ei11ei_signal_tC1Ev>

   // before version 3 we did not have preemphasis
    if (config.implementation_version < 3) {
 8006418:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800641c:	2b02      	cmp	r3, #2
 800641e:	d80d      	bhi.n	800643c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xd0>
        preemphasis = nullptr;
 8006420:	4b96      	ldr	r3, [pc, #600]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
        preemphasized_audio_signal.total_length = signal->total_length;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	663b      	str	r3, [r7, #96]	; 0x60
        preemphasized_audio_signal.get_data = signal->get_data;
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f002 fda3 	bl	8008f80 <_ZNSt8functionIFijjPfEEaSERKS2_>
 800643a:	e020      	b.n	800647e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x112>
    }
    else {
        // preemphasis class to preprocess the audio...
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
 800643c:	201c      	movs	r0, #28
 800643e:	f024 f8ec 	bl	802a61a <_Znwj>
 8006442:	4603      	mov	r3, r0
 8006444:	461c      	mov	r4, r3
 8006446:	2301      	movs	r3, #1
 8006448:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8006680 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x314>
 800644c:	2201      	movs	r2, #1
 800644e:	6979      	ldr	r1, [r7, #20]
 8006450:	4620      	mov	r0, r4
 8006452:	f7fc fc1d 	bl	8002c90 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
 8006456:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
        preemphasis = pre;
 800645a:	4a88      	ldr	r2, [pc, #544]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 800645c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006460:	6013      	str	r3, [r2, #0]
        preemphasized_audio_signal.total_length = signal->total_length;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	663b      	str	r3, [r7, #96]	; 0x60
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 8006468:	4b86      	ldr	r3, [pc, #536]	; (8006684 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x318>)
 800646a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800646e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006472:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006476:	4611      	mov	r1, r2
 8006478:	4618      	mov	r0, r3
 800647a:	f002 fd62 	bl	8008f42 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>
    }

    // Go from the time (e.g. 0.25 seconds to number of frames based on freq)
    const size_t frame_length_values = frequency * config.frame_length;
 800647e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800648a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800648e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006496:	ee17 3a90 	vmov	r3, s15
 800649a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    const size_t frame_stride_values = frequency * config.frame_stride;
 800649e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064aa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80064ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064b6:	ee17 3a90 	vmov	r3, s15
 80064ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    const int frame_overlap_values = static_cast<int>(frame_length_values) - static_cast<int>(frame_stride_values);
 80064be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    if (frame_overlap_values < 0) {
 80064cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	da25      	bge.n	8006520 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1b4>
        ei_printf("ERR: frame_length (");
 80064d4:	486c      	ldr	r0, [pc, #432]	; (8006688 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x31c>)
 80064d6:	f002 fb5d 	bl	8008b94 <_Z9ei_printfPKcz>
            ei_printf_float(config.frame_length);
 80064da:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80064de:	eeb0 0a67 	vmov.f32	s0, s15
 80064e2:	f01e fec5 	bl	8025270 <_Z15ei_printf_floatf>
            ei_printf(") cannot be lower than frame_stride (");
 80064e6:	4869      	ldr	r0, [pc, #420]	; (800668c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x320>)
 80064e8:	f002 fb54 	bl	8008b94 <_Z9ei_printfPKcz>
            ei_printf_float(config.frame_stride);
 80064ec:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80064f0:	eeb0 0a67 	vmov.f32	s0, s15
 80064f4:	f01e febc 	bl	8025270 <_Z15ei_printf_floatf>
            ei_printf(") for continuous classification\n");
 80064f8:	4865      	ldr	r0, [pc, #404]	; (8006690 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x324>)
 80064fa:	f002 fb4b 	bl	8008b94 <_Z9ei_printfPKcz>

        if (preemphasis) {
 80064fe:	4b5f      	ldr	r3, [pc, #380]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1b0>
            delete preemphasis;
 8006506:	4b5d      	ldr	r3, [pc, #372]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 8006508:	681c      	ldr	r4, [r3, #0]
 800650a:	2c00      	cmp	r4, #0
 800650c:	d006      	beq.n	800651c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1b0>
 800650e:	4620      	mov	r0, r4
 8006510:	f7fc fcde 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8006514:	211c      	movs	r1, #28
 8006516:	4620      	mov	r0, r4
 8006518:	f024 f86a 	bl	802a5f0 <_ZdlPvj>
        }
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800651c:	4e55      	ldr	r6, [pc, #340]	; (8006674 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x308>)
 800651e:	e226      	b.n	800696e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x602>
    }

    if (frame_length_values > preemphasized_audio_signal.total_length) {
 8006520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006522:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006526:	429a      	cmp	r2, r3
 8006528:	d917      	bls.n	800655a <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1ee>
        ei_printf("ERR: frame_length (%d) cannot be larger than signal's total length (%d) for continuous classification\n",
 800652a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
            (int)frame_length_values, (int)preemphasized_audio_signal.total_length);
 800652e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
        ei_printf("ERR: frame_length (%d) cannot be larger than signal's total length (%d) for continuous classification\n",
 8006530:	4619      	mov	r1, r3
 8006532:	4858      	ldr	r0, [pc, #352]	; (8006694 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x328>)
 8006534:	f002 fb2e 	bl	8008b94 <_Z9ei_printfPKcz>
        if (preemphasis) {
 8006538:	4b50      	ldr	r3, [pc, #320]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1ea>
            delete preemphasis;
 8006540:	4b4e      	ldr	r3, [pc, #312]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 8006542:	681c      	ldr	r4, [r3, #0]
 8006544:	2c00      	cmp	r4, #0
 8006546:	d006      	beq.n	8006556 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1ea>
 8006548:	4620      	mov	r0, r4
 800654a:	f7fc fcc1 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 800654e:	211c      	movs	r1, #28
 8006550:	4620      	mov	r0, r4
 8006552:	f024 f84d 	bl	802a5f0 <_ZdlPvj>
        }
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8006556:	4e47      	ldr	r6, [pc, #284]	; (8006674 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x308>)
 8006558:	e209      	b.n	800696e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x602>
    }

    int x;

    // have current frame, but wrong size? then free
    if (ei_dsp_cont_current_frame && ei_dsp_cont_current_frame_size != frame_length_values) {
 800655a:	4b4f      	ldr	r3, [pc, #316]	; (8006698 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00d      	beq.n	800657e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x212>
 8006562:	4b4e      	ldr	r3, [pc, #312]	; (800669c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x330>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800656a:	429a      	cmp	r2, r3
 800656c:	d007      	beq.n	800657e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x212>
        ei_free(ei_dsp_cont_current_frame);
 800656e:	4b4a      	ldr	r3, [pc, #296]	; (8006698 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f01e ff9a 	bl	80254ac <_Z7ei_freePv>
        ei_dsp_cont_current_frame = nullptr;
 8006578:	4b47      	ldr	r3, [pc, #284]	; (8006698 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
    }

    if (!ei_dsp_cont_current_frame) {
 800657e:	4b46      	ldr	r3, [pc, #280]	; (8006698 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d125      	bne.n	80065d2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x266>
        ei_dsp_cont_current_frame = (float*)ei_calloc(frame_length_values * sizeof(float), 1);
 8006586:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	2101      	movs	r1, #1
 800658e:	4618      	mov	r0, r3
 8006590:	f01e ff7e 	bl	8025490 <_Z9ei_callocjj>
 8006594:	4603      	mov	r3, r0
 8006596:	4a40      	ldr	r2, [pc, #256]	; (8006698 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 8006598:	6013      	str	r3, [r2, #0]
        if (!ei_dsp_cont_current_frame) {
 800659a:	4b3f      	ldr	r3, [pc, #252]	; (8006698 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d110      	bne.n	80065c4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x258>
            if (preemphasis) {
 80065a2:	4b36      	ldr	r3, [pc, #216]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x254>
                delete preemphasis;
 80065aa:	4b34      	ldr	r3, [pc, #208]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 80065ac:	681c      	ldr	r4, [r3, #0]
 80065ae:	2c00      	cmp	r4, #0
 80065b0:	d006      	beq.n	80065c0 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x254>
 80065b2:	4620      	mov	r0, r4
 80065b4:	f7fc fc8c 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 80065b8:	211c      	movs	r1, #28
 80065ba:	4620      	mov	r0, r4
 80065bc:	f024 f818 	bl	802a5f0 <_ZdlPvj>
            }
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80065c0:	4e37      	ldr	r6, [pc, #220]	; (80066a0 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x334>)
 80065c2:	e1d4      	b.n	800696e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x602>
        }
        ei_dsp_cont_current_frame_size = frame_length_values;
 80065c4:	4a35      	ldr	r2, [pc, #212]	; (800669c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x330>)
 80065c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065ca:	6013      	str	r3, [r2, #0]
        ei_dsp_cont_current_frame_ix = 0;
 80065cc:	4b35      	ldr	r3, [pc, #212]	; (80066a4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
    }

    matrix_size_out->rows = 0;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
    matrix_size_out->cols = 0;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	605a      	str	r2, [r3, #4]

    // this is the offset in the signal from which we'll work
    size_t offset_in_signal = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
 80065e4:	4b2f      	ldr	r3, [pc, #188]	; (80066a4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a2c      	ldr	r2, [pc, #176]	; (800669c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x330>)
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	f340 80c7 	ble.w	8006780 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x414>
        ei_printf("ERR: ei_dsp_cont_current_frame_ix is larger than frame size\n");
 80065f2:	482d      	ldr	r0, [pc, #180]	; (80066a8 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x33c>)
 80065f4:	f002 face 	bl	8008b94 <_Z9ei_printfPKcz>
        if (preemphasis) {
 80065f8:	4b20      	ldr	r3, [pc, #128]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2aa>
            delete preemphasis;
 8006600:	4b1e      	ldr	r3, [pc, #120]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 8006602:	681c      	ldr	r4, [r3, #0]
 8006604:	2c00      	cmp	r4, #0
 8006606:	d006      	beq.n	8006616 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2aa>
 8006608:	4620      	mov	r0, r4
 800660a:	f7fc fc61 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 800660e:	211c      	movs	r1, #28
 8006610:	4620      	mov	r0, r4
 8006612:	f023 ffed 	bl	802a5f0 <_ZdlPvj>
        }
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8006616:	4e17      	ldr	r6, [pc, #92]	; (8006674 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x308>)
 8006618:	e1a9      	b.n	800696e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x602>

    // if we still have some code from previous run
    while (ei_dsp_cont_current_frame_ix > 0) {
        // then from the current frame we need to read `frame_length_values - ei_dsp_cont_current_frame_ix`
        // starting at offset 0
        x = preemphasized_audio_signal.get_data(0, frame_length_values - ei_dsp_cont_current_frame_ix, ei_dsp_cont_current_frame + ei_dsp_cont_current_frame_ix);
 800661a:	4b22      	ldr	r3, [pc, #136]	; (80066a4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006624:	1a99      	subs	r1, r3, r2
 8006626:	4b1c      	ldr	r3, [pc, #112]	; (8006698 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32c>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x338>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006636:	460a      	mov	r2, r1
 8006638:	2100      	movs	r1, #0
 800663a:	f002 fb7e 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 800663e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (x != EIDSP_OK) {
 8006642:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d030      	beq.n	80066ac <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x340>
            if (preemphasis) {
 800664a:	4b0c      	ldr	r3, [pc, #48]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2fc>
                delete preemphasis;
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x310>)
 8006654:	681c      	ldr	r4, [r3, #0]
 8006656:	2c00      	cmp	r4, #0
 8006658:	d006      	beq.n	8006668 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2fc>
 800665a:	4620      	mov	r0, r4
 800665c:	f7fc fc38 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8006660:	211c      	movs	r1, #28
 8006662:	4620      	mov	r0, r4
 8006664:	f023 ffc4 	bl	802a5f0 <_ZdlPvj>
            }
            EIDSP_ERR(x);
 8006668:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 800666c:	e17e      	b.n	800696c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x600>
 800666e:	bf00      	nop
 8006670:	fffffc14 	.word	0xfffffc14
 8006674:	fffffc10 	.word	0xfffffc10
 8006678:	20000675 	.word	0x20000675
 800667c:	20000670 	.word	0x20000670
 8006680:	3f7ae148 	.word	0x3f7ae148
 8006684:	0800507d 	.word	0x0800507d
 8006688:	08030af8 	.word	0x08030af8
 800668c:	08030b0c 	.word	0x08030b0c
 8006690:	08030b34 	.word	0x08030b34
 8006694:	08030b58 	.word	0x08030b58
 8006698:	20000664 	.word	0x20000664
 800669c:	20000668 	.word	0x20000668
 80066a0:	fffffc16 	.word	0xfffffc16
 80066a4:	2000066c 	.word	0x2000066c
 80066a8:	08030c50 	.word	0x08030c50
        }

        // now ei_dsp_cont_current_frame is complete
        signal_t frame_signal;
 80066ac:	f107 031c 	add.w	r3, r7, #28
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe fc5b 	bl	8004f6c <_ZN2ei11ei_signal_tC1Ev>
        x = numpy::signal_from_buffer(ei_dsp_cont_current_frame, frame_length_values, &frame_signal);
 80066b6:	4bb3      	ldr	r3, [pc, #716]	; (8006984 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x618>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f107 021c 	add.w	r2, r7, #28
 80066be:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fb fc72 	bl	8001fac <_ZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tE>
 80066c8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (x != EIDSP_OK) {
 80066cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d012      	beq.n	80066fa <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x38e>
            if (preemphasis) {
 80066d4:	4bac      	ldr	r3, [pc, #688]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00a      	beq.n	80066f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x386>
                delete preemphasis;
 80066dc:	4baa      	ldr	r3, [pc, #680]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 80066de:	681c      	ldr	r4, [r3, #0]
 80066e0:	2c00      	cmp	r4, #0
 80066e2:	d006      	beq.n	80066f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x386>
 80066e4:	4620      	mov	r0, r4
 80066e6:	f7fc fbf3 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 80066ea:	211c      	movs	r1, #28
 80066ec:	4620      	mov	r0, r4
 80066ee:	f023 ff7f 	bl	802a5f0 <_ZdlPvj>
            }
            EIDSP_ERR(x);
 80066f2:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 80066f6:	2400      	movs	r4, #0
 80066f8:	e03a      	b.n	8006770 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x404>
        }

        x = extract_mfe_run_slice(&frame_signal, output_matrix, &config, sampling_frequency, matrix_size_out);
 80066fa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80066fe:	f107 001c 	add.w	r0, r7, #28
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	ed97 0a02 	vldr	s0, [r7, #8]
 8006708:	6939      	ldr	r1, [r7, #16]
 800670a:	f7ff fd67 	bl	80061dc <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE>
 800670e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (x != EIDSP_OK) {
 8006712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d012      	beq.n	8006740 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3d4>
            if (preemphasis) {
 800671a:	4b9b      	ldr	r3, [pc, #620]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3cc>
                delete preemphasis;
 8006722:	4b99      	ldr	r3, [pc, #612]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 8006724:	681c      	ldr	r4, [r3, #0]
 8006726:	2c00      	cmp	r4, #0
 8006728:	d006      	beq.n	8006738 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3cc>
 800672a:	4620      	mov	r0, r4
 800672c:	f7fc fbd0 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8006730:	211c      	movs	r1, #28
 8006732:	4620      	mov	r0, r4
 8006734:	f023 ff5c 	bl	802a5f0 <_ZdlPvj>
            }
            EIDSP_ERR(x);
 8006738:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 800673c:	2400      	movs	r4, #0
 800673e:	e017      	b.n	8006770 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x404>
        }

        // if there's overlap between frames we roll through
        if (frame_stride_values > 0) {
 8006740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006744:	2b00      	cmp	r3, #0
 8006746:	d009      	beq.n	800675c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3f0>
            numpy::roll(ei_dsp_cont_current_frame, frame_length_values, -frame_stride_values);
 8006748:	4b8e      	ldr	r3, [pc, #568]	; (8006984 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x618>)
 800674a:	6818      	ldr	r0, [r3, #0]
 800674c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006750:	425b      	negs	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006758:	f7fa fe04 	bl	8001364 <_ZN2ei5numpy4rollEPfji>
        }

        ei_dsp_cont_current_frame_ix -= frame_stride_values;
 800675c:	4b8b      	ldr	r3, [pc, #556]	; (800698c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x620>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	461a      	mov	r2, r3
 800676a:	4b88      	ldr	r3, [pc, #544]	; (800698c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x620>)
 800676c:	601a      	str	r2, [r3, #0]
    }
 800676e:	2401      	movs	r4, #1
 8006770:	f107 031c 	add.w	r3, r7, #28
 8006774:	4618      	mov	r0, r3
 8006776:	f7fe fc06 	bl	8004f86 <_ZN2ei11ei_signal_tD1Ev>
 800677a:	2c01      	cmp	r4, #1
 800677c:	f040 80f6 	bne.w	800696c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x600>
    while (ei_dsp_cont_current_frame_ix > 0) {
 8006780:	4b82      	ldr	r3, [pc, #520]	; (800698c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x620>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f73f af48 	bgt.w	800661a <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2ae>

    if (ei_dsp_cont_current_frame_ix < 0) {
 800678a:	4b80      	ldr	r3, [pc, #512]	; (800698c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x620>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	da07      	bge.n	80067a2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x436>
        offset_in_signal = -ei_dsp_cont_current_frame_ix;
 8006792:	4b7e      	ldr	r3, [pc, #504]	; (800698c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x620>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	425b      	negs	r3, r3
 8006798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        ei_dsp_cont_current_frame_ix = 0;
 800679c:	4b7b      	ldr	r3, [pc, #492]	; (800698c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x620>)
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
    }

    if (offset_in_signal >= signal->total_length) {
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d317      	bcc.n	80067de <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x472>
        if (preemphasis) {
 80067ae:	4b76      	ldr	r3, [pc, #472]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x460>
            delete preemphasis;
 80067b6:	4b74      	ldr	r3, [pc, #464]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 80067b8:	681c      	ldr	r4, [r3, #0]
 80067ba:	2c00      	cmp	r4, #0
 80067bc:	d006      	beq.n	80067cc <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x460>
 80067be:	4620      	mov	r0, r4
 80067c0:	f7fc fb86 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 80067c4:	211c      	movs	r1, #28
 80067c6:	4620      	mov	r0, r4
 80067c8:	f023 ff12 	bl	802a5f0 <_ZdlPvj>
        }
        offset_in_signal -= signal->total_length;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        return EIDSP_OK;
 80067da:	2600      	movs	r6, #0
 80067dc:	e0c7      	b.n	800696e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x602>
    }

    // now... we need to discard part of the signal...
    SignalWithRange signal_with_range(&preemphasized_audio_signal, offset_in_signal, signal->total_length);
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80067e6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80067ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80067ee:	f7fe fbd7 	bl	8004fa0 <_ZN15SignalWithRangeC1EPN2ei11ei_signal_tEmm>

    signal_t *range_signal = signal_with_range.get_signal();
 80067f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe fbff 	bl	8004ffa <_ZN15SignalWithRange10get_signalEv>
 80067fc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    size_t range_signal_orig_length = range_signal->total_length;
 8006800:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    // then we'll just go through normal processing of the signal:
    x = extract_mfe_run_slice(range_signal, output_matrix, &config, sampling_frequency, matrix_size_out);
 800680a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	ed97 0a02 	vldr	s0, [r7, #8]
 8006814:	6939      	ldr	r1, [r7, #16]
 8006816:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800681a:	f7ff fcdf 	bl	80061dc <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE>
 800681e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    if (x != EIDSP_OK) {
 8006822:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d011      	beq.n	800684e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4e2>
        if (preemphasis) {
 800682a:	4b57      	ldr	r3, [pc, #348]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4dc>
            delete preemphasis;
 8006832:	4b55      	ldr	r3, [pc, #340]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 8006834:	681c      	ldr	r4, [r3, #0]
 8006836:	2c00      	cmp	r4, #0
 8006838:	d006      	beq.n	8006848 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4dc>
 800683a:	4620      	mov	r0, r4
 800683c:	f7fc fb48 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8006840:	211c      	movs	r1, #28
 8006842:	4620      	mov	r0, r4
 8006844:	f023 fed4 	bl	802a5f0 <_ZdlPvj>
        }
        EIDSP_ERR(x);
 8006848:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 800684c:	e088      	b.n	8006960 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5f4>
    }

    // update offset
    int length_of_signal_used = speechpy::processing::calculate_signal_used(range_signal->total_length, sampling_frequency,
 800684e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006852:	6918      	ldr	r0, [r3, #16]
 8006854:	edd7 7a02 	vldr	s15, [r7, #8]
 8006858:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800685c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006860:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8006864:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006868:	2200      	movs	r2, #0
 800686a:	eef0 0a47 	vmov.f32	s1, s14
 800686e:	eeb0 0a67 	vmov.f32	s0, s15
 8006872:	ee16 1a90 	vmov	r1, s13
 8006876:	f7fc fb87 	bl	8002f88 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt>
 800687a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        config.frame_length, config.frame_stride, false, config.implementation_version);
    offset_in_signal += length_of_signal_used;
 800687e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006882:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006886:	4413      	add	r3, r2
 8006888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    // not sure why this is being manipulated...
    range_signal->total_length = range_signal_orig_length;
 800688c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006890:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006894:	611a      	str	r2, [r3, #16]

    // see what's left?
    int bytes_left_end_of_frame = signal->total_length - offset_in_signal;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    bytes_left_end_of_frame += frame_overlap_values;
 80068a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068ac:	4413      	add	r3, r2
 80068ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    if (bytes_left_end_of_frame > 0) {
 80068b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	dd23      	ble.n	8006902 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x596>
        // then read that into the ei_dsp_cont_current_frame buffer
        x = preemphasized_audio_signal.get_data(
            (preemphasized_audio_signal.total_length - bytes_left_end_of_frame),
 80068ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
        x = preemphasized_audio_signal.get_data(
 80068c0:	1ad1      	subs	r1, r2, r3
 80068c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068c6:	4b2f      	ldr	r3, [pc, #188]	; (8006984 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x618>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80068ce:	f002 fa34 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 80068d2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            bytes_left_end_of_frame,
            ei_dsp_cont_current_frame);
        if (x != EIDSP_OK) {
 80068d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d011      	beq.n	8006902 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x596>
            if (preemphasis) {
 80068de:	4b2a      	ldr	r3, [pc, #168]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x590>
                delete preemphasis;
 80068e6:	4b28      	ldr	r3, [pc, #160]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 80068e8:	681c      	ldr	r4, [r3, #0]
 80068ea:	2c00      	cmp	r4, #0
 80068ec:	d006      	beq.n	80068fc <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x590>
 80068ee:	4620      	mov	r0, r4
 80068f0:	f7fc faee 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 80068f4:	211c      	movs	r1, #28
 80068f6:	4620      	mov	r0, r4
 80068f8:	f023 fe7a 	bl	802a5f0 <_ZdlPvj>
            }
            EIDSP_ERR(x);
 80068fc:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 8006900:	e02e      	b.n	8006960 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5f4>
        }
    }

    ei_dsp_cont_current_frame_ix = bytes_left_end_of_frame;
 8006902:	4a22      	ldr	r2, [pc, #136]	; (800698c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x620>)
 8006904:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006908:	6013      	str	r3, [r2, #0]


    if (config.implementation_version == 1) {
 800690a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800690e:	2b01      	cmp	r3, #1
 8006910:	d116      	bne.n	8006940 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5d4>
        if (first_run == true) {
 8006912:	4b1f      	ldr	r3, [pc, #124]	; (8006990 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x624>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d112      	bne.n	8006940 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5d4>
            signal->total_length -= (size_t)(config.frame_length * (float)frequency);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8006922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006926:	ee07 2a90 	vmov	s15, r2
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006936:	ee17 2a90 	vmov	r2, s15
 800693a:	1a9a      	subs	r2, r3, r2
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	611a      	str	r2, [r3, #16]
        }
    }

    if (preemphasis) {
 8006940:	4b11      	ldr	r3, [pc, #68]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5f2>
        delete preemphasis;
 8006948:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
 800694a:	681c      	ldr	r4, [r3, #0]
 800694c:	2c00      	cmp	r4, #0
 800694e:	d006      	beq.n	800695e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5f2>
 8006950:	4620      	mov	r0, r4
 8006952:	f7fc fabd 	bl	8002ed0 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8006956:	211c      	movs	r1, #28
 8006958:	4620      	mov	r0, r4
 800695a:	f023 fe49 	bl	802a5f0 <_ZdlPvj>
    }

    return EIDSP_OK;
 800695e:	2600      	movs	r6, #0
#endif
}
 8006960:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe fd3d 	bl	80053e4 <_ZN15SignalWithRangeD1Ev>
 800696a:	e000      	b.n	800696e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x602>
            EIDSP_ERR(x);
 800696c:	bf00      	nop
}
 800696e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006972:	4618      	mov	r0, r3
 8006974:	f7fe fb07 	bl	8004f86 <_ZN2ei11ei_signal_tD1Ev>
 8006978:	4633      	mov	r3, r6
 800697a:	4618      	mov	r0, r3
 800697c:	37c4      	adds	r7, #196	; 0xc4
 800697e:	46bd      	mov	sp, r7
 8006980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006982:	bf00      	nop
 8006984:	20000664 	.word	0x20000664
 8006988:	20000670 	.word	0x20000670
 800698c:	2000066c 	.word	0x2000066c
 8006990:	20000675 	.word	0x20000675

08006994 <_ZN12_GLOBAL__N_145calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv>:
 *
 * @param      matrix      Source and destination matrix
 * @param      config_ptr  ei_dsp_config_mfcc_t struct pointer
 */
__attribute__((unused)) void calc_cepstral_mean_and_var_normalization_mfcc(ei_matrix *matrix, void *config_ptr)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
    ei_dsp_config_mfcc_t *config = (ei_dsp_config_mfcc_t *)config_ptr;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	617b      	str	r3, [r7, #20]

    uint32_t original_matrix_size = matrix->rows * matrix->cols;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6892      	ldr	r2, [r2, #8]
 80069aa:	fb02 f303 	mul.w	r3, r2, r3
 80069ae:	613b      	str	r3, [r7, #16]

    /* Modify rows and colums ration for matrix normalization */
    matrix->rows = original_matrix_size / config->num_cepstral;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	461a      	mov	r2, r3
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	605a      	str	r2, [r3, #4]
    matrix->cols = config->num_cepstral;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	461a      	mov	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	609a      	str	r2, [r3, #8]

    // cepstral mean and variance normalization
    int ret = speechpy::processing::cmvnw(matrix, config->win_size, true, false);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	b299      	uxth	r1, r3
 80069d0:	2300      	movs	r3, #0
 80069d2:	2201      	movs	r2, #1
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fc fd4b 	bl	8003470 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
 80069da:	60f8      	str	r0, [r7, #12]
    if (ret != EIDSP_OK) {
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <_ZN12_GLOBAL__N_145calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv+0x58>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	4806      	ldr	r0, [pc, #24]	; (8006a00 <_ZN12_GLOBAL__N_145calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv+0x6c>)
 80069e6:	f002 f8d5 	bl	8008b94 <_Z9ei_printfPKcz>
        return;
 80069ea:	e005      	b.n	80069f8 <_ZN12_GLOBAL__N_145calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv+0x64>
    }

    /* Reset rows and columns ratio */
    matrix->rows = 1;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	605a      	str	r2, [r3, #4]
    matrix->cols = original_matrix_size;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	609a      	str	r2, [r3, #8]
}
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	08030ae0 	.word	0x08030ae0

08006a04 <_ZN12_GLOBAL__N_144calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv>:
 *
 * @param      matrix      Source and destination matrix
 * @param      config_ptr  ei_dsp_config_mfe_t struct pointer
 */
__attribute__((unused)) void calc_cepstral_mean_and_var_normalization_mfe(ei_matrix *matrix, void *config_ptr)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
    ei_dsp_config_mfe_t *config = (ei_dsp_config_mfe_t *)config_ptr;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	617b      	str	r3, [r7, #20]

    uint32_t original_matrix_size = matrix->rows * matrix->cols;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6892      	ldr	r2, [r2, #8]
 8006a1a:	fb02 f303 	mul.w	r3, r2, r3
 8006a1e:	613b      	str	r3, [r7, #16]

    /* Modify rows and colums ration for matrix normalization */
    matrix->rows = (original_matrix_size) / config->num_filters;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	461a      	mov	r2, r3
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	605a      	str	r2, [r3, #4]
    matrix->cols = config->num_filters;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	461a      	mov	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	609a      	str	r2, [r3, #8]

    if (config->implementation_version < 3) {
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	889b      	ldrh	r3, [r3, #4]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d810      	bhi.n	8006a64 <_ZN12_GLOBAL__N_144calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x60>
        // cepstral mean and variance normalization
        int ret = speechpy::processing::cmvnw(matrix, config->win_size, false, true);
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	b299      	uxth	r1, r3
 8006a48:	2301      	movs	r3, #1
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fc fd0f 	bl	8003470 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
 8006a52:	60b8      	str	r0, [r7, #8]
        if (ret != EIDSP_OK) {
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d013      	beq.n	8006a82 <_ZN12_GLOBAL__N_144calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x7e>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
 8006a5a:	68b9      	ldr	r1, [r7, #8]
 8006a5c:	480d      	ldr	r0, [pc, #52]	; (8006a94 <_ZN12_GLOBAL__N_144calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x90>)
 8006a5e:	f002 f899 	bl	8008b94 <_Z9ei_printfPKcz>
            return;
 8006a62:	e014      	b.n	8006a8e <_ZN12_GLOBAL__N_144calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x8a>
        }
    }
    else {
        // normalization
        int ret = speechpy::processing::mfe_normalization(matrix, config->noise_floor_db);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fc fe80 	bl	8003770 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
 8006a70:	60f8      	str	r0, [r7, #12]
        if (ret != EIDSP_OK) {
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <_ZN12_GLOBAL__N_144calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x7e>
            ei_printf("ERR: normalization failed (%d)\n", ret);
 8006a78:	68f9      	ldr	r1, [r7, #12]
 8006a7a:	4807      	ldr	r0, [pc, #28]	; (8006a98 <_ZN12_GLOBAL__N_144calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x94>)
 8006a7c:	f002 f88a 	bl	8008b94 <_Z9ei_printfPKcz>
            return;
 8006a80:	e005      	b.n	8006a8e <_ZN12_GLOBAL__N_144calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x8a>
        }
    }

    /* Reset rows and columns ratio */
    matrix->rows = 1;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	605a      	str	r2, [r3, #4]
    matrix->cols = (original_matrix_size);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	609a      	str	r2, [r3, #8]
}
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	08030ae0 	.word	0x08030ae0
 8006a98:	08030c30 	.word	0x08030c30

08006a9c <_ZN12_GLOBAL__N_152calc_cepstral_mean_and_var_normalization_spectrogramEPN2ei9ei_matrixEPv>:
 *
 * @param      matrix      Source and destination matrix
 * @param      config_ptr  ei_dsp_config_spectrogram_t struct pointer
 */
__attribute__((unused)) void calc_cepstral_mean_and_var_normalization_spectrogram(ei_matrix *matrix, void *config_ptr)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
    ei_dsp_config_spectrogram_t *config = (ei_dsp_config_spectrogram_t *)config_ptr;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	617b      	str	r3, [r7, #20]

    uint32_t original_matrix_size = matrix->rows * matrix->cols;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6892      	ldr	r2, [r2, #8]
 8006ab2:	fb02 f303 	mul.w	r3, r2, r3
 8006ab6:	613b      	str	r3, [r7, #16]

    /* Modify rows and colums ration for matrix normalization */
    matrix->cols = config->fft_length / 2 + 1;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	0fda      	lsrs	r2, r3, #31
 8006abe:	4413      	add	r3, r2
 8006ac0:	105b      	asrs	r3, r3, #1
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	609a      	str	r2, [r3, #8]
    matrix->rows = (original_matrix_size) / matrix->cols;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	605a      	str	r2, [r3, #4]

    if (config->implementation_version < 3) {
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	889b      	ldrh	r3, [r3, #4]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d80b      	bhi.n	8006af8 <_ZN12_GLOBAL__N_152calc_cepstral_mean_and_var_normalization_spectrogramEPN2ei9ei_matrixEPv+0x5c>
        int ret = numpy::normalize(matrix);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7fb fb0d 	bl	8002100 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
 8006ae6:	60b8      	str	r0, [r7, #8]
        if (ret != EIDSP_OK) {
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01a      	beq.n	8006b24 <_ZN12_GLOBAL__N_152calc_cepstral_mean_and_var_normalization_spectrogramEPN2ei9ei_matrixEPv+0x88>
            ei_printf("ERR: normalization failed (%d)\n", ret);
 8006aee:	68b9      	ldr	r1, [r7, #8]
 8006af0:	4811      	ldr	r0, [pc, #68]	; (8006b38 <_ZN12_GLOBAL__N_152calc_cepstral_mean_and_var_normalization_spectrogramEPN2ei9ei_matrixEPv+0x9c>)
 8006af2:	f002 f84f 	bl	8008b94 <_Z9ei_printfPKcz>
            return;
 8006af6:	e01b      	b.n	8006b30 <_ZN12_GLOBAL__N_152calc_cepstral_mean_and_var_normalization_spectrogramEPN2ei9ei_matrixEPv+0x94>
        }
    }
    else {
        // normalization
        int ret = speechpy::processing::spectrogram_normalization(matrix, config->noise_floor_db, config->implementation_version == 3);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	6999      	ldr	r1, [r3, #24]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	889b      	ldrh	r3, [r3, #4]
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	bf0c      	ite	eq
 8006b04:	2301      	moveq	r3, #1
 8006b06:	2300      	movne	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7fc ff27 	bl	8003960 <_ZN2ei8speechpy10processingL25spectrogram_normalizationEPNS_9ei_matrixEib>
 8006b12:	60f8      	str	r0, [r7, #12]
        if (ret != EIDSP_OK) {
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d004      	beq.n	8006b24 <_ZN12_GLOBAL__N_152calc_cepstral_mean_and_var_normalization_spectrogramEPN2ei9ei_matrixEPv+0x88>
            ei_printf("ERR: normalization failed (%d)\n", ret);
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	4806      	ldr	r0, [pc, #24]	; (8006b38 <_ZN12_GLOBAL__N_152calc_cepstral_mean_and_var_normalization_spectrogramEPN2ei9ei_matrixEPv+0x9c>)
 8006b1e:	f002 f839 	bl	8008b94 <_Z9ei_printfPKcz>
            return;
 8006b22:	e005      	b.n	8006b30 <_ZN12_GLOBAL__N_152calc_cepstral_mean_and_var_normalization_spectrogramEPN2ei9ei_matrixEPv+0x94>
        }
    }

    /* Reset rows and columns ratio */
    matrix->rows = 1;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	605a      	str	r2, [r3, #4]
    matrix->cols = (original_matrix_size);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	609a      	str	r2, [r3, #8]
}
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	08030c30 	.word	0x08030c30

08006b3c <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	609a      	str	r2, [r3, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	60da      	str	r2, [r3, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3310      	adds	r3, #16
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fa00 	bl	8004f6c <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	f000 f832 	bl	8006bf6 <_ZN14SignalWithAxes8get_dataEjjPf>
 8006b92:	4603      	mov	r3, r0
        };
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d102      	bne.n	8006bb8 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	e01a      	b.n	8006bee <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6892      	ldr	r2, [r2, #8]
 8006bcc:	fb03 f202 	mul.w	r2, r3, r2
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	621a      	str	r2, [r3, #32]
        };
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f103 0210 	add.w	r2, r3, #16
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	f107 030c 	add.w	r3, r7, #12
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f002 f9e6 	bl	8008fb6 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>
#endif
        return &wrapped_signal;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3310      	adds	r3, #16
    }
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b08a      	sub	sp, #40	; 0x28
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	607a      	str	r2, [r7, #4]
 8006c02:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	68d2      	ldr	r2, [r2, #12]
 8006c12:	6992      	ldr	r2, [r2, #24]
 8006c14:	fb02 f303 	mul.w	r3, r2, r3
 8006c18:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	68d2      	ldr	r2, [r2, #12]
 8006c28:	6992      	ldr	r2, [r2, #24]
 8006c2a:	fb02 f303 	mul.w	r3, r2, r3
 8006c2e:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	623b      	str	r3, [r7, #32]
 8006c38:	e02a      	b.n	8006c90 <_ZN14SignalWithAxes8get_dataEjjPf+0x9a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	e01c      	b.n	8006c7a <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	18d1      	adds	r1, r2, r3
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	627a      	str	r2, [r7, #36]	; 0x24
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	4413      	add	r3, r2
 8006c62:	2201      	movs	r2, #1
 8006c64:	f002 f869 	bl	8008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8006c68:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <_ZN14SignalWithAxes8get_dataEjjPf+0x7e>
                    return r;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	e014      	b.n	8006c9e <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	3301      	adds	r3, #1
 8006c78:	61fb      	str	r3, [r7, #28]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d3dd      	bcc.n	8006c40 <_ZN14SignalWithAxes8get_dataEjjPf+0x4a>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	6a3a      	ldr	r2, [r7, #32]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	623b      	str	r3, [r7, #32]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	4413      	add	r3, r2
 8006c96:	6a3a      	ldr	r2, [r7, #32]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d3ce      	bcc.n	8006c3a <_ZN14SignalWithAxes8get_dataEjjPf+0x44>
                }
            }
        }

        return 0;
 8006c9c:	2300      	movs	r3, #0
    }
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3728      	adds	r7, #40	; 0x28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <_ZN19ei_impulse_handle_tD1Ev>:
class ei_impulse_handle_t {
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fb fe5f 	bl	8002974 <_ZN18ei_impulse_state_tD1Ev>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <_ZL27fill_result_struct_f32_fomoPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfii>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            const ei_learning_block_config_tflite_graph_t *block_config,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8006cce:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <_ZL26fill_result_struct_i8_fomoPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8006cde:	b480      	push	{r7}
 8006ce0:	b087      	sub	sp, #28
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6178      	str	r0, [r7, #20]
 8006ce6:	6139      	str	r1, [r7, #16]
 8006ce8:	60fa      	str	r2, [r7, #12]
 8006cea:	60bb      	str	r3, [r7, #8]
 8006cec:	ed87 0a01 	vstr	s0, [r7, #4]
 8006cf0:	edc7 0a00 	vstr	s1, [r7]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8006cf4:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6178      	str	r0, [r7, #20]
 8006d0c:	6139      	str	r1, [r7, #16]
 8006d0e:	60fa      	str	r2, [r7, #12]
 8006d10:	ed87 0a02 	vstr	s0, [r7, #8]
 8006d14:	edc7 0a01 	vstr	s1, [r7, #4]
 8006d18:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	e03c      	b.n	8006d9a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x96>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f993 3000 	ldrsb.w	r3, [r3]
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d32:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8006d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d42:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8006d46:	78fb      	ldrb	r3, [r7, #3]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x6a>
            ei_printf("%s:\t", impulse->categories[ix]);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4816      	ldr	r0, [pc, #88]	; (8006db4 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 8006d5c:	f001 ff1a 	bl	8008b94 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8006d60:	ed97 0a06 	vldr	s0, [r7, #24]
 8006d64:	f01e fa84 	bl	8025270 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8006d68:	4813      	ldr	r0, [pc, #76]	; (8006db8 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 8006d6a:	f001 ff13 	bl	8008b94 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	6819      	ldr	r1, [r3, #0]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	69fa      	ldr	r2, [r7, #28]
 8006d7e:	3201      	adds	r2, #1
 8006d80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3304      	adds	r3, #4
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	3301      	adds	r3, #1
 8006d98:	61fb      	str	r3, [r7, #28]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006da0:	461a      	mov	r2, r3
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d3bb      	bcc.n	8006d20 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1c>
    }

    return EI_IMPULSE_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	08030d20 	.word	0x08030d20
 8006db8:	08030a94 	.word	0x08030a94

08006dbc <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e02f      	b.n	8006e30 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x74>
        float value = data[ix];
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	613b      	str	r3, [r7, #16]

        if (debug) {
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d010      	beq.n	8006e04 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x48>
            ei_printf("%s:\t", impulse->categories[ix]);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4619      	mov	r1, r3
 8006df0:	4815      	ldr	r0, [pc, #84]	; (8006e48 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x8c>)
 8006df2:	f001 fecf 	bl	8008b94 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8006df6:	ed97 0a04 	vldr	s0, [r7, #16]
 8006dfa:	f01e fa39 	bl	8025270 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8006dfe:	4813      	ldr	r0, [pc, #76]	; (8006e4c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8006e00:	f001 fec8 	bl	8008b94 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	6819      	ldr	r1, [r3, #0]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	3201      	adds	r2, #1
 8006e16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	4413      	add	r3, r2
 8006e24:	3304      	adds	r3, #4
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006e36:	461a      	mov	r2, r3
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d3c8      	bcc.n	8006dd0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x14>
    }

    return EI_IMPULSE_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	08030d20 	.word	0x08030d20
 8006e4c:	08030a94 	.word	0x08030a94

08006e50 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPffb>:
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_visual_ad_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       float threshold,
                                                                       bool debug) {
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6178      	str	r0, [r7, #20]
 8006e58:	6139      	str	r1, [r7, #16]
 8006e5a:	60fa      	str	r2, [r7, #12]
 8006e5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006e60:	71fb      	strb	r3, [r7, #7]
    }

    result->visual_ad_grid_cells = results.data();
    result->visual_ad_count = results.size();
#endif // EI_CLASSIFIER_HAS_VISUAL_ANOMALY
    return EI_IMPULSE_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tiPfjb>:
                                                                              const ei_learning_block_config_tflite_graph_t *block_config,
                                                                              ei_impulse_result_t *result,
                                                                              int version,
                                                                              float *data,
                                                                              size_t output_features_count,
                                                                              bool debug = false) {
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8006e7e:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolox(const ei_impulse_t *impulse,
                                                                             const ei_learning_block_config_tflite_graph_t *block_config,
                                                                             ei_impulse_result_t *result,
                                                                             float *data,
                                                                             size_t output_features_count,
                                                                             bool debug = false) {
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
 8006e9a:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8006e9c:	f06f 0314 	mvn.w	r3, #20
#endif // EI_HAS_YOLOX
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <_ZL29fill_result_struct_f32_yolov7PK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfj>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov7(const ei_impulse_t *impulse,
                                                                              const ei_learning_block_config_tflite_graph_t *block_config,
                                                                              ei_impulse_result_t *result,
                                                                              float *data,
                                                                              size_t output_features_count) {
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8006eba:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_YOLOV7
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_decode_detections(const ei_impulse_t *impulse,
                                                                                     const ei_learning_block_config_tflite_graph_t *block_config,
                                                                                     ei_impulse_result_t *result,
                                                                                     float *data,
                                                                                     size_t output_features_count,
                                                                                     bool debug = false) {
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
 8006ed6:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_DECODE_DETECTIONS
    return fill_result_struct_tao_decode_detections_common(impulse, result, data, 0.0f, 1.0f, output_features_count, block_config->threshold, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8006ed8:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_DETECT_DETECTIONS
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov3(const ei_impulse_t *impulse,
                                                                                const ei_learning_block_config_tflite_graph_t *block_config,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV3
    return fill_result_struct_tao_yolov3_common(impulse, result, data, 0.0f, 1.0f, output_features_count, block_config->threshold, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8006ef6:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV3
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov4(const ei_impulse_t *impulse,
                                                                                const ei_learning_block_config_tflite_graph_t *block_config,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
 8006f12:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, 0.0f, 1.0f, output_features_count, block_config->threshold, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8006f14:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <_ZL17pre_cast_quantizefflb>:
#define __EI_QUANTIZE__H__

#include <algorithm>
#include <cmath>

static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	ed87 0a03 	vstr	s0, [r7, #12]
 8006f2e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]

    int32_t max_value = is_signed ? 127 : 255;
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <_ZL17pre_cast_quantizefflb+0x1e>
 8006f3e:	237f      	movs	r3, #127	; 0x7f
 8006f40:	e000      	b.n	8006f44 <_ZL17pre_cast_quantizefflb+0x20>
 8006f42:	23ff      	movs	r3, #255	; 0xff
 8006f44:	61bb      	str	r3, [r7, #24]
    int32_t min_value = is_signed ? -128 : 0;
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <_ZL17pre_cast_quantizefflb+0x2e>
 8006f4c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8006f50:	e000      	b.n	8006f54 <_ZL17pre_cast_quantizefflb+0x30>
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 8006f56:	ed97 7a03 	vldr	s14, [r7, #12]
 8006f5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006f62:	eeb0 0a66 	vmov.f32	s0, s13
 8006f66:	f7fa f9c4 	bl	80012f2 <_ZSt5roundf>
 8006f6a:	eef0 7a40 	vmov.f32	s15, s0
 8006f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f72:	ee17 2a90 	vmov	r2, s15
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4413      	add	r3, r2
 8006f7a:	61fb      	str	r3, [r7, #28]
 8006f7c:	f107 0214 	add.w	r2, r7, #20
 8006f80:	f107 031c 	add.w	r3, r7, #28
 8006f84:	4611      	mov	r1, r2
 8006f86:	4618      	mov	r0, r3
 8006f88:	f002 f848 	bl	800901c <_ZSt3maxIlERKT_S2_S2_>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	f107 0318 	add.w	r3, r7, #24
 8006f92:	4619      	mov	r1, r3
 8006f94:	4610      	mov	r0, r2
 8006f96:	f002 f82d 	bl	8008ff4 <_ZSt3minIlERKT_S2_S2_>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	681b      	ldr	r3, [r3, #0]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3720      	adds	r7, #32
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d201      	bcs.n	8006fc0 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	e000      	b.n	8006fc2 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006fc0:	687b      	ldr	r3, [r7, #4]
    }
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
	...

08006fd0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08e      	sub	sp, #56	; 0x38
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
    size_t matrix_els = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t input_idx = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	633b      	str	r3, [r7, #48]	; 0x30

    for (size_t i = 0; i < input_block_ids_size; i++) {
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fea:	e098      	b.n	800711e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x14e>
        if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, mtx_size)) {
            ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
            return EI_IMPULSE_INVALID_SIZE;
        }
#else
        ei::matrix_t* matrix = fmatrix[0].matrix;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	61fb      	str	r3, [r7, #28]
#endif

        matrix_els += matrix->rows * matrix->cols;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	6892      	ldr	r2, [r2, #8]
 8006ffa:	fb02 f303 	mul.w	r3, r2, r3
 8006ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007000:	4413      	add	r3, r2
 8007002:	637b      	str	r3, [r7, #52]	; 0x34

        switch (input->type) {
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b09      	cmp	r3, #9
 800700a:	d024      	beq.n	8007056 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x86>
 800700c:	2b09      	cmp	r3, #9
 800700e:	dc7a      	bgt.n	8007106 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
 8007010:	2b01      	cmp	r3, #1
 8007012:	d002      	beq.n	800701a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x4a>
 8007014:	2b03      	cmp	r3, #3
 8007016:	d04a      	beq.n	80070ae <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xde>
 8007018:	e075      	b.n	8007106 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
            case kTfLiteFloat32: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 800701a:	2300      	movs	r3, #0
 800701c:	62bb      	str	r3, [r7, #40]	; 0x28
 800701e:	e010      	b.n	8007042 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x72>
                    input->data.f[input_idx++] = matrix->buffer[ix];
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	441a      	add	r2, r3
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6859      	ldr	r1, [r3, #4]
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	1c58      	adds	r0, r3, #1
 8007032:	6338      	str	r0, [r7, #48]	; 0x30
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	601a      	str	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	3301      	adds	r3, #1
 8007040:	62bb      	str	r3, [r7, #40]	; 0x28
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	6892      	ldr	r2, [r2, #8]
 800704a:	fb02 f303 	mul.w	r3, r2, r3
 800704e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007050:	429a      	cmp	r2, r3
 8007052:	d3e5      	bcc.n	8007020 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x50>
                }
                break;
 8007054:	e060      	b.n	8007118 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007056:	2300      	movs	r3, #0
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
 800705a:	e01e      	b.n	800709a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xca>
                    float val = (float)matrix->buffer[ix];
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	61bb      	str	r3, [r7, #24]
                    input->data.int8[input_idx++] = static_cast<int8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, true));
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2101      	movs	r1, #1
 8007076:	4618      	mov	r0, r3
 8007078:	eef0 0a67 	vmov.f32	s1, s15
 800707c:	ed97 0a06 	vldr	s0, [r7, #24]
 8007080:	f7ff ff50 	bl	8006f24 <_ZL17pre_cast_quantizefflb>
                    input->data.int8[input_idx++] = static_cast<int8_t>(
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708a:	1c59      	adds	r1, r3, #1
 800708c:	6339      	str	r1, [r7, #48]	; 0x30
 800708e:	4413      	add	r3, r2
 8007090:	b242      	sxtb	r2, r0
 8007092:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	3301      	adds	r3, #1
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	6892      	ldr	r2, [r2, #8]
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d3d7      	bcc.n	800705c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8c>
                }
                break;
 80070ac:	e034      	b.n	8007118 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteUInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80070ae:	2300      	movs	r3, #0
 80070b0:	623b      	str	r3, [r7, #32]
 80070b2:	e01e      	b.n	80070f2 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x122>
                    float val = (float)matrix->buffer[ix];
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	617b      	str	r3, [r7, #20]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2100      	movs	r1, #0
 80070ce:	4618      	mov	r0, r3
 80070d0:	eef0 0a67 	vmov.f32	s1, s15
 80070d4:	ed97 0a05 	vldr	s0, [r7, #20]
 80070d8:	f7ff ff24 	bl	8006f24 <_ZL17pre_cast_quantizefflb>
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	1c59      	adds	r1, r3, #1
 80070e4:	6339      	str	r1, [r7, #48]	; 0x30
 80070e6:	4413      	add	r3, r2
 80070e8:	b2c2      	uxtb	r2, r0
 80070ea:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	3301      	adds	r3, #1
 80070f0:	623b      	str	r3, [r7, #32]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	6892      	ldr	r2, [r2, #8]
 80070fa:	fb02 f303 	mul.w	r3, r2, r3
 80070fe:	6a3a      	ldr	r2, [r7, #32]
 8007100:	429a      	cmp	r2, r3
 8007102:	d3d7      	bcc.n	80070b4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xe4>
                break;
 8007104:	e008      	b.n	8007118 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	4619      	mov	r1, r3
 800710c:	4814      	ldr	r0, [pc, #80]	; (8007160 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x190>)
 800710e:	f001 fd41 	bl	8008b94 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 8007112:	f06f 030c 	mvn.w	r3, #12
 8007116:	e01e      	b.n	8007156 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    for (size_t i = 0; i < input_block_ids_size; i++) {
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	3301      	adds	r3, #1
 800711c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800711e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	f4ff af62 	bcc.w	8006fec <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1c>
            }
        }
    }

    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	089b      	lsrs	r3, r3, #2
 800712e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007130:	429a      	cmp	r2, r3
 8007132:	d00f      	beq.n	8007154 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800713a:	429a      	cmp	r2, r3
 800713c:	d00a      	beq.n	8007154 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
            (int)input->bytes, (int)matrix_els);
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	699b      	ldr	r3, [r3, #24]
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
 8007142:	4619      	mov	r1, r3
 8007144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007146:	461a      	mov	r2, r3
 8007148:	4806      	ldr	r0, [pc, #24]	; (8007164 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x194>)
 800714a:	f001 fd23 	bl	8008b94 <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
 800714e:	f06f 0317 	mvn.w	r3, #23
 8007152:	e000      	b.n	8007156 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    }

    return EI_IMPULSE_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3738      	adds	r7, #56	; 0x38
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	08030d28 	.word	0x08030d28
 8007164:	08030d4c 	.word	0x08030d4c

08007168 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	6892      	ldr	r2, [r2, #8]
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	617b      	str	r3, [r7, #20]

    switch (output->type) {
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b09      	cmp	r3, #9
 8007186:	d026      	beq.n	80071d6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x6e>
 8007188:	2b09      	cmp	r3, #9
 800718a:	f300 8093 	bgt.w	80072b4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
 800718e:	2b01      	cmp	r3, #1
 8007190:	d002      	beq.n	8007198 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x30>
 8007192:	2b03      	cmp	r3, #3
 8007194:	d057      	beq.n	8007246 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xde>
 8007196:	e08d      	b.n	80072b4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	089b      	lsrs	r3, r3, #2
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d00e      	beq.n	80071c2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x5a>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes / 4, (int)matrix_els);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	da00      	bge.n	80071ae <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x46>
 80071ac:	3303      	adds	r3, #3
 80071ae:	109b      	asrs	r3, r3, #2
 80071b0:	4619      	mov	r1, r3
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	461a      	mov	r2, r3
 80071b6:	4846      	ldr	r0, [pc, #280]	; (80072d0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 80071b8:	f001 fcec 	bl	8008b94 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 80071bc:	f06f 0317 	mvn.w	r3, #23
 80071c0:	e082      	b.n	80072c8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            memcpy(output_matrix->buffer, output->data.f, output->bytes);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6859      	ldr	r1, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f027 fb8b 	bl	802e8ea <memcpy>
            break;
 80071d4:	e077      	b.n	80072c6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteInt8: {
            if (output->bytes != matrix_els) {
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d00a      	beq.n	80071f6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x8e>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 80071e4:	4619      	mov	r1, r3
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	461a      	mov	r2, r3
 80071ea:	4839      	ldr	r0, [pc, #228]	; (80072d0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 80071ec:	f001 fcd2 	bl	8008b94 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 80071f0:	f06f 0317 	mvn.w	r3, #23
 80071f4:	e068      	b.n	80072c8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 80071f6:	2300      	movs	r3, #0
 80071f8:	61fb      	str	r3, [r7, #28]
 80071fa:	e01e      	b.n	800723a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd2>
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f993 3000 	ldrsb.w	r3, [r3]
 8007208:	461a      	mov	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	ee07 3a90 	vmov	s15, r3
 8007214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	edd3 7a03 	vldr	s15, [r3, #12]
 800721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007222:	edc7 7a04 	vstr	s15, [r7, #16]
                output_matrix->buffer[ix] = value;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	3301      	adds	r3, #1
 8007238:	61fb      	str	r3, [r7, #28]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	429a      	cmp	r2, r3
 8007242:	d3db      	bcc.n	80071fc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x94>
            }
            break;
 8007244:	e03f      	b.n	80072c6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteUInt8: {
            if (output->bytes != matrix_els) {
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	429a      	cmp	r2, r3
 800724e:	d00a      	beq.n	8007266 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xfe>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007254:	4619      	mov	r1, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	461a      	mov	r2, r3
 800725a:	481d      	ldr	r0, [pc, #116]	; (80072d0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 800725c:	f001 fc9a 	bl	8008b94 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007260:	f06f 0317 	mvn.w	r3, #23
 8007264:	e030      	b.n	80072c8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007266:	2300      	movs	r3, #0
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	e01d      	b.n	80072a8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x140>
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	4413      	add	r3, r2
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	edd3 7a03 	vldr	s15, [r3, #12]
 800728c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007290:	edc7 7a03 	vstr	s15, [r7, #12]
                output_matrix->buffer[ix] = value;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	3301      	adds	r3, #1
 80072a6:	61bb      	str	r3, [r7, #24]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d3dc      	bcc.n	800726c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x104>
            }
            break;
 80072b2:	e008      	b.n	80072c6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        default: {
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	4619      	mov	r1, r3
 80072ba:	4806      	ldr	r0, [pc, #24]	; (80072d4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x16c>)
 80072bc:	f001 fc6a 	bl	8008b94 <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
 80072c0:	f06f 030d 	mvn.w	r3, #13
 80072c4:	e000      	b.n	80072c8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
        }
    }

    return EI_IMPULSE_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	08030dd4 	.word	0x08030dd4
 80072d4:	08030e18 	.word	0x08030e18

080072d8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08e      	sub	sp, #56	; 0x38
 80072dc:	af04      	add	r7, sp, #16
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	789b      	ldrb	r3, [r3, #2]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	f040 824c 	bne.w	800778e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4b6>
        switch (block_config->object_detection_last_layer) {
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	2b09      	cmp	r3, #9
 8007300:	f200 823b 	bhi.w	800777a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4a2>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x34>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	080073af 	.word	0x080073af
 8007310:	08007335 	.word	0x08007335
 8007314:	080073bb 	.word	0x080073bb
 8007318:	0800749d 	.word	0x0800749d
 800731c:	080073bb 	.word	0x080073bb
 8007320:	080074c1 	.word	0x080074c1
 8007324:	0800750f 	.word	0x0800750f
 8007328:	0800750f 	.word	0x0800750f
 800732c:	080075d9 	.word	0x080075d9
 8007330:	080076b1 	.word	0x080076b1
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b09      	cmp	r3, #9
 800733a:	bf0c      	ite	eq
 800733c:	2301      	moveq	r3, #1
 800733e:	2300      	movne	r3, #0
 8007340:	74fb      	strb	r3, [r7, #19]
                if (int8_output) {
 8007342:	7cfb      	ldrb	r3, [r7, #19]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01f      	beq.n	8007388 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xb0>
                    fill_res = fill_result_struct_i8_fomo(
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        block_config,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_i8_fomo(
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->fomo_output_size,
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                    fill_res = fill_result_struct_i8_fomo(
 8007362:	4619      	mov	r1, r3
                        impulse->fomo_output_size);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                    fill_res = fill_result_struct_i8_fomo(
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	9100      	str	r1, [sp, #0]
 800736c:	eef0 0a47 	vmov.f32	s1, s14
 8007370:	eeb0 0a67 	vmov.f32	s0, s15
 8007374:	4613      	mov	r3, r2
 8007376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007378:	68b9      	ldr	r1, [r7, #8]
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff fcaf 	bl	8006cde <_ZL26fill_result_struct_i8_fomoPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPaffii>
 8007380:	4603      	mov	r3, r0
 8007382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        result,
                        output->data.f,
                        impulse->fomo_output_size,
                        impulse->fomo_output_size);
                }
                break;
 8007386:	e255      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                    fill_res = fill_result_struct_f32_fomo(
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685a      	ldr	r2, [r3, #4]
                        impulse->fomo_output_size,
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                    fill_res = fill_result_struct_f32_fomo(
 8007390:	4619      	mov	r1, r3
                        impulse->fomo_output_size);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                    fill_res = fill_result_struct_f32_fomo(
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	9100      	str	r1, [sp, #0]
 800739a:	4613      	mov	r3, r2
 800739c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f7ff fc8d 	bl	8006cc0 <_ZL27fill_result_struct_f32_fomoPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfii>
 80073a6:	4603      	mov	r3, r0
 80073a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80073ac:	e242      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 80073ae:	489c      	ldr	r0, [pc, #624]	; (8007620 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x348>)
 80073b0:	f001 fbf0 	bl	8008b94 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80073b4:	f06f 0309 	mvn.w	r3, #9
 80073b8:	e23e      	b.n	8007838 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x560>
            }
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                int version = block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI ?
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80073c0:	2b05      	cmp	r3, #5
 80073c2:	d101      	bne.n	80073c8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xf0>
 80073c4:	2305      	movs	r3, #5
 80073c6:	e000      	b.n	80073ca <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xf2>
 80073c8:	2306      	movs	r3, #6
 80073ca:	617b      	str	r3, [r7, #20]
                    5 : 6;

                if (output->type == kTfLiteInt8) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b09      	cmp	r3, #9
 80073d2:	d11f      	bne.n	8007414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x13c>
                    fill_res = fill_result_struct_quantized_yolov5(
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
                        impulse,
                        block_config,
                        result,
                        version,
                        output->data.int8,
                        output->params.zero_point,
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6912      	ldr	r2, [r2, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 80073dc:	ee07 2a90 	vmov	s15, r2
 80073e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	ed92 7a03 	vldr	s14, [r2, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
                    fill_res = fill_result_struct_quantized_yolov5(
 80073ee:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 80073f2:	9102      	str	r1, [sp, #8]
 80073f4:	9201      	str	r2, [sp, #4]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	eef0 0a47 	vmov.f32	s1, s14
 80073fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007404:	68b9      	ldr	r1, [r7, #8]
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f001 fe3b 	bl	8009082 <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tiPT_ffjb>
 800740c:	4603      	mov	r3, r0
 800740e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8007412:	e20f      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                else if (output->type == kTfLiteUInt8) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b03      	cmp	r3, #3
 800741a:	d11f      	bne.n	800745c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x184>
                    fill_res = fill_result_struct_quantized_yolov5(
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
                        output->params.zero_point,
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6912      	ldr	r2, [r2, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 8007424:	ee07 2a90 	vmov	s15, r2
 8007428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	ed92 7a03 	vldr	s14, [r2, #12]
                        impulse->tflite_output_features_count,
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	6c52      	ldr	r2, [r2, #68]	; 0x44
                    fill_res = fill_result_struct_quantized_yolov5(
 8007436:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 800743a:	9102      	str	r1, [sp, #8]
 800743c:	9201      	str	r2, [sp, #4]
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	eef0 0a47 	vmov.f32	s1, s14
 8007444:	eeb0 0a67 	vmov.f32	s0, s15
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f001 fe2a 	bl	80090a8 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tiPT_ffjb>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800745a:	e1eb      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                else if (output->type == kTfLiteFloat32) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d112      	bne.n	800748a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1b2>
                    fill_res = fill_result_struct_f32_yolov5(
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
                        impulse->tflite_output_features_count,
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	6c52      	ldr	r2, [r2, #68]	; 0x44
                    fill_res = fill_result_struct_f32_yolov5(
 800746c:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 8007470:	9102      	str	r1, [sp, #8]
 8007472:	9201      	str	r2, [sp, #4]
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f7ff fcf7 	bl	8006e70 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tiPfjb>
 8007482:	4603      	mov	r3, r0
 8007484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8007488:	e1d4      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	4619      	mov	r1, r3
 8007490:	4864      	ldr	r0, [pc, #400]	; (8007624 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x34c>)
 8007492:	f001 fb7f 	bl	8008b94 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8007496:	f06f 0309 	mvn.w	r3, #9
 800749a:	e1cd      	b.n	8007838 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x560>
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    fill_res = fill_result_struct_f32_yolox(
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6859      	ldr	r1, [r3, #4]
                        impulse,
                        block_config,
                        result,
                        output->data.f,
                        impulse->tflite_output_features_count,
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    fill_res = fill_result_struct_f32_yolox(
 80074a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074a8:	9201      	str	r2, [sp, #4]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	460b      	mov	r3, r1
 80074ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff fceb 	bl	8006e8e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfjb>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        debug);
                #endif
                break;
 80074be:	e1b9      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
            case EI_CLASSIFIER_LAST_LAYER_YOLOV7: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    size_t output_feature_count = 1;
 80074c0:	2301      	movs	r3, #1
 80074c2:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]
 80074c8:	e00d      	b.n	80074e6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x20e>
                        output_feature_count *= output->dims->data[ix];
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	461a      	mov	r2, r3
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	fb02 f303 	mul.w	r3, r2, r3
 80074de:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	3301      	adds	r3, #1
 80074e4:	61fb      	str	r3, [r7, #28]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	dbeb      	blt.n	80074ca <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1f2>
                    }
                    fill_res = fill_result_struct_f32_yolov7(
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	4613      	mov	r3, r2
 80074fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7ff fcd3 	bl	8006eac <_ZL29fill_result_struct_f32_yolov7PK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfj>
 8007506:	4603      	mov	r3, r0
 8007508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        block_config,
                        result,
                        output->data.f,
                        output_feature_count);
                #endif
                break;
 800750c:	e192      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_SSD:
            case EI_CLASSIFIER_LAST_LAYER_TAO_RETINANET: {

                if (output->type == kTfLiteInt8) {
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b09      	cmp	r3, #9
 8007514:	d11e      	bne.n	8007554 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x27c>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6859      	ldr	r1, [r3, #4]
                        impulse,
                        block_config,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8007530:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007534:	9201      	str	r2, [sp, #4]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	eef0 0a47 	vmov.f32	s1, s14
 800753c:	eeb0 0a67 	vmov.f32	s0, s15
 8007540:	460b      	mov	r3, r1
 8007542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f001 fdc1 	bl	80090ce <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>
 800754c:	4603      	mov	r3, r0
 800754e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8007552:	e16f      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                else if (output->type == kTfLiteUInt8) {
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b03      	cmp	r3, #3
 800755a:	d11e      	bne.n	800759a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2c2>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6859      	ldr	r1, [r3, #4]
                        output->params.zero_point,
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8007564:	ee07 3a90 	vmov	s15, r3
 8007568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8007576:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800757a:	9201      	str	r2, [sp, #4]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	eef0 0a47 	vmov.f32	s1, s14
 8007582:	eeb0 0a67 	vmov.f32	s0, s15
 8007586:	460b      	mov	r3, r1
 8007588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f001 fdb1 	bl	80090f4 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>
 8007592:	4603      	mov	r3, r0
 8007594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8007598:	e14c      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                else if (output->type == kTfLiteFloat32) {
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d111      	bne.n	80075c6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2ee>
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6859      	ldr	r1, [r3, #4]
                        impulse->tflite_output_features_count,
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 80075aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80075ae:	9201      	str	r2, [sp, #4]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	460b      	mov	r3, r1
 80075b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b6:	68b9      	ldr	r1, [r7, #8]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f7ff fc86 	bl	8006eca <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfjb>
 80075be:	4603      	mov	r3, r0
 80075c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80075c4:	e136      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	4619      	mov	r1, r3
 80075cc:	4816      	ldr	r0, [pc, #88]	; (8007628 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x350>)
 80075ce:	f001 fae1 	bl	8008b94 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80075d2:	f06f 0309 	mvn.w	r3, #9
 80075d6:	e12f      	b.n	8007838 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x560>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV3: {

                if (output->type == kTfLiteInt8) {
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b09      	cmp	r3, #9
 80075de:	d125      	bne.n	800762c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x354>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6859      	ldr	r1, [r3, #4]
                        impulse,
                        block_config,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80075fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80075fe:	9201      	str	r2, [sp, #4]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	eef0 0a47 	vmov.f32	s1, s14
 8007606:	eeb0 0a67 	vmov.f32	s0, s15
 800760a:	460b      	mov	r3, r1
 800760c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f001 fd82 	bl	800911a <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>
 8007616:	4603      	mov	r3, r0
 8007618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 800761c:	e10a      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
 800761e:	bf00      	nop
 8007620:	08030e40 	.word	0x08030e40
 8007624:	08030e88 	.word	0x08030e88
 8007628:	08030ec0 	.word	0x08030ec0
                else if (output->type == kTfLiteUInt8) {
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b03      	cmp	r3, #3
 8007632:	d11e      	bne.n	8007672 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x39a>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6859      	ldr	r1, [r3, #4]
                        output->params.zero_point,
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800763c:	ee07 3a90 	vmov	s15, r3
 8007640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800764e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007652:	9201      	str	r2, [sp, #4]
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	eef0 0a47 	vmov.f32	s1, s14
 800765a:	eeb0 0a67 	vmov.f32	s0, s15
 800765e:	460b      	mov	r3, r1
 8007660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f001 fd6b 	bl	8009140 <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>
 800766a:	4603      	mov	r3, r0
 800766c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8007670:	e0e0      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                else if (output->type == kTfLiteFloat32) {
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d111      	bne.n	800769e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3c6>
                    fill_res = fill_result_struct_f32_tao_yolov3(
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6859      	ldr	r1, [r3, #4]
                        impulse->tflite_output_features_count,
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    fill_res = fill_result_struct_f32_tao_yolov3(
 8007682:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007686:	9201      	str	r2, [sp, #4]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	460b      	mov	r3, r1
 800768c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800768e:	68b9      	ldr	r1, [r7, #8]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f7ff fc29 	bl	8006ee8 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfjb>
 8007696:	4603      	mov	r3, r0
 8007698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800769c:	e0ca      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	4619      	mov	r1, r3
 80076a4:	4866      	ldr	r0, [pc, #408]	; (8007840 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x568>)
 80076a6:	f001 fa75 	bl	8008b94 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80076aa:	f06f 0309 	mvn.w	r3, #9
 80076ae:	e0c3      	b.n	8007838 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x560>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV4: {

                if (output->type == kTfLiteInt8) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b09      	cmp	r3, #9
 80076b6:	d11e      	bne.n	80076f6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x41e>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6859      	ldr	r1, [r3, #4]
                        impulse,
                        block_config,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80076c0:	ee07 3a90 	vmov	s15, r3
 80076c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80076d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80076d6:	9201      	str	r2, [sp, #4]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	eef0 0a47 	vmov.f32	s1, s14
 80076de:	eeb0 0a67 	vmov.f32	s0, s15
 80076e2:	460b      	mov	r3, r1
 80076e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076e6:	68b9      	ldr	r1, [r7, #8]
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f001 fd3c 	bl	8009166 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 80076f4:	e09e      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                else if (output->type == kTfLiteUInt8) {
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d11e      	bne.n	800773c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x464>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6859      	ldr	r1, [r3, #4]
                        output->params.zero_point,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8007718:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800771c:	9201      	str	r2, [sp, #4]
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	eef0 0a47 	vmov.f32	s1, s14
 8007724:	eeb0 0a67 	vmov.f32	s0, s15
 8007728:	460b      	mov	r3, r1
 800772a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800772c:	68b9      	ldr	r1, [r7, #8]
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f001 fd2c 	bl	800918c <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>
 8007734:	4603      	mov	r3, r0
 8007736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800773a:	e07b      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                else if (output->type == kTfLiteFloat32) {
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d111      	bne.n	8007768 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x490>
                    fill_res = fill_result_struct_f32_tao_yolov4(
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6859      	ldr	r1, [r3, #4]
                        impulse->tflite_output_features_count,
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    fill_res = fill_result_struct_f32_tao_yolov4(
 800774c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007750:	9201      	str	r2, [sp, #4]
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	460b      	mov	r3, r1
 8007756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007758:	68b9      	ldr	r1, [r7, #8]
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff fbd3 	bl	8006f06 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPfjb>
 8007760:	4603      	mov	r3, r0
 8007762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8007766:	e065      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	4619      	mov	r1, r3
 800776e:	4835      	ldr	r0, [pc, #212]	; (8007844 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x56c>)
 8007770:	f001 fa10 	bl	8008b94 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8007774:	f06f 0309 	mvn.w	r3, #9
 8007778:	e05e      	b.n	8007838 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x560>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    block_config->object_detection_last_layer);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f993 3009 	ldrsb.w	r3, [r3, #9]
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8007780:	4619      	mov	r1, r3
 8007782:	4831      	ldr	r0, [pc, #196]	; (8007848 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x570>)
 8007784:	f001 fa06 	bl	8008b94 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8007788:	f06f 0309 	mvn.w	r3, #9
 800778c:	e054      	b.n	8007838 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x560>
            }
        }
    }
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	789b      	ldrb	r3, [r3, #2]
 8007792:	2b05      	cmp	r3, #5
 8007794:	d118      	bne.n	80077c8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4f0>
    {
        if (!result->copy_output) {
 8007796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007798:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800779c:	f083 0301 	eor.w	r3, r3, #1
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d046      	beq.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
            fill_res = fill_result_visual_ad_struct_f32(impulse, result, output->data.f, block_config->threshold, debug);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80077b0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80077b4:	eeb0 0a67 	vmov.f32	s0, s15
 80077b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff fb48 	bl	8006e50 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPffb>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077c6:	e035      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
        }
    }
    // if we copy the output, we don't need to process it as classification
    else
    {
        if (!result->copy_output) {
 80077c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ca:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80077ce:	f083 0301 	eor.w	r3, r3, #1
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d02d      	beq.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
            bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b09      	cmp	r3, #9
 80077de:	bf0c      	ite	eq
 80077e0:	2301      	moveq	r3, #1
 80077e2:	2300      	movne	r3, #0
 80077e4:	76fb      	strb	r3, [r7, #27]
            if (int8_output) {
 80077e6:	7efb      	ldrb	r3, [r7, #27]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d018      	beq.n	800781e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x546>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	ee07 3a90 	vmov	s15, r3
 80077f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8007802:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007806:	eef0 0a47 	vmov.f32	s1, s14
 800780a:	eeb0 0a67 	vmov.f32	s0, s15
 800780e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f7ff fa77 	bl	8006d04 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8007816:	4603      	mov	r3, r0
 8007818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800781c:	e00a      	b.n	8007834 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x55c>
            }
            else {
                fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007826:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff fac7 	bl	8006dbc <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800782e:	4603      	mov	r3, r0
 8007830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    return fill_res;
 8007834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007838:	4618      	mov	r0, r3
 800783a:	3728      	adds	r7, #40	; 0x28
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	08030ef4 	.word	0x08030ef4
 8007844:	08030f28 	.word	0x08030f28
 8007848:	08030f5c 	.word	0x08030f5c

0800784c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>:
    uint64_t *ctx_start_us,
    TfLiteTensor* input,
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	617b      	str	r3, [r7, #20]

    *ctx_start_us = ei_read_timer_us();
 8007860:	f01d fcf4 	bl	802524c <_Z16ei_read_timer_usv>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	4829      	ldr	r0, [pc, #164]	; (8007918 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xcc>)
 8007874:	4798      	blx	r3
 8007876:	4603      	mov	r3, r0
 8007878:	74fb      	strb	r3, [r7, #19]
    if (init_status != kTfLiteOk) {
 800787a:	7cfb      	ldrb	r3, [r7, #19]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d007      	beq.n	8007890 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x44>
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
 8007880:	7cfb      	ldrb	r3, [r7, #19]
 8007882:	4619      	mov	r1, r3
 8007884:	4825      	ldr	r0, [pc, #148]	; (800791c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xd0>)
 8007886:	f001 f985 	bl	8008b94 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 800788a:	f06f 0305 	mvn.w	r3, #5
 800788e:	e03f      	b.n	8007910 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    TfLiteStatus status;

    status = graph_config->model_input(0, input);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	2000      	movs	r0, #0
 8007898:	4798      	blx	r3
 800789a:	4603      	mov	r3, r0
 800789c:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 800789e:	7cbb      	ldrb	r3, [r7, #18]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x5e>
        return EI_IMPULSE_TFLITE_ERROR;
 80078a4:	f06f 0302 	mvn.w	r3, #2
 80078a8:	e032      	b.n	8007910 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }
    status = graph_config->model_output(block_config->output_data_tensor, output);
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	7a92      	ldrb	r2, [r2, #10]
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	4610      	mov	r0, r2
 80078b6:	4798      	blx	r3
 80078b8:	4603      	mov	r3, r0
 80078ba:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 80078bc:	7cbb      	ldrb	r3, [r7, #18]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x7c>
        return EI_IMPULSE_TFLITE_ERROR;
 80078c2:	f06f 0302 	mvn.w	r3, #2
 80078c6:	e023      	b.n	8007910 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d11d      	bne.n	800790e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	7b12      	ldrb	r2, [r2, #12]
 80078da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078dc:	4610      	mov	r0, r2
 80078de:	4798      	blx	r3
 80078e0:	4603      	mov	r3, r0
 80078e2:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 80078e4:	7cbb      	ldrb	r3, [r7, #18]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xa4>
            return EI_IMPULSE_TFLITE_ERROR;
 80078ea:	f06f 0302 	mvn.w	r3, #2
 80078ee:	e00f      	b.n	8007910 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	7ad2      	ldrb	r2, [r2, #11]
 80078f8:	6a39      	ldr	r1, [r7, #32]
 80078fa:	4610      	mov	r0, r2
 80078fc:	4798      	blx	r3
 80078fe:	4603      	mov	r3, r0
 8007900:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 8007902:	7cbb      	ldrb	r3, [r7, #18]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
            return EI_IMPULSE_TFLITE_ERROR;
 8007908:	f06f 0302 	mvn.w	r3, #2
 800790c:	e000      	b.n	8007910 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
    }

    return EI_IMPULSE_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	0800111d 	.word	0x0800111d
 800791c:	08030f90 	.word	0x08030f90

08007920 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8007920:	b5b0      	push	{r4, r5, r7, lr}
 8007922:	b08e      	sub	sp, #56	; 0x38
 8007924:	af04      	add	r7, sp, #16
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	e9c7 2300 	strd	r2, r3, [r7]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	627b      	str	r3, [r7, #36]	; 0x24

    if (graph_config->model_invoke() != kTfLiteOk) {
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	4798      	blx	r3
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	bf14      	ite	ne
 8007940:	2301      	movne	r3, #1
 8007942:	2300      	moveq	r3, #0
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x30>
        return EI_IMPULSE_TFLITE_ERROR;
 800794a:	f06f 0302 	mvn.w	r3, #2
 800794e:	e04d      	b.n	80079ec <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 8007950:	f01d fc7c 	bl	802524c <_Z16ei_read_timer_usv>
 8007954:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8007958:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800795c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007960:	1a84      	subs	r4, r0, r2
 8007962:	eb61 0503 	sbc.w	r5, r1, r3
 8007966:	4622      	mov	r2, r4
 8007968:	462b      	mov	r3, r5
 800796a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800796c:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8007970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007972:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8007976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	f7f9 f983 	bl	8000c88 <__aeabi_ldivmod>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007988:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 800798c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d006      	beq.n	80079a2 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x82>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8007994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800799a:	4619      	mov	r1, r3
 800799c:	4815      	ldr	r0, [pc, #84]	; (80079f4 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xd4>)
 800799e:	f001 f8f9 	bl	8008b94 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 80079a2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80079a6:	9302      	str	r3, [sp, #8]
 80079a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7ff fc8e 	bl	80072d8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
 80079bc:	4603      	mov	r3, r0
 80079be:	75fb      	strb	r3, [r7, #23]
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
 80079c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xae>
        return fill_res;
 80079c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079cc:	e00e      	b.n	80079ec <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80079ce:	f01d fc35 	bl	802523c <_Z29ei_run_impulse_check_canceledv>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f113 0f02 	cmn.w	r3, #2
 80079d8:	bf0c      	ite	eq
 80079da:	2301      	moveq	r3, #1
 80079dc:	2300      	movne	r3, #0
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xca>
        return EI_IMPULSE_CANCELED;
 80079e4:	f06f 0301 	mvn.w	r3, #1
 80079e8:	e000      	b.n	80079ec <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    return EI_IMPULSE_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3728      	adds	r7, #40	; 0x28
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bdb0      	pop	{r4, r5, r7, pc}
 80079f4:	08030fc0 	.word	0x08030fc0

080079f8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 80079f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fa:	b0d7      	sub	sp, #348	; 0x15c
 80079fc:	af06      	add	r7, sp, #24
 80079fe:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 8007a02:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
 8007a06:	6030      	str	r0, [r6, #0]
 8007a08:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8007a0c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8007a10:	6001      	str	r1, [r0, #0]
 8007a12:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007a16:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8007a1a:	600a      	str	r2, [r1, #0]
 8007a1c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007a20:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8007a24:	6013      	str	r3, [r2, #0]
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
 8007a26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007a2a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 8007a2e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 8007a38:	f01d fc08 	bl	802524c <_Z16ei_read_timer_usv>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8007a44:	4b65      	ldr	r3, [pc, #404]	; (8007bdc <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 8007a46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007a4a:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8007a4e:	f107 0310 	add.w	r3, r7, #16
 8007a52:	2100      	movs	r1, #0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f001 f93a 	bl	8008cce <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 8007a5a:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8007a5e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8007a62:	f107 0118 	add.w	r1, r7, #24
 8007a66:	f107 0310 	add.w	r3, r7, #16
 8007a6a:	9302      	str	r3, [sp, #8]
 8007a6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	4603      	mov	r3, r0
 8007a7a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8007a7e:	f7ff fee5 	bl	800784c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8007a88:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x9e>
        return init_res;
 8007a90:	f997 4137 	ldrsb.w	r4, [r7, #311]	; 0x137
 8007a94:	e096      	b.n	8007bc4 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8007a96:	f107 0310 	add.w	r3, r7, #16
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f001 fb89 	bl	80091b2 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8007aa0:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130

    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 8007aa4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007aa8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ab0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007ab4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007abc:	4413      	add	r3, r2
 8007abe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
 8007ac2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007ac6:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8007aca:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8007ace:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007ad2:	f5a3 709c 	sub.w	r0, r3, #312	; 0x138
 8007ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007ae0:	6812      	ldr	r2, [r2, #0]
 8007ae2:	6800      	ldr	r0, [r0, #0]
 8007ae4:	f7ff fa74 	bl	8006fd0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    if (input_res != EI_IMPULSE_OK) {
 8007aee:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x104>
        return input_res;
 8007af6:	f997 412b 	ldrsb.w	r4, [r7, #299]	; 0x12b
 8007afa:	e063      	b.n	8007bc4 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 8007afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b00:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007b04:	f5a1 709a 	sub.w	r0, r1, #308	; 0x134
 8007b08:	f897 1164 	ldrb.w	r1, [r7, #356]	; 0x164
 8007b0c:	9105      	str	r1, [sp, #20]
 8007b0e:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8007b12:	9104      	str	r1, [sp, #16]
 8007b14:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8007b18:	9103      	str	r1, [sp, #12]
 8007b1a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8007b1e:	9102      	str	r1, [sp, #8]
 8007b20:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007b24:	9101      	str	r1, [sp, #4]
 8007b26:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8007b2a:	9100      	str	r1, [sp, #0]
 8007b2c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007b30:	6800      	ldr	r0, [r0, #0]
 8007b32:	f7ff fef5 	bl	8007920 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>
 8007b36:	4603      	mov	r3, r0
 8007b38:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    if (result->copy_output) {
 8007b3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007b40:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d023      	beq.n	8007b90 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
 8007b48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007b4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007b58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4413      	add	r3, r2
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007b66:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8007b6a:	6812      	ldr	r2, [r2, #0]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff faf6 	bl	8007168 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
        if (output_res != EI_IMPULSE_OK) {
 8007b82:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
            return output_res;
 8007b8a:	f997 4129 	ldrsb.w	r4, [r7, #297]	; 0x129
 8007b8e:	e019      	b.n	8007bc4 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
        }
    }

    graph_config->model_reset(ei_aligned_free);
 8007b90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	4811      	ldr	r0, [pc, #68]	; (8007bdc <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 8007b98:	4798      	blx	r3

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8007b9a:	f01d fb57 	bl	802524c <_Z16ei_read_timer_usv>
 8007b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ba2:	1a84      	subs	r4, r0, r2
 8007ba4:	eb61 0503 	sbc.w	r5, r1, r3
 8007ba8:	4622      	mov	r2, r4
 8007baa:	462b      	mov	r3, r5
 8007bac:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8007bb0:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 8007bb4:	f997 312a 	ldrsb.w	r3, [r7, #298]	; 0x12a
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1ca>
        return run_res;
 8007bbc:	f997 412a 	ldrsb.w	r4, [r7, #298]	; 0x12a
 8007bc0:	e000      	b.n	8007bc4 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    return EI_IMPULSE_OK;
 8007bc2:	2400      	movs	r4, #0
}
 8007bc4:	f107 0310 	add.w	r3, r7, #16
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 f895 	bl	8008cf8 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 8007bce:	4623      	mov	r3, r4
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	080011a1 	.word	0x080011a1

08007be0 <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    ei_impulse_handle_t *handle,
    ei_feature_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8007be0:	b5b0      	push	{r4, r5, r7, lr}
 8007be2:	b094      	sub	sp, #80	; 0x50
 8007be4:	af04      	add	r7, sp, #16
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	70fb      	strb	r3, [r7, #3]
    auto& impulse = handle->impulse;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	330c      	adds	r3, #12
 8007bf2:	63bb      	str	r3, [r7, #56]	; 0x38
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf8:	e02f      	b.n	8007c5a <run_inference+0x7a>

        ei_learning_block_t block = impulse->learning_blocks[ix];
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c02:	015b      	lsls	r3, r3, #5
 8007c04:	4413      	add	r3, r2
 8007c06:	f107 0414 	add.w	r4, r7, #20
 8007c0a:	461d      	mov	r5, r3
 8007c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        result->copy_output = block.keep_output;
 8007c18:	7e3a      	ldrb	r2, [r7, #24]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
 8007c20:	69fc      	ldr	r4, [r7, #28]
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	6a3a      	ldr	r2, [r7, #32]
 8007c2c:	78f9      	ldrb	r1, [r7, #3]
 8007c2e:	9103      	str	r1, [sp, #12]
 8007c30:	9202      	str	r2, [sp, #8]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	9201      	str	r2, [sp, #4]
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	462b      	mov	r3, r5
 8007c3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	47a0      	blx	r4
 8007c40:	4603      	mov	r3, r0
 8007c42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (res != EI_IMPULSE_OK) {
 8007c46:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <run_inference+0x74>
            return res;
 8007c4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007c52:	e017      	b.n	8007c84 <run_inference+0xa4>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 8007c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c56:	3301      	adds	r3, #1
 8007c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d3c9      	bcc.n	8007bfa <run_inference+0x1a>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8007c66:	f01d fae9 	bl	802523c <_Z29ei_run_impulse_check_canceledv>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	f113 0f02 	cmn.w	r3, #2
 8007c70:	bf0c      	ite	eq
 8007c72:	2301      	moveq	r3, #1
 8007c74:	2300      	movne	r3, #0
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <run_inference+0xa2>
        return EI_IMPULSE_CANCELED;
 8007c7c:	f06f 0301 	mvn.w	r3, #1
 8007c80:	e000      	b.n	8007c84 <run_inference+0xa4>
    }

    return EI_IMPULSE_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3740      	adds	r7, #64	; 0x40
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bdb0      	pop	{r4, r5, r7, pc}

08007c8c <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 fb58 	bl	8009352 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	4611      	mov	r1, r2
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7ff ffe5 	bl	8007c8c <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3310      	adds	r3, #16
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fd f954 	bl	8004f86 <_ZN2ei11ei_signal_tD1Ev>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <__tcf_1>:
                                            ei_impulse_result_t *result,
                                            bool debug,
                                            bool enable_maf)
{
    auto impulse = handle->impulse;
    static ei::matrix_t static_features_matrix(1, impulse->nn_input_frame_size);
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	4801      	ldr	r0, [pc, #4]	; (8007cf4 <__tcf_1+0xc>)
 8007cee:	f7f9 faa6 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20000698 	.word	0x20000698

08007cf8 <process_impulse_continuous>:
{
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	b0b9      	sub	sp, #228	; 0xe4
 8007cfe:	af02      	add	r7, sp, #8
 8007d00:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d02:	62b9      	str	r1, [r7, #40]	; 0x28
 8007d04:	627a      	str	r2, [r7, #36]	; 0x24
 8007d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d0a:	2600      	movs	r6, #0
    auto impulse = handle->impulse;
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    static ei::matrix_t static_features_matrix(1, impulse->nn_input_frame_size);
 8007d14:	4bb8      	ldr	r3, [pc, #736]	; (8007ff8 <process_impulse_continuous+0x300>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f3bf 8f5b 	dmb	ish
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d018      	beq.n	8007d60 <process_impulse_continuous+0x68>
 8007d2e:	48b2      	ldr	r0, [pc, #712]	; (8007ff8 <process_impulse_continuous+0x300>)
 8007d30:	f022 fc64 	bl	802a5fc <__cxa_guard_acquire>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bf14      	ite	ne
 8007d3a:	2301      	movne	r3, #1
 8007d3c:	2300      	moveq	r3, #0
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00d      	beq.n	8007d60 <process_impulse_continuous+0x68>
 8007d44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d48:	691a      	ldr	r2, [r3, #16]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	48ab      	ldr	r0, [pc, #684]	; (8007ffc <process_impulse_continuous+0x304>)
 8007d50:	f7f9 fa4a 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 8007d54:	48aa      	ldr	r0, [pc, #680]	; (8008000 <process_impulse_continuous+0x308>)
 8007d56:	f025 fe2d 	bl	802d9b4 <atexit>
 8007d5a:	48a7      	ldr	r0, [pc, #668]	; (8007ff8 <process_impulse_continuous+0x300>)
 8007d5c:	f022 fc5a 	bl	802a614 <__cxa_guard_release>
    if (!static_features_matrix.buffer) {
 8007d60:	4ba6      	ldr	r3, [pc, #664]	; (8007ffc <process_impulse_continuous+0x304>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <process_impulse_continuous+0x76>
        return EI_IMPULSE_ALLOC_FAILED;
 8007d68:	f06f 0607 	mvn.w	r6, #7
 8007d6c:	e2e5      	b.n	800833a <process_impulse_continuous+0x642>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8007d6e:	f44f 7284 	mov.w	r2, #264	; 0x108
 8007d72:	2100      	movs	r1, #0
 8007d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d76:	f026 fce5 	bl	802e744 <memset>

    EI_IMPULSE_ERROR ei_impulse_error = EI_IMPULSE_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

    uint64_t dsp_start_us = ei_read_timer_us();
 8007d80:	f01d fa64 	bl	802524c <_Z16ei_read_timer_usv>
 8007d84:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8

    size_t out_features_index = 0;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d94:	e0be      	b.n	8007f14 <process_impulse_continuous+0x21c>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 8007d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007da0:	015b      	lsls	r3, r3, #5
 8007da2:	4413      	add	r3, r2
 8007da4:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8007da8:	461c      	mov	r4, r3
 8007daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007dae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007db2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 8007db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007db8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007dbc:	441a      	add	r2, r3
 8007dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d905      	bls.n	8007dd4 <process_impulse_continuous+0xdc>
            ei_printf("ERR: Would write outside feature buffer\n");
 8007dc8:	488e      	ldr	r0, [pc, #568]	; (8008004 <process_impulse_continuous+0x30c>)
 8007dca:	f000 fee3 	bl	8008b94 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8007dce:	f06f 0604 	mvn.w	r6, #4
 8007dd2:	e2b1      	b.n	8008338 <process_impulse_continuous+0x640>
        }

        ei::matrix_t fm(1, block.n_output_features,
 8007dd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
                        static_features_matrix.buffer + out_features_index);
 8007dd6:	4b89      	ldr	r3, [pc, #548]	; (8007ffc <process_impulse_continuous+0x304>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8007de6:	460a      	mov	r2, r1
 8007de8:	2101      	movs	r1, #1
 8007dea:	f7f9 f9fd 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>

        int (*extract_fn_slice)(ei::signal_t *signal, ei::matrix_t *output_matrix, void *config, const float frequency, matrix_size_t *out_matrix_size);

        /* Switch to the slice version of the mfcc feature extract function */
        if (block.extract_fn == extract_mfcc_features) {
 8007dee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007df0:	4b85      	ldr	r3, [pc, #532]	; (8008008 <process_impulse_continuous+0x310>)
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d103      	bne.n	8007dfe <process_impulse_continuous+0x106>
            extract_fn_slice = &extract_mfcc_per_slice_features;
 8007df6:	4b85      	ldr	r3, [pc, #532]	; (800800c <process_impulse_continuous+0x314>)
 8007df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dfc:	e016      	b.n	8007e2c <process_impulse_continuous+0x134>
        }
        else if (block.extract_fn == extract_spectrogram_features) {
 8007dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e00:	4b83      	ldr	r3, [pc, #524]	; (8008010 <process_impulse_continuous+0x318>)
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d103      	bne.n	8007e0e <process_impulse_continuous+0x116>
            extract_fn_slice = &extract_spectrogram_per_slice_features;
 8007e06:	4b83      	ldr	r3, [pc, #524]	; (8008014 <process_impulse_continuous+0x31c>)
 8007e08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e0c:	e00e      	b.n	8007e2c <process_impulse_continuous+0x134>
        }
        else if (block.extract_fn == extract_mfe_features) {
 8007e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e10:	4b81      	ldr	r3, [pc, #516]	; (8008018 <process_impulse_continuous+0x320>)
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d103      	bne.n	8007e1e <process_impulse_continuous+0x126>
            extract_fn_slice = &extract_mfe_per_slice_features;
 8007e16:	4b81      	ldr	r3, [pc, #516]	; (800801c <process_impulse_continuous+0x324>)
 8007e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e1c:	e006      	b.n	8007e2c <process_impulse_continuous+0x134>
        }
        else {
            ei_printf("ERR: Unknown extract function, only MFCC, MFE and spectrogram supported\n");
 8007e1e:	4880      	ldr	r0, [pc, #512]	; (8008020 <process_impulse_continuous+0x328>)
 8007e20:	f000 feb8 	bl	8008b94 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8007e24:	f06f 0604 	mvn.w	r6, #4
 8007e28:	2400      	movs	r4, #0
 8007e2a:	e066      	b.n	8007efa <process_impulse_continuous+0x202>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = extract_fn_slice(signal, &fm, block.config, impulse->frequency, &features_written);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8007e2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e30:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8007e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	460a      	mov	r2, r1
 8007e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e40:	f7fe fe7c 	bl	8006b3c <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = extract_fn_slice(swa.get_signal(), &fm, block.config, impulse->frequency, &features_written);
 8007e44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe fea7 	bl	8006b9c <_ZN14SignalWithAxes10get_signalEv>
 8007e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e54:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007e58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007e5c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8007e60:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8007e64:	eeb0 0a67 	vmov.f32	s0, s15
 8007e68:	47a0      	blx	r4
 8007e6a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
#endif

        if (ret != EIDSP_OK) {
 8007e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d008      	beq.n	8007e88 <process_impulse_continuous+0x190>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8007e76:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007e7a:	486a      	ldr	r0, [pc, #424]	; (8008024 <process_impulse_continuous+0x32c>)
 8007e7c:	f000 fe8a 	bl	8008b94 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8007e80:	f06f 0604 	mvn.w	r6, #4
 8007e84:	2400      	movs	r4, #0
 8007e86:	e02e      	b.n	8007ee6 <process_impulse_continuous+0x1ee>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8007e88:	f01d f9d8 	bl	802523c <_Z29ei_run_impulse_check_canceledv>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	f113 0f02 	cmn.w	r3, #2
 8007e92:	bf0c      	ite	eq
 8007e94:	2301      	moveq	r3, #1
 8007e96:	2300      	movne	r3, #0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <process_impulse_continuous+0x1ae>
            return EI_IMPULSE_CANCELED;
 8007e9e:	f06f 0601 	mvn.w	r6, #1
 8007ea2:	2400      	movs	r4, #0
 8007ea4:	e01f      	b.n	8007ee6 <process_impulse_continuous+0x1ee>
        }

        classifier_continuous_features_written += (features_written.rows * features_written.cols);
 8007ea6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007eac:	fb02 f303 	mul.w	r3, r2, r3
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	61bb      	str	r3, [r7, #24]
 8007eb4:	61fa      	str	r2, [r7, #28]
 8007eb6:	4b5c      	ldr	r3, [pc, #368]	; (8008028 <process_impulse_continuous+0x330>)
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	1889      	adds	r1, r1, r2
 8007ec4:	6139      	str	r1, [r7, #16]
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	eb41 0303 	adc.w	r3, r1, r3
 8007ecc:	617b      	str	r3, [r7, #20]
 8007ece:	4b56      	ldr	r3, [pc, #344]	; (8008028 <process_impulse_continuous+0x330>)
 8007ed0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ed4:	e9c3 1200 	strd	r1, r2, [r3]

        out_features_index += block.n_output_features;
 8007ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ede:	4413      	add	r3, r2
 8007ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    }
 8007ee4:	2401      	movs	r4, #1
 8007ee6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff feee 	bl	8007ccc <_ZN14SignalWithAxesD1Ev>
 8007ef0:	2c01      	cmp	r4, #1
 8007ef2:	d101      	bne.n	8007ef8 <process_impulse_continuous+0x200>
 8007ef4:	2401      	movs	r4, #1
 8007ef6:	e000      	b.n	8007efa <process_impulse_continuous+0x202>
 8007ef8:	2400      	movs	r4, #0
 8007efa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7f9 f99d 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 8007f04:	2c01      	cmp	r4, #1
 8007f06:	f040 8217 	bne.w	8008338 <process_impulse_continuous+0x640>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8007f0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f0e:	3301      	adds	r3, #1
 8007f10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	f4ff af39 	bcc.w	8007d96 <process_impulse_continuous+0x9e>

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8007f24:	f01d f992 	bl	802524c <_Z16ei_read_timer_usv>
 8007f28:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007f2c:	1a84      	subs	r4, r0, r2
 8007f2e:	60bc      	str	r4, [r7, #8]
 8007f30:	eb61 0303 	sbc.w	r3, r1, r3
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f3c:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8007f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	f7f8 fe9b 	bl	8000c88 <__aeabi_ldivmod>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8007f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d027      	beq.n	8007fb4 <process_impulse_continuous+0x2bc>
        ei_printf("\r\nFeatures (%d ms.): ", result->timing.dsp);
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	482f      	ldr	r0, [pc, #188]	; (800802c <process_impulse_continuous+0x334>)
 8007f6e:	f000 fe11 	bl	8008b94 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < static_features_matrix.cols; ix++) {
 8007f72:	2300      	movs	r3, #0
 8007f74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f78:	e013      	b.n	8007fa2 <process_impulse_continuous+0x2aa>
            ei_printf_float(static_features_matrix.buffer[ix]);
 8007f7a:	4b20      	ldr	r3, [pc, #128]	; (8007ffc <process_impulse_continuous+0x304>)
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	edd3 7a00 	vldr	s15, [r3]
 8007f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8007f8e:	f01d f96f 	bl	8025270 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8007f92:	4827      	ldr	r0, [pc, #156]	; (8008030 <process_impulse_continuous+0x338>)
 8007f94:	f000 fdfe 	bl	8008b94 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < static_features_matrix.cols; ix++) {
 8007f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fa2:	4b16      	ldr	r3, [pc, #88]	; (8007ffc <process_impulse_continuous+0x304>)
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d3e5      	bcc.n	8007f7a <process_impulse_continuous+0x282>
        }
        ei_printf("\n");
 8007fae:	4821      	ldr	r0, [pc, #132]	; (8008034 <process_impulse_continuous+0x33c>)
 8007fb0:	f000 fdf0 	bl	8008b94 <_Z9ei_printfPKcz>
    }

    if (classifier_continuous_features_written >= impulse->nn_input_frame_size) {
 8007fb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	469a      	mov	sl, r3
 8007fbe:	4693      	mov	fp, r2
 8007fc0:	4b19      	ldr	r3, [pc, #100]	; (8008028 <process_impulse_continuous+0x330>)
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	4552      	cmp	r2, sl
 8007fc8:	eb73 030b 	sbcs.w	r3, r3, fp
 8007fcc:	f0c0 8191 	bcc.w	80082f2 <process_impulse_continuous+0x5fa>
        dsp_start_us = ei_read_timer_us();
 8007fd0:	f01d f93c 	bl	802524c <_Z16ei_read_timer_usv>
 8007fd4:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8

        uint32_t block_num = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 8007fd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        // smart pointer to features array
        std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 8007fea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ff2:	d221      	bcs.n	8008038 <process_impulse_continuous+0x340>
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	e021      	b.n	800803c <process_impulse_continuous+0x344>
 8007ff8:	200006a8 	.word	0x200006a8
 8007ffc:	20000698 	.word	0x20000698
 8008000:	08007ce9 	.word	0x08007ce9
 8008004:	08031090 	.word	0x08031090
 8008008:	080050a5 	.word	0x080050a5
 800800c:	08005401 	.word	0x08005401
 8008010:	0800587d 	.word	0x0800587d
 8008014:	08005b41 	.word	0x08005b41
 8008018:	08005f41 	.word	0x08005f41
 800801c:	0800636d 	.word	0x0800636d
 8008020:	08031144 	.word	0x08031144
 8008024:	08030fe0 	.word	0x08030fe0
 8008028:	20000690 	.word	0x20000690
 800802c:	08031190 	.word	0x08031190
 8008030:	0803101c 	.word	0x0803101c
 8008034:	08030a94 	.word	0x08030a94
 8008038:	f04f 33ff 	mov.w	r3, #4294967295
 800803c:	4618      	mov	r0, r3
 800803e:	f022 fafd 	bl	802a63c <_Znaj>
 8008042:	4603      	mov	r3, r0
 8008044:	461a      	mov	r2, r3
 8008046:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800804a:	4611      	mov	r1, r2
 800804c:	4618      	mov	r0, r3
 800804e:	f001 f8cd 	bl	80091ec <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>
        ei_feature_t* features = features_ptr.get();
 8008052:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008056:	4618      	mov	r0, r3
 8008058:	f001 f8f6 	bl	8009248 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>
 800805c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        memset(features, 0, sizeof(ei_feature_t) * block_num);
 8008060:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	461a      	mov	r2, r3
 8008068:	2100      	movs	r1, #0
 800806a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800806e:	f026 fb69 	bl	802e744 <memset>

        // have it outside of the loop to avoid going out of scope
        std::unique_ptr<ei::matrix_t> *matrix_ptrs = new std::unique_ptr<ei::matrix_t>[block_num];
 8008072:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8008076:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800807a:	429c      	cmp	r4, r3
 800807c:	d202      	bcs.n	8008084 <process_impulse_continuous+0x38c>
 800807e:	1ca3      	adds	r3, r4, #2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	e001      	b.n	8008088 <process_impulse_continuous+0x390>
 8008084:	f04f 33ff 	mov.w	r3, #4294967295
 8008088:	4618      	mov	r0, r3
 800808a:	f022 fad7 	bl	802a63c <_Znaj>
 800808e:	4603      	mov	r3, r0
 8008090:	461d      	mov	r5, r3
 8008092:	2304      	movs	r3, #4
 8008094:	602b      	str	r3, [r5, #0]
 8008096:	1d2b      	adds	r3, r5, #4
 8008098:	601c      	str	r4, [r3, #0]
 800809a:	f105 0308 	add.w	r3, r5, #8
 800809e:	1e62      	subs	r2, r4, #1
 80080a0:	4614      	mov	r4, r2
 80080a2:	461e      	mov	r6, r3
 80080a4:	e004      	b.n	80080b0 <process_impulse_continuous+0x3b8>
 80080a6:	4630      	mov	r0, r6
 80080a8:	f001 f902 	bl	80092b0 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>
 80080ac:	3604      	adds	r6, #4
 80080ae:	3c01      	subs	r4, #1
 80080b0:	2c00      	cmp	r4, #0
 80080b2:	daf8      	bge.n	80080a6 <process_impulse_continuous+0x3ae>
 80080b4:	f105 0308 	add.w	r3, r5, #8
 80080b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        out_features_index = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        // iterate over every dsp block and run normalization
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 80080c2:	2300      	movs	r3, #0
 80080c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080c8:	e0ac      	b.n	8008224 <process_impulse_continuous+0x52c>
            ei_model_dsp_t block = impulse->dsp_blocks[ix];
 80080ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080d4:	015b      	lsls	r3, r3, #5
 80080d6:	4413      	add	r3, r2
 80080d8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80080dc:	461d      	mov	r5, r3
 80080de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80080e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
 80080ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80080f4:	18d4      	adds	r4, r2, r3
 80080f6:	2010      	movs	r0, #16
 80080f8:	f022 fa8f 	bl	802a61a <_Znwj>
 80080fc:	4603      	mov	r3, r0
 80080fe:	461d      	mov	r5, r3
 8008100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008102:	2300      	movs	r3, #0
 8008104:	2101      	movs	r1, #1
 8008106:	4628      	mov	r0, r5
 8008108:	f7f9 f86e 	bl	80011e8 <_ZN2ei9ei_matrixC1EmmPf>
 800810c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008110:	4629      	mov	r1, r5
 8008112:	4618      	mov	r0, r3
 8008114:	f001 f8ec 	bl	80092f0 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8008118:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800811c:	4619      	mov	r1, r3
 800811e:	4620      	mov	r0, r4
 8008120:	f7ff fdc4 	bl	8007cac <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 8008124:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008128:	4618      	mov	r0, r3
 800812a:	f001 f8f0 	bl	800930e <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
            features[ix].matrix = matrix_ptrs[ix].get();
 800812e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008138:	18d1      	adds	r1, r2, r3
 800813a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008144:	18d4      	adds	r4, r2, r3
 8008146:	4608      	mov	r0, r1
 8008148:	f001 f91f 	bl	800938a <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>
 800814c:	4603      	mov	r3, r0
 800814e:	6023      	str	r3, [r4, #0]
            features[ix].blockId = block.blockId;
 8008150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800815a:	4413      	add	r3, r2
 800815c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800815e:	605a      	str	r2, [r3, #4]

            /* Create a copy of the matrix for normalization */
            for (size_t m_ix = 0; m_ix < block.n_output_features; m_ix++) {
 8008160:	2300      	movs	r3, #0
 8008162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008166:	e01b      	b.n	80081a0 <process_impulse_continuous+0x4a8>
                features[ix].matrix->buffer[m_ix] = static_features_matrix.buffer[out_features_index + m_ix];
 8008168:	4b77      	ldr	r3, [pc, #476]	; (8008348 <process_impulse_continuous+0x650>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008170:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008174:	440b      	add	r3, r1
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	441a      	add	r2, r3
 800817a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008184:	440b      	add	r3, r1
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6819      	ldr	r1, [r3, #0]
 800818a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	6812      	ldr	r2, [r2, #0]
 8008194:	601a      	str	r2, [r3, #0]
            for (size_t m_ix = 0; m_ix < block.n_output_features; m_ix++) {
 8008196:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800819a:	3301      	adds	r3, #1
 800819c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d3de      	bcc.n	8008168 <process_impulse_continuous+0x470>
            }

            if (block.extract_fn == extract_mfcc_features) {
 80081aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ac:	4a67      	ldr	r2, [pc, #412]	; (800834c <process_impulse_continuous+0x654>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d10c      	bne.n	80081cc <process_impulse_continuous+0x4d4>
                calc_cepstral_mean_and_var_normalization_mfcc(features[ix].matrix, block.config);
 80081b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80081bc:	4413      	add	r3, r2
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081c2:	4611      	mov	r1, r2
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fe fbe5 	bl	8006994 <_ZN12_GLOBAL__N_145calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv>
 80081ca:	e020      	b.n	800820e <process_impulse_continuous+0x516>
            }
            else if (block.extract_fn == extract_spectrogram_features) {
 80081cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ce:	4a60      	ldr	r2, [pc, #384]	; (8008350 <process_impulse_continuous+0x658>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d10c      	bne.n	80081ee <process_impulse_continuous+0x4f6>
                calc_cepstral_mean_and_var_normalization_spectrogram(features[ix].matrix, block.config);
 80081d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80081de:	4413      	add	r3, r2
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fc58 	bl	8006a9c <_ZN12_GLOBAL__N_152calc_cepstral_mean_and_var_normalization_spectrogramEPN2ei9ei_matrixEPv>
 80081ec:	e00f      	b.n	800820e <process_impulse_continuous+0x516>
            }
            else if (block.extract_fn == extract_mfe_features) {
 80081ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081f0:	4a58      	ldr	r2, [pc, #352]	; (8008354 <process_impulse_continuous+0x65c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d10b      	bne.n	800820e <process_impulse_continuous+0x516>
                calc_cepstral_mean_and_var_normalization_mfe(features[ix].matrix, block.config);
 80081f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008200:	4413      	add	r3, r2
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008206:	4611      	mov	r1, r2
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe fbfb 	bl	8006a04 <_ZN12_GLOBAL__N_144calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv>
            }
            out_features_index += block.n_output_features;
 800820e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008210:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008214:	4413      	add	r3, r2
 8008216:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 800821a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800821e:	3301      	adds	r3, #1
 8008220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008224:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800822e:	429a      	cmp	r2, r3
 8008230:	f4ff af4b 	bcc.w	80080ca <process_impulse_continuous+0x3d2>
        }

        result->timing.dsp_us += ei_read_timer_us() - dsp_start_us;
 8008234:	f01d f80a 	bl	802524c <_Z16ei_read_timer_usv>
 8008238:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800823c:	ebb0 0802 	subs.w	r8, r0, r2
 8008240:	eb61 0903 	sbc.w	r9, r1, r3
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800824a:	eb18 0102 	adds.w	r1, r8, r2
 800824e:	6039      	str	r1, [r7, #0]
 8008250:	eb49 0303 	adc.w	r3, r9, r3
 8008254:	607b      	str	r3, [r7, #4]
 8008256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800825a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800825c:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
        result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8008266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800826a:	f04f 0300 	mov.w	r3, #0
 800826e:	f7f8 fd0b 	bl	8000c88 <__aeabi_ldivmod>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

        if (debug) {
 800827c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <process_impulse_continuous+0x592>
            ei_printf("Running impulse...\n");
 8008284:	4834      	ldr	r0, [pc, #208]	; (8008358 <process_impulse_continuous+0x660>)
 8008286:	f000 fc85 	bl	8008b94 <_Z9ei_printfPKcz>
        }

        ei_impulse_error = run_inference(handle, features, result, debug);
 800828a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800828e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008290:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008296:	f7ff fca3 	bl	8007be0 <run_inference>
 800829a:	4603      	mov	r3, r0
 800829c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
                    }
                }
            }
        }
#endif
        delete[] matrix_ptrs;
 80082a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01e      	beq.n	80082e6 <process_impulse_continuous+0x5ee>
 80082a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082ac:	3b04      	subs	r3, #4
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80082b6:	18d4      	adds	r4, r2, r3
 80082b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082bc:	429c      	cmp	r4, r3
 80082be:	d004      	beq.n	80082ca <process_impulse_continuous+0x5d2>
 80082c0:	3c04      	subs	r4, #4
 80082c2:	4620      	mov	r0, r4
 80082c4:	f001 f823 	bl	800930e <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 80082c8:	e7f6      	b.n	80082b8 <process_impulse_continuous+0x5c0>
 80082ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082ce:	f1a3 0208 	sub.w	r2, r3, #8
 80082d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082d6:	3b04      	subs	r3, #4
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3302      	adds	r3, #2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4619      	mov	r1, r3
 80082e0:	4610      	mov	r0, r2
 80082e2:	f022 f989 	bl	802a5f8 <_ZdaPvj>
    }
 80082e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 ff8d 	bl	800920a <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>
 80082f0:	e01f      	b.n	8008332 <process_impulse_continuous+0x63a>
    else {
        for (int i = 0; i < impulse->label_count; i++) {
 80082f2:	2300      	movs	r3, #0
 80082f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082f8:	e012      	b.n	8008320 <process_impulse_continuous+0x628>
            // set label correctly in the result struct if we have no results (otherwise is nullptr)
            result->classification[i].label = impulse->categories[(uint32_t)i];
 80082fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082fe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008300:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	6819      	ldr	r1, [r3, #0]
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008310:	3201      	adds	r2, #1
 8008312:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        for (int i = 0; i < impulse->label_count; i++) {
 8008316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800831a:	3301      	adds	r3, #1
 800831c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008320:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008324:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008328:	461a      	mov	r2, r3
 800832a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800832e:	4293      	cmp	r3, r2
 8008330:	dbe3      	blt.n	80082fa <process_impulse_continuous+0x602>
        }
    }

    return ei_impulse_error;
 8008332:	f997 60d7 	ldrsb.w	r6, [r7, #215]	; 0xd7
 8008336:	e000      	b.n	800833a <process_impulse_continuous+0x642>
            return EI_IMPULSE_DSP_ERROR;
 8008338:	bf00      	nop
}
 800833a:	4633      	mov	r3, r6
 800833c:	4618      	mov	r0, r3
 800833e:	37dc      	adds	r7, #220	; 0xdc
 8008340:	46bd      	mov	sp, r7
 8008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008346:	bf00      	nop
 8008348:	20000698 	.word	0x20000698
 800834c:	080050a5 	.word	0x080050a5
 8008350:	0800587d 	.word	0x0800587d
 8008354:	08005f41 	.word	0x08005f41
 8008358:	08031130 	.word	0x08031130

0800835c <run_classifier_continuous>:
extern "C" EI_IMPULSE_ERROR run_classifier_continuous(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false,
    bool enable_maf = true)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af02      	add	r7, sp, #8
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	4611      	mov	r1, r2
 8008368:	461a      	mov	r2, r3
 800836a:	460b      	mov	r3, r1
 800836c:	71fb      	strb	r3, [r7, #7]
 800836e:	4613      	mov	r3, r2
 8008370:	71bb      	strb	r3, [r7, #6]
    auto& impulse = ei_default_impulse;
 8008372:	4b08      	ldr	r3, [pc, #32]	; (8008394 <run_classifier_continuous+0x38>)
 8008374:	617b      	str	r3, [r7, #20]
    return process_impulse_continuous(&impulse, signal, result, debug, enable_maf);
 8008376:	79fa      	ldrb	r2, [r7, #7]
 8008378:	79bb      	ldrb	r3, [r7, #6]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	4613      	mov	r3, r2
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	68f9      	ldr	r1, [r7, #12]
 8008382:	6978      	ldr	r0, [r7, #20]
 8008384:	f7ff fcb8 	bl	8007cf8 <process_impulse_continuous>
 8008388:	4603      	mov	r3, r0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	2000067c 	.word	0x2000067c

08008398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008398:	b590      	push	{r4, r7, lr}
 800839a:	b0cd      	sub	sp, #308	; 0x134
 800839c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_StatusTypeDef hal_res;
  int print_results = -(EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW);
 800839e:	f06f 0303 	mvn.w	r3, #3
 80083a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  uint32_t timestamp = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80083ac:	f003 fb2c 	bl	800ba08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80083b0:	f000 f96a 	bl	8008688 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80083b4:	f000 fab6 	bl	8008924 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80083b8:	f000 fa96 	bl	80088e8 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80083bc:	f000 fa60 	bl	8008880 <_ZL19MX_USART2_UART_Initv>
  MX_CRC_Init();
 80083c0:	f000 f9fe 	bl	80087c0 <_ZL11MX_CRC_Initv>
  MX_SAI1_Init();
 80083c4:	f000 fa24 	bl	8008810 <_ZL12MX_SAI1_Initv>
  /* USER CODE BEGIN 2 */

  // Say some stuff
  ei_printf("Inferencing settings:\r\n");
 80083c8:	4899      	ldr	r0, [pc, #612]	; (8008630 <main+0x298>)
 80083ca:	f000 fbe3 	bl	8008b94 <_Z9ei_printfPKcz>
  ei_printf("\tInterval: %.2f ms.\r\n", (float)EI_CLASSIFIER_INTERVAL_MS);
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	4b98      	ldr	r3, [pc, #608]	; (8008634 <main+0x29c>)
 80083d4:	4898      	ldr	r0, [pc, #608]	; (8008638 <main+0x2a0>)
 80083d6:	f000 fbdd 	bl	8008b94 <_Z9ei_printfPKcz>
  ei_printf("\tFrame size: %d\r\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
 80083da:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80083de:	4897      	ldr	r0, [pc, #604]	; (800863c <main+0x2a4>)
 80083e0:	f000 fbd8 	bl	8008b94 <_Z9ei_printfPKcz>
  ei_printf("\tSample length: %d ms.\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
 80083e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80083e8:	4895      	ldr	r0, [pc, #596]	; (8008640 <main+0x2a8>)
 80083ea:	f000 fbd3 	bl	8008b94 <_Z9ei_printfPKcz>
  ei_printf("\tNo. of classes: %d\r\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
 80083ee:	2103      	movs	r1, #3
 80083f0:	4894      	ldr	r0, [pc, #592]	; (8008644 <main+0x2ac>)
 80083f2:	f000 fbcf 	bl	8008b94 <_Z9ei_printfPKcz>

  // Create double buffer
  inference.buffers[0] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
 80083f6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80083fa:	f025 faff 	bl	802d9fc <malloc>
 80083fe:	4603      	mov	r3, r0
 8008400:	461a      	mov	r2, r3
 8008402:	4b91      	ldr	r3, [pc, #580]	; (8008648 <main+0x2b0>)
 8008404:	601a      	str	r2, [r3, #0]
  if(inference.buffers[0] == NULL)
 8008406:	4b90      	ldr	r3, [pc, #576]	; (8008648 <main+0x2b0>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d102      	bne.n	8008414 <main+0x7c>
  {
    ei_printf("ERROR: Could not create buffer 1. Likely ran out of heap memory.\r\n");
 800840e:	488f      	ldr	r0, [pc, #572]	; (800864c <main+0x2b4>)
 8008410:	f000 fbc0 	bl	8008b94 <_Z9ei_printfPKcz>
  }
  inference.buffers[1] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
 8008414:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008418:	f025 faf0 	bl	802d9fc <malloc>
 800841c:	4603      	mov	r3, r0
 800841e:	461a      	mov	r2, r3
 8008420:	4b89      	ldr	r3, [pc, #548]	; (8008648 <main+0x2b0>)
 8008422:	605a      	str	r2, [r3, #4]
  if(inference.buffers[1] == NULL)
 8008424:	4b88      	ldr	r3, [pc, #544]	; (8008648 <main+0x2b0>)
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d102      	bne.n	8008432 <main+0x9a>
  {
    ei_printf("ERROR: Could not create buffer 2. Likely ran out of heap memory.\r\n");
 800842c:	4888      	ldr	r0, [pc, #544]	; (8008650 <main+0x2b8>)
 800842e:	f000 fbb1 	bl	8008b94 <_Z9ei_printfPKcz>
  }

  // Set inference parameters
  inference.buf_select = 0;
 8008432:	4b85      	ldr	r3, [pc, #532]	; (8008648 <main+0x2b0>)
 8008434:	2200      	movs	r2, #0
 8008436:	721a      	strb	r2, [r3, #8]
  inference.buf_count  = 0;
 8008438:	4b83      	ldr	r3, [pc, #524]	; (8008648 <main+0x2b0>)
 800843a:	2200      	movs	r2, #0
 800843c:	60da      	str	r2, [r3, #12]
  inference.n_samples  = EI_CLASSIFIER_SLICE_SIZE;
 800843e:	4b82      	ldr	r3, [pc, #520]	; (8008648 <main+0x2b0>)
 8008440:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8008444:	611a      	str	r2, [r3, #16]
  inference.buf_ready  = 0;
 8008446:	4b80      	ldr	r3, [pc, #512]	; (8008648 <main+0x2b0>)
 8008448:	2200      	movs	r2, #0
 800844a:	725a      	strb	r2, [r3, #9]

  // Start receiving I2S audio data
  hal_res =  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)i2s_buf, I2S_BUF_LEN);
 800844c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8008450:	4980      	ldr	r1, [pc, #512]	; (8008654 <main+0x2bc>)
 8008452:	4881      	ldr	r0, [pc, #516]	; (8008658 <main+0x2c0>)
 8008454:	f006 fca8 	bl	800eda8 <HAL_SAI_Receive_DMA>
 8008458:	4603      	mov	r3, r0
 800845a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
  if (hal_res != HAL_OK)
 800845e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <main+0xd4>
  {
    ei_printf("ERROR: Could not initialize I2S microphone.\r\n");
 8008466:	487d      	ldr	r0, [pc, #500]	; (800865c <main+0x2c4>)
 8008468:	f000 fb94 	bl	8008b94 <_Z9ei_printfPKcz>
  }

  // Start doing inference
  record_ready = true;
 800846c:	4b7c      	ldr	r3, [pc, #496]	; (8008660 <main+0x2c8>)
 800846e:	2201      	movs	r2, #1
 8008470:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Wait until buffer is full
    bool m = ei_microphone_inference_record();
 8008472:	f000 fabf 	bl	80089f4 <_Z30ei_microphone_inference_recordv>
 8008476:	4603      	mov	r3, r0
 8008478:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
    if (!m)
 800847c:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8008480:	f083 0301 	eor.w	r3, r3, #1
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <main+0xfa>
    {
      ei_printf("ERROR: Audio buffer overrun\r\n");
 800848a:	4876      	ldr	r0, [pc, #472]	; (8008664 <main+0x2cc>)
 800848c:	f000 fb82 	bl	8008b94 <_Z9ei_printfPKcz>
      break;
 8008490:	e0c6      	b.n	8008620 <main+0x288>
    }

    // Do classification (i.e. the inference part)
    signal_t signal;
 8008492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008496:	4618      	mov	r0, r3
 8008498:	f7fc fd68 	bl	8004f6c <_ZN2ei11ei_signal_tC1Ev>
    signal.total_length = EI_CLASSIFIER_SLICE_SIZE;
 800849c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80084a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    signal.get_data = &get_audio_signal_data;
 80084a4:	4b70      	ldr	r3, [pc, #448]	; (8008668 <main+0x2d0>)
 80084a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80084aa:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80084ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b2:	4611      	mov	r1, r2
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 fd44 	bl	8008f42 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>
    ei_impulse_result_t result = { 0 };
 80084ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084c2:	4618      	mov	r0, r3
 80084c4:	f44f 7384 	mov.w	r3, #264	; 0x108
 80084c8:	461a      	mov	r2, r3
 80084ca:	2100      	movs	r1, #0
 80084cc:	f026 f93a 	bl	802e744 <memset>
    EI_IMPULSE_ERROR r = run_classifier_continuous(&signal, &result, debug_nn);
 80084d0:	4b66      	ldr	r3, [pc, #408]	; (800866c <main+0x2d4>)
 80084d2:	781a      	ldrb	r2, [r3, #0]
 80084d4:	4639      	mov	r1, r7
 80084d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80084da:	2301      	movs	r3, #1
 80084dc:	f7ff ff3e 	bl	800835c <run_classifier_continuous>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
    if (r != EI_IMPULSE_OK)
 80084e6:	f997 3121 	ldrsb.w	r3, [r7, #289]	; 0x121
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d007      	beq.n	80084fe <main+0x166>
    {
        ei_printf("ERROR: Failed to run classifier (%d)\r\n", r);
 80084ee:	f997 3121 	ldrsb.w	r3, [r7, #289]	; 0x121
 80084f2:	4619      	mov	r1, r3
 80084f4:	485e      	ldr	r0, [pc, #376]	; (8008670 <main+0x2d8>)
 80084f6:	f000 fb4d 	bl	8008b94 <_Z9ei_printfPKcz>
        break;
 80084fa:	2400      	movs	r4, #0
 80084fc:	e088      	b.n	8008610 <main+0x278>
    }

    // Print output predictions (once every 4 predictions)
    if(++print_results >= (EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1))
 80084fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008502:	3301      	adds	r3, #1
 8008504:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800850c:	2b01      	cmp	r3, #1
 800850e:	bfcc      	ite	gt
 8008510:	2301      	movgt	r3, #1
 8008512:	2300      	movle	r3, #0
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d03c      	beq.n	8008594 <main+0x1fc>
    {
      // Comment this section out if you don't want to see the raw scores
      ei_printf("Predictions (DSP: %d ms, NN: %d ms)\r\n", result.timing.dsp, result.timing.classification);
 800851a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800851e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008522:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800852e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008532:	461a      	mov	r2, r3
 8008534:	484f      	ldr	r0, [pc, #316]	; (8008674 <main+0x2dc>)
 8008536:	f000 fb2d 	bl	8008b94 <_Z9ei_printfPKcz>
      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)
 800853a:	2300      	movs	r3, #0
 800853c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008540:	e021      	b.n	8008586 <main+0x1ee>
      {
          ei_printf("    %s: %.5f\r\n", result.classification[ix].label, result.classification[ix].value);
 8008542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800854a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800854e:	3201      	adds	r2, #1
 8008550:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8008554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008558:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800855c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008560:	3301      	adds	r3, #1
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	4413      	add	r3, r2
 8008566:	3304      	adds	r3, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f7f7 ffec 	bl	8000548 <__aeabi_f2d>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4621      	mov	r1, r4
 8008576:	4840      	ldr	r0, [pc, #256]	; (8008678 <main+0x2e0>)
 8008578:	f000 fb0c 	bl	8008b94 <_Z9ei_printfPKcz>
      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)
 800857c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008580:	3301      	adds	r3, #1
 8008582:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800858a:	2b02      	cmp	r3, #2
 800858c:	d9d9      	bls.n	8008542 <main+0x1aa>
      }
      print_results = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    // Your code goes here
    // Note: see model_metadata.h for labels and indices

    // Example: print if "yes" is above 0.5 threshold { "animal", "human", "noise" };
    if (result.classification[3].value > 0.5)
 8008594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800859c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80085a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80085a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ac:	dd02      	ble.n	80085b4 <main+0x21c>
    {
      ei_printf("Noise!\r\n");
 80085ae:	4833      	ldr	r0, [pc, #204]	; (800867c <main+0x2e4>)
 80085b0:	f000 faf0 	bl	8008b94 <_Z9ei_printfPKcz>
    }

    // Example: flash LED if "no" is above 0.5 threshold
    if (result.classification[0].value > 0.5)
 80085b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80085c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80085c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085cc:	dd09      	ble.n	80085e2 <main+0x24a>
    {
    	ei_printf("animal!\r\n");
 80085ce:	482c      	ldr	r0, [pc, #176]	; (8008680 <main+0x2e8>)
 80085d0:	f000 fae0 	bl	8008b94 <_Z9ei_printfPKcz>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80085d4:	2201      	movs	r2, #1
 80085d6:	2120      	movs	r1, #32
 80085d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085dc:	f004 f868 	bl	800c6b0 <HAL_GPIO_WritePin>
 80085e0:	e015      	b.n	800860e <main+0x276>
    }
    else if (result.classification[1].value > 0.5)
 80085e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80085ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80085f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085fa:	dd08      	ble.n	800860e <main+0x276>
    {
    	ei_printf("human!\r\n");
 80085fc:	4821      	ldr	r0, [pc, #132]	; (8008684 <main+0x2ec>)
 80085fe:	f000 fac9 	bl	8008b94 <_Z9ei_printfPKcz>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008602:	2200      	movs	r2, #0
 8008604:	2120      	movs	r1, #32
 8008606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800860a:	f004 f851 	bl	800c6b0 <HAL_GPIO_WritePin>
    // ***END OF EXAMPLES***

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800860e:	2401      	movs	r4, #1
 8008610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008614:	4618      	mov	r0, r3
 8008616:	f7fc fcb6 	bl	8004f86 <_ZN2ei11ei_signal_tD1Ev>
 800861a:	2c01      	cmp	r4, #1
 800861c:	d100      	bne.n	8008620 <main+0x288>
 800861e:	e728      	b.n	8008472 <main+0xda>

  ei_microphone_inference_end();
 8008620:	f000 fa12 	bl	8008a48 <_Z27ei_microphone_inference_endv>
  /* USER CODE END 3 */
}
 8008624:	2300      	movs	r3, #0
 8008626:	4618      	mov	r0, r3
 8008628:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800862c:	46bd      	mov	sp, r7
 800862e:	bd90      	pop	{r4, r7, pc}
 8008630:	080311d0 	.word	0x080311d0
 8008634:	3fb00000 	.word	0x3fb00000
 8008638:	080311e8 	.word	0x080311e8
 800863c:	08031200 	.word	0x08031200
 8008640:	08031214 	.word	0x08031214
 8008644:	08031230 	.word	0x08031230
 8008648:	20006c20 	.word	0x20006c20
 800864c:	08031248 	.word	0x08031248
 8008650:	0803128c 	.word	0x0803128c
 8008654:	20000820 	.word	0x20000820
 8008658:	200006d0 	.word	0x200006d0
 800865c:	080312d0 	.word	0x080312d0
 8008660:	20006c34 	.word	0x20006c34
 8008664:	08031300 	.word	0x08031300
 8008668:	08008b09 	.word	0x08008b09
 800866c:	2000081c 	.word	0x2000081c
 8008670:	08031320 	.word	0x08031320
 8008674:	08031348 	.word	0x08031348
 8008678:	08031370 	.word	0x08031370
 800867c:	08031380 	.word	0x08031380
 8008680:	0803138c 	.word	0x0803138c
 8008684:	08031398 	.word	0x08031398

08008688 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b0b8      	sub	sp, #224	; 0xe0
 800868c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800868e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008692:	2244      	movs	r2, #68	; 0x44
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f026 f854 	bl	802e744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800869c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	605a      	str	r2, [r3, #4]
 80086a6:	609a      	str	r2, [r3, #8]
 80086a8:	60da      	str	r2, [r3, #12]
 80086aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80086ac:	463b      	mov	r3, r7
 80086ae:	2288      	movs	r2, #136	; 0x88
 80086b0:	2100      	movs	r1, #0
 80086b2:	4618      	mov	r0, r3
 80086b4:	f026 f846 	bl	802e744 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80086b8:	2302      	movs	r3, #2
 80086ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80086be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80086c6:	2310      	movs	r3, #16
 80086c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80086cc:	2302      	movs	r3, #2
 80086ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80086d2:	2302      	movs	r3, #2
 80086d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80086d8:	2301      	movs	r3, #1
 80086da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80086de:	230a      	movs	r3, #10
 80086e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80086e4:	2307      	movs	r3, #7
 80086e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80086ea:	2302      	movs	r3, #2
 80086ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80086f0:	2302      	movs	r3, #2
 80086f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80086f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80086fa:	4618      	mov	r0, r3
 80086fc:	f004 f854 	bl	800c7a8 <HAL_RCC_OscConfig>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	bf14      	ite	ne
 8008706:	2301      	movne	r3, #1
 8008708:	2300      	moveq	r3, #0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8008710:	f000 fa7a 	bl	8008c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008714:	230f      	movs	r3, #15
 8008716:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800871a:	2303      	movs	r3, #3
 800871c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008720:	2300      	movs	r3, #0
 8008722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008726:	2300      	movs	r3, #0
 8008728:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800872c:	2300      	movs	r3, #0
 800872e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008732:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008736:	2104      	movs	r1, #4
 8008738:	4618      	mov	r0, r3
 800873a:	f004 fc1d 	bl	800cf78 <HAL_RCC_ClockConfig>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	bf14      	ite	ne
 8008744:	2301      	movne	r3, #1
 8008746:	2300      	moveq	r3, #0
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 800874e:	f000 fa5b 	bl	8008c08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SAI1;
 8008752:	f640 0302 	movw	r3, #2050	; 0x802
 8008756:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008758:	2300      	movs	r3, #0
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800875c:	2300      	movs	r3, #0
 800875e:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8008760:	2302      	movs	r3, #2
 8008762:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008764:	2301      	movs	r3, #1
 8008766:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8008768:	2308      	movs	r3, #8
 800876a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800876c:	2307      	movs	r3, #7
 800876e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008770:	2302      	movs	r3, #2
 8008772:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008774:	2302      	movs	r3, #2
 8008776:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8008778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800877c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800877e:	463b      	mov	r3, r7
 8008780:	4618      	mov	r0, r3
 8008782:	f004 fdff 	bl	800d384 <HAL_RCCEx_PeriphCLKConfig>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	bf14      	ite	ne
 800878c:	2301      	movne	r3, #1
 800878e:	2300      	moveq	r3, #0
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <_Z18SystemClock_Configv+0x112>
  {
    Error_Handler();
 8008796:	f000 fa37 	bl	8008c08 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800879a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800879e:	f003 ffad 	bl	800c6fc <HAL_PWREx_ControlVoltageScaling>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	bf14      	ite	ne
 80087a8:	2301      	movne	r3, #1
 80087aa:	2300      	moveq	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <_Z18SystemClock_Configv+0x12e>
  {
    Error_Handler();
 80087b2:	f000 fa29 	bl	8008c08 <Error_Handler>
  }
}
 80087b6:	bf00      	nop
 80087b8:	37e0      	adds	r7, #224	; 0xe0
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80087c4:	4b10      	ldr	r3, [pc, #64]	; (8008808 <_ZL11MX_CRC_Initv+0x48>)
 80087c6:	4a11      	ldr	r2, [pc, #68]	; (800880c <_ZL11MX_CRC_Initv+0x4c>)
 80087c8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80087ca:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <_ZL11MX_CRC_Initv+0x48>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80087d0:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <_ZL11MX_CRC_Initv+0x48>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80087d6:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <_ZL11MX_CRC_Initv+0x48>)
 80087d8:	2200      	movs	r2, #0
 80087da:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80087dc:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <_ZL11MX_CRC_Initv+0x48>)
 80087de:	2200      	movs	r2, #0
 80087e0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80087e2:	4b09      	ldr	r3, [pc, #36]	; (8008808 <_ZL11MX_CRC_Initv+0x48>)
 80087e4:	2201      	movs	r2, #1
 80087e6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80087e8:	4807      	ldr	r0, [pc, #28]	; (8008808 <_ZL11MX_CRC_Initv+0x48>)
 80087ea:	f003 fa97 	bl	800bd1c <HAL_CRC_Init>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	bf14      	ite	ne
 80087f4:	2301      	movne	r3, #1
 80087f6:	2300      	moveq	r3, #0
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 80087fe:	f000 fa03 	bl	8008c08 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008802:	bf00      	nop
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	200006ac 	.word	0x200006ac
 800880c:	40023000 	.word	0x40023000

08008810 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8008814:	4b18      	ldr	r3, [pc, #96]	; (8008878 <_ZL12MX_SAI1_Initv+0x68>)
 8008816:	4a19      	ldr	r2, [pc, #100]	; (800887c <_ZL12MX_SAI1_Initv+0x6c>)
 8008818:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 800881a:	4b17      	ldr	r3, [pc, #92]	; (8008878 <_ZL12MX_SAI1_Initv+0x68>)
 800881c:	2201      	movs	r2, #1
 800881e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8008820:	4b15      	ldr	r3, [pc, #84]	; (8008878 <_ZL12MX_SAI1_Initv+0x68>)
 8008822:	2200      	movs	r2, #0
 8008824:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008826:	4b14      	ldr	r3, [pc, #80]	; (8008878 <_ZL12MX_SAI1_Initv+0x68>)
 8008828:	2200      	movs	r2, #0
 800882a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800882c:	4b12      	ldr	r3, [pc, #72]	; (8008878 <_ZL12MX_SAI1_Initv+0x68>)
 800882e:	2200      	movs	r2, #0
 8008830:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8008832:	4b11      	ldr	r3, [pc, #68]	; (8008878 <_ZL12MX_SAI1_Initv+0x68>)
 8008834:	2200      	movs	r2, #0
 8008836:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_32K;
 8008838:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <_ZL12MX_SAI1_Initv+0x68>)
 800883a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800883e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008840:	4b0d      	ldr	r3, [pc, #52]	; (8008878 <_ZL12MX_SAI1_Initv+0x68>)
 8008842:	2200      	movs	r2, #0
 8008844:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <_ZL12MX_SAI1_Initv+0x68>)
 8008848:	2200      	movs	r2, #0
 800884a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800884c:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <_ZL12MX_SAI1_Initv+0x68>)
 800884e:	2200      	movs	r2, #0
 8008850:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008852:	2302      	movs	r3, #2
 8008854:	2202      	movs	r2, #2
 8008856:	2100      	movs	r1, #0
 8008858:	4807      	ldr	r0, [pc, #28]	; (8008878 <_ZL12MX_SAI1_Initv+0x68>)
 800885a:	f006 f8ad 	bl	800e9b8 <HAL_SAI_InitProtocol>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	bf14      	ite	ne
 8008864:	2301      	movne	r3, #1
 8008866:	2300      	moveq	r3, #0
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <_ZL12MX_SAI1_Initv+0x62>
  {
    Error_Handler();
 800886e:	f000 f9cb 	bl	8008c08 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8008872:	bf00      	nop
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	200006d0 	.word	0x200006d0
 800887c:	40015424 	.word	0x40015424

08008880 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008884:	4b16      	ldr	r3, [pc, #88]	; (80088e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008886:	4a17      	ldr	r2, [pc, #92]	; (80088e4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8008888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800888a:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800888c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008892:	4b13      	ldr	r3, [pc, #76]	; (80088e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8008894:	2200      	movs	r2, #0
 8008896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008898:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800889a:	2200      	movs	r2, #0
 800889c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800889e:	4b10      	ldr	r3, [pc, #64]	; (80088e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80088a4:	4b0e      	ldr	r3, [pc, #56]	; (80088e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80088a6:	220c      	movs	r2, #12
 80088a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80088aa:	4b0d      	ldr	r3, [pc, #52]	; (80088e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80088b0:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80088b6:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80088bc:	4b08      	ldr	r3, [pc, #32]	; (80088e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80088be:	2200      	movs	r2, #0
 80088c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80088c2:	4807      	ldr	r0, [pc, #28]	; (80088e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80088c4:	f006 fd0e 	bl	800f2e4 <HAL_UART_Init>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bf14      	ite	ne
 80088ce:	2301      	movne	r3, #1
 80088d0:	2300      	moveq	r3, #0
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80088d8:	f000 f996 	bl	8008c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80088dc:	bf00      	nop
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	2000079c 	.word	0x2000079c
 80088e4:	40004400 	.word	0x40004400

080088e8 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80088ee:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <_ZL11MX_DMA_Initv+0x38>)
 80088f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088f2:	4a0b      	ldr	r2, [pc, #44]	; (8008920 <_ZL11MX_DMA_Initv+0x38>)
 80088f4:	f043 0302 	orr.w	r3, r3, #2
 80088f8:	6493      	str	r3, [r2, #72]	; 0x48
 80088fa:	4b09      	ldr	r3, [pc, #36]	; (8008920 <_ZL11MX_DMA_Initv+0x38>)
 80088fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	607b      	str	r3, [r7, #4]
 8008904:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8008906:	2200      	movs	r2, #0
 8008908:	2100      	movs	r1, #0
 800890a:	2039      	movs	r0, #57	; 0x39
 800890c:	f003 f9cf 	bl	800bcae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8008910:	2039      	movs	r0, #57	; 0x39
 8008912:	f003 f9e8 	bl	800bce6 <HAL_NVIC_EnableIRQ>

}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	40021000 	.word	0x40021000

08008924 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08a      	sub	sp, #40	; 0x28
 8008928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800892a:	f107 0314 	add.w	r3, r7, #20
 800892e:	2200      	movs	r2, #0
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	605a      	str	r2, [r3, #4]
 8008934:	609a      	str	r2, [r3, #8]
 8008936:	60da      	str	r2, [r3, #12]
 8008938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800893a:	4b2b      	ldr	r3, [pc, #172]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 800893c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800893e:	4a2a      	ldr	r2, [pc, #168]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 8008940:	f043 0304 	orr.w	r3, r3, #4
 8008944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008946:	4b28      	ldr	r3, [pc, #160]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 8008948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800894a:	f003 0304 	and.w	r3, r3, #4
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008952:	4b25      	ldr	r3, [pc, #148]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 8008954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008956:	4a24      	ldr	r2, [pc, #144]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 8008958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800895e:	4b22      	ldr	r3, [pc, #136]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 8008960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800896a:	4b1f      	ldr	r3, [pc, #124]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 800896c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800896e:	4a1e      	ldr	r2, [pc, #120]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 8008970:	f043 0301 	orr.w	r3, r3, #1
 8008974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008976:	4b1c      	ldr	r3, [pc, #112]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 8008978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	60bb      	str	r3, [r7, #8]
 8008980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008982:	4b19      	ldr	r3, [pc, #100]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 8008984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008986:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 8008988:	f043 0302 	orr.w	r3, r3, #2
 800898c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <_ZL12MX_GPIO_Initv+0xc4>)
 8008990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	607b      	str	r3, [r7, #4]
 8008998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800899a:	2200      	movs	r2, #0
 800899c:	2120      	movs	r1, #32
 800899e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089a2:	f003 fe85 	bl	800c6b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80089a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80089ac:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <_ZL12MX_GPIO_Initv+0xc8>)
 80089ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80089b4:	f107 0314 	add.w	r3, r7, #20
 80089b8:	4619      	mov	r1, r3
 80089ba:	480d      	ldr	r0, [pc, #52]	; (80089f0 <_ZL12MX_GPIO_Initv+0xcc>)
 80089bc:	f003 fcce 	bl	800c35c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80089c0:	2320      	movs	r3, #32
 80089c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089c4:	2301      	movs	r3, #1
 80089c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c8:	2300      	movs	r3, #0
 80089ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089cc:	2300      	movs	r3, #0
 80089ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80089d0:	f107 0314 	add.w	r3, r7, #20
 80089d4:	4619      	mov	r1, r3
 80089d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089da:	f003 fcbf 	bl	800c35c <HAL_GPIO_Init>

}
 80089de:	bf00      	nop
 80089e0:	3728      	adds	r7, #40	; 0x28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	40021000 	.word	0x40021000
 80089ec:	10210000 	.word	0x10210000
 80089f0:	48000800 	.word	0x48000800

080089f4 <_Z30ei_microphone_inference_recordv>:
 * @brief      Wait for a full buffer
 *
 * @return     In case of an buffer overrun return false
 */
bool ei_microphone_inference_record(void)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
  bool ret = true;
 80089fa:	2301      	movs	r3, #1
 80089fc:	71fb      	strb	r3, [r7, #7]

  // Check to see if the buffer has overrun
  if (inference.buf_ready == 1) {
 80089fe:	4b11      	ldr	r3, [pc, #68]	; (8008a44 <_Z30ei_microphone_inference_recordv+0x50>)
 8008a00:	7a5b      	ldrb	r3, [r3, #9]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	bf0c      	ite	eq
 8008a08:	2301      	moveq	r3, #1
 8008a0a:	2300      	movne	r3, #0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <_Z30ei_microphone_inference_recordv+0x26>
      ret = false;
 8008a12:	2300      	movs	r3, #0
 8008a14:	71fb      	strb	r3, [r7, #7]
  }

  // %%%TODO: make this non-blocking
  while (inference.buf_ready == 0)
 8008a16:	e000      	b.n	8008a1a <_Z30ei_microphone_inference_recordv+0x26>
  {
    continue;
 8008a18:	bf00      	nop
  while (inference.buf_ready == 0)
 8008a1a:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <_Z30ei_microphone_inference_recordv+0x50>)
 8008a1c:	7a5b      	ldrb	r3, [r3, #9]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bf0c      	ite	eq
 8008a24:	2301      	moveq	r3, #1
 8008a26:	2300      	movne	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1f4      	bne.n	8008a18 <_Z30ei_microphone_inference_recordv+0x24>
  }

  inference.buf_ready = 0;
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <_Z30ei_microphone_inference_recordv+0x50>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	725a      	strb	r2, [r3, #9]

  return ret;
 8008a34:	79fb      	ldrb	r3, [r7, #7]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	20006c20 	.word	0x20006c20

08008a48 <_Z27ei_microphone_inference_endv>:
 * @brief      Stop audio sampling, release sampling buffers
 *
 * @return     false on error
 */
bool ei_microphone_inference_end(void)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	af00      	add	r7, sp, #0
  // Stop I2S
  HAL_SAI_DMAStop(&hsai_BlockB1);
 8008a4c:	4809      	ldr	r0, [pc, #36]	; (8008a74 <_Z27ei_microphone_inference_endv+0x2c>)
 8008a4e:	f006 f957 	bl	800ed00 <HAL_SAI_DMAStop>

  // Free up double buffer
  record_ready = false;
 8008a52:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <_Z27ei_microphone_inference_endv+0x30>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	701a      	strb	r2, [r3, #0]
  free(inference.buffers[0]);
 8008a58:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <_Z27ei_microphone_inference_endv+0x34>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f024 ffd5 	bl	802da0c <free>
  free(inference.buffers[1]);
 8008a62:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <_Z27ei_microphone_inference_endv+0x34>)
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f024 ffd0 	bl	802da0c <free>

  return true;
 8008a6c:	2301      	movs	r3, #1
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	200006d0 	.word	0x200006d0
 8008a78:	20006c34 	.word	0x20006c34
 8008a7c:	20006c20 	.word	0x20006c20

08008a80 <_ZL31audio_buffer_inference_callbackmm>:
 *
 * @param[in]  n_bytes  Number of bytes to copy
 * @param[in]  offset   offset in sampleBuffer
 */
static void audio_buffer_inference_callback(uint32_t n_bytes, uint32_t offset)
{
 8008a80:	b490      	push	{r4, r7}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  // Copy samples from I2S buffer to inference buffer. Convert 24-bit, 32kHz
  // samples to 16-bit, 16kHz
  for (uint32_t i = 0; i < (n_bytes >> 1); i++) {
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	e02c      	b.n	8008aea <_ZL31audio_buffer_inference_callbackmm+0x6a>
    inference.buffers[inference.buf_select][inference.buf_count++] =
        (int16_t)(i2s_buf[offset + (I2S_BUF_SKIP * i)] >> 8);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	009a      	lsls	r2, r3, #2
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	4413      	add	r3, r2
 8008a98:	4a19      	ldr	r2, [pc, #100]	; (8008b00 <_ZL31audio_buffer_inference_callbackmm+0x80>)
 8008a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a9e:	0a1c      	lsrs	r4, r3, #8
    inference.buffers[inference.buf_select][inference.buf_count++] =
 8008aa0:	4b18      	ldr	r3, [pc, #96]	; (8008b04 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8008aa2:	7a1b      	ldrb	r3, [r3, #8]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	4b17      	ldr	r3, [pc, #92]	; (8008b04 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8008aa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008aac:	4b15      	ldr	r3, [pc, #84]	; (8008b04 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	1c59      	adds	r1, r3, #1
 8008ab2:	4814      	ldr	r0, [pc, #80]	; (8008b04 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8008ab4:	60c1      	str	r1, [r0, #12]
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	4413      	add	r3, r2
 8008aba:	b222      	sxth	r2, r4
 8008abc:	801a      	strh	r2, [r3, #0]

    if (inference.buf_count >= inference.n_samples) {
 8008abe:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d30c      	bcc.n	8008ae4 <_ZL31audio_buffer_inference_callbackmm+0x64>
      inference.buf_select ^= 1;
 8008aca:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8008acc:	7a1b      	ldrb	r3, [r3, #8]
 8008ace:	f083 0301 	eor.w	r3, r3, #1
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8008ad6:	721a      	strb	r2, [r3, #8]
      inference.buf_count = 0;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	60da      	str	r2, [r3, #12]
      inference.buf_ready = 1;
 8008ade:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	725a      	strb	r2, [r3, #9]
  for (uint32_t i = 0; i < (n_bytes >> 1); i++) {
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	085b      	lsrs	r3, r3, #1
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d3cd      	bcc.n	8008a90 <_ZL31audio_buffer_inference_callbackmm+0x10>
    }
  }
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc90      	pop	{r4, r7}
 8008afe:	4770      	bx	lr
 8008b00:	20000820 	.word	0x20000820
 8008b04:	20006c20 	.word	0x20006c20

08008b08 <_ZL21get_audio_signal_datajjPf>:

/**
 * Get raw audio signal data
 */
static int get_audio_signal_data(size_t offset, size_t length, float *out_ptr)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  numpy::int16_to_float(&inference.buffers[inference.buf_select ^ 1][offset], out_ptr, length);
 8008b14:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <_ZL21get_audio_signal_datajjPf+0x38>)
 8008b16:	7a1b      	ldrb	r3, [r3, #8]
 8008b18:	f083 0301 	eor.w	r3, r3, #1
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	461a      	mov	r2, r3
 8008b20:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <_ZL21get_audio_signal_datajjPf+0x38>)
 8008b22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	4413      	add	r3, r2
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f9 fa01 	bl	8001f38 <_ZN2ei5numpy14int16_to_floatEPKsPfj>

  return 0;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20006c20 	.word	0x20006c20

08008b44 <_Z6vprintPKcSt9__va_list>:

/**
 * Low-level print function that uses UART to print status messages.
 */
void vprint(const char *fmt, va_list argp)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b0b4      	sub	sp, #208	; 0xd0
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  char string[200];
  if(0 < vsprintf(string, fmt, argp)) // build string
 8008b4e:	f107 0308 	add.w	r3, r7, #8
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	6879      	ldr	r1, [r7, #4]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f025 fdd0 	bl	802e6fc <vsiprintf>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bfcc      	ite	gt
 8008b62:	2301      	movgt	r3, #1
 8008b64:	2300      	movle	r3, #0
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00d      	beq.n	8008b88 <_Z6vprintPKcSt9__va_list+0x44>
  {
      HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff);
 8008b6c:	f107 0308 	add.w	r3, r7, #8
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7f7 fb7d 	bl	8000270 <strlen>
 8008b76:	4603      	mov	r3, r0
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	f107 0108 	add.w	r1, r7, #8
 8008b7e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008b82:	4803      	ldr	r0, [pc, #12]	; (8008b90 <_Z6vprintPKcSt9__va_list+0x4c>)
 8008b84:	f006 fbfc 	bl	800f380 <HAL_UART_Transmit>
  }
}
 8008b88:	bf00      	nop
 8008b8a:	37d0      	adds	r7, #208	; 0xd0
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	2000079c 	.word	0x2000079c

08008b94 <_Z9ei_printfPKcz>:

/**
 * Wrapper for vprint. Use this like you would printf to print messages to the serial console.
 */
void ei_printf(const char *format, ...)
{
 8008b94:	b40f      	push	{r0, r1, r2, r3}
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
  va_list myargs;
  va_start(myargs, format);
 8008b9c:	f107 0314 	add.w	r3, r7, #20
 8008ba0:	607b      	str	r3, [r7, #4]
  vprint(format, myargs);
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	6938      	ldr	r0, [r7, #16]
 8008ba6:	f7ff ffcd 	bl	8008b44 <_Z6vprintPKcSt9__va_list>
  va_end(myargs);
}
 8008baa:	bf00      	nop
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bb4:	b004      	add	sp, #16
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Called when the first half of the receive buffer is full
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  if (record_ready == true)
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <HAL_SAI_RxHalfCpltCallback+0x24>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d104      	bne.n	8008bd2 <HAL_SAI_RxHalfCpltCallback+0x1a>
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, 0);
 8008bc8:	2100      	movs	r1, #0
 8008bca:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008bce:	f7ff ff57 	bl	8008a80 <_ZL31audio_buffer_inference_callbackmm>
  }
}
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20006c34 	.word	0x20006c34

08008be0 <HAL_SAI_RxCpltCallback>:

/**
 * Called when the second half of the receive buffer is full
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  if (record_ready == true)
 8008be8:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <HAL_SAI_RxCpltCallback+0x24>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d105      	bne.n	8008bfc <HAL_SAI_RxCpltCallback+0x1c>
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, I2S_BUF_LEN >> 1);
 8008bf0:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8008bf4:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008bf8:	f7ff ff42 	bl	8008a80 <_ZL31audio_buffer_inference_callbackmm>
  }
}
 8008bfc:	bf00      	nop
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	20006c34 	.word	0x20006c34

08008c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008c0c:	bf00      	nop
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8008c16:	b480      	push	{r7}
 8008c18:	b083      	sub	sp, #12
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <_ZNSt8functionIFijjPfEEaSIZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES2_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JjjS0_EEEE5valueERS2_E4typeEOSD_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<_Functor>, function&>
	operator=(_Functor&& __f)
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8008c36:	6838      	ldr	r0, [r7, #0]
 8008c38:	f000 fbb4 	bl	80093a4 <_ZSt7forwardIZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS8_E4typeE>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	f107 0308 	add.w	r3, r7, #8
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 fbb9 	bl	80093bc <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vEEOT_>
 8008c4a:	f107 0308 	add.w	r3, r7, #8
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 fbe3 	bl	800941c <_ZNSt8functionIFijjPfEE4swapERS2_>
 8008c56:	f107 0308 	add.w	r3, r7, #8
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fc f979 	bl	8004f52 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8008c60:	687b      	ldr	r3, [r7, #4]
	}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8008c6a:	b5b0      	push	{r4, r5, r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	ed87 0a01 	vstr	s0, [r7, #4]
 8008c74:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7f7 fc66 	bl	8000548 <__aeabi_f2d>
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	460d      	mov	r5, r1
 8008c80:	6838      	ldr	r0, [r7, #0]
 8008c82:	f7f7 fc4f 	bl	8000524 <__aeabi_i2d>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	ec43 2b11 	vmov	d1, r2, r3
 8008c8e:	ec45 4b10 	vmov	d0, r4, r5
 8008c92:	f021 fd99 	bl	802a7c8 <pow>
 8008c96:	eeb0 7a40 	vmov.f32	s14, s0
 8008c9a:	eef0 7a60 	vmov.f32	s15, s1
    }
 8008c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8008ca2:	eef0 0a67 	vmov.f32	s1, s15
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bdb0      	pop	{r4, r5, r7, pc}

08008cac <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fbd8 	bl	8009474 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
	unique_ptr(pointer __p,
 8008cce:	b590      	push	{r4, r7, lr}
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8008cda:	68fc      	ldr	r4, [r7, #12]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fbbe 	bl	800945e <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f7ff ffdf 	bl	8008cac <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd90      	pop	{r4, r7, pc}

08008cf8 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
      ~unique_ptr() noexcept
 8008cf8:	b590      	push	{r4, r7, lr}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fbcc 	bl	80094a0 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8008d08:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fbd1 	bl	80094ba <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	681c      	ldr	r4, [r3, #0]
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 f9a5 	bl	800906c <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8008d22:	4603      	mov	r3, r0
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	47a0      	blx	r4
	__ptr = pointer();
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]
      }
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd90      	pop	{r4, r7, pc}

08008d3a <_ZNKSt8functionIFijjPfEEclEjjS0_>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8008d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	603b      	str	r3, [r7, #0]
      {
	if (_M_empty())
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7f8 f9d4 	bl	80010fa <_ZNKSt14_Function_base8_M_emptyEv>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	  __throw_bad_function_call();
 8008d58:	f021 fc94 	bl	802a684 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	68dc      	ldr	r4, [r3, #12]
 8008d60:	68fd      	ldr	r5, [r7, #12]
 8008d62:	f107 0308 	add.w	r3, r7, #8
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 fbb4 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	1d3b      	adds	r3, r7, #4
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fbaf 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8008d76:	4680      	mov	r8, r0
 8008d78:	463b      	mov	r3, r7
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 fbb5 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8008d80:	4603      	mov	r3, r0
 8008d82:	4642      	mov	r2, r8
 8008d84:	4631      	mov	r1, r6
 8008d86:	4628      	mov	r0, r5
 8008d88:	47a0      	blx	r4
 8008d8a:	4603      	mov	r3, r0
      }
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d96 <_ZNKSt8functionIFijjPfEEcvbEv>:
      explicit operator bool() const noexcept
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7f8 f9aa 	bl	80010fa <_ZNKSt14_Function_base8_M_emptyEv>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f083 0301 	eor.w	r3, r3, #1
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <_ZNSt6vectorImN2ei7EiAllocImEEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b082      	sub	sp, #8
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fb9b 	bl	8009500 <_ZNSt6vectorImN2ei7EiAllocImEEE15_M_erase_at_endEPm>
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <_ZNSt6vectorImN2ei7EiAllocImEEE9push_backEOm>:
      push_back(value_type&& __x)
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8008ddc:	6838      	ldr	r0, [r7, #0]
 8008dde:	f7ff ff1a 	bl	8008c16 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8008de2:	4603      	mov	r3, r0
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fbab 	bl	8009542 <_ZNSt6vectorImN2ei7EiAllocImEEE12emplace_backIJmEEEvDpOT_>
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 fbcd 	bl	800959e <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE17_Vector_impl_dataC1Ev>
	{ }
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689a      	ldr	r2, [r3, #8]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8008e26:	461a      	mov	r2, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fbcc 	bl	80095c6 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE13_M_deallocateEPmj>
      }
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <_ZNSt6vectorImN2ei7EiAllocImEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008e38:	b5b0      	push	{r4, r5, r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681c      	ldr	r4, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 fbce 	bl	80095ec <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE19_M_get_Tp_allocatorEv>
 8008e50:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008e52:	461a      	mov	r2, r3
 8008e54:	4629      	mov	r1, r5
 8008e56:	4620      	mov	r0, r4
 8008e58:	f000 fbd3 	bl	8009602 <_ZSt8_DestroyIPmN2ei7EiAllocImEEEvT_S4_RT0_>
      }
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff ffd5 	bl	8008e0e <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bdb0      	pop	{r4, r5, r7, pc}

08008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	109b      	asrs	r3, r3, #2
 8008e82:	4618      	mov	r0, r3
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>:
      at(size_type __n)
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fbcc 	bl	8009638 <_ZNKSt6vectorImN2ei7EiAllocImEEE14_M_range_checkEj>
	return (*this)[__n];
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fbe8 	bl	8009678 <_ZNSt6vectorImN2ei7EiAllocImEEEixEj>
 8008ea8:	4603      	mov	r3, r0
      }
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	6053      	str	r3, [r2, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	609a      	str	r2, [r3, #8]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	6053      	str	r3, [r2, #4]
 8008eea:	6093      	str	r3, [r2, #8]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff ffdf 	bl	8008eb2 <_ZNSt14_Function_baseC1Ev>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	60da      	str	r2, [r3, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <_ZNSt8functionIFijjPfEEaSIZN15SignalWithRange10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8008f0e:	6838      	ldr	r0, [r7, #0]
 8008f10:	f000 fbc2 	bl	8009698 <_ZSt7forwardIZN15SignalWithRange10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8008f14:	4602      	mov	r2, r0
 8008f16:	f107 0308 	add.w	r3, r7, #8
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 fbc7 	bl	80096b0 <_ZNSt8functionIFijjPfEEC1IZN15SignalWithRange10get_signalEvEUljjS0_E_vEEOT_>
 8008f22:	f107 0308 	add.w	r3, r7, #8
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f000 fa77 	bl	800941c <_ZNSt8functionIFijjPfEE4swapERS2_>
 8008f2e:	f107 0308 	add.w	r3, r7, #8
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fc f80d 	bl	8004f52 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8008f38:	687b      	ldr	r3, [r7, #4]
	}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b086      	sub	sp, #24
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8008f4c:	6838      	ldr	r0, [r7, #0]
 8008f4e:	f000 fbdf 	bl	8009710 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f52:	4602      	mov	r2, r0
 8008f54:	f107 0308 	add.w	r3, r7, #8
 8008f58:	4611      	mov	r1, r2
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 fbe4 	bl	8009728 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>
 8008f60:	f107 0308 	add.w	r3, r7, #8
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 fa58 	bl	800941c <_ZNSt8functionIFijjPfEE4swapERS2_>
 8008f6c:	f107 0308 	add.w	r3, r7, #8
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fb ffee 	bl	8004f52 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8008f76:	687b      	ldr	r3, [r7, #4]
	}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <_ZNSt8functionIFijjPfEEaSERKS2_>:
      operator=(const function& __x)
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8008f8a:	f107 0308 	add.w	r3, r7, #8
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fbfb 	bl	800978c <_ZNSt8functionIFijjPfEEC1ERKS2_>
 8008f96:	f107 0308 	add.w	r3, r7, #8
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fa3d 	bl	800941c <_ZNSt8functionIFijjPfEE4swapERS2_>
 8008fa2:	f107 0308 	add.w	r3, r7, #8
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fb ffd3 	bl	8004f52 <_ZNSt8functionIFijjPfEED1Ev>
	return *this;
 8008fac:	687b      	ldr	r3, [r7, #4]
      }
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b086      	sub	sp, #24
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8008fc0:	6838      	ldr	r0, [r7, #0]
 8008fc2:	f000 fc0e 	bl	80097e2 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	f107 0308 	add.w	r3, r7, #8
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fc12 	bl	80097f8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>
 8008fd4:	f107 0308 	add.w	r3, r7, #8
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fa1e 	bl	800941c <_ZNSt8functionIFijjPfEE4swapERS2_>
 8008fe0:	f107 0308 	add.w	r3, r7, #8
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fb ffb4 	bl	8004f52 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8008fea:	687b      	ldr	r3, [r7, #4]
	}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	429a      	cmp	r2, r3
 8009008:	da01      	bge.n	800900e <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	e000      	b.n	8009010 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800900e:	687b      	ldr	r3, [r7, #4]
    }
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <_ZSt3maxIlERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	429a      	cmp	r2, r3
 8009030:	da01      	bge.n	8009036 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	e000      	b.n	8009038 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8009036:	687b      	ldr	r3, [r7, #4]
    }
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d201      	bcs.n	800905e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	e000      	b.n	8009060 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800905e:	687b      	ldr	r3, [r7, #4]
    }
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4618      	mov	r0, r3
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 8009082:	b480      	push	{r7}
 8009084:	b087      	sub	sp, #28
 8009086:	af00      	add	r7, sp, #0
 8009088:	6178      	str	r0, [r7, #20]
 800908a:	6139      	str	r1, [r7, #16]
 800908c:	60fa      	str	r2, [r7, #12]
 800908e:	60bb      	str	r3, [r7, #8]
 8009090:	ed87 0a01 	vstr	s0, [r7, #4]
 8009094:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8009098:	f06f 0314 	mvn.w	r3, #20
}
 800909c:	4618      	mov	r0, r3
 800909e:	371c      	adds	r7, #28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6178      	str	r0, [r7, #20]
 80090b0:	6139      	str	r1, [r7, #16]
 80090b2:	60fa      	str	r2, [r7, #12]
 80090b4:	60bb      	str	r3, [r7, #8]
 80090b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80090ba:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80090be:	f06f 0314 	mvn.w	r3, #20
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	371c      	adds	r7, #28
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 80090ce:	b480      	push	{r7}
 80090d0:	b087      	sub	sp, #28
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6178      	str	r0, [r7, #20]
 80090d6:	6139      	str	r1, [r7, #16]
 80090d8:	60fa      	str	r2, [r7, #12]
 80090da:	60bb      	str	r3, [r7, #8]
 80090dc:	ed87 0a01 	vstr	s0, [r7, #4]
 80090e0:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80090e4:	f06f 0314 	mvn.w	r3, #20
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	371c      	adds	r7, #28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6178      	str	r0, [r7, #20]
 80090fc:	6139      	str	r1, [r7, #16]
 80090fe:	60fa      	str	r2, [r7, #12]
 8009100:	60bb      	str	r3, [r7, #8]
 8009102:	ed87 0a01 	vstr	s0, [r7, #4]
 8009106:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800910a:	f06f 0314 	mvn.w	r3, #20
}
 800910e:	4618      	mov	r0, r3
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 800911a:	b480      	push	{r7}
 800911c:	b087      	sub	sp, #28
 800911e:	af00      	add	r7, sp, #0
 8009120:	6178      	str	r0, [r7, #20]
 8009122:	6139      	str	r1, [r7, #16]
 8009124:	60fa      	str	r2, [r7, #12]
 8009126:	60bb      	str	r3, [r7, #8]
 8009128:	ed87 0a01 	vstr	s0, [r7, #4]
 800912c:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8009130:	f06f 0314 	mvn.w	r3, #20
}
 8009134:	4618      	mov	r0, r3
 8009136:	371c      	adds	r7, #28
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	6178      	str	r0, [r7, #20]
 8009148:	6139      	str	r1, [r7, #16]
 800914a:	60fa      	str	r2, [r7, #12]
 800914c:	60bb      	str	r3, [r7, #8]
 800914e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009152:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8009156:	f06f 0314 	mvn.w	r3, #20
}
 800915a:	4618      	mov	r0, r3
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>:

/**
 * Fill the result structure from a quantized output tensor
*/
template<typename T>
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 8009166:	b480      	push	{r7}
 8009168:	b087      	sub	sp, #28
 800916a:	af00      	add	r7, sp, #0
 800916c:	6178      	str	r0, [r7, #20]
 800916e:	6139      	str	r1, [r7, #16]
 8009170:	60fa      	str	r2, [r7, #12]
 8009172:	60bb      	str	r3, [r7, #8]
 8009174:	ed87 0a01 	vstr	s0, [r7, #4]
 8009178:	edc7 0a00 	vstr	s1, [r7]
                                                                                      size_t output_features_count,
                                                                                      bool debug = false) {
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, zero_point, scale, output_features_count, block_config->threshold, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800917c:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 8009180:	4618      	mov	r0, r3
 8009182:	371c      	adds	r7, #28
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulsePK39ei_learning_block_config_tflite_graph_tP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	6178      	str	r0, [r7, #20]
 8009194:	6139      	str	r1, [r7, #16]
 8009196:	60fa      	str	r2, [r7, #12]
 8009198:	60bb      	str	r3, [r7, #8]
 800919a:	ed87 0a01 	vstr	s0, [r7, #4]
 800919e:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80091a2:	f06f 0314 	mvn.w	r3, #20
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 fb4b 	bl	8009858 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80091c2:	4603      	mov	r3, r0
 80091c4:	4618      	mov	r0, r3
 80091c6:	3708      	adds	r7, #8
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	4611      	mov	r1, r2
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fb49 	bl	8009874 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>:
	       typename _Vp = _Dp,
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	explicit
	unique_ptr(_Up __p) noexcept
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7ff ffe6 	bl	80091cc <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>
        { }
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fb41 	bl	800989c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800921a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d009      	beq.n	8009238 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fb46 	bl	80098b6 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>
 800922a:	4602      	mov	r2, r0
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4619      	mov	r1, r3
 8009232:	4610      	mov	r0, r2
 8009234:	f000 fb4c 	bl	80098d0 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>
	__ptr = pointer();
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
      }
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>:
	return get()[__i];
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fb4b 	bl	80098ee <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 8009258:	4603      	mov	r3, r0
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fb4c 	bl	800990a <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4618      	mov	r0, r3
 8009288:	f7ff ffeb 	bl	8009262 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009296:	b580      	push	{r7, lr}
 8009298:	b082      	sub	sp, #8
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7ff ffeb 	bl	800927c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>:
	constexpr unique_ptr() noexcept
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
	: _M_t()
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff ffe8 	bl	8009296 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>
	{ }
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4618      	mov	r0, r3
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	4611      	mov	r1, r2
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 fb22 	bl	800992a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4618      	mov	r0, r3
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff ffe6 	bl	80092d0 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 800930e:	b590      	push	{r4, r7, lr}
 8009310:	b085      	sub	sp, #20
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4618      	mov	r0, r3
 800931a:	f000 fb1a 	bl	8009952 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800931e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00c      	beq.n	8009342 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fb1f 	bl	800996c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>
 800932e:	4604      	mov	r4, r0
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 fb28 	bl	8009986 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>
 8009336:	4603      	mov	r3, r0
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4619      	mov	r1, r3
 800933c:	4620      	mov	r0, r4
 800933e:	f000 fb2d 	bl	800999c <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
	__ptr = pointer();
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
      }
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4618      	mov	r0, r3
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	bd90      	pop	{r4, r7, pc}

08009352 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800935c:	6838      	ldr	r0, [r7, #0]
 800935e:	f000 fb50 	bl	8009a02 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>
 8009362:	4603      	mov	r3, r0
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fb2b 	bl	80099c2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800936c:	6838      	ldr	r0, [r7, #0]
 800936e:	f000 fb5d 	bl	8009a2c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 8009372:	4603      	mov	r3, r0
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fb66 	bl	8009a46 <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fb56 	bl	8009a2c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
	return *this;
 8009380:	687b      	ldr	r3, [r7, #4]
      }
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800938a:	b580      	push	{r7, lr}
 800938c:	b082      	sub	sp, #8
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fb61 	bl	8009a5c <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800939a:	4603      	mov	r3, r0
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <_ZSt7forwardIZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
	...

080093bc <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vEEOT_>:
	function(_Functor&& __f)
 80093bc:	b590      	push	{r4, r7, lr}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	461a      	mov	r2, r3
 80093ca:	2300      	movs	r3, #0
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	6053      	str	r3, [r2, #4]
 80093d0:	6093      	str	r3, [r2, #8]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7ff fd6c 	bl	8008eb2 <_ZNSt14_Function_baseC1Ev>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80093e0:	6838      	ldr	r0, [r7, #0]
 80093e2:	f000 fb54 	bl	8009a8e <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E21_M_not_empty_functionIS8_EEbRKT_>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00e      	beq.n	800940a <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80093ec:	687c      	ldr	r4, [r7, #4]
 80093ee:	6838      	ldr	r0, [r7, #0]
 80093f0:	f7ff ffd8 	bl	80093a4 <_ZSt7forwardIZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS8_E4typeE>
 80093f4:	4603      	mov	r3, r0
 80093f6:	4619      	mov	r1, r3
 80093f8:	4620      	mov	r0, r4
 80093fa:	f000 fb53 	bl	8009aa4 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a04      	ldr	r2, [pc, #16]	; (8009414 <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vEEOT_+0x58>)
 8009402:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a04      	ldr	r2, [pc, #16]	; (8009418 <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vEEOT_+0x5c>)
 8009408:	609a      	str	r2, [r3, #8]
	}
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	bd90      	pop	{r4, r7, pc}
 8009414:	08009ac9 	.word	0x08009ac9
 8009418:	08009b0b 	.word	0x08009b0b

0800941c <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	4611      	mov	r1, r2
 800942c:	4618      	mov	r0, r3
 800942e:	f000 fb96 	bl	8009b5e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f103 0208 	add.w	r2, r3, #8
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	3308      	adds	r3, #8
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f000 fbbf 	bl	8009bc2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f103 020c 	add.w	r2, r3, #12
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	330c      	adds	r3, #12
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	f000 fbe0 	bl	8009c16 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8009456:	bf00      	nop
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800945e:	b480      	push	{r7}
 8009460:	b083      	sub	sp, #12
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009474:	b590      	push	{r4, r7, lr}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009480:	68fc      	ldr	r4, [r7, #12]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fbe6 	bl	8009c54 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009488:	4602      	mov	r2, r0
 800948a:	f107 0308 	add.w	r3, r7, #8
 800948e:	4619      	mov	r1, r3
 8009490:	4620      	mov	r0, r4
 8009492:	f000 fbea 	bl	8009c6a <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	bd90      	pop	{r4, r7, pc}

080094a0 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fbf6 	bl	8009c9c <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80094b0:	4603      	mov	r3, r0
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 fbf6 	bl	8009cb6 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 80094ca:	4603      	mov	r3, r0
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4618      	mov	r0, r3
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <_ZNSt6vectorImN2ei7EiAllocImEEE15_M_erase_at_endEPm>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8009500:	b590      	push	{r4, r7, lr}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	109b      	asrs	r3, r3, #2
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00e      	beq.n	800953a <_ZNSt6vectorImN2ei7EiAllocImEEE15_M_erase_at_endEPm+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4618      	mov	r0, r3
 8009524:	f000 f862 	bl	80095ec <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE19_M_get_Tp_allocatorEv>
 8009528:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800952a:	461a      	mov	r2, r3
 800952c:	4621      	mov	r1, r4
 800952e:	6838      	ldr	r0, [r7, #0]
 8009530:	f000 f867 	bl	8009602 <_ZSt8_DestroyIPmN2ei7EiAllocImEEEvT_S4_RT0_>
	    this->_M_impl._M_finish = __pos;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800953a:	bf00      	nop
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	bd90      	pop	{r4, r7, pc}

08009542 <_ZNSt6vectorImN2ei7EiAllocImEEE12emplace_backIJmEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8009542:	b5b0      	push	{r4, r5, r7, lr}
 8009544:	b082      	sub	sp, #8
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	429a      	cmp	r2, r3
 8009556:	d011      	beq.n	800957c <_ZNSt6vectorImN2ei7EiAllocImEEE12emplace_backIJmEEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009558:	687c      	ldr	r4, [r7, #4]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685d      	ldr	r5, [r3, #4]
 800955e:	6838      	ldr	r0, [r7, #0]
 8009560:	f000 fbb6 	bl	8009cd0 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8009564:	4603      	mov	r3, r0
 8009566:	461a      	mov	r2, r3
 8009568:	4629      	mov	r1, r5
 800956a:	4620      	mov	r0, r4
 800956c:	f000 fbbb 	bl	8009ce6 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE9constructImJmEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	1d1a      	adds	r2, r3, #4
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800957a:	e00c      	b.n	8009596 <_ZNSt6vectorImN2ei7EiAllocImEEE12emplace_backIJmEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fbc5 	bl	8009d0c <_ZNSt6vectorImN2ei7EiAllocImEEE3endEv>
 8009582:	4604      	mov	r4, r0
 8009584:	6838      	ldr	r0, [r7, #0]
 8009586:	f000 fba3 	bl	8009cd0 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800958a:	4603      	mov	r3, r0
 800958c:	461a      	mov	r2, r3
 800958e:	4621      	mov	r1, r4
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fbe3 	bl	8009d5c <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_>
      }
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bdb0      	pop	{r4, r5, r7, pc}

0800959e <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800959e:	b480      	push	{r7}
 80095a0:	b083      	sub	sp, #12
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	605a      	str	r2, [r3, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	609a      	str	r2, [r3, #8]
	{ }
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	607a      	str	r2, [r7, #4]
	if (__p)
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	68b9      	ldr	r1, [r7, #8]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fc78 	bl	8009ed4 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
      }
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4618      	mov	r0, r3
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <_ZSt8_DestroyIPmN2ei7EiAllocImEEEvT_S4_RT0_>:
   * destroy() even if _Tp has a trivial destructor.
   */

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 800960e:	e00a      	b.n	8009626 <_ZSt8_DestroyIPmN2ei7EiAllocImEEEvT_S4_RT0_+0x24>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f000 fa31 	bl	8009a78 <_ZSt11__addressofImEPT_RS0_>
 8009616:	4603      	mov	r3, r0
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fc69 	bl	8009ef2 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE7destroyImEEvRS2_PT_>
      for (; __first != __last; ++__first)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3304      	adds	r3, #4
 8009624:	60fb      	str	r3, [r7, #12]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	429a      	cmp	r2, r3
 800962c:	d1f0      	bne.n	8009610 <_ZSt8_DestroyIPmN2ei7EiAllocImEEEvT_S4_RT0_+0xe>
					      std::__addressof(*__first));
#endif
    }
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <_ZNKSt6vectorImN2ei7EiAllocImEEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7ff fc13 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 8009648:	4602      	mov	r2, r0
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	4293      	cmp	r3, r2
 800964e:	bf2c      	ite	cs
 8009650:	2301      	movcs	r3, #1
 8009652:	2300      	movcc	r3, #0
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d008      	beq.n	800966c <_ZNKSt6vectorImN2ei7EiAllocImEEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff fc07 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 8009660:	4603      	mov	r3, r0
 8009662:	461a      	mov	r2, r3
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	4803      	ldr	r0, [pc, #12]	; (8009674 <_ZNKSt6vectorImN2ei7EiAllocImEEE14_M_range_checkEj+0x3c>)
 8009668:	f020 fff0 	bl	802a64c <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800966c:	bf00      	nop
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	080313f4 	.word	0x080313f4

08009678 <_ZNSt6vectorImN2ei7EiAllocImEEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
      }
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <_ZSt7forwardIZN15SignalWithRange10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4618      	mov	r0, r3
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
	...

080096b0 <_ZNSt8functionIFijjPfEEC1IZN15SignalWithRange10get_signalEvEUljjS0_E_vEEOT_>:
	function(_Functor&& __f)
 80096b0:	b590      	push	{r4, r7, lr}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	461a      	mov	r2, r3
 80096be:	2300      	movs	r3, #0
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	6053      	str	r3, [r2, #4]
 80096c4:	6093      	str	r3, [r2, #8]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff fbf2 	bl	8008eb2 <_ZNSt14_Function_baseC1Ev>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80096d4:	6838      	ldr	r0, [r7, #0]
 80096d6:	f000 fc1a 	bl	8009f0e <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00e      	beq.n	80096fe <_ZNSt8functionIFijjPfEEC1IZN15SignalWithRange10get_signalEvEUljjS0_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80096e0:	687c      	ldr	r4, [r7, #4]
 80096e2:	6838      	ldr	r0, [r7, #0]
 80096e4:	f7ff ffd8 	bl	8009698 <_ZSt7forwardIZN15SignalWithRange10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 80096e8:	4603      	mov	r3, r0
 80096ea:	4619      	mov	r1, r3
 80096ec:	4620      	mov	r0, r4
 80096ee:	f000 fc19 	bl	8009f24 <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a04      	ldr	r2, [pc, #16]	; (8009708 <_ZNSt8functionIFijjPfEEC1IZN15SignalWithRange10get_signalEvEUljjS0_E_vEEOT_+0x58>)
 80096f6:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a04      	ldr	r2, [pc, #16]	; (800970c <_ZNSt8functionIFijjPfEEC1IZN15SignalWithRange10get_signalEvEUljjS0_E_vEEOT_+0x5c>)
 80096fc:	609a      	str	r2, [r3, #8]
	}
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4618      	mov	r0, r3
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	bd90      	pop	{r4, r7, pc}
 8009708:	08009f49 	.word	0x08009f49
 800970c:	08009f8b 	.word	0x08009f8b

08009710 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
	...

08009728 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>:
	function(_Functor&& __f)
 8009728:	b590      	push	{r4, r7, lr}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	461a      	mov	r2, r3
 8009736:	2300      	movs	r3, #0
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	6053      	str	r3, [r2, #4]
 800973c:	6093      	str	r3, [r2, #8]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff fbb6 	bl	8008eb2 <_ZNSt14_Function_baseC1Ev>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4618      	mov	r0, r3
 8009752:	f000 fc39 	bl	8009fc8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00e      	beq.n	800977a <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x52>
	      _My_handler::_M_init_functor(_M_functor,
 800975c:	687c      	ldr	r4, [r7, #4]
 800975e:	6838      	ldr	r0, [r7, #0]
 8009760:	f7ff ffd6 	bl	8009710 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009764:	4603      	mov	r3, r0
 8009766:	4619      	mov	r1, r3
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fc3d 	bl	8009fe8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a04      	ldr	r2, [pc, #16]	; (8009784 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x5c>)
 8009772:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a04      	ldr	r2, [pc, #16]	; (8009788 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x60>)
 8009778:	609a      	str	r2, [r3, #8]
	}
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4618      	mov	r0, r3
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	bd90      	pop	{r4, r7, pc}
 8009784:	0800a00d 	.word	0x0800a00d
 8009788:	0800a04f 	.word	0x0800a04f

0800978c <_ZNSt8functionIFijjPfEEC1ERKS2_>:
      function(const function& __x)
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	461a      	mov	r2, r3
 800979a:	2300      	movs	r3, #0
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	6053      	str	r3, [r2, #4]
 80097a0:	6093      	str	r3, [r2, #8]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7ff fb84 	bl	8008eb2 <_ZNSt14_Function_baseC1Ev>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 80097b0:	6838      	ldr	r0, [r7, #0]
 80097b2:	f7ff faf0 	bl	8008d96 <_ZNKSt8functionIFijjPfEEcvbEv>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00d      	beq.n	80097d8 <_ZNSt8functionIFijjPfEEC1ERKS2_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	2202      	movs	r2, #2
 80097c6:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	68da      	ldr	r2, [r3, #12]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	689a      	ldr	r2, [r3, #8]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	609a      	str	r2, [r3, #8]
      }
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80097e2:	b480      	push	{r7}
 80097e4:	b083      	sub	sp, #12
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>:
	function(_Functor&& __f)
 80097f8:	b590      	push	{r4, r7, lr}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	461a      	mov	r2, r3
 8009806:	2300      	movs	r3, #0
 8009808:	6013      	str	r3, [r2, #0]
 800980a:	6053      	str	r3, [r2, #4]
 800980c:	6093      	str	r3, [r2, #8]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff fb4e 	bl	8008eb2 <_ZNSt14_Function_baseC1Ev>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800981c:	6838      	ldr	r0, [r7, #0]
 800981e:	f000 fc35 	bl	800a08c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00e      	beq.n	8009846 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8009828:	687c      	ldr	r4, [r7, #4]
 800982a:	6838      	ldr	r0, [r7, #0]
 800982c:	f7ff ffd9 	bl	80097e2 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8009830:	4603      	mov	r3, r0
 8009832:	4619      	mov	r1, r3
 8009834:	4620      	mov	r0, r4
 8009836:	f000 fc34 	bl	800a0a2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a04      	ldr	r2, [pc, #16]	; (8009850 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x58>)
 800983e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a04      	ldr	r2, [pc, #16]	; (8009854 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x5c>)
 8009844:	609a      	str	r2, [r3, #8]
	}
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4618      	mov	r0, r3
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	bd90      	pop	{r4, r7, pc}
 8009850:	0800a0c7 	.word	0x0800a0c7
 8009854:	0800a109 	.word	0x0800a109

08009858 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 fc6f 	bl	800a146 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8009868:	4603      	mov	r3, r0
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4618      	mov	r0, r3
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fc6d 	bl	800a160 <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f808 	bl	800989c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800988c:	4602      	mov	r2, r0
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4618      	mov	r0, r3
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fc67 	bl	800a17a <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80098ac:	4603      	mov	r3, r0
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fc67 	bl	800a194 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>
 80098c6:	4603      	mov	r3, r0
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>:
	operator()(_Up* __ptr) const
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_+0x16>
 80098e0:	6838      	ldr	r0, [r7, #0]
 80098e2:	f020 fe87 	bl	802a5f4 <_ZdaPv>
	}
 80098e6:	bf00      	nop
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 fc58 	bl	800a1ae <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80098fe:	4603      	mov	r3, r0
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fc58 	bl	800a1c8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fc60 	bl	800a1e0 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800992a:	b580      	push	{r7, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	6039      	str	r1, [r7, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4618      	mov	r0, r3
 8009938:	f7ff fc93 	bl	8009262 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f808 	bl	8009952 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 8009942:	4602      	mov	r2, r0
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4618      	mov	r0, r3
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009952:	b580      	push	{r7, lr}
 8009954:	b082      	sub	sp, #8
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4618      	mov	r0, r3
 800995e:	f000 fc4d 	bl	800a1fc <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8009962:	4603      	mov	r3, r0
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4618      	mov	r0, r3
 8009978:	f000 f858 	bl	8009a2c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800997c:	4603      	mov	r3, r0
 800997e:	4618      	mov	r0, r3
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009986:	b480      	push	{r7}
 8009988:	b083      	sub	sp, #12
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4618      	mov	r0, r3
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>:
      operator()(_Tp* __ptr) const
 800999c:	b590      	push	{r4, r7, lr}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80099a6:	683c      	ldr	r4, [r7, #0]
 80099a8:	2c00      	cmp	r4, #0
 80099aa:	d006      	beq.n	80099ba <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_+0x1e>
 80099ac:	4620      	mov	r0, r4
 80099ae:	f7f7 fc46 	bl	800123e <_ZN2ei9ei_matrixD1Ev>
 80099b2:	2110      	movs	r1, #16
 80099b4:	4620      	mov	r0, r4
 80099b6:	f020 fe1b 	bl	802a5f0 <_ZdlPvj>
      }
 80099ba:	bf00      	nop
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd90      	pop	{r4, r7, pc}

080099c2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>:
      void reset(pointer __p) noexcept
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff ffc0 	bl	8009952 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 80099d2:	4603      	mov	r3, r0
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff ffba 	bl	8009952 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 80099de:	4602      	mov	r2, r0
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	6013      	str	r3, [r2, #0]
	if (__old_p)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d007      	beq.n	80099fa <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_+0x38>
	  _M_deleter()(__old_p);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f81e 	bl	8009a2c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 80099f0:	4603      	mov	r3, r0
 80099f2:	68f9      	ldr	r1, [r7, #12]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7ff ffd1 	bl	800999c <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
      }
 80099fa:	bf00      	nop
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>:
      pointer release() noexcept
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7ff ffa1 	bl	8009952 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 8009a10:	4603      	mov	r3, r0
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff ff9b 	bl	8009952 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]
	return __p;
 8009a22:	68fb      	ldr	r3, [r7, #12]
      }
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fbed 	bl	800a216 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4618      	mov	r0, r3
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 fbe1 	bl	800a22e <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4618      	mov	r0, r3
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4618      	mov	r0, r3
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8009a8e:	b480      	push	{r7}
 8009a90:	b083      	sub	sp, #12
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
	  { return true; }
 8009a96:	2301      	movs	r3, #1
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8009aa4:	b590      	push	{r4, r7, lr}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8009aae:	6838      	ldr	r0, [r7, #0]
 8009ab0:	f7ff fc78 	bl	80093a4 <_ZSt7forwardIZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS8_E4typeE>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fbd2 	bl	800a264 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd90      	pop	{r4, r7, pc}

08009ac8 <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjSD_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8009ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f000 fbdd 	bl	800a296 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8009adc:	4604      	mov	r4, r0
 8009ade:	68b8      	ldr	r0, [r7, #8]
 8009ae0:	f7ff fcf8 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff fcf4 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8009aec:	4606      	mov	r6, r0
 8009aee:	6838      	ldr	r0, [r7, #0]
 8009af0:	f7ff fcfb 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8009af4:	4603      	mov	r3, r0
 8009af6:	4632      	mov	r2, r6
 8009af8:	4629      	mov	r1, r5
 8009afa:	4620      	mov	r0, r4
 8009afc:	f000 fbdc 	bl	800a2b8 <_ZSt10__invoke_rIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeESD_EEE5valueESD_E4typeEOSI_DpOSJ_>
 8009b00:	4603      	mov	r3, r0
      }
 8009b02:	4618      	mov	r0, r3
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b0a <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8009b0a:	b590      	push	{r4, r7, lr}
 8009b0c:	b085      	sub	sp, #20
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	4613      	mov	r3, r2
 8009b16:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8009b18:	79fb      	ldrb	r3, [r7, #7]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d109      	bne.n	8009b32 <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 fbef 	bl	800a302 <_ZNSt9_Any_data9_M_accessIPZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>
 8009b24:	4604      	mov	r4, r0
 8009b26:	68b8      	ldr	r0, [r7, #8]
 8009b28:	f000 fbb5 	bl	800a296 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	6023      	str	r3, [r4, #0]
	    break;
 8009b30:	e005      	b.n	8009b3e <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	461a      	mov	r2, r3
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 fbef 	bl	800a31c <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8009b3e:	2300      	movs	r3, #0
      }
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd90      	pop	{r4, r7, pc}

08009b48 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b084      	sub	sp, #16
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff ffed 	bl	8009b48 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	f107 0308 	add.w	r3, r7, #8
 8009b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b78:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8009b7c:	6838      	ldr	r0, [r7, #0]
 8009b7e:	f7ff ffe3 	bl	8009b48 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8009b82:	4602      	mov	r2, r0
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b8a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8009b8e:	f107 0308 	add.w	r3, r7, #8
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7ff ffd8 	bl	8009b48 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ba0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8009ba4:	bf00      	nop
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7ff ffed 	bl	8009bac <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009bd8:	6838      	ldr	r0, [r7, #0]
 8009bda:	f7ff ffe7 	bl	8009bac <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8009bde:	4603      	mov	r3, r0
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8009be6:	f107 030c 	add.w	r3, r7, #12
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff ffde 	bl	8009bac <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	601a      	str	r2, [r3, #0]
    }
 8009bf8:	bf00      	nop
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b084      	sub	sp, #16
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff ffed 	bl	8009c00 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8009c26:	4603      	mov	r3, r0
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009c2c:	6838      	ldr	r0, [r7, #0]
 8009c2e:	f7ff ffe7 	bl	8009c00 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8009c32:	4603      	mov	r3, r0
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8009c3a:	f107 030c 	add.w	r3, r7, #12
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7ff ffde 	bl	8009c00 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8009c44:	4603      	mov	r3, r0
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	601a      	str	r2, [r3, #0]
    }
 8009c4c:	bf00      	nop
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8009c6a:	b5b0      	push	{r4, r5, r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	60f8      	str	r0, [r7, #12]
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8009c76:	68fc      	ldr	r4, [r7, #12]
 8009c78:	68b8      	ldr	r0, [r7, #8]
 8009c7a:	f000 fb89 	bl	800a390 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8009c7e:	4605      	mov	r5, r0
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7ff ffe7 	bl	8009c54 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009c86:	4603      	mov	r3, r0
 8009c88:	461a      	mov	r2, r3
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f000 fb8a 	bl	800a3a6 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bdb0      	pop	{r4, r5, r7, pc}

08009c9c <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 fb9b 	bl	800a3e2 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8009cac:	4603      	mov	r3, r0
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 fb9a 	bl	800a3fa <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE9constructImJmEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	60f8      	str	r0, [r7, #12]
 8009cee:	60b9      	str	r1, [r7, #8]
 8009cf0:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7ff ffec 	bl	8009cd0 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	68b9      	ldr	r1, [r7, #8]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 fb88 	bl	800a414 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE12_S_constructImJmEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>
 8009d04:	bf00      	nop
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <_ZNSt6vectorImN2ei7EiAllocImEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	1d1a      	adds	r2, r3, #4
 8009d18:	f107 030c 	add.w	r3, r7, #12
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 fb8e 	bl	800a440 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImN2ei7EiAllocImEEEEC1ERKS1_>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <_ZNSt6vectorImN2ei7EiAllocImEEE15_S_use_relocateEv>:
      _S_use_relocate()
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 f805 	bl	8009d44 <_ZNSt6vectorImN2ei7EiAllocImEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8009d3a:	4603      	mov	r3, r0
      }
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <_ZNSt6vectorImN2ei7EiAllocImEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8009d4c:	2301      	movs	r3, #1
      }
 8009d4e:	4618      	mov	r0, r3
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
	...

08009d5c <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8009d5c:	b5b0      	push	{r4, r5, r7, lr}
 8009d5e:	b08c      	sub	sp, #48	; 0x30
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8009d68:	4a59      	ldr	r2, [pc, #356]	; (8009ed0 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x174>)
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 fb77 	bl	800a460 <_ZNKSt6vectorImN2ei7EiAllocImEEE12_M_check_lenEjPKc>
 8009d72:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 fbb4 	bl	800a4ee <_ZNSt6vectorImN2ei7EiAllocImEEE5beginEv>
 8009d86:	4603      	mov	r3, r0
 8009d88:	617b      	str	r3, [r7, #20]
 8009d8a:	f107 0214 	add.w	r2, r7, #20
 8009d8e:	f107 0308 	add.w	r3, r7, #8
 8009d92:	4611      	mov	r1, r2
 8009d94:	4618      	mov	r0, r3
 8009d96:	f000 fbba 	bl	800a50e <_ZN9__gnu_cxxmiIPmSt6vectorImN2ei7EiAllocImEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 fbc8 	bl	800a538 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE11_M_allocateEj>
 8009da8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8009dae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8009db4:	69ba      	ldr	r2, [r7, #24]
 8009db6:	18d5      	adds	r5, r2, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff ff89 	bl	8009cd0 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f7ff ff8e 	bl	8009ce6 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE9constructImJmEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8009dca:	2300      	movs	r3, #0
 8009dcc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8009dce:	f7ff ffae 	bl	8009d2e <_ZNSt6vectorImN2ei7EiAllocImEEE15_S_use_relocateEv>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d027      	beq.n	8009e28 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009dd8:	f107 0308 	add.w	r3, r7, #8
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 fbd3 	bl	800a588 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImN2ei7EiAllocImEEEE4baseEv>
 8009de2:	4603      	mov	r3, r0
 8009de4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7ff fbff 	bl	80095ec <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE19_M_get_Tp_allocatorEv>
 8009dee:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	4621      	mov	r1, r4
 8009df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009df6:	f000 fbb3 	bl	800a560 <_ZNSt6vectorImN2ei7EiAllocImEEE11_S_relocateEPmS4_S4_RS2_>
 8009dfa:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8009dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfe:	3304      	adds	r3, #4
 8009e00:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009e02:	f107 0308 	add.w	r3, r7, #8
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 fbbe 	bl	800a588 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImN2ei7EiAllocImEEEE4baseEv>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7ff fbea 	bl	80095ec <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE19_M_get_Tp_allocatorEv>
 8009e18:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e1c:	6a39      	ldr	r1, [r7, #32]
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f000 fb9e 	bl	800a560 <_ZNSt6vectorImN2ei7EiAllocImEEE11_S_relocateEPmS4_S4_RS2_>
 8009e24:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009e26:	e026      	b.n	8009e76 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8009e28:	f107 0308 	add.w	r3, r7, #8
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fbab 	bl	800a588 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImN2ei7EiAllocImEEEE4baseEv>
 8009e32:	4603      	mov	r3, r0
 8009e34:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff fbd7 	bl	80095ec <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE19_M_get_Tp_allocatorEv>
 8009e3e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	4621      	mov	r1, r4
 8009e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e46:	f000 fbaa 	bl	800a59e <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_N2ei7EiAllocImEEET0_T_S5_S4_RT1_>
 8009e4a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8009e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4e:	3304      	adds	r3, #4
 8009e50:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8009e52:	f107 0308 	add.w	r3, r7, #8
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fb96 	bl	800a588 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImN2ei7EiAllocImEEEE4baseEv>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7ff fbc2 	bl	80095ec <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE19_M_get_Tp_allocatorEv>
 8009e68:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8009e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e6c:	6a39      	ldr	r1, [r7, #32]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 fb95 	bl	800a59e <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_N2ei7EiAllocImEEET0_T_S5_S4_RT1_>
 8009e74:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8009e76:	f7ff ff5a 	bl	8009d2e <_ZNSt6vectorImN2ei7EiAllocImEEE15_S_use_relocateEv>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	f083 0301 	eor.w	r3, r3, #1
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d009      	beq.n	8009e9a <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7ff fbaf 	bl	80095ec <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE19_M_get_Tp_allocatorEv>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	461a      	mov	r2, r3
 8009e92:	6a39      	ldr	r1, [r7, #32]
 8009e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e96:	f7ff fbb4 	bl	8009602 <_ZSt8_DestroyIPmN2ei7EiAllocImEEEvT_S4_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8009e9a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689a      	ldr	r2, [r3, #8]
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009eaa:	f7ff fb8c 	bl	80095c6 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	69ba      	ldr	r2, [r7, #24]
 8009eb2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eb8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	69ba      	ldr	r2, [r7, #24]
 8009ec0:	441a      	add	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	609a      	str	r2, [r3, #8]
    }
 8009ec6:	bf00      	nop
 8009ec8:	3730      	adds	r7, #48	; 0x30
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	080313d8 	.word	0x080313d8

08009ed4 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f000 fb73 	bl	800a5d0 <_ZN2ei7EiAllocImE10deallocateEPmj>
 8009eea:	bf00      	nop
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE7destroyImEEvRS2_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 8009efc:	2200      	movs	r2, #0
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fb72 	bl	800a5ea <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10_S_destroyIS2_mEEvRT_PT0_z>
 8009f06:	bf00      	nop
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
	  { return true; }
 8009f16:	2301      	movs	r3, #1
 8009f18:	4618      	mov	r0, r3
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8009f24:	b590      	push	{r4, r7, lr}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8009f2e:	6838      	ldr	r0, [r7, #0]
 8009f30:	f7ff fbb2 	bl	8009698 <_ZSt7forwardIZN15SignalWithRange10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8009f34:	4603      	mov	r3, r0
 8009f36:	4622      	mov	r2, r4
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fb64 	bl	800a608 <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd90      	pop	{r4, r7, pc}

08009f48 <_ZNSt17_Function_handlerIFijjPfEZN15SignalWithRange10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8009f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]
 8009f54:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 fb6f 	bl	800a63a <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	68b8      	ldr	r0, [r7, #8]
 8009f60:	f7ff fab8 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8009f64:	4605      	mov	r5, r0
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff fab4 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8009f6c:	4606      	mov	r6, r0
 8009f6e:	6838      	ldr	r0, [r7, #0]
 8009f70:	f7ff fabb 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8009f74:	4603      	mov	r3, r0
 8009f76:	4632      	mov	r2, r6
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 fb6e 	bl	800a65c <_ZSt10__invoke_rIiRZN15SignalWithRange10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8009f80:	4603      	mov	r3, r0
      }
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f8a <_ZNSt17_Function_handlerIFijjPfEZN15SignalWithRange10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8009f8a:	b590      	push	{r4, r7, lr}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	4613      	mov	r3, r2
 8009f96:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d109      	bne.n	8009fb2 <_ZNSt17_Function_handlerIFijjPfEZN15SignalWithRange10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 fb81 	bl	800a6a6 <_ZNSt9_Any_data9_M_accessIPZN15SignalWithRange10get_signalEvEUljjPfE_EERT_v>
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	68b8      	ldr	r0, [r7, #8]
 8009fa8:	f000 fb47 	bl	800a63a <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8009fac:	4603      	mov	r3, r0
 8009fae:	6023      	str	r3, [r4, #0]
	    break;
 8009fb0:	e005      	b.n	8009fbe <_ZNSt17_Function_handlerIFijjPfEZN15SignalWithRange10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8009fb2:	79fb      	ldrb	r3, [r7, #7]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	68b9      	ldr	r1, [r7, #8]
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 fb81 	bl	800a6c0 <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8009fbe:	2300      	movs	r3, #0
      }
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd90      	pop	{r4, r7, pc}

08009fc8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	bf14      	ite	ne
 8009fd6:	2301      	movne	r3, #1
 8009fd8:	2300      	moveq	r3, #0
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	4618      	mov	r0, r3
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8009fe8:	b590      	push	{r4, r7, lr}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8009ff2:	6838      	ldr	r0, [r7, #0]
 8009ff4:	f7ff fb8c 	bl	8009710 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	4622      	mov	r2, r4
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fb98 	bl	800a734 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd90      	pop	{r4, r7, pc}

0800a00c <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800a00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 fba3 	bl	800a766 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800a020:	4604      	mov	r4, r0
 800a022:	68b8      	ldr	r0, [r7, #8]
 800a024:	f7ff fa56 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a028:	4605      	mov	r5, r0
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7ff fa52 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a030:	4606      	mov	r6, r0
 800a032:	6838      	ldr	r0, [r7, #0]
 800a034:	f7ff fa59 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800a038:	4603      	mov	r3, r0
 800a03a:	4632      	mov	r2, r6
 800a03c:	4629      	mov	r1, r5
 800a03e:	4620      	mov	r0, r4
 800a040:	f000 fba2 	bl	800a788 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800a044:	4603      	mov	r3, r0
      }
 800a046:	4618      	mov	r0, r3
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a04e <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800a04e:	b590      	push	{r4, r7, lr}
 800a050:	b085      	sub	sp, #20
 800a052:	af00      	add	r7, sp, #0
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	60b9      	str	r1, [r7, #8]
 800a058:	4613      	mov	r3, r2
 800a05a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d109      	bne.n	800a076 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 fbb5 	bl	800a7d2 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800a068:	4604      	mov	r4, r0
 800a06a:	68b8      	ldr	r0, [r7, #8]
 800a06c:	f000 fb7b 	bl	800a766 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800a070:	4603      	mov	r3, r0
 800a072:	6023      	str	r3, [r4, #0]
	    break;
 800a074:	e005      	b.n	800a082 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800a076:	79fb      	ldrb	r3, [r7, #7]
 800a078:	461a      	mov	r2, r3
 800a07a:	68b9      	ldr	r1, [r7, #8]
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 fbb5 	bl	800a7ec <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800a082:	2300      	movs	r3, #0
      }
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd90      	pop	{r4, r7, pc}

0800a08c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	  { return true; }
 800a094:	2301      	movs	r3, #1
 800a096:	4618      	mov	r0, r3
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800a0a2:	b590      	push	{r4, r7, lr}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800a0ac:	6838      	ldr	r0, [r7, #0]
 800a0ae:	f7ff fb98 	bl	80097e2 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fbd1 	bl	800a860 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd90      	pop	{r4, r7, pc}

0800a0c6 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800a0c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c8:	b085      	sub	sp, #20
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	60b9      	str	r1, [r7, #8]
 800a0d0:	607a      	str	r2, [r7, #4]
 800a0d2:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fbdc 	bl	800a892 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800a0da:	4604      	mov	r4, r0
 800a0dc:	68b8      	ldr	r0, [r7, #8]
 800a0de:	f7ff f9f9 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7ff f9f5 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	6838      	ldr	r0, [r7, #0]
 800a0ee:	f7ff f9fc 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f000 fbdb 	bl	800a8b4 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800a0fe:	4603      	mov	r3, r0
      }
 800a100:	4618      	mov	r0, r3
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a108 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800a108:	b590      	push	{r4, r7, lr}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	4613      	mov	r3, r2
 800a114:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d109      	bne.n	800a130 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 fbee 	bl	800a8fe <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800a122:	4604      	mov	r4, r0
 800a124:	68b8      	ldr	r0, [r7, #8]
 800a126:	f000 fbb4 	bl	800a892 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800a12a:	4603      	mov	r3, r0
 800a12c:	6023      	str	r3, [r4, #0]
	    break;
 800a12e:	e005      	b.n	800a13c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800a130:	79fb      	ldrb	r3, [r7, #7]
 800a132:	461a      	mov	r2, r3
 800a134:	68b9      	ldr	r1, [r7, #8]
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 fbee 	bl	800a918 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800a13c:	2300      	movs	r3, #0
      }
 800a13e:	4618      	mov	r0, r3
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	bd90      	pop	{r4, r7, pc}

0800a146 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800a146:	b580      	push	{r7, lr}
 800a148:	b082      	sub	sp, #8
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 fc1b 	bl	800a98c <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a156:	4603      	mov	r3, r0
 800a158:	4618      	mov	r0, r3
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 fc1a 	bl	800a9a4 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4618      	mov	r0, r3
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4618      	mov	r0, r3
 800a186:	f000 fc1d 	bl	800a9c4 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800a18a:	4603      	mov	r3, r0
 800a18c:	4618      	mov	r0, r3
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>:
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 fc1c 	bl	800a9dc <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 fc1b 	bl	800a9f4 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>:
      _Tuple_impl()
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fc1b 	bl	800aa0c <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>:
      constexpr _Head_base()
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fc0b 	bl	800aa22 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800a20c:	4603      	mov	r3, r0
 800a20e:	4618      	mov	r0, r3
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fc0b 	bl	800aa3a <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a224:	4603      	mov	r3, r0
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 fc0a 	bl	800aa52 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800a23e:	4603      	mov	r3, r0
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fc08 	bl	800aa6a <_ZN2ei7EiAllocImE8allocateEj>
 800a25a:	4603      	mov	r3, r0
 800a25c:	4618      	mov	r0, r3
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800a264:	b590      	push	{r4, r7, lr}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800a270:	68b8      	ldr	r0, [r7, #8]
 800a272:	f7ff f897 	bl	80093a4 <_ZSt7forwardIZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS8_E4typeE>
 800a276:	4604      	mov	r4, r0
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f7f6 ff15 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800a27e:	4603      	mov	r3, r0
 800a280:	4619      	mov	r1, r3
 800a282:	2004      	movs	r0, #4
 800a284:	f7f6 ff04 	bl	8001090 <_ZnwjPv>
 800a288:	4602      	mov	r2, r0
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	6013      	str	r3, [r2, #0]
	  }
 800a28e:	bf00      	nop
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	bd90      	pop	{r4, r7, pc}

0800a296 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800a296:	b580      	push	{r7, lr}
 800a298:	b084      	sub	sp, #16
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fbf4 	bl	800aa8c <_ZNKSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERKT_v>
 800a2a4:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 fbfc 	bl	800aaa4 <_ZSt11__addressofIKZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EPT_RS9_>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	bf00      	nop
	}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <_ZSt10__invoke_rIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeESD_EEE5valueESD_E4typeEOSI_DpOSJ_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800a2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2bc:	b086      	sub	sp, #24
 800a2be:	af02      	add	r7, sp, #8
 800a2c0:	60f8      	str	r0, [r7, #12]
 800a2c2:	60b9      	str	r1, [r7, #8]
 800a2c4:	607a      	str	r2, [r7, #4]
 800a2c6:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fbf6 	bl	800aaba <_ZSt7forwardIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	68b8      	ldr	r0, [r7, #8]
 800a2d2:	f7ff f8ff 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f7ff f8fb 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a2de:	4606      	mov	r6, r0
 800a2e0:	6838      	ldr	r0, [r7, #0]
 800a2e2:	f7ff f902 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	4633      	mov	r3, r6
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	f000 fbed 	bl	800aad0 <_ZSt13__invoke_implIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EET_St14__invoke_otherOT0_DpOT1_>
 800a2f6:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a302 <_ZNSt9_Any_data9_M_accessIPZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>:
      _M_access()
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7f6 fecc 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800a310:	4603      	mov	r3, r0
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800a31c:	b590      	push	{r4, r7, lr}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	4613      	mov	r3, r2
 800a328:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800a32a:	79fb      	ldrb	r3, [r7, #7]
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d82a      	bhi.n	800a386 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 800a330:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 800a332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a336:	bf00      	nop
 800a338:	0800a349 	.word	0x0800a349
 800a33c:	0800a357 	.word	0x0800a357
 800a340:	0800a36b 	.word	0x0800a36b
 800a344:	0800a37d 	.word	0x0800a37d
	      __dest._M_access<const type_info*>() = nullptr;
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f000 fbe5 	bl	800ab18 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800a34e:	4603      	mov	r3, r0
 800a350:	2200      	movs	r2, #0
 800a352:	601a      	str	r2, [r3, #0]
	      break;
 800a354:	e017      	b.n	800a386 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f7ff ffd3 	bl	800a302 <_ZNSt9_Any_data9_M_accessIPZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>
 800a35c:	4604      	mov	r4, r0
 800a35e:	68b8      	ldr	r0, [r7, #8]
 800a360:	f7ff ff99 	bl	800a296 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800a364:	4603      	mov	r3, r0
 800a366:	6023      	str	r3, [r4, #0]
	      break;
 800a368:	e00d      	b.n	800a386 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800a36a:	68b8      	ldr	r0, [r7, #8]
 800a36c:	f7ff ff93 	bl	800a296 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800a370:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800a372:	4619      	mov	r1, r3
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 fbdb 	bl	800ab30 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 800a37a:	e004      	b.n	800a386 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800a37c:	4621      	mov	r1, r4
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 fbe8 	bl	800ab54 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800a384:	bf00      	nop
	  return false;
 800a386:	2300      	movs	r3, #0
	}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd90      	pop	{r4, r7, pc}

0800a390 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a3a6:	b590      	push	{r4, r7, lr}
 800a3a8:	b085      	sub	sp, #20
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	60b9      	str	r1, [r7, #8]
 800a3b0:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800a3b2:	68fc      	ldr	r4, [r7, #12]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff fc4d 	bl	8009c54 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f000 fbd4 	bl	800ab6c <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	1d1c      	adds	r4, r3, #4
 800a3c8:	68b8      	ldr	r0, [r7, #8]
 800a3ca:	f7ff ffe1 	bl	800a390 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f000 fbdd 	bl	800ab92 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
	{ }
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd90      	pop	{r4, r7, pc}

0800a3e2 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b082      	sub	sp, #8
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fbe2 	bl	800abb4 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4618      	mov	r0, r3
 800a406:	f000 fbe3 	bl	800abd0 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a40a:	4603      	mov	r3, r0
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE12_S_constructImJmEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800a414:	b590      	push	{r4, r7, lr}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7ff fc55 	bl	8009cd0 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800a426:	4603      	mov	r3, r0
 800a428:	681c      	ldr	r4, [r3, #0]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	4619      	mov	r1, r3
 800a42e:	2004      	movs	r0, #4
 800a430:	f7f6 fe2e 	bl	8001090 <_ZnwjPv>
 800a434:	4603      	mov	r3, r0
 800a436:	601c      	str	r4, [r3, #0]
	}
 800a438:	bf00      	nop
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd90      	pop	{r4, r7, pc}

0800a440 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImN2ei7EiAllocImEEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <_ZNKSt6vectorImN2ei7EiAllocImEEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800a460:	b590      	push	{r4, r7, lr}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f000 fbbb 	bl	800abe8 <_ZNKSt6vectorImN2ei7EiAllocImEEE8max_sizeEv>
 800a472:	4604      	mov	r4, r0
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f7fe fcfa 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 800a47a:	4603      	mov	r3, r0
 800a47c:	1ae2      	subs	r2, r4, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	429a      	cmp	r2, r3
 800a482:	bf34      	ite	cc
 800a484:	2301      	movcc	r3, #1
 800a486:	2300      	movcs	r3, #0
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <_ZNKSt6vectorImN2ei7EiAllocImEEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f020 f8d9 	bl	802a646 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f7fe fcea 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 800a49a:	4604      	mov	r4, r0
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f7fe fce6 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	613b      	str	r3, [r7, #16]
 800a4a6:	f107 0208 	add.w	r2, r7, #8
 800a4aa:	f107 0310 	add.w	r3, r7, #16
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fe fdc7 	bl	8009044 <_ZSt3maxIjERKT_S2_S2_>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4423      	add	r3, r4
 800a4bc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f7fe fcd5 	bl	8008e6e <_ZNKSt6vectorImN2ei7EiAllocImEEE4sizeEv>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d306      	bcc.n	800a4da <_ZNKSt6vectorImN2ei7EiAllocImEEE12_M_check_lenEjPKc+0x7a>
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 fb8b 	bl	800abe8 <_ZNKSt6vectorImN2ei7EiAllocImEEE8max_sizeEv>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d904      	bls.n	800a4e4 <_ZNKSt6vectorImN2ei7EiAllocImEEE12_M_check_lenEjPKc+0x84>
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 fb84 	bl	800abe8 <_ZNKSt6vectorImN2ei7EiAllocImEEE8max_sizeEv>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	e000      	b.n	800a4e6 <_ZNKSt6vectorImN2ei7EiAllocImEEE12_M_check_lenEjPKc+0x86>
 800a4e4:	697b      	ldr	r3, [r7, #20]
      }
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	371c      	adds	r7, #28
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd90      	pop	{r4, r7, pc}

0800a4ee <_ZNSt6vectorImN2ei7EiAllocImEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	f107 030c 	add.w	r3, r7, #12
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff ff9e 	bl	800a440 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImN2ei7EiAllocImEEEEC1ERKS1_>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <_ZN9__gnu_cxxmiIPmSt6vectorImN2ei7EiAllocImEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a50e:	b590      	push	{r4, r7, lr}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f835 	bl	800a588 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImN2ei7EiAllocImEEEE4baseEv>
 800a51e:	4603      	mov	r3, r0
 800a520:	681c      	ldr	r4, [r3, #0]
 800a522:	6838      	ldr	r0, [r7, #0]
 800a524:	f000 f830 	bl	800a588 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImN2ei7EiAllocImEEEE4baseEv>
 800a528:	4603      	mov	r3, r0
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	1ae3      	subs	r3, r4, r3
 800a52e:	109b      	asrs	r3, r3, #2
 800a530:	4618      	mov	r0, r3
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	bd90      	pop	{r4, r7, pc}

0800a538 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d006      	beq.n	800a556 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE11_M_allocateEj+0x1e>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff fe7b 	bl	800a248 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 800a552:	4603      	mov	r3, r0
 800a554:	e000      	b.n	800a558 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEE11_M_allocateEj+0x20>
 800a556:	2300      	movs	r3, #0
      }
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <_ZNSt6vectorImN2ei7EiAllocImEEE11_S_relocateEPmS4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800a560:	b590      	push	{r4, r7, lr}
 800a562:	b087      	sub	sp, #28
 800a564:	af02      	add	r7, sp, #8
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800a56e:	f88d 4000 	strb.w	r4, [sp]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	68b9      	ldr	r1, [r7, #8]
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 fb46 	bl	800ac0a <_ZNSt6vectorImN2ei7EiAllocImEEE14_S_do_relocateEPmS4_S4_RS2_St17integral_constantIbLb1EE>
 800a57e:	4603      	mov	r3, r0
      }
 800a580:	4618      	mov	r0, r3
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	bd90      	pop	{r4, r7, pc}

0800a588 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImN2ei7EiAllocImEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4618      	mov	r0, r3
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_N2ei7EiAllocImEEET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800a59e:	b590      	push	{r4, r7, lr}
 800a5a0:	b085      	sub	sp, #20
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	60f8      	str	r0, [r7, #12]
 800a5a6:	60b9      	str	r1, [r7, #8]
 800a5a8:	607a      	str	r2, [r7, #4]
 800a5aa:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 fb3e 	bl	800ac2e <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	68b8      	ldr	r0, [r7, #8]
 800a5b6:	f000 fb3a 	bl	800ac2e <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 800a5ba:	4601      	mov	r1, r0
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 fb43 	bl	800ac4c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_N2ei7EiAllocImEEET0_T_S7_S6_RT1_>
 800a5c6:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3714      	adds	r7, #20
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd90      	pop	{r4, r7, pc}

0800a5d0 <_ZN2ei7EiAllocImE10deallocateEPmj>:
        get_allocs()[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = get_allocs().find(p);
        ei_dsp_free(p,size_p->second);
        get_allocs().erase(size_p);
#else
        ei_dsp_free(p,0);
 800a5dc:	68b8      	ldr	r0, [r7, #8]
 800a5de:	f01a ff65 	bl	80254ac <_Z7ei_freePv>
#endif
    }
 800a5e2:	bf00      	nop
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10_S_destroyIS2_mEEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800a5ea:	b40e      	push	{r1, r2, r3}
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800a5f4:	6978      	ldr	r0, [r7, #20]
 800a5f6:	f000 fb5a 	bl	800acae <_ZSt8_DestroyImEvPT_>
 800a5fa:	bf00      	nop
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a604:	b003      	add	sp, #12
 800a606:	4770      	bx	lr

0800a608 <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800a608:	b590      	push	{r4, r7, lr}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800a614:	68b8      	ldr	r0, [r7, #8]
 800a616:	f7ff f83f 	bl	8009698 <_ZSt7forwardIZN15SignalWithRange10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800a61a:	4604      	mov	r4, r0
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f7f6 fd43 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800a622:	4603      	mov	r3, r0
 800a624:	4619      	mov	r1, r3
 800a626:	2004      	movs	r0, #4
 800a628:	f7f6 fd32 	bl	8001090 <_ZnwjPv>
 800a62c:	4602      	mov	r2, r0
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	6013      	str	r3, [r2, #0]
	  }
 800a632:	bf00      	nop
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	bd90      	pop	{r4, r7, pc}

0800a63a <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b084      	sub	sp, #16
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fb3d 	bl	800acc2 <_ZNKSt9_Any_data9_M_accessIZN15SignalWithRange10get_signalEvEUljjPfE_EERKT_v>
 800a648:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 fb45 	bl	800acda <_ZSt11__addressofIKZN15SignalWithRange10get_signalEvEUljjPfE_EPT_RS4_>
 800a650:	4603      	mov	r3, r0
 800a652:	bf00      	nop
	}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <_ZSt10__invoke_rIiRZN15SignalWithRange10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800a65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a660:	b086      	sub	sp, #24
 800a662:	af02      	add	r7, sp, #8
 800a664:	60f8      	str	r0, [r7, #12]
 800a666:	60b9      	str	r1, [r7, #8]
 800a668:	607a      	str	r2, [r7, #4]
 800a66a:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f000 fb3f 	bl	800acf0 <_ZSt7forwardIRZN15SignalWithRange10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800a672:	4604      	mov	r4, r0
 800a674:	68b8      	ldr	r0, [r7, #8]
 800a676:	f7fe ff2d 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a67a:	4605      	mov	r5, r0
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7fe ff29 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a682:	4606      	mov	r6, r0
 800a684:	6838      	ldr	r0, [r7, #0]
 800a686:	f7fe ff30 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800a68a:	4603      	mov	r3, r0
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	4633      	mov	r3, r6
 800a690:	462a      	mov	r2, r5
 800a692:	4621      	mov	r1, r4
 800a694:	4640      	mov	r0, r8
 800a696:	f000 fb36 	bl	800ad06 <_ZSt13__invoke_implIiRZN15SignalWithRange10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 800a69a:	4603      	mov	r3, r0
    }
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a6a6 <_ZNSt9_Any_data9_M_accessIPZN15SignalWithRange10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7f6 fcfa 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
	...

0800a6c0 <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d82a      	bhi.n	800a72a <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800a6d4:	a201      	add	r2, pc, #4	; (adr r2, 800a6dc <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800a6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6da:	bf00      	nop
 800a6dc:	0800a6ed 	.word	0x0800a6ed
 800a6e0:	0800a6fb 	.word	0x0800a6fb
 800a6e4:	0800a70f 	.word	0x0800a70f
 800a6e8:	0800a721 	.word	0x0800a721
	      __dest._M_access<const type_info*>() = nullptr;
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 fa13 	bl	800ab18 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]
	      break;
 800a6f8:	e017      	b.n	800a72a <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f7ff ffd3 	bl	800a6a6 <_ZNSt9_Any_data9_M_accessIPZN15SignalWithRange10get_signalEvEUljjPfE_EERT_v>
 800a700:	4604      	mov	r4, r0
 800a702:	68b8      	ldr	r0, [r7, #8]
 800a704:	f7ff ff99 	bl	800a63a <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800a708:	4603      	mov	r3, r0
 800a70a:	6023      	str	r3, [r4, #0]
	      break;
 800a70c:	e00d      	b.n	800a72a <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800a70e:	68b8      	ldr	r0, [r7, #8]
 800a710:	f7ff ff93 	bl	800a63a <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800a714:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800a716:	4619      	mov	r1, r3
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 fb18 	bl	800ad4e <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800a71e:	e004      	b.n	800a72a <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800a720:	4621      	mov	r1, r4
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f000 fb25 	bl	800ad72 <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800a728:	bf00      	nop
	  return false;
 800a72a:	2300      	movs	r3, #0
	}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	bd90      	pop	{r4, r7, pc}

0800a734 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800a734:	b590      	push	{r4, r7, lr}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800a740:	68b8      	ldr	r0, [r7, #8]
 800a742:	f7fe ffe5 	bl	8009710 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a746:	4603      	mov	r3, r0
 800a748:	681c      	ldr	r4, [r3, #0]
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7f6 fcac 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800a750:	4603      	mov	r3, r0
 800a752:	4619      	mov	r1, r3
 800a754:	2004      	movs	r0, #4
 800a756:	f7f6 fc9b 	bl	8001090 <_ZnwjPv>
 800a75a:	4603      	mov	r3, r0
 800a75c:	601c      	str	r4, [r3, #0]
	  }
 800a75e:	bf00      	nop
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	bd90      	pop	{r4, r7, pc}

0800a766 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fb0b 	bl	800ad8a <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 800a774:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f000 fb13 	bl	800ada2 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 800a77c:	4603      	mov	r3, r0
 800a77e:	bf00      	nop
	}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800a788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78c:	b086      	sub	sp, #24
 800a78e:	af02      	add	r7, sp, #8
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	60b9      	str	r1, [r7, #8]
 800a794:	607a      	str	r2, [r7, #4]
 800a796:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 fb0d 	bl	800adb8 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	68b8      	ldr	r0, [r7, #8]
 800a7a2:	f7fe fe97 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7fe fe93 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	6838      	ldr	r0, [r7, #0]
 800a7b2:	f7fe fe9a 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	4633      	mov	r3, r6
 800a7bc:	462a      	mov	r2, r5
 800a7be:	4621      	mov	r1, r4
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	f000 fb04 	bl	800adce <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 800a7c6:	4603      	mov	r3, r0
    }
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a7d2 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7f6 fc64 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800a7ec:	b590      	push	{r4, r7, lr}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	2b03      	cmp	r3, #3
 800a7fe:	d82a      	bhi.n	800a856 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800a800:	a201      	add	r2, pc, #4	; (adr r2, 800a808 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800a802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a806:	bf00      	nop
 800a808:	0800a819 	.word	0x0800a819
 800a80c:	0800a827 	.word	0x0800a827
 800a810:	0800a83b 	.word	0x0800a83b
 800a814:	0800a84d 	.word	0x0800a84d
	      __dest._M_access<const type_info*>() = nullptr;
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 f97d 	bl	800ab18 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800a81e:	4603      	mov	r3, r0
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
	      break;
 800a824:	e017      	b.n	800a856 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f7ff ffd3 	bl	800a7d2 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800a82c:	4604      	mov	r4, r0
 800a82e:	68b8      	ldr	r0, [r7, #8]
 800a830:	f7ff ff99 	bl	800a766 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800a834:	4603      	mov	r3, r0
 800a836:	6023      	str	r3, [r4, #0]
	      break;
 800a838:	e00d      	b.n	800a856 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800a83a:	68b8      	ldr	r0, [r7, #8]
 800a83c:	f7ff ff93 	bl	800a766 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800a840:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800a842:	4619      	mov	r1, r3
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 fae6 	bl	800ae16 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800a84a:	e004      	b.n	800a856 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800a84c:	4621      	mov	r1, r4
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 faf3 	bl	800ae3a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800a854:	bf00      	nop
	  return false;
 800a856:	2300      	movs	r3, #0
	}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd90      	pop	{r4, r7, pc}

0800a860 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800a860:	b590      	push	{r4, r7, lr}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800a86c:	68b8      	ldr	r0, [r7, #8]
 800a86e:	f7fe ffb8 	bl	80097e2 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800a872:	4604      	mov	r4, r0
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7f6 fc17 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800a87a:	4603      	mov	r3, r0
 800a87c:	4619      	mov	r1, r3
 800a87e:	2004      	movs	r0, #4
 800a880:	f7f6 fc06 	bl	8001090 <_ZnwjPv>
 800a884:	4602      	mov	r2, r0
 800a886:	6823      	ldr	r3, [r4, #0]
 800a888:	6013      	str	r3, [r2, #0]
	  }
 800a88a:	bf00      	nop
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd90      	pop	{r4, r7, pc}

0800a892 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fad9 	bl	800ae52 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800a8a0:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 fae1 	bl	800ae6a <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	bf00      	nop
	}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b8:	b086      	sub	sp, #24
 800a8ba:	af02      	add	r7, sp, #8
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
 800a8c2:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 fadb 	bl	800ae80 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	68b8      	ldr	r0, [r7, #8]
 800a8ce:	f7fe fe01 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7fe fdfd 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a8da:	4606      	mov	r6, r0
 800a8dc:	6838      	ldr	r0, [r7, #0]
 800a8de:	f7fe fe04 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	4633      	mov	r3, r6
 800a8e8:	462a      	mov	r2, r5
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	f000 fad2 	bl	800ae96 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 800a8f2:	4603      	mov	r3, r0
    }
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8fe <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b082      	sub	sp, #8
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7f6 fbce 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800a90c:	4603      	mov	r3, r0
 800a90e:	4618      	mov	r0, r3
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
	...

0800a918 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800a918:	b590      	push	{r4, r7, lr}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	4613      	mov	r3, r2
 800a924:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800a926:	79fb      	ldrb	r3, [r7, #7]
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d82a      	bhi.n	800a982 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800a92c:	a201      	add	r2, pc, #4	; (adr r2, 800a934 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800a92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a932:	bf00      	nop
 800a934:	0800a945 	.word	0x0800a945
 800a938:	0800a953 	.word	0x0800a953
 800a93c:	0800a967 	.word	0x0800a967
 800a940:	0800a979 	.word	0x0800a979
	      __dest._M_access<const type_info*>() = nullptr;
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 f8e7 	bl	800ab18 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2200      	movs	r2, #0
 800a94e:	601a      	str	r2, [r3, #0]
	      break;
 800a950:	e017      	b.n	800a982 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7ff ffd3 	bl	800a8fe <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800a958:	4604      	mov	r4, r0
 800a95a:	68b8      	ldr	r0, [r7, #8]
 800a95c:	f7ff ff99 	bl	800a892 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800a960:	4603      	mov	r3, r0
 800a962:	6023      	str	r3, [r4, #0]
	      break;
 800a964:	e00d      	b.n	800a982 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800a966:	68b8      	ldr	r0, [r7, #8]
 800a968:	f7ff ff93 	bl	800a892 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800a96c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800a96e:	4619      	mov	r1, r3
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f000 fab4 	bl	800aede <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800a976:	e004      	b.n	800a982 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800a978:	4621      	mov	r1, r4
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 fac1 	bl	800af02 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800a980:	bf00      	nop
	  return false;
 800a982:	2300      	movs	r3, #0
	}
 800a984:	4618      	mov	r0, r3
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd90      	pop	{r4, r7, pc}

0800a98c <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 facb 	bl	800af30 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 800a99a:	4603      	mov	r3, r0
 800a99c:	4618      	mov	r0, r3
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 facd 	bl	800af4c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 fad5 	bl	800af64 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fad7 	bl	800af80 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fad8 	bl	800af9a <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fad8 	bl	800afb2 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>
 800aa02:	4603      	mov	r3, r0
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>:
      constexpr _Head_base()
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4618      	mov	r0, r3
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 face 	bl	800afcc <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>
 800aa30:	4603      	mov	r3, r0
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 facf 	bl	800afe6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b082      	sub	sp, #8
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 facf 	bl	800affe <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>
 800aa60:	4603      	mov	r3, r0
 800aa62:	4618      	mov	r0, r3
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f01a fcfc 	bl	8025478 <_Z9ei_mallocj>
 800aa80:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800aa82:	68bb      	ldr	r3, [r7, #8]
    }
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <_ZNKSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERKT_v>:
      _M_access() const
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7f6 fb12 	bl	80010be <_ZNKSt9_Any_data9_M_accessEv>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <_ZSt11__addressofIKZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4618      	mov	r0, r3
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <_ZSt7forwardIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4618      	mov	r0, r3
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <_ZSt13__invoke_implIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800aad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	7338      	strb	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
 800aadc:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800aade:	68b8      	ldr	r0, [r7, #8]
 800aae0:	f7ff ffeb 	bl	800aaba <_ZSt7forwardIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800aae4:	4606      	mov	r6, r0
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7fe fcf4 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800aaec:	4603      	mov	r3, r0
 800aaee:	681c      	ldr	r4, [r3, #0]
 800aaf0:	6838      	ldr	r0, [r7, #0]
 800aaf2:	f7fe fcef 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	681d      	ldr	r5, [r3, #0]
 800aafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aafc:	f7fe fcf5 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800ab00:	4603      	mov	r3, r0
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	462a      	mov	r2, r5
 800ab06:	4621      	mov	r1, r4
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f7f7 fa3c 	bl	8001f86 <_ZZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tEENKUljjPfE_clEjjS5_>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	4618      	mov	r0, r3
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab18 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7f6 fac1 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800ab26:	4603      	mov	r3, r0
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800ab30:	b590      	push	{r4, r7, lr}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800ab3a:	6838      	ldr	r0, [r7, #0]
 800ab3c:	f000 fa6c 	bl	800b018 <_ZSt7forwardIRKZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceISA_E4typeE>
 800ab40:	4603      	mov	r3, r0
 800ab42:	4622      	mov	r2, r4
 800ab44:	4619      	mov	r1, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fa71 	bl	800b02e <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd90      	pop	{r4, r7, pc}

0800ab54 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fa7e 	bl	800b060 <_ZNSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>
	}
 800ab64:	bf00      	nop
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 800ab6c:	b590      	push	{r4, r7, lr}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800ab76:	687c      	ldr	r4, [r7, #4]
 800ab78:	6838      	ldr	r0, [r7, #0]
 800ab7a:	f7ff f86b 	bl	8009c54 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	4619      	mov	r1, r3
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 fa78 	bl	800b078 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
	{ }
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd90      	pop	{r4, r7, pc}

0800ab92 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b082      	sub	sp, #8
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800ab9c:	6838      	ldr	r0, [r7, #0]
 800ab9e:	f7ff fbf7 	bl	800a390 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800aba2:	4603      	mov	r3, r0
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	601a      	str	r2, [r3, #0]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 fa6a 	bl	800b09a <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 800abc6:	4603      	mov	r3, r0
 800abc8:	4618      	mov	r0, r3
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fa69 	bl	800b0b0 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 800abde:	4603      	mov	r3, r0
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <_ZNKSt6vectorImN2ei7EiAllocImEEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 fa83 	bl	800b0fe <_ZNKSt12_Vector_baseImN2ei7EiAllocImEEE19_M_get_Tp_allocatorEv>
 800abf8:	4603      	mov	r3, r0
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 fa65 	bl	800b0ca <_ZNSt6vectorImN2ei7EiAllocImEEE11_S_max_sizeERKS2_>
 800ac00:	4603      	mov	r3, r0
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <_ZNSt6vectorImN2ei7EiAllocImEEE14_S_do_relocateEPmS4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
 800ac16:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	68b9      	ldr	r1, [r7, #8]
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f000 fa78 	bl	800b114 <_ZSt12__relocate_aIPmS0_N2ei7EiAllocImEEET0_T_S5_S4_RT1_>
 800ac24:	4603      	mov	r3, r0
      }
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800ac36:	f107 030c 	add.w	r3, r7, #12
 800ac3a:	6879      	ldr	r1, [r7, #4]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 fa86 	bl	800b14e <_ZNSt13move_iteratorIPmEC1ES0_>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_N2ei7EiAllocImEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800ac4c:	b590      	push	{r4, r7, lr}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800ac5e:	e016      	b.n	800ac8e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_N2ei7EiAllocImEEET0_T_S7_S6_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800ac60:	6978      	ldr	r0, [r7, #20]
 800ac62:	f7fe ff09 	bl	8009a78 <_ZSt11__addressofImEPT_RS0_>
 800ac66:	4604      	mov	r4, r0
 800ac68:	f107 030c 	add.w	r3, r7, #12
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 faa1 	bl	800b1b4 <_ZNKSt13move_iteratorIPmEdeEv>
 800ac72:	4603      	mov	r3, r0
 800ac74:	461a      	mov	r2, r3
 800ac76:	4621      	mov	r1, r4
 800ac78:	6838      	ldr	r0, [r7, #0]
 800ac7a:	f7ff f834 	bl	8009ce6 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE9constructImJmEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800ac7e:	f107 030c 	add.w	r3, r7, #12
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fa86 	bl	800b194 <_ZNSt13move_iteratorIPmEppEv>
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	617b      	str	r3, [r7, #20]
 800ac8e:	f107 0208 	add.w	r2, r7, #8
 800ac92:	f107 030c 	add.w	r3, r7, #12
 800ac96:	4611      	mov	r1, r2
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 fa6a 	bl	800b172 <_ZStneIPmEbRKSt13move_iteratorIT_ES5_>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1dd      	bne.n	800ac60 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_N2ei7EiAllocImEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800aca4:	697b      	ldr	r3, [r7, #20]
    }
 800aca6:	4618      	mov	r0, r3
 800aca8:	371c      	adds	r7, #28
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd90      	pop	{r4, r7, pc}

0800acae <_ZSt8_DestroyImEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 800acae:	b480      	push	{r7}
 800acb0:	b083      	sub	sp, #12
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 800acb6:	bf00      	nop
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <_ZNKSt9_Any_data9_M_accessIZN15SignalWithRange10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b082      	sub	sp, #8
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7f6 f9f7 	bl	80010be <_ZNKSt9_Any_data9_M_accessEv>
 800acd0:	4603      	mov	r3, r0
 800acd2:	4618      	mov	r0, r3
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <_ZSt11__addressofIKZN15SignalWithRange10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800acda:	b480      	push	{r7}
 800acdc:	b083      	sub	sp, #12
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4618      	mov	r0, r3
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <_ZSt7forwardIRZN15SignalWithRange10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4618      	mov	r0, r3
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <_ZSt13__invoke_implIiRZN15SignalWithRange10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800ad06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad08:	b085      	sub	sp, #20
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	7338      	strb	r0, [r7, #12]
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800ad14:	68b8      	ldr	r0, [r7, #8]
 800ad16:	f7ff ffeb 	bl	800acf0 <_ZSt7forwardIRZN15SignalWithRange10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7fe fbd9 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ad22:	4603      	mov	r3, r0
 800ad24:	681c      	ldr	r4, [r3, #0]
 800ad26:	6838      	ldr	r0, [r7, #0]
 800ad28:	f7fe fbd4 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	681d      	ldr	r5, [r3, #0]
 800ad30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad32:	f7fe fbda 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800ad36:	4603      	mov	r3, r0
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	462a      	mov	r2, r5
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f7fa f948 	bl	8004fd4 <_ZZN15SignalWithRange10get_signalEvENKUljjPfE_clEjjS0_>
 800ad44:	4603      	mov	r3, r0
 800ad46:	4618      	mov	r0, r3
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad4e <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800ad4e:	b590      	push	{r4, r7, lr}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800ad58:	6838      	ldr	r0, [r7, #0]
 800ad5a:	f000 fa37 	bl	800b1cc <_ZSt7forwardIRKZN15SignalWithRange10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	4622      	mov	r2, r4
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fa3c 	bl	800b1e2 <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800ad6a:	bf00      	nop
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd90      	pop	{r4, r7, pc}

0800ad72 <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b082      	sub	sp, #8
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fa49 	bl	800b214 <_ZNSt9_Any_data9_M_accessIZN15SignalWithRange10get_signalEvEUljjPfE_EERT_v>
	}
 800ad82:	bf00      	nop
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7f6 f993 	bl	80010be <_ZNKSt9_Any_data9_M_accessEv>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4618      	mov	r0, r3
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4618      	mov	r0, r3
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800adce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add0:	b085      	sub	sp, #20
 800add2:	af00      	add	r7, sp, #0
 800add4:	7338      	strb	r0, [r7, #12]
 800add6:	60b9      	str	r1, [r7, #8]
 800add8:	607a      	str	r2, [r7, #4]
 800adda:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800addc:	68b8      	ldr	r0, [r7, #8]
 800adde:	f7ff ffeb 	bl	800adb8 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ade2:	4603      	mov	r3, r0
 800ade4:	681c      	ldr	r4, [r3, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7fe fb74 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800adec:	4603      	mov	r3, r0
 800adee:	681d      	ldr	r5, [r3, #0]
 800adf0:	6838      	ldr	r0, [r7, #0]
 800adf2:	f7fe fb6f 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800adf6:	4603      	mov	r3, r0
 800adf8:	681e      	ldr	r6, [r3, #0]
 800adfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adfc:	f7fe fb75 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800ae00:	4603      	mov	r3, r0
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	461a      	mov	r2, r3
 800ae06:	4631      	mov	r1, r6
 800ae08:	4628      	mov	r0, r5
 800ae0a:	47a0      	blx	r4
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae16 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800ae16:	b590      	push	{r4, r7, lr}
 800ae18:	b083      	sub	sp, #12
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800ae20:	6838      	ldr	r0, [r7, #0]
 800ae22:	f000 fa03 	bl	800b22c <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800ae26:	4603      	mov	r3, r0
 800ae28:	4622      	mov	r2, r4
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fa08 	bl	800b242 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800ae32:	bf00      	nop
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd90      	pop	{r4, r7, pc}

0800ae3a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b082      	sub	sp, #8
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fa15 	bl	800b274 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7f6 f92f 	bl	80010be <_ZNKSt9_Any_data9_M_accessEv>
 800ae60:	4603      	mov	r3, r0
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800ae96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae98:	b085      	sub	sp, #20
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	7338      	strb	r0, [r7, #12]
 800ae9e:	60b9      	str	r1, [r7, #8]
 800aea0:	607a      	str	r2, [r7, #4]
 800aea2:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800aea4:	68b8      	ldr	r0, [r7, #8]
 800aea6:	f7ff ffeb 	bl	800ae80 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800aeaa:	4606      	mov	r6, r0
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7fe fb11 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	681c      	ldr	r4, [r3, #0]
 800aeb6:	6838      	ldr	r0, [r7, #0]
 800aeb8:	f7fe fb0c 	bl	80094d4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800aebc:	4603      	mov	r3, r0
 800aebe:	681d      	ldr	r5, [r3, #0]
 800aec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aec2:	f7fe fb12 	bl	80094ea <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800aec6:	4603      	mov	r3, r0
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	462a      	mov	r2, r5
 800aecc:	4621      	mov	r1, r4
 800aece:	4630      	mov	r0, r6
 800aed0:	f7fb fe51 	bl	8006b76 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 800aed4:	4603      	mov	r3, r0
 800aed6:	4618      	mov	r0, r3
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aede <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800aede:	b590      	push	{r4, r7, lr}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800aee8:	6838      	ldr	r0, [r7, #0]
 800aeea:	f000 f9cf 	bl	800b28c <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800aeee:	4603      	mov	r3, r0
 800aef0:	4622      	mov	r2, r4
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f9d4 	bl	800b2a2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800aefa:	bf00      	nop
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd90      	pop	{r4, r7, pc}

0800af02 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800af02:	b580      	push	{r7, lr}
 800af04:	b082      	sub	sp, #8
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f9e1 	bl	800b2d4 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 800af12:	bf00      	nop
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <_ZSt12__niter_baseIPmET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 800af1a:	b480      	push	{r7}
 800af1c:	b083      	sub	sp, #12
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4618      	mov	r0, r3
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3304      	adds	r3, #4
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 f9d5 	bl	800b2ec <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 800af42:	4603      	mov	r3, r0
 800af44:	4618      	mov	r0, r3
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>:
      _Tuple_impl()
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f9d4 	bl	800b302 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>:
      constexpr _Head_base()
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4618      	mov	r0, r3
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f9c4 	bl	800b318 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>
 800af90:	4603      	mov	r3, r0
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f9c3 	bl	800b32e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>
 800afa8:	4603      	mov	r3, r0
 800afaa:	4618      	mov	r0, r3
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b082      	sub	sp, #8
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 f9c2 	bl	800b346 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>
 800afc2:	4603      	mov	r3, r0
 800afc4:	4618      	mov	r0, r3
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 f9c0 	bl	800b35c <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>
 800afdc:	4603      	mov	r3, r0
 800afde:	4618      	mov	r0, r3
 800afe0:	3708      	adds	r7, #8
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b082      	sub	sp, #8
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f9bf 	bl	800b372 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>
 800aff4:	4603      	mov	r3, r0
 800aff6:	4618      	mov	r0, r3
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 f9bd 	bl	800b388 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>
 800b00e:	4603      	mov	r3, r0
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <_ZSt7forwardIRKZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4618      	mov	r0, r3
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800b02e:	b590      	push	{r4, r7, lr}
 800b030:	b085      	sub	sp, #20
 800b032:	af00      	add	r7, sp, #0
 800b034:	60f8      	str	r0, [r7, #12]
 800b036:	60b9      	str	r1, [r7, #8]
 800b038:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800b03a:	68b8      	ldr	r0, [r7, #8]
 800b03c:	f7ff ffec 	bl	800b018 <_ZSt7forwardIRKZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceISA_E4typeE>
 800b040:	4604      	mov	r4, r0
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f7f6 f830 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800b048:	4603      	mov	r3, r0
 800b04a:	4619      	mov	r1, r3
 800b04c:	2004      	movs	r0, #4
 800b04e:	f7f6 f81f 	bl	8001090 <_ZnwjPv>
 800b052:	4602      	mov	r2, r0
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	6013      	str	r3, [r2, #0]
	  }
 800b058:	bf00      	nop
 800b05a:	3714      	adds	r7, #20
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd90      	pop	{r4, r7, pc}

0800b060 <_ZNSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>:
      _M_access()
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7f6 f81d 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800b06e:	4603      	mov	r3, r0
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800b082:	6838      	ldr	r0, [r7, #0]
 800b084:	f7fe fde6 	bl	8009c54 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b088:	4603      	mov	r3, r0
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b09a:	b480      	push	{r7}
 800b09c:	b083      	sub	sp, #12
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 f96f 	bl	800b39e <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3708      	adds	r7, #8
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <_ZNSt6vectorImN2ei7EiAllocImEEE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800b0d2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b0d6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f96b 	bl	800b3b4 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8max_sizeERKS2_>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800b0e2:	f107 0208 	add.w	r2, r7, #8
 800b0e6:	f107 030c 	add.w	r3, r7, #12
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fb ff5a 	bl	8006fa6 <_ZSt3minIjERKT_S2_S2_>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	681b      	ldr	r3, [r3, #0]
      }
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <_ZNKSt12_Vector_baseImN2ei7EiAllocImEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <_ZSt12__relocate_aIPmS0_N2ei7EiAllocImEEET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800b114:	b5b0      	push	{r4, r5, r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
 800b120:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f7ff fef9 	bl	800af1a <_ZSt12__niter_baseIPmET_S1_>
 800b128:	4604      	mov	r4, r0
 800b12a:	68b8      	ldr	r0, [r7, #8]
 800b12c:	f7ff fef5 	bl	800af1a <_ZSt12__niter_baseIPmET_S1_>
 800b130:	4605      	mov	r5, r0
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7ff fef1 	bl	800af1a <_ZSt12__niter_baseIPmET_S1_>
 800b138:	4602      	mov	r2, r0
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	4629      	mov	r1, r5
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 f945 	bl	800b3ce <_ZSt14__relocate_a_1IPmS0_N2ei7EiAllocImEEET0_T_S5_S4_RT1_>
 800b144:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bdb0      	pop	{r4, r5, r7, pc}

0800b14e <_ZNSt13move_iteratorIPmEC1ES0_>:
      move_iterator(iterator_type __i)
 800b14e:	b580      	push	{r7, lr}
 800b150:	b082      	sub	sp, #8
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800b158:	463b      	mov	r3, r7
 800b15a:	4618      	mov	r0, r3
 800b15c:	f000 f95d 	bl	800b41a <_ZSt4moveIRPmEONSt16remove_referenceIT_E4typeEOS3_>
 800b160:	4603      	mov	r3, r0
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	601a      	str	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <_ZStneIPmEbRKSt13move_iteratorIT_ES5_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f956 	bl	800b430 <_ZSteqIPmEbRKSt13move_iteratorIT_ES5_>
 800b184:	4603      	mov	r3, r0
 800b186:	f083 0301 	eor.w	r3, r3, #1
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	4618      	mov	r0, r3
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <_ZNSt13move_iteratorIPmEppEv>:
      operator++()
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	1d1a      	adds	r2, r3, #4
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	601a      	str	r2, [r3, #0]
	return *this;
 800b1a6:	687b      	ldr	r3, [r7, #4]
      }
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <_ZNKSt13move_iteratorIPmEdeEv>:
      operator*() const
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <_ZSt7forwardIRKZN15SignalWithRange10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <_ZNSt14_Function_base13_Base_managerIZN15SignalWithRange10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800b1e2:	b590      	push	{r4, r7, lr}
 800b1e4:	b085      	sub	sp, #20
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800b1ee:	68b8      	ldr	r0, [r7, #8]
 800b1f0:	f7ff ffec 	bl	800b1cc <_ZSt7forwardIRKZN15SignalWithRange10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f7f5 ff56 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	4619      	mov	r1, r3
 800b200:	2004      	movs	r0, #4
 800b202:	f7f5 ff45 	bl	8001090 <_ZnwjPv>
 800b206:	4602      	mov	r2, r0
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	6013      	str	r3, [r2, #0]
	  }
 800b20c:	bf00      	nop
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	bd90      	pop	{r4, r7, pc}

0800b214 <_ZNSt9_Any_data9_M_accessIZN15SignalWithRange10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7f5 ff43 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800b222:	4603      	mov	r3, r0
 800b224:	4618      	mov	r0, r3
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4618      	mov	r0, r3
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800b242:	b590      	push	{r4, r7, lr}
 800b244:	b085      	sub	sp, #20
 800b246:	af00      	add	r7, sp, #0
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	60b9      	str	r1, [r7, #8]
 800b24c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800b24e:	68b8      	ldr	r0, [r7, #8]
 800b250:	f7ff ffec 	bl	800b22c <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800b254:	4603      	mov	r3, r0
 800b256:	681c      	ldr	r4, [r3, #0]
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f7f5 ff25 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800b25e:	4603      	mov	r3, r0
 800b260:	4619      	mov	r1, r3
 800b262:	2004      	movs	r0, #4
 800b264:	f7f5 ff14 	bl	8001090 <_ZnwjPv>
 800b268:	4603      	mov	r3, r0
 800b26a:	601c      	str	r4, [r3, #0]
	  }
 800b26c:	bf00      	nop
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	bd90      	pop	{r4, r7, pc}

0800b274 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7f5 ff13 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800b282:	4603      	mov	r3, r0
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4618      	mov	r0, r3
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800b2a2:	b590      	push	{r4, r7, lr}
 800b2a4:	b085      	sub	sp, #20
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	60b9      	str	r1, [r7, #8]
 800b2ac:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800b2ae:	68b8      	ldr	r0, [r7, #8]
 800b2b0:	f7ff ffec 	bl	800b28c <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7f5 fef6 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	4619      	mov	r1, r3
 800b2c0:	2004      	movs	r0, #4
 800b2c2:	f7f5 fee5 	bl	8001090 <_ZnwjPv>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	6013      	str	r3, [r2, #0]
	  }
 800b2cc:	bf00      	nop
 800b2ce:	3714      	adds	r7, #20
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd90      	pop	{r4, r7, pc}

0800b2d4 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7f5 fee3 	bl	80010a8 <_ZNSt9_Any_data9_M_accessEv>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	370c      	adds	r7, #12
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr

0800b302 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>:
      constexpr _Head_base()
 800b302:	b480      	push	{r7}
 800b304:	b083      	sub	sp, #12
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4618      	mov	r0, r3
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4618      	mov	r0, r3
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b32e:	b580      	push	{r7, lr}
 800b330:	b082      	sub	sp, #8
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f890 	bl	800b45c <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>
 800b33c:	4603      	mov	r3, r0
 800b33e:	4618      	mov	r0, r3
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4618      	mov	r0, r3
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4618      	mov	r0, r3
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4618      	mov	r0, r3
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b39e:	b480      	push	{r7}
 800b3a0:	b083      	sub	sp, #12
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8max_sizeERKS2_>:
      max_size(const _Alloc& __a) noexcept
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800b3bc:	2100      	movs	r1, #0
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f857 	bl	800b472 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE11_S_max_sizeIKS2_EEjRT_z>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <_ZSt14__relocate_a_1IPmS0_N2ei7EiAllocImEEET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800b3ce:	b590      	push	{r4, r7, lr}
 800b3d0:	b087      	sub	sp, #28
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	60f8      	str	r0, [r7, #12]
 800b3d6:	60b9      	str	r1, [r7, #8]
 800b3d8:	607a      	str	r2, [r7, #4]
 800b3da:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800b3e0:	e012      	b.n	800b408 <_ZSt14__relocate_a_1IPmS0_N2ei7EiAllocImEEET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800b3e2:	6978      	ldr	r0, [r7, #20]
 800b3e4:	f7fe fb48 	bl	8009a78 <_ZSt11__addressofImEPT_RS0_>
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f7fe fb44 	bl	8009a78 <_ZSt11__addressofImEPT_RS0_>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f000 f846 	bl	800b488 <_ZSt19__relocate_object_aImmN2ei7EiAllocImEEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3304      	adds	r3, #4
 800b400:	60fb      	str	r3, [r7, #12]
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	3304      	adds	r3, #4
 800b406:	617b      	str	r3, [r7, #20]
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d1e8      	bne.n	800b3e2 <_ZSt14__relocate_a_1IPmS0_N2ei7EiAllocImEEET0_T_S5_S4_RT1_+0x14>
      return __cur;
 800b410:	697b      	ldr	r3, [r7, #20]
    }
 800b412:	4618      	mov	r0, r3
 800b414:	371c      	adds	r7, #28
 800b416:	46bd      	mov	sp, r7
 800b418:	bd90      	pop	{r4, r7, pc}

0800b41a <_ZSt4moveIRPmEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800b41a:	b480      	push	{r7}
 800b41c:	b083      	sub	sp, #12
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4618      	mov	r0, r3
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <_ZSteqIPmEbRKSt13move_iteratorIT_ES5_>:
    operator==(const move_iterator<_Iterator>& __x,
 800b430:	b590      	push	{r4, r7, lr}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f83f 	bl	800b4be <_ZNKSt13move_iteratorIPmE4baseEv>
 800b440:	4604      	mov	r4, r0
 800b442:	6838      	ldr	r0, [r7, #0]
 800b444:	f000 f83b 	bl	800b4be <_ZNKSt13move_iteratorIPmE4baseEv>
 800b448:	4603      	mov	r3, r0
 800b44a:	429c      	cmp	r4, r3
 800b44c:	bf0c      	ite	eq
 800b44e:	2301      	moveq	r3, #1
 800b450:	2300      	movne	r3, #0
 800b452:	b2db      	uxtb	r3, r3
 800b454:	4618      	mov	r0, r3
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd90      	pop	{r4, r7, pc}

0800b45c <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4618      	mov	r0, r3
 800b468:	370c      	adds	r7, #12
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE11_S_max_sizeIKS2_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800b472:	b40f      	push	{r0, r1, r2, r3}
 800b474:	b480      	push	{r7}
 800b476:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800b478:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
	}
 800b47c:	4618      	mov	r0, r3
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	b004      	add	sp, #16
 800b486:	4770      	bx	lr

0800b488 <_ZSt19__relocate_object_aImmN2ei7EiAllocImEEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800b494:	68b8      	ldr	r0, [r7, #8]
 800b496:	f7fd fbbe 	bl	8008c16 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 800b49a:	4603      	mov	r3, r0
 800b49c:	461a      	mov	r2, r3
 800b49e:	68f9      	ldr	r1, [r7, #12]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7fe fc20 	bl	8009ce6 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE9constructImJmEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800b4a6:	68b8      	ldr	r0, [r7, #8]
 800b4a8:	f7fe fae6 	bl	8009a78 <_ZSt11__addressofImEPT_RS0_>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7fe fd1e 	bl	8009ef2 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE7destroyImEEvRS2_PT_>
    }
 800b4b6:	bf00      	nop
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <_ZNKSt13move_iteratorIPmE4baseEv>:
      base() const
 800b4be:	b480      	push	{r7}
 800b4c0:	b083      	sub	sp, #12
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	370c      	adds	r7, #12
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
	...

0800b4d8 <_Z41__static_initialization_and_destruction_0ii>:
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d108      	bne.n	800b4fa <_Z41__static_initialization_and_destruction_0ii+0x22>
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d103      	bne.n	800b4fa <_Z41__static_initialization_and_destruction_0ii+0x22>
    .calibration = ei_calibration,
    .categories = ei_classifier_inferencing_categories,
    .object_detection_nms = ei_object_detection_nms
};

ei_impulse_handle_t impulse_handle_369970_0 = ei_impulse_handle_t( &impulse_369970_0 );
 800b4f2:	4909      	ldr	r1, [pc, #36]	; (800b518 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b4f4:	4809      	ldr	r0, [pc, #36]	; (800b51c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800b4f6:	f7f7 fa4e 	bl	8002996 <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d107      	bne.n	800b510 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b506:	4293      	cmp	r3, r2
 800b508:	d102      	bne.n	800b510 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800b50a:	4804      	ldr	r0, [pc, #16]	; (800b51c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800b50c:	f7fb fbcb 	bl	8006ca6 <_ZN19ei_impulse_handle_tD1Ev>
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	0803342c 	.word	0x0803342c
 800b51c:	2000067c 	.word	0x2000067c

0800b520 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 800b520:	b580      	push	{r7, lr}
 800b522:	af00      	add	r7, sp, #0
 800b524:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b528:	2001      	movs	r0, #1
 800b52a:	f7ff ffd5 	bl	800b4d8 <_Z41__static_initialization_and_destruction_0ii>
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 800b530:	b580      	push	{r7, lr}
 800b532:	af00      	add	r7, sp, #0
 800b534:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b538:	2000      	movs	r0, #0
 800b53a:	f7ff ffcd 	bl	800b4d8 <_Z41__static_initialization_and_destruction_0ii>
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b546:	4b0f      	ldr	r3, [pc, #60]	; (800b584 <HAL_MspInit+0x44>)
 800b548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b54a:	4a0e      	ldr	r2, [pc, #56]	; (800b584 <HAL_MspInit+0x44>)
 800b54c:	f043 0301 	orr.w	r3, r3, #1
 800b550:	6613      	str	r3, [r2, #96]	; 0x60
 800b552:	4b0c      	ldr	r3, [pc, #48]	; (800b584 <HAL_MspInit+0x44>)
 800b554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	607b      	str	r3, [r7, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b55e:	4b09      	ldr	r3, [pc, #36]	; (800b584 <HAL_MspInit+0x44>)
 800b560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b562:	4a08      	ldr	r2, [pc, #32]	; (800b584 <HAL_MspInit+0x44>)
 800b564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b568:	6593      	str	r3, [r2, #88]	; 0x58
 800b56a:	4b06      	ldr	r3, [pc, #24]	; (800b584 <HAL_MspInit+0x44>)
 800b56c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b576:	bf00      	nop
 800b578:	370c      	adds	r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	40021000 	.word	0x40021000

0800b588 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a0a      	ldr	r2, [pc, #40]	; (800b5c0 <HAL_CRC_MspInit+0x38>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d10b      	bne.n	800b5b2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800b59a:	4b0a      	ldr	r3, [pc, #40]	; (800b5c4 <HAL_CRC_MspInit+0x3c>)
 800b59c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b59e:	4a09      	ldr	r2, [pc, #36]	; (800b5c4 <HAL_CRC_MspInit+0x3c>)
 800b5a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b5a4:	6493      	str	r3, [r2, #72]	; 0x48
 800b5a6:	4b07      	ldr	r3, [pc, #28]	; (800b5c4 <HAL_CRC_MspInit+0x3c>)
 800b5a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b5ae:	60fb      	str	r3, [r7, #12]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800b5b2:	bf00      	nop
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	40023000 	.word	0x40023000
 800b5c4:	40021000 	.word	0x40021000

0800b5c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b08a      	sub	sp, #40	; 0x28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5d0:	f107 0314 	add.w	r3, r7, #20
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	601a      	str	r2, [r3, #0]
 800b5d8:	605a      	str	r2, [r3, #4]
 800b5da:	609a      	str	r2, [r3, #8]
 800b5dc:	60da      	str	r2, [r3, #12]
 800b5de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a17      	ldr	r2, [pc, #92]	; (800b644 <HAL_UART_MspInit+0x7c>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d128      	bne.n	800b63c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b5ea:	4b17      	ldr	r3, [pc, #92]	; (800b648 <HAL_UART_MspInit+0x80>)
 800b5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ee:	4a16      	ldr	r2, [pc, #88]	; (800b648 <HAL_UART_MspInit+0x80>)
 800b5f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5f4:	6593      	str	r3, [r2, #88]	; 0x58
 800b5f6:	4b14      	ldr	r3, [pc, #80]	; (800b648 <HAL_UART_MspInit+0x80>)
 800b5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5fe:	613b      	str	r3, [r7, #16]
 800b600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b602:	4b11      	ldr	r3, [pc, #68]	; (800b648 <HAL_UART_MspInit+0x80>)
 800b604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b606:	4a10      	ldr	r2, [pc, #64]	; (800b648 <HAL_UART_MspInit+0x80>)
 800b608:	f043 0301 	orr.w	r3, r3, #1
 800b60c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b60e:	4b0e      	ldr	r3, [pc, #56]	; (800b648 <HAL_UART_MspInit+0x80>)
 800b610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800b61a:	230c      	movs	r3, #12
 800b61c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b61e:	2302      	movs	r3, #2
 800b620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b622:	2300      	movs	r3, #0
 800b624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b626:	2303      	movs	r3, #3
 800b628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b62a:	2307      	movs	r3, #7
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b62e:	f107 0314 	add.w	r3, r7, #20
 800b632:	4619      	mov	r1, r3
 800b634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b638:	f000 fe90 	bl	800c35c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800b63c:	bf00      	nop
 800b63e:	3728      	adds	r7, #40	; 0x28
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	40004400 	.word	0x40004400
 800b648:	40021000 	.word	0x40021000

0800b64c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b088      	sub	sp, #32
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a36      	ldr	r2, [pc, #216]	; (800b734 <HAL_SAI_MspInit+0xe8>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d166      	bne.n	800b72c <HAL_SAI_MspInit+0xe0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800b65e:	4b36      	ldr	r3, [pc, #216]	; (800b738 <HAL_SAI_MspInit+0xec>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10b      	bne.n	800b67e <HAL_SAI_MspInit+0x32>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800b666:	4b35      	ldr	r3, [pc, #212]	; (800b73c <HAL_SAI_MspInit+0xf0>)
 800b668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b66a:	4a34      	ldr	r2, [pc, #208]	; (800b73c <HAL_SAI_MspInit+0xf0>)
 800b66c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b670:	6613      	str	r3, [r2, #96]	; 0x60
 800b672:	4b32      	ldr	r3, [pc, #200]	; (800b73c <HAL_SAI_MspInit+0xf0>)
 800b674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b67a:	60bb      	str	r3, [r7, #8]
 800b67c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 800b67e:	4b2e      	ldr	r3, [pc, #184]	; (800b738 <HAL_SAI_MspInit+0xec>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	3301      	adds	r3, #1
 800b684:	4a2c      	ldr	r2, [pc, #176]	; (800b738 <HAL_SAI_MspInit+0xec>)
 800b686:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PA4     ------> SAI1_FS_B
    PB3 (JTDO-TRACESWO)     ------> SAI1_SCK_B
    PB5     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b688:	2310      	movs	r3, #16
 800b68a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b68c:	2302      	movs	r3, #2
 800b68e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b690:	2300      	movs	r3, #0
 800b692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b694:	2300      	movs	r3, #0
 800b696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800b698:	230d      	movs	r3, #13
 800b69a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b69c:	f107 030c 	add.w	r3, r7, #12
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b6a6:	f000 fe59 	bl	800c35c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800b6aa:	2328      	movs	r3, #40	; 0x28
 800b6ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800b6ba:	230d      	movs	r3, #13
 800b6bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6be:	f107 030c 	add.w	r3, r7, #12
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	481e      	ldr	r0, [pc, #120]	; (800b740 <HAL_SAI_MspInit+0xf4>)
 800b6c6:	f000 fe49 	bl	800c35c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Channel2;
 800b6ca:	4b1e      	ldr	r3, [pc, #120]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b6cc:	4a1e      	ldr	r2, [pc, #120]	; (800b748 <HAL_SAI_MspInit+0xfc>)
 800b6ce:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_1;
 800b6d0:	4b1c      	ldr	r3, [pc, #112]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b6d6:	4b1b      	ldr	r3, [pc, #108]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800b6dc:	4b19      	ldr	r3, [pc, #100]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800b6e2:	4b18      	ldr	r3, [pc, #96]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b6e4:	2280      	movs	r2, #128	; 0x80
 800b6e6:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b6e8:	4b16      	ldr	r3, [pc, #88]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b6ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6ee:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b6f0:	4b14      	ldr	r3, [pc, #80]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b6f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6f6:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800b6f8:	4b12      	ldr	r3, [pc, #72]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 800b6fe:	4b11      	ldr	r3, [pc, #68]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b700:	2200      	movs	r2, #0
 800b702:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800b704:	480f      	ldr	r0, [pc, #60]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b706:	f000 fbf3 	bl	800bef0 <HAL_DMA_Init>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <HAL_SAI_MspInit+0xc8>
    {
      Error_Handler();
 800b710:	f7fd fa7a 	bl	8008c08 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a0b      	ldr	r2, [pc, #44]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b718:	671a      	str	r2, [r3, #112]	; 0x70
 800b71a:	4a0a      	ldr	r2, [pc, #40]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a08      	ldr	r2, [pc, #32]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b724:	66da      	str	r2, [r3, #108]	; 0x6c
 800b726:	4a07      	ldr	r2, [pc, #28]	; (800b744 <HAL_SAI_MspInit+0xf8>)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 800b72c:	bf00      	nop
 800b72e:	3720      	adds	r7, #32
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	40015424 	.word	0x40015424
 800b738:	20006c38 	.word	0x20006c38
 800b73c:	40021000 	.word	0x40021000
 800b740:	48000400 	.word	0x48000400
 800b744:	20000754 	.word	0x20000754
 800b748:	4002041c 	.word	0x4002041c

0800b74c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b74c:	b480      	push	{r7}
 800b74e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b750:	bf00      	nop
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b75a:	b480      	push	{r7}
 800b75c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b75e:	e7fe      	b.n	800b75e <HardFault_Handler+0x4>

0800b760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b760:	b480      	push	{r7}
 800b762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b764:	e7fe      	b.n	800b764 <MemManage_Handler+0x4>

0800b766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b766:	b480      	push	{r7}
 800b768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b76a:	e7fe      	b.n	800b76a <BusFault_Handler+0x4>

0800b76c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b76c:	b480      	push	{r7}
 800b76e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b770:	e7fe      	b.n	800b770 <UsageFault_Handler+0x4>

0800b772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b772:	b480      	push	{r7}
 800b774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b776:	bf00      	nop
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b780:	b480      	push	{r7}
 800b782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b784:	bf00      	nop
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b78e:	b480      	push	{r7}
 800b790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b792:	bf00      	nop
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b7a0:	f000 f98c 	bl	800babc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b7a4:	bf00      	nop
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800b7ac:	4802      	ldr	r0, [pc, #8]	; (800b7b8 <DMA2_Channel2_IRQHandler+0x10>)
 800b7ae:	f000 fcf5 	bl	800c19c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800b7b2:	bf00      	nop
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20000754 	.word	0x20000754

0800b7bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	af00      	add	r7, sp, #0
	return 1;
 800b7c0:	2301      	movs	r3, #1
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <_kill>:

int _kill(int pid, int sig)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b7d6:	f023 f85b 	bl	802e890 <__errno>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2216      	movs	r2, #22
 800b7de:	601a      	str	r2, [r3, #0]
	return -1;
 800b7e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <_exit>:

void _exit (int status)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b7f4:	f04f 31ff 	mov.w	r1, #4294967295
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff ffe7 	bl	800b7cc <_kill>
	while (1) {}		/* Make sure we hang here */
 800b7fe:	e7fe      	b.n	800b7fe <_exit+0x12>

0800b800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b80c:	2300      	movs	r3, #0
 800b80e:	617b      	str	r3, [r7, #20]
 800b810:	e00a      	b.n	800b828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b812:	f3af 8000 	nop.w
 800b816:	4601      	mov	r1, r0
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	60ba      	str	r2, [r7, #8]
 800b81e:	b2ca      	uxtb	r2, r1
 800b820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	3301      	adds	r3, #1
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	dbf0      	blt.n	800b812 <_read+0x12>
	}

return len;
 800b830:	687b      	ldr	r3, [r7, #4]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3718      	adds	r7, #24
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b086      	sub	sp, #24
 800b83e:	af00      	add	r7, sp, #0
 800b840:	60f8      	str	r0, [r7, #12]
 800b842:	60b9      	str	r1, [r7, #8]
 800b844:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b846:	2300      	movs	r3, #0
 800b848:	617b      	str	r3, [r7, #20]
 800b84a:	e009      	b.n	800b860 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	1c5a      	adds	r2, r3, #1
 800b850:	60ba      	str	r2, [r7, #8]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	4618      	mov	r0, r3
 800b856:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	3301      	adds	r3, #1
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	429a      	cmp	r2, r3
 800b866:	dbf1      	blt.n	800b84c <_write+0x12>
	}
	return len;
 800b868:	687b      	ldr	r3, [r7, #4]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3718      	adds	r7, #24
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <_close>:

int _close(int file)
{
 800b872:	b480      	push	{r7}
 800b874:	b083      	sub	sp, #12
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
	return -1;
 800b87a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b87e:	4618      	mov	r0, r3
 800b880:	370c      	adds	r7, #12
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr

0800b88a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b083      	sub	sp, #12
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b89a:	605a      	str	r2, [r3, #4]
	return 0;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <_isatty>:

int _isatty(int file)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b083      	sub	sp, #12
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
	return 1;
 800b8b2:	2301      	movs	r3, #1
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
	return 0;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3714      	adds	r7, #20
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
	...

0800b8dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b8e4:	4a14      	ldr	r2, [pc, #80]	; (800b938 <_sbrk+0x5c>)
 800b8e6:	4b15      	ldr	r3, [pc, #84]	; (800b93c <_sbrk+0x60>)
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b8f0:	4b13      	ldr	r3, [pc, #76]	; (800b940 <_sbrk+0x64>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d102      	bne.n	800b8fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b8f8:	4b11      	ldr	r3, [pc, #68]	; (800b940 <_sbrk+0x64>)
 800b8fa:	4a12      	ldr	r2, [pc, #72]	; (800b944 <_sbrk+0x68>)
 800b8fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b8fe:	4b10      	ldr	r3, [pc, #64]	; (800b940 <_sbrk+0x64>)
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4413      	add	r3, r2
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d207      	bcs.n	800b91c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b90c:	f022 ffc0 	bl	802e890 <__errno>
 800b910:	4603      	mov	r3, r0
 800b912:	220c      	movs	r2, #12
 800b914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b916:	f04f 33ff 	mov.w	r3, #4294967295
 800b91a:	e009      	b.n	800b930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b91c:	4b08      	ldr	r3, [pc, #32]	; (800b940 <_sbrk+0x64>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b922:	4b07      	ldr	r3, [pc, #28]	; (800b940 <_sbrk+0x64>)
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4413      	add	r3, r2
 800b92a:	4a05      	ldr	r2, [pc, #20]	; (800b940 <_sbrk+0x64>)
 800b92c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b92e:	68fb      	ldr	r3, [r7, #12]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3718      	adds	r7, #24
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	20018000 	.word	0x20018000
 800b93c:	00000400 	.word	0x00000400
 800b940:	20006c3c 	.word	0x20006c3c
 800b944:	200070e0 	.word	0x200070e0

0800b948 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b948:	b480      	push	{r7}
 800b94a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b94c:	4b17      	ldr	r3, [pc, #92]	; (800b9ac <SystemInit+0x64>)
 800b94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b952:	4a16      	ldr	r2, [pc, #88]	; (800b9ac <SystemInit+0x64>)
 800b954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b95c:	4b14      	ldr	r3, [pc, #80]	; (800b9b0 <SystemInit+0x68>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a13      	ldr	r2, [pc, #76]	; (800b9b0 <SystemInit+0x68>)
 800b962:	f043 0301 	orr.w	r3, r3, #1
 800b966:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800b968:	4b11      	ldr	r3, [pc, #68]	; (800b9b0 <SystemInit+0x68>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800b96e:	4b10      	ldr	r3, [pc, #64]	; (800b9b0 <SystemInit+0x68>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a0f      	ldr	r2, [pc, #60]	; (800b9b0 <SystemInit+0x68>)
 800b974:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800b978:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800b97c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800b97e:	4b0c      	ldr	r3, [pc, #48]	; (800b9b0 <SystemInit+0x68>)
 800b980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b984:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b986:	4b0a      	ldr	r3, [pc, #40]	; (800b9b0 <SystemInit+0x68>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a09      	ldr	r2, [pc, #36]	; (800b9b0 <SystemInit+0x68>)
 800b98c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b990:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800b992:	4b07      	ldr	r3, [pc, #28]	; (800b9b0 <SystemInit+0x68>)
 800b994:	2200      	movs	r2, #0
 800b996:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b998:	4b04      	ldr	r3, [pc, #16]	; (800b9ac <SystemInit+0x64>)
 800b99a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b99e:	609a      	str	r2, [r3, #8]
#endif
}
 800b9a0:	bf00      	nop
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	e000ed00 	.word	0xe000ed00
 800b9b0:	40021000 	.word	0x40021000

0800b9b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b9b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b9ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800b9b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800b9ba:	e003      	b.n	800b9c4 <LoopCopyDataInit>

0800b9bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800b9bc:	4b0c      	ldr	r3, [pc, #48]	; (800b9f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800b9be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800b9c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800b9c2:	3104      	adds	r1, #4

0800b9c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800b9c4:	480b      	ldr	r0, [pc, #44]	; (800b9f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800b9c6:	4b0c      	ldr	r3, [pc, #48]	; (800b9f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800b9c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800b9ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800b9cc:	d3f6      	bcc.n	800b9bc <CopyDataInit>
	ldr	r2, =_sbss
 800b9ce:	4a0b      	ldr	r2, [pc, #44]	; (800b9fc <LoopForever+0x12>)
	b	LoopFillZerobss
 800b9d0:	e002      	b.n	800b9d8 <LoopFillZerobss>

0800b9d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800b9d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800b9d4:	f842 3b04 	str.w	r3, [r2], #4

0800b9d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800b9d8:	4b09      	ldr	r3, [pc, #36]	; (800ba00 <LoopForever+0x16>)
	cmp	r2, r3
 800b9da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800b9dc:	d3f9      	bcc.n	800b9d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b9de:	f7ff ffb3 	bl	800b948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b9e2:	f022 ff5b 	bl	802e89c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b9e6:	f7fc fcd7 	bl	8008398 <main>

0800b9ea <LoopForever>:

LoopForever:
    b LoopForever
 800b9ea:	e7fe      	b.n	800b9ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b9ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800b9f0:	0803574c 	.word	0x0803574c
	ldr	r0, =_sdata
 800b9f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800b9f8:	20000644 	.word	0x20000644
	ldr	r2, =_sbss
 800b9fc:	20000648 	.word	0x20000648
	ldr	r3, = _ebss
 800ba00:	200070e0 	.word	0x200070e0

0800ba04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ba04:	e7fe      	b.n	800ba04 <ADC1_2_IRQHandler>
	...

0800ba08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ba12:	4b0c      	ldr	r3, [pc, #48]	; (800ba44 <HAL_Init+0x3c>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a0b      	ldr	r2, [pc, #44]	; (800ba44 <HAL_Init+0x3c>)
 800ba18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ba1e:	2003      	movs	r0, #3
 800ba20:	f000 f93a 	bl	800bc98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ba24:	2000      	movs	r0, #0
 800ba26:	f000 f80f 	bl	800ba48 <HAL_InitTick>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	71fb      	strb	r3, [r7, #7]
 800ba34:	e001      	b.n	800ba3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ba36:	f7ff fd83 	bl	800b540 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3708      	adds	r7, #8
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	40022000 	.word	0x40022000

0800ba48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800ba54:	4b16      	ldr	r3, [pc, #88]	; (800bab0 <HAL_InitTick+0x68>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d022      	beq.n	800baa2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800ba5c:	4b15      	ldr	r3, [pc, #84]	; (800bab4 <HAL_InitTick+0x6c>)
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	4b13      	ldr	r3, [pc, #76]	; (800bab0 <HAL_InitTick+0x68>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ba68:	fbb1 f3f3 	udiv	r3, r1, r3
 800ba6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 f946 	bl	800bd02 <HAL_SYSTICK_Config>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10f      	bne.n	800ba9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b0f      	cmp	r3, #15
 800ba80:	d809      	bhi.n	800ba96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ba82:	2200      	movs	r2, #0
 800ba84:	6879      	ldr	r1, [r7, #4]
 800ba86:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8a:	f000 f910 	bl	800bcae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ba8e:	4a0a      	ldr	r2, [pc, #40]	; (800bab8 <HAL_InitTick+0x70>)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6013      	str	r3, [r2, #0]
 800ba94:	e007      	b.n	800baa6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	73fb      	strb	r3, [r7, #15]
 800ba9a:	e004      	b.n	800baa6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	73fb      	strb	r3, [r7, #15]
 800baa0:	e001      	b.n	800baa6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3710      	adds	r7, #16
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20000068 	.word	0x20000068
 800bab4:	20000060 	.word	0x20000060
 800bab8:	20000064 	.word	0x20000064

0800babc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800babc:	b480      	push	{r7}
 800babe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bac0:	4b05      	ldr	r3, [pc, #20]	; (800bad8 <HAL_IncTick+0x1c>)
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	4b05      	ldr	r3, [pc, #20]	; (800badc <HAL_IncTick+0x20>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4413      	add	r3, r2
 800baca:	4a03      	ldr	r2, [pc, #12]	; (800bad8 <HAL_IncTick+0x1c>)
 800bacc:	6013      	str	r3, [r2, #0]
}
 800bace:	bf00      	nop
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	20006c40 	.word	0x20006c40
 800badc:	20000068 	.word	0x20000068

0800bae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bae0:	b480      	push	{r7}
 800bae2:	af00      	add	r7, sp, #0
  return uwTick;
 800bae4:	4b03      	ldr	r3, [pc, #12]	; (800baf4 <HAL_GetTick+0x14>)
 800bae6:	681b      	ldr	r3, [r3, #0]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	20006c40 	.word	0x20006c40

0800baf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f003 0307 	and.w	r3, r3, #7
 800bb06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bb08:	4b0c      	ldr	r3, [pc, #48]	; (800bb3c <__NVIC_SetPriorityGrouping+0x44>)
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bb14:	4013      	ands	r3, r2
 800bb16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bb20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bb24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bb2a:	4a04      	ldr	r2, [pc, #16]	; (800bb3c <__NVIC_SetPriorityGrouping+0x44>)
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	60d3      	str	r3, [r2, #12]
}
 800bb30:	bf00      	nop
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	e000ed00 	.word	0xe000ed00

0800bb40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bb40:	b480      	push	{r7}
 800bb42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bb44:	4b04      	ldr	r3, [pc, #16]	; (800bb58 <__NVIC_GetPriorityGrouping+0x18>)
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	0a1b      	lsrs	r3, r3, #8
 800bb4a:	f003 0307 	and.w	r3, r3, #7
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr
 800bb58:	e000ed00 	.word	0xe000ed00

0800bb5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	4603      	mov	r3, r0
 800bb64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	db0b      	blt.n	800bb86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bb6e:	79fb      	ldrb	r3, [r7, #7]
 800bb70:	f003 021f 	and.w	r2, r3, #31
 800bb74:	4907      	ldr	r1, [pc, #28]	; (800bb94 <__NVIC_EnableIRQ+0x38>)
 800bb76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb7a:	095b      	lsrs	r3, r3, #5
 800bb7c:	2001      	movs	r0, #1
 800bb7e:	fa00 f202 	lsl.w	r2, r0, r2
 800bb82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bb86:	bf00      	nop
 800bb88:	370c      	adds	r7, #12
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	e000e100 	.word	0xe000e100

0800bb98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	4603      	mov	r3, r0
 800bba0:	6039      	str	r1, [r7, #0]
 800bba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	db0a      	blt.n	800bbc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	490c      	ldr	r1, [pc, #48]	; (800bbe4 <__NVIC_SetPriority+0x4c>)
 800bbb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbb6:	0112      	lsls	r2, r2, #4
 800bbb8:	b2d2      	uxtb	r2, r2
 800bbba:	440b      	add	r3, r1
 800bbbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bbc0:	e00a      	b.n	800bbd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	4908      	ldr	r1, [pc, #32]	; (800bbe8 <__NVIC_SetPriority+0x50>)
 800bbc8:	79fb      	ldrb	r3, [r7, #7]
 800bbca:	f003 030f 	and.w	r3, r3, #15
 800bbce:	3b04      	subs	r3, #4
 800bbd0:	0112      	lsls	r2, r2, #4
 800bbd2:	b2d2      	uxtb	r2, r2
 800bbd4:	440b      	add	r3, r1
 800bbd6:	761a      	strb	r2, [r3, #24]
}
 800bbd8:	bf00      	nop
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr
 800bbe4:	e000e100 	.word	0xe000e100
 800bbe8:	e000ed00 	.word	0xe000ed00

0800bbec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b089      	sub	sp, #36	; 0x24
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f003 0307 	and.w	r3, r3, #7
 800bbfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	f1c3 0307 	rsb	r3, r3, #7
 800bc06:	2b04      	cmp	r3, #4
 800bc08:	bf28      	it	cs
 800bc0a:	2304      	movcs	r3, #4
 800bc0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	3304      	adds	r3, #4
 800bc12:	2b06      	cmp	r3, #6
 800bc14:	d902      	bls.n	800bc1c <NVIC_EncodePriority+0x30>
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	3b03      	subs	r3, #3
 800bc1a:	e000      	b.n	800bc1e <NVIC_EncodePriority+0x32>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc20:	f04f 32ff 	mov.w	r2, #4294967295
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	fa02 f303 	lsl.w	r3, r2, r3
 800bc2a:	43da      	mvns	r2, r3
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	401a      	ands	r2, r3
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bc34:	f04f 31ff 	mov.w	r1, #4294967295
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc3e:	43d9      	mvns	r1, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc44:	4313      	orrs	r3, r2
         );
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3724      	adds	r7, #36	; 0x24
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
	...

0800bc54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc64:	d301      	bcc.n	800bc6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bc66:	2301      	movs	r3, #1
 800bc68:	e00f      	b.n	800bc8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bc6a:	4a0a      	ldr	r2, [pc, #40]	; (800bc94 <SysTick_Config+0x40>)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bc72:	210f      	movs	r1, #15
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	f7ff ff8e 	bl	800bb98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bc7c:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <SysTick_Config+0x40>)
 800bc7e:	2200      	movs	r2, #0
 800bc80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bc82:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <SysTick_Config+0x40>)
 800bc84:	2207      	movs	r2, #7
 800bc86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	e000e010 	.word	0xe000e010

0800bc98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff ff29 	bl	800baf8 <__NVIC_SetPriorityGrouping>
}
 800bca6:	bf00      	nop
 800bca8:	3708      	adds	r7, #8
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b086      	sub	sp, #24
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	60b9      	str	r1, [r7, #8]
 800bcb8:	607a      	str	r2, [r7, #4]
 800bcba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bcc0:	f7ff ff3e 	bl	800bb40 <__NVIC_GetPriorityGrouping>
 800bcc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	68b9      	ldr	r1, [r7, #8]
 800bcca:	6978      	ldr	r0, [r7, #20]
 800bccc:	f7ff ff8e 	bl	800bbec <NVIC_EncodePriority>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7ff ff5d 	bl	800bb98 <__NVIC_SetPriority>
}
 800bcde:	bf00      	nop
 800bce0:	3718      	adds	r7, #24
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b082      	sub	sp, #8
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	4603      	mov	r3, r0
 800bcee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bcf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7ff ff31 	bl	800bb5c <__NVIC_EnableIRQ>
}
 800bcfa:	bf00      	nop
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b082      	sub	sp, #8
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7ff ffa2 	bl	800bc54 <SysTick_Config>
 800bd10:	4603      	mov	r3, r0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
	...

0800bd1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e054      	b.n	800bdd8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	7f5b      	ldrb	r3, [r3, #29]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d105      	bne.n	800bd44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7ff fc22 	bl	800b588 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2202      	movs	r2, #2
 800bd48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	791b      	ldrb	r3, [r3, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10c      	bne.n	800bd6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a22      	ldr	r2, [pc, #136]	; (800bde0 <HAL_CRC_Init+0xc4>)
 800bd58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	689a      	ldr	r2, [r3, #8]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f022 0218 	bic.w	r2, r2, #24
 800bd68:	609a      	str	r2, [r3, #8]
 800bd6a:	e00c      	b.n	800bd86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6899      	ldr	r1, [r3, #8]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	461a      	mov	r2, r3
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f834 	bl	800bde4 <HAL_CRCEx_Polynomial_Set>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e028      	b.n	800bdd8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	795b      	ldrb	r3, [r3, #5]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d105      	bne.n	800bd9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f04f 32ff 	mov.w	r2, #4294967295
 800bd96:	611a      	str	r2, [r3, #16]
 800bd98:	e004      	b.n	800bda4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	6912      	ldr	r2, [r2, #16]
 800bda2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	695a      	ldr	r2, [r3, #20]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	699a      	ldr	r2, [r3, #24]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	04c11db7 	.word	0x04c11db7

0800bde4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b087      	sub	sp, #28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800bdf4:	231f      	movs	r3, #31
 800bdf6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800bdf8:	bf00      	nop
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	1e5a      	subs	r2, r3, #1
 800bdfe:	613a      	str	r2, [r7, #16]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d009      	beq.n	800be18 <HAL_CRCEx_Polynomial_Set+0x34>
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	f003 031f 	and.w	r3, r3, #31
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	fa22 f303 	lsr.w	r3, r2, r3
 800be10:	f003 0301 	and.w	r3, r3, #1
 800be14:	2b00      	cmp	r3, #0
 800be16:	d0f0      	beq.n	800bdfa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b18      	cmp	r3, #24
 800be1c:	d846      	bhi.n	800beac <HAL_CRCEx_Polynomial_Set+0xc8>
 800be1e:	a201      	add	r2, pc, #4	; (adr r2, 800be24 <HAL_CRCEx_Polynomial_Set+0x40>)
 800be20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be24:	0800beb3 	.word	0x0800beb3
 800be28:	0800bead 	.word	0x0800bead
 800be2c:	0800bead 	.word	0x0800bead
 800be30:	0800bead 	.word	0x0800bead
 800be34:	0800bead 	.word	0x0800bead
 800be38:	0800bead 	.word	0x0800bead
 800be3c:	0800bead 	.word	0x0800bead
 800be40:	0800bead 	.word	0x0800bead
 800be44:	0800bea1 	.word	0x0800bea1
 800be48:	0800bead 	.word	0x0800bead
 800be4c:	0800bead 	.word	0x0800bead
 800be50:	0800bead 	.word	0x0800bead
 800be54:	0800bead 	.word	0x0800bead
 800be58:	0800bead 	.word	0x0800bead
 800be5c:	0800bead 	.word	0x0800bead
 800be60:	0800bead 	.word	0x0800bead
 800be64:	0800be95 	.word	0x0800be95
 800be68:	0800bead 	.word	0x0800bead
 800be6c:	0800bead 	.word	0x0800bead
 800be70:	0800bead 	.word	0x0800bead
 800be74:	0800bead 	.word	0x0800bead
 800be78:	0800bead 	.word	0x0800bead
 800be7c:	0800bead 	.word	0x0800bead
 800be80:	0800bead 	.word	0x0800bead
 800be84:	0800be89 	.word	0x0800be89
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	2b06      	cmp	r3, #6
 800be8c:	d913      	bls.n	800beb6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800be92:	e010      	b.n	800beb6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	2b07      	cmp	r3, #7
 800be98:	d90f      	bls.n	800beba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800be9e:	e00c      	b.n	800beba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2b0f      	cmp	r3, #15
 800bea4:	d90b      	bls.n	800bebe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800beaa:	e008      	b.n	800bebe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	75fb      	strb	r3, [r7, #23]
      break;
 800beb0:	e006      	b.n	800bec0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800beb2:	bf00      	nop
 800beb4:	e004      	b.n	800bec0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800beb6:	bf00      	nop
 800beb8:	e002      	b.n	800bec0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800beba:	bf00      	nop
 800bebc:	e000      	b.n	800bec0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bebe:	bf00      	nop
  }
  if (status == HAL_OK)
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10d      	bne.n	800bee2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	f023 0118 	bic.w	r1, r3, #24
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	430a      	orrs	r2, r1
 800bee0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800bee2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	371c      	adds	r7, #28
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d101      	bne.n	800bf02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800befe:	2301      	movs	r3, #1
 800bf00:	e098      	b.n	800c034 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	4b4d      	ldr	r3, [pc, #308]	; (800c040 <HAL_DMA_Init+0x150>)
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d80f      	bhi.n	800bf2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	4b4b      	ldr	r3, [pc, #300]	; (800c044 <HAL_DMA_Init+0x154>)
 800bf16:	4413      	add	r3, r2
 800bf18:	4a4b      	ldr	r2, [pc, #300]	; (800c048 <HAL_DMA_Init+0x158>)
 800bf1a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf1e:	091b      	lsrs	r3, r3, #4
 800bf20:	009a      	lsls	r2, r3, #2
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a48      	ldr	r2, [pc, #288]	; (800c04c <HAL_DMA_Init+0x15c>)
 800bf2a:	641a      	str	r2, [r3, #64]	; 0x40
 800bf2c:	e00e      	b.n	800bf4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	461a      	mov	r2, r3
 800bf34:	4b46      	ldr	r3, [pc, #280]	; (800c050 <HAL_DMA_Init+0x160>)
 800bf36:	4413      	add	r3, r2
 800bf38:	4a43      	ldr	r2, [pc, #268]	; (800c048 <HAL_DMA_Init+0x158>)
 800bf3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf3e:	091b      	lsrs	r3, r3, #4
 800bf40:	009a      	lsls	r2, r3, #2
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a42      	ldr	r2, [pc, #264]	; (800c054 <HAL_DMA_Init+0x164>)
 800bf4a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2202      	movs	r2, #2
 800bf50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800bf62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800bf70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfa6:	d039      	beq.n	800c01c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfac:	4a27      	ldr	r2, [pc, #156]	; (800c04c <HAL_DMA_Init+0x15c>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d11a      	bne.n	800bfe8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800bfb2:	4b29      	ldr	r3, [pc, #164]	; (800c058 <HAL_DMA_Init+0x168>)
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfba:	f003 031c 	and.w	r3, r3, #28
 800bfbe:	210f      	movs	r1, #15
 800bfc0:	fa01 f303 	lsl.w	r3, r1, r3
 800bfc4:	43db      	mvns	r3, r3
 800bfc6:	4924      	ldr	r1, [pc, #144]	; (800c058 <HAL_DMA_Init+0x168>)
 800bfc8:	4013      	ands	r3, r2
 800bfca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800bfcc:	4b22      	ldr	r3, [pc, #136]	; (800c058 <HAL_DMA_Init+0x168>)
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6859      	ldr	r1, [r3, #4]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd8:	f003 031c 	and.w	r3, r3, #28
 800bfdc:	fa01 f303 	lsl.w	r3, r1, r3
 800bfe0:	491d      	ldr	r1, [pc, #116]	; (800c058 <HAL_DMA_Init+0x168>)
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	600b      	str	r3, [r1, #0]
 800bfe6:	e019      	b.n	800c01c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800bfe8:	4b1c      	ldr	r3, [pc, #112]	; (800c05c <HAL_DMA_Init+0x16c>)
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bff0:	f003 031c 	and.w	r3, r3, #28
 800bff4:	210f      	movs	r1, #15
 800bff6:	fa01 f303 	lsl.w	r3, r1, r3
 800bffa:	43db      	mvns	r3, r3
 800bffc:	4917      	ldr	r1, [pc, #92]	; (800c05c <HAL_DMA_Init+0x16c>)
 800bffe:	4013      	ands	r3, r2
 800c000:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800c002:	4b16      	ldr	r3, [pc, #88]	; (800c05c <HAL_DMA_Init+0x16c>)
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6859      	ldr	r1, [r3, #4]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c00e:	f003 031c 	and.w	r3, r3, #28
 800c012:	fa01 f303 	lsl.w	r3, r1, r3
 800c016:	4911      	ldr	r1, [pc, #68]	; (800c05c <HAL_DMA_Init+0x16c>)
 800c018:	4313      	orrs	r3, r2
 800c01a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	40020407 	.word	0x40020407
 800c044:	bffdfff8 	.word	0xbffdfff8
 800c048:	cccccccd 	.word	0xcccccccd
 800c04c:	40020000 	.word	0x40020000
 800c050:	bffdfbf8 	.word	0xbffdfbf8
 800c054:	40020400 	.word	0x40020400
 800c058:	400200a8 	.word	0x400200a8
 800c05c:	400204a8 	.word	0x400204a8

0800c060 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d101      	bne.n	800c080 <HAL_DMA_Start_IT+0x20>
 800c07c:	2302      	movs	r3, #2
 800c07e:	e04b      	b.n	800c118 <HAL_DMA_Start_IT+0xb8>
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2201      	movs	r2, #1
 800c084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b01      	cmp	r3, #1
 800c092:	d13a      	bne.n	800c10a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2202      	movs	r2, #2
 800c098:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f022 0201 	bic.w	r2, r2, #1
 800c0b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	68b9      	ldr	r1, [r7, #8]
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f000 f91e 	bl	800c2fa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d008      	beq.n	800c0d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f042 020e 	orr.w	r2, r2, #14
 800c0d4:	601a      	str	r2, [r3, #0]
 800c0d6:	e00f      	b.n	800c0f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f022 0204 	bic.w	r2, r2, #4
 800c0e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f042 020a 	orr.w	r2, r2, #10
 800c0f6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f042 0201 	orr.w	r2, r2, #1
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	e005      	b.n	800c116 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c112:	2302      	movs	r3, #2
 800c114:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c116:	7dfb      	ldrb	r3, [r7, #23]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3718      	adds	r7, #24
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c128:	2300      	movs	r3, #0
 800c12a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b02      	cmp	r3, #2
 800c136:	d008      	beq.n	800c14a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2204      	movs	r2, #4
 800c13c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800c146:	2301      	movs	r3, #1
 800c148:	e022      	b.n	800c190 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f022 020e 	bic.w	r2, r2, #14
 800c158:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f022 0201 	bic.w	r2, r2, #1
 800c168:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c16e:	f003 021c 	and.w	r2, r3, #28
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c176:	2101      	movs	r1, #1
 800c178:	fa01 f202 	lsl.w	r2, r1, r2
 800c17c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800c18e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800c190:	4618      	mov	r0, r3
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1b8:	f003 031c 	and.w	r3, r3, #28
 800c1bc:	2204      	movs	r2, #4
 800c1be:	409a      	lsls	r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d026      	beq.n	800c216 <HAL_DMA_IRQHandler+0x7a>
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	f003 0304 	and.w	r3, r3, #4
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d021      	beq.n	800c216 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 0320 	and.w	r3, r3, #32
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d107      	bne.n	800c1f0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f022 0204 	bic.w	r2, r2, #4
 800c1ee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1f4:	f003 021c 	and.w	r2, r3, #28
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fc:	2104      	movs	r1, #4
 800c1fe:	fa01 f202 	lsl.w	r2, r1, r2
 800c202:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d071      	beq.n	800c2f0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800c214:	e06c      	b.n	800c2f0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c21a:	f003 031c 	and.w	r3, r3, #28
 800c21e:	2202      	movs	r2, #2
 800c220:	409a      	lsls	r2, r3
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	4013      	ands	r3, r2
 800c226:	2b00      	cmp	r3, #0
 800c228:	d02e      	beq.n	800c288 <HAL_DMA_IRQHandler+0xec>
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	f003 0302 	and.w	r3, r3, #2
 800c230:	2b00      	cmp	r3, #0
 800c232:	d029      	beq.n	800c288 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f003 0320 	and.w	r3, r3, #32
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10b      	bne.n	800c25a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f022 020a 	bic.w	r2, r2, #10
 800c250:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2201      	movs	r2, #1
 800c256:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c25e:	f003 021c 	and.w	r2, r3, #28
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c266:	2102      	movs	r1, #2
 800c268:	fa01 f202 	lsl.w	r2, r1, r2
 800c26c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d038      	beq.n	800c2f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800c286:	e033      	b.n	800c2f0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c28c:	f003 031c 	and.w	r3, r3, #28
 800c290:	2208      	movs	r2, #8
 800c292:	409a      	lsls	r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	4013      	ands	r3, r2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d02a      	beq.n	800c2f2 <HAL_DMA_IRQHandler+0x156>
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	f003 0308 	and.w	r3, r3, #8
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d025      	beq.n	800c2f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f022 020e 	bic.w	r2, r2, #14
 800c2b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ba:	f003 021c 	and.w	r2, r3, #28
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	fa01 f202 	lsl.w	r2, r1, r2
 800c2c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d004      	beq.n	800c2f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c2f0:	bf00      	nop
 800c2f2:	bf00      	nop
}
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c2fa:	b480      	push	{r7}
 800c2fc:	b085      	sub	sp, #20
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	60f8      	str	r0, [r7, #12]
 800c302:	60b9      	str	r1, [r7, #8]
 800c304:	607a      	str	r2, [r7, #4]
 800c306:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c30c:	f003 021c 	and.w	r2, r3, #28
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c314:	2101      	movs	r1, #1
 800c316:	fa01 f202 	lsl.w	r2, r1, r2
 800c31a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	2b10      	cmp	r3, #16
 800c32a:	d108      	bne.n	800c33e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c33c:	e007      	b.n	800c34e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68ba      	ldr	r2, [r7, #8]
 800c344:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	60da      	str	r2, [r3, #12]
}
 800c34e:	bf00      	nop
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
	...

0800c35c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b087      	sub	sp, #28
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c366:	2300      	movs	r3, #0
 800c368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c36a:	e17f      	b.n	800c66c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	2101      	movs	r1, #1
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	fa01 f303 	lsl.w	r3, r1, r3
 800c378:	4013      	ands	r3, r2
 800c37a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f000 8171 	beq.w	800c666 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d00b      	beq.n	800c3a4 <HAL_GPIO_Init+0x48>
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	2b02      	cmp	r3, #2
 800c392:	d007      	beq.n	800c3a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c398:	2b11      	cmp	r3, #17
 800c39a:	d003      	beq.n	800c3a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	2b12      	cmp	r3, #18
 800c3a2:	d130      	bne.n	800c406 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	005b      	lsls	r3, r3, #1
 800c3ae:	2203      	movs	r2, #3
 800c3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3b4:	43db      	mvns	r3, r3
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	68da      	ldr	r2, [r3, #12]
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	693a      	ldr	r2, [r7, #16]
 800c3d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c3da:	2201      	movs	r2, #1
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	fa02 f303 	lsl.w	r3, r2, r3
 800c3e2:	43db      	mvns	r3, r3
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	4013      	ands	r3, r2
 800c3e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	091b      	lsrs	r3, r3, #4
 800c3f0:	f003 0201 	and.w	r2, r3, #1
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3fa:	693a      	ldr	r2, [r7, #16]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	f003 0303 	and.w	r3, r3, #3
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d118      	bne.n	800c444 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800c418:	2201      	movs	r2, #1
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	fa02 f303 	lsl.w	r3, r2, r3
 800c420:	43db      	mvns	r3, r3
 800c422:	693a      	ldr	r2, [r7, #16]
 800c424:	4013      	ands	r3, r2
 800c426:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	08db      	lsrs	r3, r3, #3
 800c42e:	f003 0201 	and.w	r2, r3, #1
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	fa02 f303 	lsl.w	r3, r2, r3
 800c438:	693a      	ldr	r2, [r7, #16]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	005b      	lsls	r3, r3, #1
 800c44e:	2203      	movs	r2, #3
 800c450:	fa02 f303 	lsl.w	r3, r2, r3
 800c454:	43db      	mvns	r3, r3
 800c456:	693a      	ldr	r2, [r7, #16]
 800c458:	4013      	ands	r3, r2
 800c45a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	689a      	ldr	r2, [r3, #8]
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	005b      	lsls	r3, r3, #1
 800c464:	fa02 f303 	lsl.w	r3, r2, r3
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d003      	beq.n	800c484 <HAL_GPIO_Init+0x128>
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	2b12      	cmp	r3, #18
 800c482:	d123      	bne.n	800c4cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	08da      	lsrs	r2, r3, #3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	3208      	adds	r2, #8
 800c48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c490:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f003 0307 	and.w	r3, r3, #7
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	220f      	movs	r2, #15
 800c49c:	fa02 f303 	lsl.w	r3, r2, r3
 800c4a0:	43db      	mvns	r3, r3
 800c4a2:	693a      	ldr	r2, [r7, #16]
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	691a      	ldr	r2, [r3, #16]
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	f003 0307 	and.w	r3, r3, #7
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c4b8:	693a      	ldr	r2, [r7, #16]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	08da      	lsrs	r2, r3, #3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	3208      	adds	r2, #8
 800c4c6:	6939      	ldr	r1, [r7, #16]
 800c4c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	005b      	lsls	r3, r3, #1
 800c4d6:	2203      	movs	r2, #3
 800c4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c4dc:	43db      	mvns	r3, r3
 800c4de:	693a      	ldr	r2, [r7, #16]
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	f003 0203 	and.w	r2, r3, #3
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	005b      	lsls	r3, r3, #1
 800c4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	693a      	ldr	r2, [r7, #16]
 800c4fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 80ac 	beq.w	800c666 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c50e:	4b5f      	ldr	r3, [pc, #380]	; (800c68c <HAL_GPIO_Init+0x330>)
 800c510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c512:	4a5e      	ldr	r2, [pc, #376]	; (800c68c <HAL_GPIO_Init+0x330>)
 800c514:	f043 0301 	orr.w	r3, r3, #1
 800c518:	6613      	str	r3, [r2, #96]	; 0x60
 800c51a:	4b5c      	ldr	r3, [pc, #368]	; (800c68c <HAL_GPIO_Init+0x330>)
 800c51c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	60bb      	str	r3, [r7, #8]
 800c524:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800c526:	4a5a      	ldr	r2, [pc, #360]	; (800c690 <HAL_GPIO_Init+0x334>)
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	089b      	lsrs	r3, r3, #2
 800c52c:	3302      	adds	r3, #2
 800c52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c532:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	f003 0303 	and.w	r3, r3, #3
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	220f      	movs	r2, #15
 800c53e:	fa02 f303 	lsl.w	r3, r2, r3
 800c542:	43db      	mvns	r3, r3
 800c544:	693a      	ldr	r2, [r7, #16]
 800c546:	4013      	ands	r3, r2
 800c548:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c550:	d025      	beq.n	800c59e <HAL_GPIO_Init+0x242>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a4f      	ldr	r2, [pc, #316]	; (800c694 <HAL_GPIO_Init+0x338>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d01f      	beq.n	800c59a <HAL_GPIO_Init+0x23e>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a4e      	ldr	r2, [pc, #312]	; (800c698 <HAL_GPIO_Init+0x33c>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d019      	beq.n	800c596 <HAL_GPIO_Init+0x23a>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a4d      	ldr	r2, [pc, #308]	; (800c69c <HAL_GPIO_Init+0x340>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d013      	beq.n	800c592 <HAL_GPIO_Init+0x236>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a4c      	ldr	r2, [pc, #304]	; (800c6a0 <HAL_GPIO_Init+0x344>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d00d      	beq.n	800c58e <HAL_GPIO_Init+0x232>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a4b      	ldr	r2, [pc, #300]	; (800c6a4 <HAL_GPIO_Init+0x348>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d007      	beq.n	800c58a <HAL_GPIO_Init+0x22e>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a4a      	ldr	r2, [pc, #296]	; (800c6a8 <HAL_GPIO_Init+0x34c>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d101      	bne.n	800c586 <HAL_GPIO_Init+0x22a>
 800c582:	2306      	movs	r3, #6
 800c584:	e00c      	b.n	800c5a0 <HAL_GPIO_Init+0x244>
 800c586:	2307      	movs	r3, #7
 800c588:	e00a      	b.n	800c5a0 <HAL_GPIO_Init+0x244>
 800c58a:	2305      	movs	r3, #5
 800c58c:	e008      	b.n	800c5a0 <HAL_GPIO_Init+0x244>
 800c58e:	2304      	movs	r3, #4
 800c590:	e006      	b.n	800c5a0 <HAL_GPIO_Init+0x244>
 800c592:	2303      	movs	r3, #3
 800c594:	e004      	b.n	800c5a0 <HAL_GPIO_Init+0x244>
 800c596:	2302      	movs	r3, #2
 800c598:	e002      	b.n	800c5a0 <HAL_GPIO_Init+0x244>
 800c59a:	2301      	movs	r3, #1
 800c59c:	e000      	b.n	800c5a0 <HAL_GPIO_Init+0x244>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	697a      	ldr	r2, [r7, #20]
 800c5a2:	f002 0203 	and.w	r2, r2, #3
 800c5a6:	0092      	lsls	r2, r2, #2
 800c5a8:	4093      	lsls	r3, r2
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c5b0:	4937      	ldr	r1, [pc, #220]	; (800c690 <HAL_GPIO_Init+0x334>)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	089b      	lsrs	r3, r3, #2
 800c5b6:	3302      	adds	r3, #2
 800c5b8:	693a      	ldr	r2, [r7, #16]
 800c5ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c5be:	4b3b      	ldr	r3, [pc, #236]	; (800c6ac <HAL_GPIO_Init+0x350>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	43db      	mvns	r3, r3
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d003      	beq.n	800c5e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800c5da:	693a      	ldr	r2, [r7, #16]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c5e2:	4a32      	ldr	r2, [pc, #200]	; (800c6ac <HAL_GPIO_Init+0x350>)
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800c5e8:	4b30      	ldr	r3, [pc, #192]	; (800c6ac <HAL_GPIO_Init+0x350>)
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	43db      	mvns	r3, r3
 800c5f2:	693a      	ldr	r2, [r7, #16]
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c600:	2b00      	cmp	r3, #0
 800c602:	d003      	beq.n	800c60c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	4313      	orrs	r3, r2
 800c60a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c60c:	4a27      	ldr	r2, [pc, #156]	; (800c6ac <HAL_GPIO_Init+0x350>)
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c612:	4b26      	ldr	r3, [pc, #152]	; (800c6ac <HAL_GPIO_Init+0x350>)
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	43db      	mvns	r3, r3
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	4013      	ands	r3, r2
 800c620:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d003      	beq.n	800c636 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800c62e:	693a      	ldr	r2, [r7, #16]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	4313      	orrs	r3, r2
 800c634:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c636:	4a1d      	ldr	r2, [pc, #116]	; (800c6ac <HAL_GPIO_Init+0x350>)
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c63c:	4b1b      	ldr	r3, [pc, #108]	; (800c6ac <HAL_GPIO_Init+0x350>)
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	43db      	mvns	r3, r3
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	4013      	ands	r3, r2
 800c64a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d003      	beq.n	800c660 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	4313      	orrs	r3, r2
 800c65e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c660:	4a12      	ldr	r2, [pc, #72]	; (800c6ac <HAL_GPIO_Init+0x350>)
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	3301      	adds	r3, #1
 800c66a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	fa22 f303 	lsr.w	r3, r2, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	f47f ae78 	bne.w	800c36c <HAL_GPIO_Init+0x10>
  }
}
 800c67c:	bf00      	nop
 800c67e:	bf00      	nop
 800c680:	371c      	adds	r7, #28
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	40021000 	.word	0x40021000
 800c690:	40010000 	.word	0x40010000
 800c694:	48000400 	.word	0x48000400
 800c698:	48000800 	.word	0x48000800
 800c69c:	48000c00 	.word	0x48000c00
 800c6a0:	48001000 	.word	0x48001000
 800c6a4:	48001400 	.word	0x48001400
 800c6a8:	48001800 	.word	0x48001800
 800c6ac:	40010400 	.word	0x40010400

0800c6b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	807b      	strh	r3, [r7, #2]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c6c0:	787b      	ldrb	r3, [r7, #1]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d003      	beq.n	800c6ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c6c6:	887a      	ldrh	r2, [r7, #2]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c6cc:	e002      	b.n	800c6d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c6ce:	887a      	ldrh	r2, [r7, #2]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c6e4:	4b04      	ldr	r3, [pc, #16]	; (800c6f8 <HAL_PWREx_GetVoltageRange+0x18>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop
 800c6f8:	40007000 	.word	0x40007000

0800c6fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c70a:	d130      	bne.n	800c76e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c70c:	4b23      	ldr	r3, [pc, #140]	; (800c79c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c718:	d038      	beq.n	800c78c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c71a:	4b20      	ldr	r3, [pc, #128]	; (800c79c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c722:	4a1e      	ldr	r2, [pc, #120]	; (800c79c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c728:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c72a:	4b1d      	ldr	r3, [pc, #116]	; (800c7a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2232      	movs	r2, #50	; 0x32
 800c730:	fb02 f303 	mul.w	r3, r2, r3
 800c734:	4a1b      	ldr	r2, [pc, #108]	; (800c7a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c736:	fba2 2303 	umull	r2, r3, r2, r3
 800c73a:	0c9b      	lsrs	r3, r3, #18
 800c73c:	3301      	adds	r3, #1
 800c73e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c740:	e002      	b.n	800c748 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	3b01      	subs	r3, #1
 800c746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c748:	4b14      	ldr	r3, [pc, #80]	; (800c79c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c74a:	695b      	ldr	r3, [r3, #20]
 800c74c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c754:	d102      	bne.n	800c75c <HAL_PWREx_ControlVoltageScaling+0x60>
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1f2      	bne.n	800c742 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c75c:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c768:	d110      	bne.n	800c78c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800c76a:	2303      	movs	r3, #3
 800c76c:	e00f      	b.n	800c78e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c76e:	4b0b      	ldr	r3, [pc, #44]	; (800c79c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c77a:	d007      	beq.n	800c78c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c77c:	4b07      	ldr	r3, [pc, #28]	; (800c79c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c784:	4a05      	ldr	r2, [pc, #20]	; (800c79c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c78a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3714      	adds	r7, #20
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	40007000 	.word	0x40007000
 800c7a0:	20000060 	.word	0x20000060
 800c7a4:	431bde83 	.word	0x431bde83

0800c7a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b088      	sub	sp, #32
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d101      	bne.n	800c7ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e3d8      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7ba:	4b97      	ldr	r3, [pc, #604]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	f003 030c 	and.w	r3, r3, #12
 800c7c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c7c4:	4b94      	ldr	r3, [pc, #592]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	f003 0303 	and.w	r3, r3, #3
 800c7cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 0310 	and.w	r3, r3, #16
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 80e4 	beq.w	800c9a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d007      	beq.n	800c7f2 <HAL_RCC_OscConfig+0x4a>
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	2b0c      	cmp	r3, #12
 800c7e6:	f040 808b 	bne.w	800c900 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	f040 8087 	bne.w	800c900 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c7f2:	4b89      	ldr	r3, [pc, #548]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f003 0302 	and.w	r3, r3, #2
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d005      	beq.n	800c80a <HAL_RCC_OscConfig+0x62>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	699b      	ldr	r3, [r3, #24]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800c806:	2301      	movs	r3, #1
 800c808:	e3b0      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a1a      	ldr	r2, [r3, #32]
 800c80e:	4b82      	ldr	r3, [pc, #520]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f003 0308 	and.w	r3, r3, #8
 800c816:	2b00      	cmp	r3, #0
 800c818:	d004      	beq.n	800c824 <HAL_RCC_OscConfig+0x7c>
 800c81a:	4b7f      	ldr	r3, [pc, #508]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c822:	e005      	b.n	800c830 <HAL_RCC_OscConfig+0x88>
 800c824:	4b7c      	ldr	r3, [pc, #496]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c82a:	091b      	lsrs	r3, r3, #4
 800c82c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c830:	4293      	cmp	r3, r2
 800c832:	d223      	bcs.n	800c87c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a1b      	ldr	r3, [r3, #32]
 800c838:	4618      	mov	r0, r3
 800c83a:	f000 fd43 	bl	800d2c4 <RCC_SetFlashLatencyFromMSIRange>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	e391      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c848:	4b73      	ldr	r3, [pc, #460]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a72      	ldr	r2, [pc, #456]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c84e:	f043 0308 	orr.w	r3, r3, #8
 800c852:	6013      	str	r3, [r2, #0]
 800c854:	4b70      	ldr	r3, [pc, #448]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a1b      	ldr	r3, [r3, #32]
 800c860:	496d      	ldr	r1, [pc, #436]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c862:	4313      	orrs	r3, r2
 800c864:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c866:	4b6c      	ldr	r3, [pc, #432]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	69db      	ldr	r3, [r3, #28]
 800c872:	021b      	lsls	r3, r3, #8
 800c874:	4968      	ldr	r1, [pc, #416]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c876:	4313      	orrs	r3, r2
 800c878:	604b      	str	r3, [r1, #4]
 800c87a:	e025      	b.n	800c8c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c87c:	4b66      	ldr	r3, [pc, #408]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a65      	ldr	r2, [pc, #404]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c882:	f043 0308 	orr.w	r3, r3, #8
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	4b63      	ldr	r3, [pc, #396]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6a1b      	ldr	r3, [r3, #32]
 800c894:	4960      	ldr	r1, [pc, #384]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c896:	4313      	orrs	r3, r2
 800c898:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c89a:	4b5f      	ldr	r3, [pc, #380]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	021b      	lsls	r3, r3, #8
 800c8a8:	495b      	ldr	r1, [pc, #364]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d109      	bne.n	800c8c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a1b      	ldr	r3, [r3, #32]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f000 fd03 	bl	800d2c4 <RCC_SetFlashLatencyFromMSIRange>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e351      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c8c8:	f000 fc38 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	4b52      	ldr	r3, [pc, #328]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	091b      	lsrs	r3, r3, #4
 800c8d4:	f003 030f 	and.w	r3, r3, #15
 800c8d8:	4950      	ldr	r1, [pc, #320]	; (800ca1c <HAL_RCC_OscConfig+0x274>)
 800c8da:	5ccb      	ldrb	r3, [r1, r3]
 800c8dc:	f003 031f 	and.w	r3, r3, #31
 800c8e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8e4:	4a4e      	ldr	r2, [pc, #312]	; (800ca20 <HAL_RCC_OscConfig+0x278>)
 800c8e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c8e8:	4b4e      	ldr	r3, [pc, #312]	; (800ca24 <HAL_RCC_OscConfig+0x27c>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7ff f8ab 	bl	800ba48 <HAL_InitTick>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d052      	beq.n	800c9a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
 800c8fe:	e335      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d032      	beq.n	800c96e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c908:	4b43      	ldr	r3, [pc, #268]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a42      	ldr	r2, [pc, #264]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c90e:	f043 0301 	orr.w	r3, r3, #1
 800c912:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c914:	f7ff f8e4 	bl	800bae0 <HAL_GetTick>
 800c918:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c91a:	e008      	b.n	800c92e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c91c:	f7ff f8e0 	bl	800bae0 <HAL_GetTick>
 800c920:	4602      	mov	r2, r0
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	2b02      	cmp	r3, #2
 800c928:	d901      	bls.n	800c92e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	e31e      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c92e:	4b3a      	ldr	r3, [pc, #232]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f003 0302 	and.w	r3, r3, #2
 800c936:	2b00      	cmp	r3, #0
 800c938:	d0f0      	beq.n	800c91c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c93a:	4b37      	ldr	r3, [pc, #220]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a36      	ldr	r2, [pc, #216]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c940:	f043 0308 	orr.w	r3, r3, #8
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	4b34      	ldr	r3, [pc, #208]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a1b      	ldr	r3, [r3, #32]
 800c952:	4931      	ldr	r1, [pc, #196]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c954:	4313      	orrs	r3, r2
 800c956:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c958:	4b2f      	ldr	r3, [pc, #188]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	69db      	ldr	r3, [r3, #28]
 800c964:	021b      	lsls	r3, r3, #8
 800c966:	492c      	ldr	r1, [pc, #176]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c968:	4313      	orrs	r3, r2
 800c96a:	604b      	str	r3, [r1, #4]
 800c96c:	e01a      	b.n	800c9a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c96e:	4b2a      	ldr	r3, [pc, #168]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a29      	ldr	r2, [pc, #164]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c974:	f023 0301 	bic.w	r3, r3, #1
 800c978:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c97a:	f7ff f8b1 	bl	800bae0 <HAL_GetTick>
 800c97e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c980:	e008      	b.n	800c994 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c982:	f7ff f8ad 	bl	800bae0 <HAL_GetTick>
 800c986:	4602      	mov	r2, r0
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	1ad3      	subs	r3, r2, r3
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d901      	bls.n	800c994 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800c990:	2303      	movs	r3, #3
 800c992:	e2eb      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c994:	4b20      	ldr	r3, [pc, #128]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f003 0302 	and.w	r3, r3, #2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d1f0      	bne.n	800c982 <HAL_RCC_OscConfig+0x1da>
 800c9a0:	e000      	b.n	800c9a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c9a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0301 	and.w	r3, r3, #1
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d074      	beq.n	800ca9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	2b08      	cmp	r3, #8
 800c9b4:	d005      	beq.n	800c9c2 <HAL_RCC_OscConfig+0x21a>
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	2b0c      	cmp	r3, #12
 800c9ba:	d10e      	bne.n	800c9da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	d10b      	bne.n	800c9da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9c2:	4b15      	ldr	r3, [pc, #84]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d064      	beq.n	800ca98 <HAL_RCC_OscConfig+0x2f0>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d160      	bne.n	800ca98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e2c8      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9e2:	d106      	bne.n	800c9f2 <HAL_RCC_OscConfig+0x24a>
 800c9e4:	4b0c      	ldr	r3, [pc, #48]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a0b      	ldr	r2, [pc, #44]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c9ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c9ee:	6013      	str	r3, [r2, #0]
 800c9f0:	e026      	b.n	800ca40 <HAL_RCC_OscConfig+0x298>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c9fa:	d115      	bne.n	800ca28 <HAL_RCC_OscConfig+0x280>
 800c9fc:	4b06      	ldr	r3, [pc, #24]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a05      	ldr	r2, [pc, #20]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800ca02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	4b03      	ldr	r3, [pc, #12]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a02      	ldr	r2, [pc, #8]	; (800ca18 <HAL_RCC_OscConfig+0x270>)
 800ca0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	e014      	b.n	800ca40 <HAL_RCC_OscConfig+0x298>
 800ca16:	bf00      	nop
 800ca18:	40021000 	.word	0x40021000
 800ca1c:	080334b4 	.word	0x080334b4
 800ca20:	20000060 	.word	0x20000060
 800ca24:	20000064 	.word	0x20000064
 800ca28:	4ba0      	ldr	r3, [pc, #640]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a9f      	ldr	r2, [pc, #636]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800ca2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca32:	6013      	str	r3, [r2, #0]
 800ca34:	4b9d      	ldr	r3, [pc, #628]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a9c      	ldr	r2, [pc, #624]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800ca3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d013      	beq.n	800ca70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca48:	f7ff f84a 	bl	800bae0 <HAL_GetTick>
 800ca4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ca4e:	e008      	b.n	800ca62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca50:	f7ff f846 	bl	800bae0 <HAL_GetTick>
 800ca54:	4602      	mov	r2, r0
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	1ad3      	subs	r3, r2, r3
 800ca5a:	2b64      	cmp	r3, #100	; 0x64
 800ca5c:	d901      	bls.n	800ca62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	e284      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ca62:	4b92      	ldr	r3, [pc, #584]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d0f0      	beq.n	800ca50 <HAL_RCC_OscConfig+0x2a8>
 800ca6e:	e014      	b.n	800ca9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca70:	f7ff f836 	bl	800bae0 <HAL_GetTick>
 800ca74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ca76:	e008      	b.n	800ca8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca78:	f7ff f832 	bl	800bae0 <HAL_GetTick>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	2b64      	cmp	r3, #100	; 0x64
 800ca84:	d901      	bls.n	800ca8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ca86:	2303      	movs	r3, #3
 800ca88:	e270      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ca8a:	4b88      	ldr	r3, [pc, #544]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1f0      	bne.n	800ca78 <HAL_RCC_OscConfig+0x2d0>
 800ca96:	e000      	b.n	800ca9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f003 0302 	and.w	r3, r3, #2
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d060      	beq.n	800cb68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	2b04      	cmp	r3, #4
 800caaa:	d005      	beq.n	800cab8 <HAL_RCC_OscConfig+0x310>
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	2b0c      	cmp	r3, #12
 800cab0:	d119      	bne.n	800cae6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d116      	bne.n	800cae6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cab8:	4b7c      	ldr	r3, [pc, #496]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d005      	beq.n	800cad0 <HAL_RCC_OscConfig+0x328>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d101      	bne.n	800cad0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800cacc:	2301      	movs	r3, #1
 800cace:	e24d      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cad0:	4b76      	ldr	r3, [pc, #472]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	061b      	lsls	r3, r3, #24
 800cade:	4973      	ldr	r1, [pc, #460]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cae0:	4313      	orrs	r3, r2
 800cae2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cae4:	e040      	b.n	800cb68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d023      	beq.n	800cb36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800caee:	4b6f      	ldr	r3, [pc, #444]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a6e      	ldr	r2, [pc, #440]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800caf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800caf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cafa:	f7fe fff1 	bl	800bae0 <HAL_GetTick>
 800cafe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cb00:	e008      	b.n	800cb14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb02:	f7fe ffed 	bl	800bae0 <HAL_GetTick>
 800cb06:	4602      	mov	r2, r0
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	d901      	bls.n	800cb14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800cb10:	2303      	movs	r3, #3
 800cb12:	e22b      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cb14:	4b65      	ldr	r3, [pc, #404]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d0f0      	beq.n	800cb02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb20:	4b62      	ldr	r3, [pc, #392]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	061b      	lsls	r3, r3, #24
 800cb2e:	495f      	ldr	r1, [pc, #380]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cb30:	4313      	orrs	r3, r2
 800cb32:	604b      	str	r3, [r1, #4]
 800cb34:	e018      	b.n	800cb68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb36:	4b5d      	ldr	r3, [pc, #372]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a5c      	ldr	r2, [pc, #368]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cb3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb42:	f7fe ffcd 	bl	800bae0 <HAL_GetTick>
 800cb46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cb48:	e008      	b.n	800cb5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb4a:	f7fe ffc9 	bl	800bae0 <HAL_GetTick>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d901      	bls.n	800cb5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	e207      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cb5c:	4b53      	ldr	r3, [pc, #332]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1f0      	bne.n	800cb4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 0308 	and.w	r3, r3, #8
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d03c      	beq.n	800cbee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	695b      	ldr	r3, [r3, #20]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d01c      	beq.n	800cbb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb7c:	4b4b      	ldr	r3, [pc, #300]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cb7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb82:	4a4a      	ldr	r2, [pc, #296]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cb84:	f043 0301 	orr.w	r3, r3, #1
 800cb88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb8c:	f7fe ffa8 	bl	800bae0 <HAL_GetTick>
 800cb90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cb92:	e008      	b.n	800cba6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb94:	f7fe ffa4 	bl	800bae0 <HAL_GetTick>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d901      	bls.n	800cba6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800cba2:	2303      	movs	r3, #3
 800cba4:	e1e2      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cba6:	4b41      	ldr	r3, [pc, #260]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbac:	f003 0302 	and.w	r3, r3, #2
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d0ef      	beq.n	800cb94 <HAL_RCC_OscConfig+0x3ec>
 800cbb4:	e01b      	b.n	800cbee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cbb6:	4b3d      	ldr	r3, [pc, #244]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cbb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbbc:	4a3b      	ldr	r2, [pc, #236]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cbbe:	f023 0301 	bic.w	r3, r3, #1
 800cbc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbc6:	f7fe ff8b 	bl	800bae0 <HAL_GetTick>
 800cbca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cbcc:	e008      	b.n	800cbe0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cbce:	f7fe ff87 	bl	800bae0 <HAL_GetTick>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d901      	bls.n	800cbe0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e1c5      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cbe0:	4b32      	ldr	r3, [pc, #200]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cbe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbe6:	f003 0302 	and.w	r3, r3, #2
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1ef      	bne.n	800cbce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f003 0304 	and.w	r3, r3, #4
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f000 80a6 	beq.w	800cd48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800cc00:	4b2a      	ldr	r3, [pc, #168]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cc02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10d      	bne.n	800cc28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cc0c:	4b27      	ldr	r3, [pc, #156]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cc0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc10:	4a26      	ldr	r2, [pc, #152]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cc12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc16:	6593      	str	r3, [r2, #88]	; 0x58
 800cc18:	4b24      	ldr	r3, [pc, #144]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cc1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc20:	60bb      	str	r3, [r7, #8]
 800cc22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cc24:	2301      	movs	r3, #1
 800cc26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc28:	4b21      	ldr	r3, [pc, #132]	; (800ccb0 <HAL_RCC_OscConfig+0x508>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d118      	bne.n	800cc66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cc34:	4b1e      	ldr	r3, [pc, #120]	; (800ccb0 <HAL_RCC_OscConfig+0x508>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a1d      	ldr	r2, [pc, #116]	; (800ccb0 <HAL_RCC_OscConfig+0x508>)
 800cc3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc40:	f7fe ff4e 	bl	800bae0 <HAL_GetTick>
 800cc44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc46:	e008      	b.n	800cc5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc48:	f7fe ff4a 	bl	800bae0 <HAL_GetTick>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	d901      	bls.n	800cc5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800cc56:	2303      	movs	r3, #3
 800cc58:	e188      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc5a:	4b15      	ldr	r3, [pc, #84]	; (800ccb0 <HAL_RCC_OscConfig+0x508>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d0f0      	beq.n	800cc48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	689b      	ldr	r3, [r3, #8]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d108      	bne.n	800cc80 <HAL_RCC_OscConfig+0x4d8>
 800cc6e:	4b0f      	ldr	r3, [pc, #60]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cc70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc74:	4a0d      	ldr	r2, [pc, #52]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cc76:	f043 0301 	orr.w	r3, r3, #1
 800cc7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cc7e:	e029      	b.n	800ccd4 <HAL_RCC_OscConfig+0x52c>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	2b05      	cmp	r3, #5
 800cc86:	d115      	bne.n	800ccb4 <HAL_RCC_OscConfig+0x50c>
 800cc88:	4b08      	ldr	r3, [pc, #32]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc8e:	4a07      	ldr	r2, [pc, #28]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cc90:	f043 0304 	orr.w	r3, r3, #4
 800cc94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cc98:	4b04      	ldr	r3, [pc, #16]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cc9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc9e:	4a03      	ldr	r2, [pc, #12]	; (800ccac <HAL_RCC_OscConfig+0x504>)
 800cca0:	f043 0301 	orr.w	r3, r3, #1
 800cca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cca8:	e014      	b.n	800ccd4 <HAL_RCC_OscConfig+0x52c>
 800ccaa:	bf00      	nop
 800ccac:	40021000 	.word	0x40021000
 800ccb0:	40007000 	.word	0x40007000
 800ccb4:	4b91      	ldr	r3, [pc, #580]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ccb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccba:	4a90      	ldr	r2, [pc, #576]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ccbc:	f023 0301 	bic.w	r3, r3, #1
 800ccc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ccc4:	4b8d      	ldr	r3, [pc, #564]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ccc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccca:	4a8c      	ldr	r2, [pc, #560]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cccc:	f023 0304 	bic.w	r3, r3, #4
 800ccd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d016      	beq.n	800cd0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccdc:	f7fe ff00 	bl	800bae0 <HAL_GetTick>
 800cce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cce2:	e00a      	b.n	800ccfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cce4:	f7fe fefc 	bl	800bae0 <HAL_GetTick>
 800cce8:	4602      	mov	r2, r0
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d901      	bls.n	800ccfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800ccf6:	2303      	movs	r3, #3
 800ccf8:	e138      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ccfa:	4b80      	ldr	r3, [pc, #512]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ccfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd00:	f003 0302 	and.w	r3, r3, #2
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d0ed      	beq.n	800cce4 <HAL_RCC_OscConfig+0x53c>
 800cd08:	e015      	b.n	800cd36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd0a:	f7fe fee9 	bl	800bae0 <HAL_GetTick>
 800cd0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cd10:	e00a      	b.n	800cd28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd12:	f7fe fee5 	bl	800bae0 <HAL_GetTick>
 800cd16:	4602      	mov	r2, r0
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d901      	bls.n	800cd28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800cd24:	2303      	movs	r3, #3
 800cd26:	e121      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cd28:	4b74      	ldr	r3, [pc, #464]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cd2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd2e:	f003 0302 	and.w	r3, r3, #2
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1ed      	bne.n	800cd12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cd36:	7ffb      	ldrb	r3, [r7, #31]
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d105      	bne.n	800cd48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd3c:	4b6f      	ldr	r3, [pc, #444]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cd3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd40:	4a6e      	ldr	r2, [pc, #440]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cd42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f000 810c 	beq.w	800cf6a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	f040 80d4 	bne.w	800cf04 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800cd5c:	4b67      	ldr	r3, [pc, #412]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	f003 0203 	and.w	r2, r3, #3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d130      	bne.n	800cdd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d127      	bne.n	800cdd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d11f      	bne.n	800cdd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cd9c:	2a07      	cmp	r2, #7
 800cd9e:	bf14      	ite	ne
 800cda0:	2201      	movne	r2, #1
 800cda2:	2200      	moveq	r2, #0
 800cda4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d113      	bne.n	800cdd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb4:	085b      	lsrs	r3, r3, #1
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d109      	bne.n	800cdd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc8:	085b      	lsrs	r3, r3, #1
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d06e      	beq.n	800ceb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	2b0c      	cmp	r3, #12
 800cdd6:	d069      	beq.n	800ceac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800cdd8:	4b48      	ldr	r3, [pc, #288]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d105      	bne.n	800cdf0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800cde4:	4b45      	ldr	r3, [pc, #276]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d001      	beq.n	800cdf4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e0bb      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800cdf4:	4b41      	ldr	r3, [pc, #260]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a40      	ldr	r2, [pc, #256]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cdfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cdfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ce00:	f7fe fe6e 	bl	800bae0 <HAL_GetTick>
 800ce04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce06:	e008      	b.n	800ce1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce08:	f7fe fe6a 	bl	800bae0 <HAL_GetTick>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	2b02      	cmp	r3, #2
 800ce14:	d901      	bls.n	800ce1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800ce16:	2303      	movs	r3, #3
 800ce18:	e0a8      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce1a:	4b38      	ldr	r3, [pc, #224]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1f0      	bne.n	800ce08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce26:	4b35      	ldr	r3, [pc, #212]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ce28:	68da      	ldr	r2, [r3, #12]
 800ce2a:	4b35      	ldr	r3, [pc, #212]	; (800cf00 <HAL_RCC_OscConfig+0x758>)
 800ce2c:	4013      	ands	r3, r2
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ce36:	3a01      	subs	r2, #1
 800ce38:	0112      	lsls	r2, r2, #4
 800ce3a:	4311      	orrs	r1, r2
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ce40:	0212      	lsls	r2, r2, #8
 800ce42:	4311      	orrs	r1, r2
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ce48:	0852      	lsrs	r2, r2, #1
 800ce4a:	3a01      	subs	r2, #1
 800ce4c:	0552      	lsls	r2, r2, #21
 800ce4e:	4311      	orrs	r1, r2
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ce54:	0852      	lsrs	r2, r2, #1
 800ce56:	3a01      	subs	r2, #1
 800ce58:	0652      	lsls	r2, r2, #25
 800ce5a:	4311      	orrs	r1, r2
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ce60:	0912      	lsrs	r2, r2, #4
 800ce62:	0452      	lsls	r2, r2, #17
 800ce64:	430a      	orrs	r2, r1
 800ce66:	4925      	ldr	r1, [pc, #148]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ce6c:	4b23      	ldr	r3, [pc, #140]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a22      	ldr	r2, [pc, #136]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ce72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ce78:	4b20      	ldr	r3, [pc, #128]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	4a1f      	ldr	r2, [pc, #124]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ce7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ce84:	f7fe fe2c 	bl	800bae0 <HAL_GetTick>
 800ce88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce8a:	e008      	b.n	800ce9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce8c:	f7fe fe28 	bl	800bae0 <HAL_GetTick>
 800ce90:	4602      	mov	r2, r0
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d901      	bls.n	800ce9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	e066      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce9e:	4b17      	ldr	r3, [pc, #92]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d0f0      	beq.n	800ce8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ceaa:	e05e      	b.n	800cf6a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ceac:	2301      	movs	r3, #1
 800ceae:	e05d      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ceb0:	4b12      	ldr	r3, [pc, #72]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d156      	bne.n	800cf6a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800cebc:	4b0f      	ldr	r3, [pc, #60]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a0e      	ldr	r2, [pc, #56]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cec6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cec8:	4b0c      	ldr	r3, [pc, #48]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	4a0b      	ldr	r2, [pc, #44]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ced2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ced4:	f7fe fe04 	bl	800bae0 <HAL_GetTick>
 800ced8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ceda:	e008      	b.n	800ceee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cedc:	f7fe fe00 	bl	800bae0 <HAL_GetTick>
 800cee0:	4602      	mov	r2, r0
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	d901      	bls.n	800ceee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800ceea:	2303      	movs	r3, #3
 800ceec:	e03e      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ceee:	4b03      	ldr	r3, [pc, #12]	; (800cefc <HAL_RCC_OscConfig+0x754>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d0f0      	beq.n	800cedc <HAL_RCC_OscConfig+0x734>
 800cefa:	e036      	b.n	800cf6a <HAL_RCC_OscConfig+0x7c2>
 800cefc:	40021000 	.word	0x40021000
 800cf00:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	2b0c      	cmp	r3, #12
 800cf08:	d02d      	beq.n	800cf66 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf0a:	4b1a      	ldr	r3, [pc, #104]	; (800cf74 <HAL_RCC_OscConfig+0x7cc>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4a19      	ldr	r2, [pc, #100]	; (800cf74 <HAL_RCC_OscConfig+0x7cc>)
 800cf10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800cf16:	4b17      	ldr	r3, [pc, #92]	; (800cf74 <HAL_RCC_OscConfig+0x7cc>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d105      	bne.n	800cf2e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800cf22:	4b14      	ldr	r3, [pc, #80]	; (800cf74 <HAL_RCC_OscConfig+0x7cc>)
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	4a13      	ldr	r2, [pc, #76]	; (800cf74 <HAL_RCC_OscConfig+0x7cc>)
 800cf28:	f023 0303 	bic.w	r3, r3, #3
 800cf2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800cf2e:	4b11      	ldr	r3, [pc, #68]	; (800cf74 <HAL_RCC_OscConfig+0x7cc>)
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	4a10      	ldr	r2, [pc, #64]	; (800cf74 <HAL_RCC_OscConfig+0x7cc>)
 800cf34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800cf38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf3e:	f7fe fdcf 	bl	800bae0 <HAL_GetTick>
 800cf42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf44:	e008      	b.n	800cf58 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf46:	f7fe fdcb 	bl	800bae0 <HAL_GetTick>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	d901      	bls.n	800cf58 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 800cf54:	2303      	movs	r3, #3
 800cf56:	e009      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf58:	4b06      	ldr	r3, [pc, #24]	; (800cf74 <HAL_RCC_OscConfig+0x7cc>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1f0      	bne.n	800cf46 <HAL_RCC_OscConfig+0x79e>
 800cf64:	e001      	b.n	800cf6a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800cf66:	2301      	movs	r3, #1
 800cf68:	e000      	b.n	800cf6c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800cf6a:	2300      	movs	r3, #0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3720      	adds	r7, #32
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	40021000 	.word	0x40021000

0800cf78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d101      	bne.n	800cf8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e0c8      	b.n	800d11e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cf8c:	4b66      	ldr	r3, [pc, #408]	; (800d128 <HAL_RCC_ClockConfig+0x1b0>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f003 0307 	and.w	r3, r3, #7
 800cf94:	683a      	ldr	r2, [r7, #0]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d910      	bls.n	800cfbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf9a:	4b63      	ldr	r3, [pc, #396]	; (800d128 <HAL_RCC_ClockConfig+0x1b0>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f023 0207 	bic.w	r2, r3, #7
 800cfa2:	4961      	ldr	r1, [pc, #388]	; (800d128 <HAL_RCC_ClockConfig+0x1b0>)
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cfaa:	4b5f      	ldr	r3, [pc, #380]	; (800d128 <HAL_RCC_ClockConfig+0x1b0>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f003 0307 	and.w	r3, r3, #7
 800cfb2:	683a      	ldr	r2, [r7, #0]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d001      	beq.n	800cfbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e0b0      	b.n	800d11e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d04c      	beq.n	800d062 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	2b03      	cmp	r3, #3
 800cfce:	d107      	bne.n	800cfe0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cfd0:	4b56      	ldr	r3, [pc, #344]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d121      	bne.n	800d020 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	e09e      	b.n	800d11e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d107      	bne.n	800cff8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cfe8:	4b50      	ldr	r3, [pc, #320]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d115      	bne.n	800d020 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800cff4:	2301      	movs	r3, #1
 800cff6:	e092      	b.n	800d11e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d107      	bne.n	800d010 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d000:	4b4a      	ldr	r3, [pc, #296]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f003 0302 	and.w	r3, r3, #2
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d109      	bne.n	800d020 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800d00c:	2301      	movs	r3, #1
 800d00e:	e086      	b.n	800d11e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d010:	4b46      	ldr	r3, [pc, #280]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800d01c:	2301      	movs	r3, #1
 800d01e:	e07e      	b.n	800d11e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d020:	4b42      	ldr	r3, [pc, #264]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	f023 0203 	bic.w	r2, r3, #3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	493f      	ldr	r1, [pc, #252]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d02e:	4313      	orrs	r3, r2
 800d030:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d032:	f7fe fd55 	bl	800bae0 <HAL_GetTick>
 800d036:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d038:	e00a      	b.n	800d050 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d03a:	f7fe fd51 	bl	800bae0 <HAL_GetTick>
 800d03e:	4602      	mov	r2, r0
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	1ad3      	subs	r3, r2, r3
 800d044:	f241 3288 	movw	r2, #5000	; 0x1388
 800d048:	4293      	cmp	r3, r2
 800d04a:	d901      	bls.n	800d050 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800d04c:	2303      	movs	r3, #3
 800d04e:	e066      	b.n	800d11e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d050:	4b36      	ldr	r3, [pc, #216]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	f003 020c 	and.w	r2, r3, #12
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	429a      	cmp	r2, r3
 800d060:	d1eb      	bne.n	800d03a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f003 0302 	and.w	r3, r3, #2
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d008      	beq.n	800d080 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d06e:	4b2f      	ldr	r3, [pc, #188]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	492c      	ldr	r1, [pc, #176]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d07c:	4313      	orrs	r3, r2
 800d07e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d080:	4b29      	ldr	r3, [pc, #164]	; (800d128 <HAL_RCC_ClockConfig+0x1b0>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f003 0307 	and.w	r3, r3, #7
 800d088:	683a      	ldr	r2, [r7, #0]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d210      	bcs.n	800d0b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d08e:	4b26      	ldr	r3, [pc, #152]	; (800d128 <HAL_RCC_ClockConfig+0x1b0>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f023 0207 	bic.w	r2, r3, #7
 800d096:	4924      	ldr	r1, [pc, #144]	; (800d128 <HAL_RCC_ClockConfig+0x1b0>)
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d09e:	4b22      	ldr	r3, [pc, #136]	; (800d128 <HAL_RCC_ClockConfig+0x1b0>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f003 0307 	and.w	r3, r3, #7
 800d0a6:	683a      	ldr	r2, [r7, #0]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d001      	beq.n	800d0b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e036      	b.n	800d11e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f003 0304 	and.w	r3, r3, #4
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d008      	beq.n	800d0ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d0bc:	4b1b      	ldr	r3, [pc, #108]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	4918      	ldr	r1, [pc, #96]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 0308 	and.w	r3, r3, #8
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d009      	beq.n	800d0ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d0da:	4b14      	ldr	r3, [pc, #80]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	691b      	ldr	r3, [r3, #16]
 800d0e6:	00db      	lsls	r3, r3, #3
 800d0e8:	4910      	ldr	r1, [pc, #64]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d0ee:	f000 f825 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	4b0d      	ldr	r3, [pc, #52]	; (800d12c <HAL_RCC_ClockConfig+0x1b4>)
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	091b      	lsrs	r3, r3, #4
 800d0fa:	f003 030f 	and.w	r3, r3, #15
 800d0fe:	490c      	ldr	r1, [pc, #48]	; (800d130 <HAL_RCC_ClockConfig+0x1b8>)
 800d100:	5ccb      	ldrb	r3, [r1, r3]
 800d102:	f003 031f 	and.w	r3, r3, #31
 800d106:	fa22 f303 	lsr.w	r3, r2, r3
 800d10a:	4a0a      	ldr	r2, [pc, #40]	; (800d134 <HAL_RCC_ClockConfig+0x1bc>)
 800d10c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d10e:	4b0a      	ldr	r3, [pc, #40]	; (800d138 <HAL_RCC_ClockConfig+0x1c0>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4618      	mov	r0, r3
 800d114:	f7fe fc98 	bl	800ba48 <HAL_InitTick>
 800d118:	4603      	mov	r3, r0
 800d11a:	72fb      	strb	r3, [r7, #11]

  return status;
 800d11c:	7afb      	ldrb	r3, [r7, #11]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	40022000 	.word	0x40022000
 800d12c:	40021000 	.word	0x40021000
 800d130:	080334b4 	.word	0x080334b4
 800d134:	20000060 	.word	0x20000060
 800d138:	20000064 	.word	0x20000064

0800d13c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b089      	sub	sp, #36	; 0x24
 800d140:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d142:	2300      	movs	r3, #0
 800d144:	61fb      	str	r3, [r7, #28]
 800d146:	2300      	movs	r3, #0
 800d148:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d14a:	4b3e      	ldr	r3, [pc, #248]	; (800d244 <HAL_RCC_GetSysClockFreq+0x108>)
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	f003 030c 	and.w	r3, r3, #12
 800d152:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d154:	4b3b      	ldr	r3, [pc, #236]	; (800d244 <HAL_RCC_GetSysClockFreq+0x108>)
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	f003 0303 	and.w	r3, r3, #3
 800d15c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d005      	beq.n	800d170 <HAL_RCC_GetSysClockFreq+0x34>
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	2b0c      	cmp	r3, #12
 800d168:	d121      	bne.n	800d1ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d11e      	bne.n	800d1ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d170:	4b34      	ldr	r3, [pc, #208]	; (800d244 <HAL_RCC_GetSysClockFreq+0x108>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f003 0308 	and.w	r3, r3, #8
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d107      	bne.n	800d18c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d17c:	4b31      	ldr	r3, [pc, #196]	; (800d244 <HAL_RCC_GetSysClockFreq+0x108>)
 800d17e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d182:	0a1b      	lsrs	r3, r3, #8
 800d184:	f003 030f 	and.w	r3, r3, #15
 800d188:	61fb      	str	r3, [r7, #28]
 800d18a:	e005      	b.n	800d198 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d18c:	4b2d      	ldr	r3, [pc, #180]	; (800d244 <HAL_RCC_GetSysClockFreq+0x108>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	091b      	lsrs	r3, r3, #4
 800d192:	f003 030f 	and.w	r3, r3, #15
 800d196:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d198:	4a2b      	ldr	r2, [pc, #172]	; (800d248 <HAL_RCC_GetSysClockFreq+0x10c>)
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10d      	bne.n	800d1c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d1ac:	e00a      	b.n	800d1c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	2b04      	cmp	r3, #4
 800d1b2:	d102      	bne.n	800d1ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d1b4:	4b25      	ldr	r3, [pc, #148]	; (800d24c <HAL_RCC_GetSysClockFreq+0x110>)
 800d1b6:	61bb      	str	r3, [r7, #24]
 800d1b8:	e004      	b.n	800d1c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2b08      	cmp	r3, #8
 800d1be:	d101      	bne.n	800d1c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d1c0:	4b23      	ldr	r3, [pc, #140]	; (800d250 <HAL_RCC_GetSysClockFreq+0x114>)
 800d1c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	2b0c      	cmp	r3, #12
 800d1c8:	d134      	bne.n	800d234 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d1ca:	4b1e      	ldr	r3, [pc, #120]	; (800d244 <HAL_RCC_GetSysClockFreq+0x108>)
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	f003 0303 	and.w	r3, r3, #3
 800d1d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d003      	beq.n	800d1e2 <HAL_RCC_GetSysClockFreq+0xa6>
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	2b03      	cmp	r3, #3
 800d1de:	d003      	beq.n	800d1e8 <HAL_RCC_GetSysClockFreq+0xac>
 800d1e0:	e005      	b.n	800d1ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d1e2:	4b1a      	ldr	r3, [pc, #104]	; (800d24c <HAL_RCC_GetSysClockFreq+0x110>)
 800d1e4:	617b      	str	r3, [r7, #20]
      break;
 800d1e6:	e005      	b.n	800d1f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d1e8:	4b19      	ldr	r3, [pc, #100]	; (800d250 <HAL_RCC_GetSysClockFreq+0x114>)
 800d1ea:	617b      	str	r3, [r7, #20]
      break;
 800d1ec:	e002      	b.n	800d1f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	617b      	str	r3, [r7, #20]
      break;
 800d1f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d1f4:	4b13      	ldr	r3, [pc, #76]	; (800d244 <HAL_RCC_GetSysClockFreq+0x108>)
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	091b      	lsrs	r3, r3, #4
 800d1fa:	f003 0307 	and.w	r3, r3, #7
 800d1fe:	3301      	adds	r3, #1
 800d200:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d202:	4b10      	ldr	r3, [pc, #64]	; (800d244 <HAL_RCC_GetSysClockFreq+0x108>)
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	0a1b      	lsrs	r3, r3, #8
 800d208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d20c:	697a      	ldr	r2, [r7, #20]
 800d20e:	fb03 f202 	mul.w	r2, r3, r2
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	fbb2 f3f3 	udiv	r3, r2, r3
 800d218:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d21a:	4b0a      	ldr	r3, [pc, #40]	; (800d244 <HAL_RCC_GetSysClockFreq+0x108>)
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	0e5b      	lsrs	r3, r3, #25
 800d220:	f003 0303 	and.w	r3, r3, #3
 800d224:	3301      	adds	r3, #1
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d22a:	697a      	ldr	r2, [r7, #20]
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d232:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d234:	69bb      	ldr	r3, [r7, #24]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3724      	adds	r7, #36	; 0x24
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	40021000 	.word	0x40021000
 800d248:	080334cc 	.word	0x080334cc
 800d24c:	00f42400 	.word	0x00f42400
 800d250:	007a1200 	.word	0x007a1200

0800d254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d254:	b480      	push	{r7}
 800d256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d258:	4b03      	ldr	r3, [pc, #12]	; (800d268 <HAL_RCC_GetHCLKFreq+0x14>)
 800d25a:	681b      	ldr	r3, [r3, #0]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	20000060 	.word	0x20000060

0800d26c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d270:	f7ff fff0 	bl	800d254 <HAL_RCC_GetHCLKFreq>
 800d274:	4602      	mov	r2, r0
 800d276:	4b06      	ldr	r3, [pc, #24]	; (800d290 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	0a1b      	lsrs	r3, r3, #8
 800d27c:	f003 0307 	and.w	r3, r3, #7
 800d280:	4904      	ldr	r1, [pc, #16]	; (800d294 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d282:	5ccb      	ldrb	r3, [r1, r3]
 800d284:	f003 031f 	and.w	r3, r3, #31
 800d288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	40021000 	.word	0x40021000
 800d294:	080334c4 	.word	0x080334c4

0800d298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d29c:	f7ff ffda 	bl	800d254 <HAL_RCC_GetHCLKFreq>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	4b06      	ldr	r3, [pc, #24]	; (800d2bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	0adb      	lsrs	r3, r3, #11
 800d2a8:	f003 0307 	and.w	r3, r3, #7
 800d2ac:	4904      	ldr	r1, [pc, #16]	; (800d2c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d2ae:	5ccb      	ldrb	r3, [r1, r3]
 800d2b0:	f003 031f 	and.w	r3, r3, #31
 800d2b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	40021000 	.word	0x40021000
 800d2c0:	080334c4 	.word	0x080334c4

0800d2c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d2d0:	4b2a      	ldr	r3, [pc, #168]	; (800d37c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d2d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d2dc:	f7ff fa00 	bl	800c6e0 <HAL_PWREx_GetVoltageRange>
 800d2e0:	6178      	str	r0, [r7, #20]
 800d2e2:	e014      	b.n	800d30e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d2e4:	4b25      	ldr	r3, [pc, #148]	; (800d37c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d2e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2e8:	4a24      	ldr	r2, [pc, #144]	; (800d37c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d2ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2ee:	6593      	str	r3, [r2, #88]	; 0x58
 800d2f0:	4b22      	ldr	r3, [pc, #136]	; (800d37c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d2f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2f8:	60fb      	str	r3, [r7, #12]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d2fc:	f7ff f9f0 	bl	800c6e0 <HAL_PWREx_GetVoltageRange>
 800d300:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d302:	4b1e      	ldr	r3, [pc, #120]	; (800d37c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d306:	4a1d      	ldr	r2, [pc, #116]	; (800d37c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d30c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d314:	d10b      	bne.n	800d32e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b80      	cmp	r3, #128	; 0x80
 800d31a:	d919      	bls.n	800d350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2ba0      	cmp	r3, #160	; 0xa0
 800d320:	d902      	bls.n	800d328 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d322:	2302      	movs	r3, #2
 800d324:	613b      	str	r3, [r7, #16]
 800d326:	e013      	b.n	800d350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d328:	2301      	movs	r3, #1
 800d32a:	613b      	str	r3, [r7, #16]
 800d32c:	e010      	b.n	800d350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2b80      	cmp	r3, #128	; 0x80
 800d332:	d902      	bls.n	800d33a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800d334:	2303      	movs	r3, #3
 800d336:	613b      	str	r3, [r7, #16]
 800d338:	e00a      	b.n	800d350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b80      	cmp	r3, #128	; 0x80
 800d33e:	d102      	bne.n	800d346 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d340:	2302      	movs	r3, #2
 800d342:	613b      	str	r3, [r7, #16]
 800d344:	e004      	b.n	800d350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2b70      	cmp	r3, #112	; 0x70
 800d34a:	d101      	bne.n	800d350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d34c:	2301      	movs	r3, #1
 800d34e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d350:	4b0b      	ldr	r3, [pc, #44]	; (800d380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f023 0207 	bic.w	r2, r3, #7
 800d358:	4909      	ldr	r1, [pc, #36]	; (800d380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	4313      	orrs	r3, r2
 800d35e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d360:	4b07      	ldr	r3, [pc, #28]	; (800d380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f003 0307 	and.w	r3, r3, #7
 800d368:	693a      	ldr	r2, [r7, #16]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d001      	beq.n	800d372 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e000      	b.n	800d374 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3718      	adds	r7, #24
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	40021000 	.word	0x40021000
 800d380:	40022000 	.word	0x40022000

0800d384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d38c:	2300      	movs	r3, #0
 800d38e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d390:	2300      	movs	r3, #0
 800d392:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d041      	beq.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d3a8:	d02a      	beq.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800d3aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d3ae:	d824      	bhi.n	800d3fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d3b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d3b4:	d008      	beq.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d3b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d3ba:	d81e      	bhi.n	800d3fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00a      	beq.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d3c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d3c4:	d010      	beq.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d3c6:	e018      	b.n	800d3fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d3c8:	4b86      	ldr	r3, [pc, #536]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	4a85      	ldr	r2, [pc, #532]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d3ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d3d4:	e015      	b.n	800d402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	2100      	movs	r1, #0
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f001 f829 	bl	800e434 <RCCEx_PLLSAI1_Config>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d3e6:	e00c      	b.n	800d402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	3320      	adds	r3, #32
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f001 f914 	bl	800e61c <RCCEx_PLLSAI2_Config>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d3f8:	e003      	b.n	800d402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	74fb      	strb	r3, [r7, #19]
      break;
 800d3fe:	e000      	b.n	800d402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800d400:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d402:	7cfb      	ldrb	r3, [r7, #19]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10b      	bne.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d408:	4b76      	ldr	r3, [pc, #472]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d40e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d416:	4973      	ldr	r1, [pc, #460]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d418:	4313      	orrs	r3, r2
 800d41a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d41e:	e001      	b.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d420:	7cfb      	ldrb	r3, [r7, #19]
 800d422:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d041      	beq.n	800d4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d434:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d438:	d02a      	beq.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800d43a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d43e:	d824      	bhi.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800d440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d444:	d008      	beq.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d44a:	d81e      	bhi.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d00a      	beq.n	800d466 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800d450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d454:	d010      	beq.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800d456:	e018      	b.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d458:	4b62      	ldr	r3, [pc, #392]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	4a61      	ldr	r2, [pc, #388]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d45e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d462:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d464:	e015      	b.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	3304      	adds	r3, #4
 800d46a:	2100      	movs	r1, #0
 800d46c:	4618      	mov	r0, r3
 800d46e:	f000 ffe1 	bl	800e434 <RCCEx_PLLSAI1_Config>
 800d472:	4603      	mov	r3, r0
 800d474:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d476:	e00c      	b.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	3320      	adds	r3, #32
 800d47c:	2100      	movs	r1, #0
 800d47e:	4618      	mov	r0, r3
 800d480:	f001 f8cc 	bl	800e61c <RCCEx_PLLSAI2_Config>
 800d484:	4603      	mov	r3, r0
 800d486:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d488:	e003      	b.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d48a:	2301      	movs	r3, #1
 800d48c:	74fb      	strb	r3, [r7, #19]
      break;
 800d48e:	e000      	b.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800d490:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d492:	7cfb      	ldrb	r3, [r7, #19]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10b      	bne.n	800d4b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d498:	4b52      	ldr	r3, [pc, #328]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d49e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4a6:	494f      	ldr	r1, [pc, #316]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d4ae:	e001      	b.n	800d4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4b0:	7cfb      	ldrb	r3, [r7, #19]
 800d4b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f000 80a0 	beq.w	800d602 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d4c6:	4b47      	ldr	r3, [pc, #284]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d4c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d101      	bne.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e000      	b.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00d      	beq.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d4dc:	4b41      	ldr	r3, [pc, #260]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d4de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4e0:	4a40      	ldr	r2, [pc, #256]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d4e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4e6:	6593      	str	r3, [r2, #88]	; 0x58
 800d4e8:	4b3e      	ldr	r3, [pc, #248]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d4ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4f0:	60bb      	str	r3, [r7, #8]
 800d4f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d4f8:	4b3b      	ldr	r3, [pc, #236]	; (800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a3a      	ldr	r2, [pc, #232]	; (800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d4fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d502:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d504:	f7fe faec 	bl	800bae0 <HAL_GetTick>
 800d508:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d50a:	e009      	b.n	800d520 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d50c:	f7fe fae8 	bl	800bae0 <HAL_GetTick>
 800d510:	4602      	mov	r2, r0
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	1ad3      	subs	r3, r2, r3
 800d516:	2b02      	cmp	r3, #2
 800d518:	d902      	bls.n	800d520 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800d51a:	2303      	movs	r3, #3
 800d51c:	74fb      	strb	r3, [r7, #19]
        break;
 800d51e:	e005      	b.n	800d52c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d520:	4b31      	ldr	r3, [pc, #196]	; (800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d0ef      	beq.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800d52c:	7cfb      	ldrb	r3, [r7, #19]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d15c      	bne.n	800d5ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d532:	4b2c      	ldr	r3, [pc, #176]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d53c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d01f      	beq.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d54a:	697a      	ldr	r2, [r7, #20]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d019      	beq.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d550:	4b24      	ldr	r3, [pc, #144]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d55a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d55c:	4b21      	ldr	r3, [pc, #132]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d562:	4a20      	ldr	r2, [pc, #128]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d56c:	4b1d      	ldr	r3, [pc, #116]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d56e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d572:	4a1c      	ldr	r2, [pc, #112]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d57c:	4a19      	ldr	r2, [pc, #100]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	f003 0301 	and.w	r3, r3, #1
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d016      	beq.n	800d5bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d58e:	f7fe faa7 	bl	800bae0 <HAL_GetTick>
 800d592:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d594:	e00b      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d596:	f7fe faa3 	bl	800bae0 <HAL_GetTick>
 800d59a:	4602      	mov	r2, r0
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	1ad3      	subs	r3, r2, r3
 800d5a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d902      	bls.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	74fb      	strb	r3, [r7, #19]
            break;
 800d5ac:	e006      	b.n	800d5bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d5ae:	4b0d      	ldr	r3, [pc, #52]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5b4:	f003 0302 	and.w	r3, r3, #2
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d0ec      	beq.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800d5bc:	7cfb      	ldrb	r3, [r7, #19]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d10c      	bne.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d5c2:	4b08      	ldr	r3, [pc, #32]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5d2:	4904      	ldr	r1, [pc, #16]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d5da:	e009      	b.n	800d5f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d5dc:	7cfb      	ldrb	r3, [r7, #19]
 800d5de:	74bb      	strb	r3, [r7, #18]
 800d5e0:	e006      	b.n	800d5f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800d5e2:	bf00      	nop
 800d5e4:	40021000 	.word	0x40021000
 800d5e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5ec:	7cfb      	ldrb	r3, [r7, #19]
 800d5ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d5f0:	7c7b      	ldrb	r3, [r7, #17]
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d105      	bne.n	800d602 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d5f6:	4b9e      	ldr	r3, [pc, #632]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5fa:	4a9d      	ldr	r2, [pc, #628]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d5fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d600:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 0301 	and.w	r3, r3, #1
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00a      	beq.n	800d624 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d60e:	4b98      	ldr	r3, [pc, #608]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d614:	f023 0203 	bic.w	r2, r3, #3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61c:	4994      	ldr	r1, [pc, #592]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d61e:	4313      	orrs	r3, r2
 800d620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f003 0302 	and.w	r3, r3, #2
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00a      	beq.n	800d646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d630:	4b8f      	ldr	r3, [pc, #572]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d636:	f023 020c 	bic.w	r2, r3, #12
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d63e:	498c      	ldr	r1, [pc, #560]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d640:	4313      	orrs	r3, r2
 800d642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f003 0304 	and.w	r3, r3, #4
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00a      	beq.n	800d668 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d652:	4b87      	ldr	r3, [pc, #540]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d658:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d660:	4983      	ldr	r1, [pc, #524]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d662:	4313      	orrs	r3, r2
 800d664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f003 0308 	and.w	r3, r3, #8
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00a      	beq.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d674:	4b7e      	ldr	r3, [pc, #504]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d67a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d682:	497b      	ldr	r1, [pc, #492]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d684:	4313      	orrs	r3, r2
 800d686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f003 0310 	and.w	r3, r3, #16
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00a      	beq.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d696:	4b76      	ldr	r3, [pc, #472]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d69c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6a4:	4972      	ldr	r1, [pc, #456]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f003 0320 	and.w	r3, r3, #32
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00a      	beq.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d6b8:	4b6d      	ldr	r3, [pc, #436]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6c6:	496a      	ldr	r1, [pc, #424]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00a      	beq.n	800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d6da:	4b65      	ldr	r3, [pc, #404]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6e8:	4961      	ldr	r1, [pc, #388]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00a      	beq.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d6fc:	4b5c      	ldr	r3, [pc, #368]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d70a:	4959      	ldr	r1, [pc, #356]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d70c:	4313      	orrs	r3, r2
 800d70e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00a      	beq.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d71e:	4b54      	ldr	r3, [pc, #336]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d724:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d72c:	4950      	ldr	r1, [pc, #320]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d72e:	4313      	orrs	r3, r2
 800d730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00a      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d740:	4b4b      	ldr	r3, [pc, #300]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d746:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d74e:	4948      	ldr	r1, [pc, #288]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d750:	4313      	orrs	r3, r2
 800d752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d00a      	beq.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d762:	4b43      	ldr	r3, [pc, #268]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d770:	493f      	ldr	r1, [pc, #252]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d772:	4313      	orrs	r3, r2
 800d774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d780:	2b00      	cmp	r3, #0
 800d782:	d028      	beq.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d784:	4b3a      	ldr	r3, [pc, #232]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d78a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d792:	4937      	ldr	r1, [pc, #220]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d794:	4313      	orrs	r3, r2
 800d796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d79e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d7a2:	d106      	bne.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7a4:	4b32      	ldr	r3, [pc, #200]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	4a31      	ldr	r2, [pc, #196]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d7aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7ae:	60d3      	str	r3, [r2, #12]
 800d7b0:	e011      	b.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d7ba:	d10c      	bne.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	3304      	adds	r3, #4
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 fe36 	bl	800e434 <RCCEx_PLLSAI1_Config>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d7cc:	7cfb      	ldrb	r3, [r7, #19]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800d7d2:	7cfb      	ldrb	r3, [r7, #19]
 800d7d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d028      	beq.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d7e2:	4b23      	ldr	r3, [pc, #140]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7f0:	491f      	ldr	r1, [pc, #124]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d800:	d106      	bne.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d802:	4b1b      	ldr	r3, [pc, #108]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	4a1a      	ldr	r2, [pc, #104]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d80c:	60d3      	str	r3, [r2, #12]
 800d80e:	e011      	b.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d814:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d818:	d10c      	bne.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	3304      	adds	r3, #4
 800d81e:	2101      	movs	r1, #1
 800d820:	4618      	mov	r0, r3
 800d822:	f000 fe07 	bl	800e434 <RCCEx_PLLSAI1_Config>
 800d826:	4603      	mov	r3, r0
 800d828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d82a:	7cfb      	ldrb	r3, [r7, #19]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d001      	beq.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800d830:	7cfb      	ldrb	r3, [r7, #19]
 800d832:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d02b      	beq.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d840:	4b0b      	ldr	r3, [pc, #44]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d84e:	4908      	ldr	r1, [pc, #32]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d850:	4313      	orrs	r3, r2
 800d852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d85a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d85e:	d109      	bne.n	800d874 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d860:	4b03      	ldr	r3, [pc, #12]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	4a02      	ldr	r2, [pc, #8]	; (800d870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d86a:	60d3      	str	r3, [r2, #12]
 800d86c:	e014      	b.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d86e:	bf00      	nop
 800d870:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d87c:	d10c      	bne.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	3304      	adds	r3, #4
 800d882:	2101      	movs	r1, #1
 800d884:	4618      	mov	r0, r3
 800d886:	f000 fdd5 	bl	800e434 <RCCEx_PLLSAI1_Config>
 800d88a:	4603      	mov	r3, r0
 800d88c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d88e:	7cfb      	ldrb	r3, [r7, #19]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d001      	beq.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800d894:	7cfb      	ldrb	r3, [r7, #19]
 800d896:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d02f      	beq.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d8a4:	4b2b      	ldr	r3, [pc, #172]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8b2:	4928      	ldr	r1, [pc, #160]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d8c2:	d10d      	bne.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	2102      	movs	r1, #2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 fdb2 	bl	800e434 <RCCEx_PLLSAI1_Config>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d8d4:	7cfb      	ldrb	r3, [r7, #19]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d014      	beq.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800d8da:	7cfb      	ldrb	r3, [r7, #19]
 800d8dc:	74bb      	strb	r3, [r7, #18]
 800d8de:	e011      	b.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d8e8:	d10c      	bne.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	3320      	adds	r3, #32
 800d8ee:	2102      	movs	r1, #2
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f000 fe93 	bl	800e61c <RCCEx_PLLSAI2_Config>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d8fa:	7cfb      	ldrb	r3, [r7, #19]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d001      	beq.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800d900:	7cfb      	ldrb	r3, [r7, #19]
 800d902:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00a      	beq.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d910:	4b10      	ldr	r3, [pc, #64]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d916:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d91e:	490d      	ldr	r1, [pc, #52]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d920:	4313      	orrs	r3, r2
 800d922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00b      	beq.n	800d94a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d932:	4b08      	ldr	r3, [pc, #32]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d938:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d942:	4904      	ldr	r1, [pc, #16]	; (800d954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d944:	4313      	orrs	r3, r2
 800d946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d94a:	7cbb      	ldrb	r3, [r7, #18]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3718      	adds	r7, #24
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	40021000 	.word	0x40021000

0800d958 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b088      	sub	sp, #32
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800d960:	2300      	movs	r3, #0
 800d962:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d96a:	d13e      	bne.n	800d9ea <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800d96c:	4bb2      	ldr	r3, [pc, #712]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800d96e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d976:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d97e:	d028      	beq.n	800d9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d986:	f200 8542 	bhi.w	800e40e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d990:	d005      	beq.n	800d99e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d998:	d00e      	beq.n	800d9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800d99a:	f000 bd38 	b.w	800e40e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800d99e:	4ba6      	ldr	r3, [pc, #664]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800d9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9a4:	f003 0302 	and.w	r3, r3, #2
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	f040 8532 	bne.w	800e412 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800d9ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9b2:	61fb      	str	r3, [r7, #28]
      break;
 800d9b4:	f000 bd2d 	b.w	800e412 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800d9b8:	4b9f      	ldr	r3, [pc, #636]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800d9ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d9be:	f003 0302 	and.w	r3, r3, #2
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	f040 8527 	bne.w	800e416 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 800d9c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d9cc:	61fb      	str	r3, [r7, #28]
      break;
 800d9ce:	f000 bd22 	b.w	800e416 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d9d2:	4b99      	ldr	r3, [pc, #612]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d9de:	f040 851c 	bne.w	800e41a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800d9e2:	4b96      	ldr	r3, [pc, #600]	; (800dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800d9e4:	61fb      	str	r3, [r7, #28]
      break;
 800d9e6:	f000 bd18 	b.w	800e41a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d9ea:	4b93      	ldr	r3, [pc, #588]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	f003 0303 	and.w	r3, r3, #3
 800d9f2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	2b03      	cmp	r3, #3
 800d9f8:	d036      	beq.n	800da68 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	2b03      	cmp	r3, #3
 800d9fe:	d840      	bhi.n	800da82 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	2b01      	cmp	r3, #1
 800da04:	d003      	beq.n	800da0e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	2b02      	cmp	r3, #2
 800da0a:	d020      	beq.n	800da4e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800da0c:	e039      	b.n	800da82 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800da0e:	4b8a      	ldr	r3, [pc, #552]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f003 0302 	and.w	r3, r3, #2
 800da16:	2b02      	cmp	r3, #2
 800da18:	d116      	bne.n	800da48 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800da1a:	4b87      	ldr	r3, [pc, #540]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f003 0308 	and.w	r3, r3, #8
 800da22:	2b00      	cmp	r3, #0
 800da24:	d005      	beq.n	800da32 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800da26:	4b84      	ldr	r3, [pc, #528]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	091b      	lsrs	r3, r3, #4
 800da2c:	f003 030f 	and.w	r3, r3, #15
 800da30:	e005      	b.n	800da3e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800da32:	4b81      	ldr	r3, [pc, #516]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800da34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800da38:	0a1b      	lsrs	r3, r3, #8
 800da3a:	f003 030f 	and.w	r3, r3, #15
 800da3e:	4a80      	ldr	r2, [pc, #512]	; (800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800da40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800da46:	e01f      	b.n	800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800da48:	2300      	movs	r3, #0
 800da4a:	61bb      	str	r3, [r7, #24]
      break;
 800da4c:	e01c      	b.n	800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800da4e:	4b7a      	ldr	r3, [pc, #488]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da5a:	d102      	bne.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800da5c:	4b79      	ldr	r3, [pc, #484]	; (800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800da5e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800da60:	e012      	b.n	800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800da62:	2300      	movs	r3, #0
 800da64:	61bb      	str	r3, [r7, #24]
      break;
 800da66:	e00f      	b.n	800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800da68:	4b73      	ldr	r3, [pc, #460]	; (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da74:	d102      	bne.n	800da7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800da76:	4b74      	ldr	r3, [pc, #464]	; (800dc48 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800da78:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800da7a:	e005      	b.n	800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800da7c:	2300      	movs	r3, #0
 800da7e:	61bb      	str	r3, [r7, #24]
      break;
 800da80:	e002      	b.n	800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800da82:	2300      	movs	r3, #0
 800da84:	61bb      	str	r3, [r7, #24]
      break;
 800da86:	bf00      	nop
    }

    switch(PeriphClk)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800da8e:	f000 80dd 	beq.w	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800da98:	f200 84c1 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800daa2:	f000 80d3 	beq.w	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800daac:	f200 84b7 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dab6:	f000 835f 	beq.w	800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dac0:	f200 84ad 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800daca:	f000 847e 	beq.w	800e3ca <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dad4:	f200 84a3 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dade:	f000 82cd 	beq.w	800e07c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dae8:	f200 8499 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800daf2:	f000 80ab 	beq.w	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dafc:	f200 848f 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db06:	f000 8090 	beq.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db10:	f200 8485 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db1a:	d07f      	beq.n	800dc1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db22:	f200 847c 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db2c:	f000 8403 	beq.w	800e336 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db36:	f200 8472 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db40:	f000 83af 	beq.w	800e2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db4a:	f200 8468 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db54:	f000 8379 	beq.w	800e24a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db5e:	f200 845e 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2b80      	cmp	r3, #128	; 0x80
 800db66:	f000 8344 	beq.w	800e1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2b80      	cmp	r3, #128	; 0x80
 800db6e:	f200 8456 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b20      	cmp	r3, #32
 800db76:	d84b      	bhi.n	800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f000 844f 	beq.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	3b01      	subs	r3, #1
 800db84:	2b1f      	cmp	r3, #31
 800db86:	f200 844a 	bhi.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800db8a:	a201      	add	r2, pc, #4	; (adr r2, 800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 800db8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db90:	0800dd79 	.word	0x0800dd79
 800db94:	0800dde7 	.word	0x0800dde7
 800db98:	0800e41f 	.word	0x0800e41f
 800db9c:	0800de7b 	.word	0x0800de7b
 800dba0:	0800e41f 	.word	0x0800e41f
 800dba4:	0800e41f 	.word	0x0800e41f
 800dba8:	0800e41f 	.word	0x0800e41f
 800dbac:	0800df01 	.word	0x0800df01
 800dbb0:	0800e41f 	.word	0x0800e41f
 800dbb4:	0800e41f 	.word	0x0800e41f
 800dbb8:	0800e41f 	.word	0x0800e41f
 800dbbc:	0800e41f 	.word	0x0800e41f
 800dbc0:	0800e41f 	.word	0x0800e41f
 800dbc4:	0800e41f 	.word	0x0800e41f
 800dbc8:	0800e41f 	.word	0x0800e41f
 800dbcc:	0800df79 	.word	0x0800df79
 800dbd0:	0800e41f 	.word	0x0800e41f
 800dbd4:	0800e41f 	.word	0x0800e41f
 800dbd8:	0800e41f 	.word	0x0800e41f
 800dbdc:	0800e41f 	.word	0x0800e41f
 800dbe0:	0800e41f 	.word	0x0800e41f
 800dbe4:	0800e41f 	.word	0x0800e41f
 800dbe8:	0800e41f 	.word	0x0800e41f
 800dbec:	0800e41f 	.word	0x0800e41f
 800dbf0:	0800e41f 	.word	0x0800e41f
 800dbf4:	0800e41f 	.word	0x0800e41f
 800dbf8:	0800e41f 	.word	0x0800e41f
 800dbfc:	0800e41f 	.word	0x0800e41f
 800dc00:	0800e41f 	.word	0x0800e41f
 800dc04:	0800e41f 	.word	0x0800e41f
 800dc08:	0800e41f 	.word	0x0800e41f
 800dc0c:	0800dffb 	.word	0x0800dffb
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2b40      	cmp	r3, #64	; 0x40
 800dc14:	f000 82c1 	beq.w	800e19a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800dc18:	f000 bc01 	b.w	800e41e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800dc1c:	69b9      	ldr	r1, [r7, #24]
 800dc1e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800dc22:	f000 fdd9 	bl	800e7d8 <RCCEx_GetSAIxPeriphCLKFreq>
 800dc26:	61f8      	str	r0, [r7, #28]
      break;
 800dc28:	e3fa      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800dc2a:	69b9      	ldr	r1, [r7, #24]
 800dc2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800dc30:	f000 fdd2 	bl	800e7d8 <RCCEx_GetSAIxPeriphCLKFreq>
 800dc34:	61f8      	str	r0, [r7, #28]
      break;
 800dc36:	e3f3      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800dc38:	40021000 	.word	0x40021000
 800dc3c:	0003d090 	.word	0x0003d090
 800dc40:	080334cc 	.word	0x080334cc
 800dc44:	00f42400 	.word	0x00f42400
 800dc48:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800dc4c:	4ba9      	ldr	r3, [pc, #676]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dc4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc52:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800dc56:	613b      	str	r3, [r7, #16]
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800dc5e:	d00c      	beq.n	800dc7a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800dc66:	d87f      	bhi.n	800dd68 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dc6e:	d04e      	beq.n	800dd0e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dc76:	d01d      	beq.n	800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 800dc78:	e076      	b.n	800dd68 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800dc7a:	4b9e      	ldr	r3, [pc, #632]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0302 	and.w	r3, r3, #2
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d172      	bne.n	800dd6c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800dc86:	4b9b      	ldr	r3, [pc, #620]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f003 0308 	and.w	r3, r3, #8
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d005      	beq.n	800dc9e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800dc92:	4b98      	ldr	r3, [pc, #608]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	091b      	lsrs	r3, r3, #4
 800dc98:	f003 030f 	and.w	r3, r3, #15
 800dc9c:	e005      	b.n	800dcaa <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800dc9e:	4b95      	ldr	r3, [pc, #596]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dca4:	0a1b      	lsrs	r3, r3, #8
 800dca6:	f003 030f 	and.w	r3, r3, #15
 800dcaa:	4a93      	ldr	r2, [pc, #588]	; (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800dcac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcb0:	61fb      	str	r3, [r7, #28]
          break;
 800dcb2:	e05b      	b.n	800dd6c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800dcb4:	4b8f      	ldr	r3, [pc, #572]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dcc0:	d156      	bne.n	800dd70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800dcc2:	4b8c      	ldr	r3, [pc, #560]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dcca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcce:	d14f      	bne.n	800dd70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800dcd0:	4b88      	ldr	r3, [pc, #544]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	0a1b      	lsrs	r3, r3, #8
 800dcd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcda:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	fb03 f202 	mul.w	r2, r3, r2
 800dce4:	4b83      	ldr	r3, [pc, #524]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	091b      	lsrs	r3, r3, #4
 800dcea:	f003 0307 	and.w	r3, r3, #7
 800dcee:	3301      	adds	r3, #1
 800dcf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcf4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800dcf6:	4b7f      	ldr	r3, [pc, #508]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	0d5b      	lsrs	r3, r3, #21
 800dcfc:	f003 0303 	and.w	r3, r3, #3
 800dd00:	3301      	adds	r3, #1
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	69ba      	ldr	r2, [r7, #24]
 800dd06:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd0a:	61fb      	str	r3, [r7, #28]
          break;
 800dd0c:	e030      	b.n	800dd70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800dd0e:	4b79      	ldr	r3, [pc, #484]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd1a:	d12b      	bne.n	800dd74 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800dd1c:	4b75      	ldr	r3, [pc, #468]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd28:	d124      	bne.n	800dd74 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800dd2a:	4b72      	ldr	r3, [pc, #456]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dd2c:	691b      	ldr	r3, [r3, #16]
 800dd2e:	0a1b      	lsrs	r3, r3, #8
 800dd30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd34:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	fb03 f202 	mul.w	r2, r3, r2
 800dd3e:	4b6d      	ldr	r3, [pc, #436]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	091b      	lsrs	r3, r3, #4
 800dd44:	f003 0307 	and.w	r3, r3, #7
 800dd48:	3301      	adds	r3, #1
 800dd4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd4e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800dd50:	4b68      	ldr	r3, [pc, #416]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	0d5b      	lsrs	r3, r3, #21
 800dd56:	f003 0303 	and.w	r3, r3, #3
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	005b      	lsls	r3, r3, #1
 800dd5e:	69ba      	ldr	r2, [r7, #24]
 800dd60:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd64:	61fb      	str	r3, [r7, #28]
          break;
 800dd66:	e005      	b.n	800dd74 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 800dd68:	bf00      	nop
 800dd6a:	e359      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800dd6c:	bf00      	nop
 800dd6e:	e357      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800dd70:	bf00      	nop
 800dd72:	e355      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800dd74:	bf00      	nop
        break;
 800dd76:	e353      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800dd78:	4b5e      	ldr	r3, [pc, #376]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dd7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd7e:	f003 0303 	and.w	r3, r3, #3
 800dd82:	613b      	str	r3, [r7, #16]
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	2b03      	cmp	r3, #3
 800dd88:	d827      	bhi.n	800ddda <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800dd8a:	a201      	add	r2, pc, #4	; (adr r2, 800dd90 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800dd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd90:	0800dda1 	.word	0x0800dda1
 800dd94:	0800dda9 	.word	0x0800dda9
 800dd98:	0800ddb1 	.word	0x0800ddb1
 800dd9c:	0800ddc5 	.word	0x0800ddc5
          frequency = HAL_RCC_GetPCLK2Freq();
 800dda0:	f7ff fa7a 	bl	800d298 <HAL_RCC_GetPCLK2Freq>
 800dda4:	61f8      	str	r0, [r7, #28]
          break;
 800dda6:	e01d      	b.n	800dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 800dda8:	f7ff f9c8 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800ddac:	61f8      	str	r0, [r7, #28]
          break;
 800ddae:	e019      	b.n	800dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ddb0:	4b50      	ldr	r3, [pc, #320]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ddb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddbc:	d10f      	bne.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800ddbe:	4b4f      	ldr	r3, [pc, #316]	; (800defc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800ddc0:	61fb      	str	r3, [r7, #28]
          break;
 800ddc2:	e00c      	b.n	800ddde <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ddc4:	4b4b      	ldr	r3, [pc, #300]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800ddc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ddca:	f003 0302 	and.w	r3, r3, #2
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d107      	bne.n	800dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800ddd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddd6:	61fb      	str	r3, [r7, #28]
          break;
 800ddd8:	e003      	b.n	800dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800ddda:	bf00      	nop
 800dddc:	e320      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800ddde:	bf00      	nop
 800dde0:	e31e      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800dde2:	bf00      	nop
        break;
 800dde4:	e31c      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800dde6:	4b43      	ldr	r3, [pc, #268]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800dde8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddec:	f003 030c 	and.w	r3, r3, #12
 800ddf0:	613b      	str	r3, [r7, #16]
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2b0c      	cmp	r3, #12
 800ddf6:	d83a      	bhi.n	800de6e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ddf8:	a201      	add	r2, pc, #4	; (adr r2, 800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800ddfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfe:	bf00      	nop
 800de00:	0800de35 	.word	0x0800de35
 800de04:	0800de6f 	.word	0x0800de6f
 800de08:	0800de6f 	.word	0x0800de6f
 800de0c:	0800de6f 	.word	0x0800de6f
 800de10:	0800de3d 	.word	0x0800de3d
 800de14:	0800de6f 	.word	0x0800de6f
 800de18:	0800de6f 	.word	0x0800de6f
 800de1c:	0800de6f 	.word	0x0800de6f
 800de20:	0800de45 	.word	0x0800de45
 800de24:	0800de6f 	.word	0x0800de6f
 800de28:	0800de6f 	.word	0x0800de6f
 800de2c:	0800de6f 	.word	0x0800de6f
 800de30:	0800de59 	.word	0x0800de59
          frequency = HAL_RCC_GetPCLK1Freq();
 800de34:	f7ff fa1a 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800de38:	61f8      	str	r0, [r7, #28]
          break;
 800de3a:	e01d      	b.n	800de78 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 800de3c:	f7ff f97e 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800de40:	61f8      	str	r0, [r7, #28]
          break;
 800de42:	e019      	b.n	800de78 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800de44:	4b2b      	ldr	r3, [pc, #172]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de50:	d10f      	bne.n	800de72 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800de52:	4b2a      	ldr	r3, [pc, #168]	; (800defc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800de54:	61fb      	str	r3, [r7, #28]
          break;
 800de56:	e00c      	b.n	800de72 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800de58:	4b26      	ldr	r3, [pc, #152]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800de5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de5e:	f003 0302 	and.w	r3, r3, #2
 800de62:	2b02      	cmp	r3, #2
 800de64:	d107      	bne.n	800de76 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800de66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de6a:	61fb      	str	r3, [r7, #28]
          break;
 800de6c:	e003      	b.n	800de76 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800de6e:	bf00      	nop
 800de70:	e2d6      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800de72:	bf00      	nop
 800de74:	e2d4      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800de76:	bf00      	nop
        break;
 800de78:	e2d2      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800de7a:	4b1e      	ldr	r3, [pc, #120]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800de7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800de84:	613b      	str	r3, [r7, #16]
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	2b30      	cmp	r3, #48	; 0x30
 800de8a:	d021      	beq.n	800ded0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	2b30      	cmp	r3, #48	; 0x30
 800de90:	d829      	bhi.n	800dee6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	2b20      	cmp	r3, #32
 800de96:	d011      	beq.n	800debc <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	2b20      	cmp	r3, #32
 800de9c:	d823      	bhi.n	800dee6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d003      	beq.n	800deac <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	2b10      	cmp	r3, #16
 800dea8:	d004      	beq.n	800deb4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800deaa:	e01c      	b.n	800dee6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800deac:	f7ff f9de 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800deb0:	61f8      	str	r0, [r7, #28]
          break;
 800deb2:	e01d      	b.n	800def0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 800deb4:	f7ff f942 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800deb8:	61f8      	str	r0, [r7, #28]
          break;
 800deba:	e019      	b.n	800def0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800debc:	4b0d      	ldr	r3, [pc, #52]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dec8:	d10f      	bne.n	800deea <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800deca:	4b0c      	ldr	r3, [pc, #48]	; (800defc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800decc:	61fb      	str	r3, [r7, #28]
          break;
 800dece:	e00c      	b.n	800deea <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ded0:	4b08      	ldr	r3, [pc, #32]	; (800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800ded2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ded6:	f003 0302 	and.w	r3, r3, #2
 800deda:	2b02      	cmp	r3, #2
 800dedc:	d107      	bne.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800dede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dee2:	61fb      	str	r3, [r7, #28]
          break;
 800dee4:	e003      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800dee6:	bf00      	nop
 800dee8:	e29a      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800deea:	bf00      	nop
 800deec:	e298      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800deee:	bf00      	nop
        break;
 800def0:	e296      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800def2:	bf00      	nop
 800def4:	40021000 	.word	0x40021000
 800def8:	080334cc 	.word	0x080334cc
 800defc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800df00:	4b9b      	ldr	r3, [pc, #620]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800df02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800df0a:	613b      	str	r3, [r7, #16]
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	2bc0      	cmp	r3, #192	; 0xc0
 800df10:	d021      	beq.n	800df56 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	2bc0      	cmp	r3, #192	; 0xc0
 800df16:	d829      	bhi.n	800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	2b80      	cmp	r3, #128	; 0x80
 800df1c:	d011      	beq.n	800df42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	2b80      	cmp	r3, #128	; 0x80
 800df22:	d823      	bhi.n	800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d003      	beq.n	800df32 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	2b40      	cmp	r3, #64	; 0x40
 800df2e:	d004      	beq.n	800df3a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 800df30:	e01c      	b.n	800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800df32:	f7ff f99b 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800df36:	61f8      	str	r0, [r7, #28]
          break;
 800df38:	e01d      	b.n	800df76 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800df3a:	f7ff f8ff 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800df3e:	61f8      	str	r0, [r7, #28]
          break;
 800df40:	e019      	b.n	800df76 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800df42:	4b8b      	ldr	r3, [pc, #556]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df4e:	d10f      	bne.n	800df70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 800df50:	4b88      	ldr	r3, [pc, #544]	; (800e174 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800df52:	61fb      	str	r3, [r7, #28]
          break;
 800df54:	e00c      	b.n	800df70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800df56:	4b86      	ldr	r3, [pc, #536]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800df58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df5c:	f003 0302 	and.w	r3, r3, #2
 800df60:	2b02      	cmp	r3, #2
 800df62:	d107      	bne.n	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 800df64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df68:	61fb      	str	r3, [r7, #28]
          break;
 800df6a:	e003      	b.n	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 800df6c:	bf00      	nop
 800df6e:	e257      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800df70:	bf00      	nop
 800df72:	e255      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800df74:	bf00      	nop
        break;
 800df76:	e253      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800df78:	4b7d      	ldr	r3, [pc, #500]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800df7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df82:	613b      	str	r3, [r7, #16]
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df8a:	d025      	beq.n	800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df92:	d82c      	bhi.n	800dfee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df9a:	d013      	beq.n	800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfa2:	d824      	bhi.n	800dfee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d004      	beq.n	800dfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfb0:	d004      	beq.n	800dfbc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800dfb2:	e01c      	b.n	800dfee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 800dfb4:	f7ff f95a 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800dfb8:	61f8      	str	r0, [r7, #28]
          break;
 800dfba:	e01d      	b.n	800dff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800dfbc:	f7ff f8be 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800dfc0:	61f8      	str	r0, [r7, #28]
          break;
 800dfc2:	e019      	b.n	800dff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dfc4:	4b6a      	ldr	r3, [pc, #424]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dfcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfd0:	d10f      	bne.n	800dff2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800dfd2:	4b68      	ldr	r3, [pc, #416]	; (800e174 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800dfd4:	61fb      	str	r3, [r7, #28]
          break;
 800dfd6:	e00c      	b.n	800dff2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800dfd8:	4b65      	ldr	r3, [pc, #404]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800dfda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfde:	f003 0302 	and.w	r3, r3, #2
 800dfe2:	2b02      	cmp	r3, #2
 800dfe4:	d107      	bne.n	800dff6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800dfe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfea:	61fb      	str	r3, [r7, #28]
          break;
 800dfec:	e003      	b.n	800dff6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800dfee:	bf00      	nop
 800dff0:	e216      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800dff2:	bf00      	nop
 800dff4:	e214      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800dff6:	bf00      	nop
        break;
 800dff8:	e212      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800dffa:	4b5d      	ldr	r3, [pc, #372]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800dffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e000:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e004:	613b      	str	r3, [r7, #16]
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e00c:	d025      	beq.n	800e05a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e014:	d82c      	bhi.n	800e070 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e01c:	d013      	beq.n	800e046 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e024:	d824      	bhi.n	800e070 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d004      	beq.n	800e036 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e032:	d004      	beq.n	800e03e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800e034:	e01c      	b.n	800e070 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e036:	f7ff f919 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800e03a:	61f8      	str	r0, [r7, #28]
          break;
 800e03c:	e01d      	b.n	800e07a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800e03e:	f7ff f87d 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800e042:	61f8      	str	r0, [r7, #28]
          break;
 800e044:	e019      	b.n	800e07a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e046:	4b4a      	ldr	r3, [pc, #296]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e04e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e052:	d10f      	bne.n	800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800e054:	4b47      	ldr	r3, [pc, #284]	; (800e174 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800e056:	61fb      	str	r3, [r7, #28]
          break;
 800e058:	e00c      	b.n	800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e05a:	4b45      	ldr	r3, [pc, #276]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e060:	f003 0302 	and.w	r3, r3, #2
 800e064:	2b02      	cmp	r3, #2
 800e066:	d107      	bne.n	800e078 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800e068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e06c:	61fb      	str	r3, [r7, #28]
          break;
 800e06e:	e003      	b.n	800e078 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 800e070:	bf00      	nop
 800e072:	e1d5      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e074:	bf00      	nop
 800e076:	e1d3      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e078:	bf00      	nop
        break;
 800e07a:	e1d1      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e07c:	4b3c      	ldr	r3, [pc, #240]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e082:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e086:	613b      	str	r3, [r7, #16]
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e08e:	d00c      	beq.n	800e0aa <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e096:	d864      	bhi.n	800e162 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e09e:	d008      	beq.n	800e0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0a6:	d030      	beq.n	800e10a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800e0a8:	e05b      	b.n	800e162 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800e0aa:	f7ff f847 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800e0ae:	61f8      	str	r0, [r7, #28]
          break;
 800e0b0:	e05c      	b.n	800e16c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800e0b2:	4b2f      	ldr	r3, [pc, #188]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0be:	d152      	bne.n	800e166 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800e0c0:	4b2b      	ldr	r3, [pc, #172]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d04c      	beq.n	800e166 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800e0cc:	4b28      	ldr	r3, [pc, #160]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e0ce:	691b      	ldr	r3, [r3, #16]
 800e0d0:	0a1b      	lsrs	r3, r3, #8
 800e0d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0d6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e0d8:	69bb      	ldr	r3, [r7, #24]
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	fb03 f202 	mul.w	r2, r3, r2
 800e0e0:	4b23      	ldr	r3, [pc, #140]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e0e2:	68db      	ldr	r3, [r3, #12]
 800e0e4:	091b      	lsrs	r3, r3, #4
 800e0e6:	f003 0307 	and.w	r3, r3, #7
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0f0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800e0f2:	4b1f      	ldr	r3, [pc, #124]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	0e5b      	lsrs	r3, r3, #25
 800e0f8:	f003 0303 	and.w	r3, r3, #3
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	005b      	lsls	r3, r3, #1
 800e100:	69ba      	ldr	r2, [r7, #24]
 800e102:	fbb2 f3f3 	udiv	r3, r2, r3
 800e106:	61fb      	str	r3, [r7, #28]
          break;
 800e108:	e02d      	b.n	800e166 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800e10a:	4b19      	ldr	r3, [pc, #100]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e116:	d128      	bne.n	800e16a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800e118:	4b15      	ldr	r3, [pc, #84]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e11a:	695b      	ldr	r3, [r3, #20]
 800e11c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e120:	2b00      	cmp	r3, #0
 800e122:	d022      	beq.n	800e16a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800e124:	4b12      	ldr	r3, [pc, #72]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	0a1b      	lsrs	r3, r3, #8
 800e12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e12e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	fb03 f202 	mul.w	r2, r3, r2
 800e138:	4b0d      	ldr	r3, [pc, #52]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	091b      	lsrs	r3, r3, #4
 800e13e:	f003 0307 	and.w	r3, r3, #7
 800e142:	3301      	adds	r3, #1
 800e144:	fbb2 f3f3 	udiv	r3, r2, r3
 800e148:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800e14a:	4b09      	ldr	r3, [pc, #36]	; (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e14c:	695b      	ldr	r3, [r3, #20]
 800e14e:	0e5b      	lsrs	r3, r3, #25
 800e150:	f003 0303 	and.w	r3, r3, #3
 800e154:	3301      	adds	r3, #1
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	69ba      	ldr	r2, [r7, #24]
 800e15a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e15e:	61fb      	str	r3, [r7, #28]
          break;
 800e160:	e003      	b.n	800e16a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800e162:	bf00      	nop
 800e164:	e15c      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e166:	bf00      	nop
 800e168:	e15a      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e16a:	bf00      	nop
        break;
 800e16c:	e158      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800e16e:	bf00      	nop
 800e170:	40021000 	.word	0x40021000
 800e174:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800e178:	4b9d      	ldr	r3, [pc, #628]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e17e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e182:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d103      	bne.n	800e192 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800e18a:	f7ff f885 	bl	800d298 <HAL_RCC_GetPCLK2Freq>
 800e18e:	61f8      	str	r0, [r7, #28]
        break;
 800e190:	e146      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800e192:	f7fe ffd3 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800e196:	61f8      	str	r0, [r7, #28]
        break;
 800e198:	e142      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800e19a:	4b95      	ldr	r3, [pc, #596]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e1a4:	613b      	str	r3, [r7, #16]
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1ac:	d013      	beq.n	800e1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1b4:	d819      	bhi.n	800e1ea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d004      	beq.n	800e1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1c2:	d004      	beq.n	800e1ce <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800e1c4:	e011      	b.n	800e1ea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e1c6:	f7ff f851 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800e1ca:	61f8      	str	r0, [r7, #28]
          break;
 800e1cc:	e010      	b.n	800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800e1ce:	f7fe ffb5 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800e1d2:	61f8      	str	r0, [r7, #28]
          break;
 800e1d4:	e00c      	b.n	800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e1d6:	4b86      	ldr	r3, [pc, #536]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e1de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1e2:	d104      	bne.n	800e1ee <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800e1e4:	4b83      	ldr	r3, [pc, #524]	; (800e3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800e1e6:	61fb      	str	r3, [r7, #28]
          break;
 800e1e8:	e001      	b.n	800e1ee <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800e1ea:	bf00      	nop
 800e1ec:	e118      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e1ee:	bf00      	nop
        break;
 800e1f0:	e116      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800e1f2:	4b7f      	ldr	r3, [pc, #508]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e1fc:	613b      	str	r3, [r7, #16]
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e204:	d013      	beq.n	800e22e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e20c:	d819      	bhi.n	800e242 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d004      	beq.n	800e21e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e21a:	d004      	beq.n	800e226 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 800e21c:	e011      	b.n	800e242 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e21e:	f7ff f825 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800e222:	61f8      	str	r0, [r7, #28]
          break;
 800e224:	e010      	b.n	800e248 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800e226:	f7fe ff89 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800e22a:	61f8      	str	r0, [r7, #28]
          break;
 800e22c:	e00c      	b.n	800e248 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e22e:	4b70      	ldr	r3, [pc, #448]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e23a:	d104      	bne.n	800e246 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 800e23c:	4b6d      	ldr	r3, [pc, #436]	; (800e3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800e23e:	61fb      	str	r3, [r7, #28]
          break;
 800e240:	e001      	b.n	800e246 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800e242:	bf00      	nop
 800e244:	e0ec      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e246:	bf00      	nop
        break;
 800e248:	e0ea      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800e24a:	4b69      	ldr	r3, [pc, #420]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e254:	613b      	str	r3, [r7, #16]
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e25c:	d013      	beq.n	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e264:	d819      	bhi.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d004      	beq.n	800e276 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e272:	d004      	beq.n	800e27e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 800e274:	e011      	b.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e276:	f7fe fff9 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800e27a:	61f8      	str	r0, [r7, #28]
          break;
 800e27c:	e010      	b.n	800e2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800e27e:	f7fe ff5d 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800e282:	61f8      	str	r0, [r7, #28]
          break;
 800e284:	e00c      	b.n	800e2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e286:	4b5a      	ldr	r3, [pc, #360]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e28e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e292:	d104      	bne.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 800e294:	4b57      	ldr	r3, [pc, #348]	; (800e3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800e296:	61fb      	str	r3, [r7, #28]
          break;
 800e298:	e001      	b.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800e29a:	bf00      	nop
 800e29c:	e0c0      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e29e:	bf00      	nop
        break;
 800e2a0:	e0be      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e2a2:	4b53      	ldr	r3, [pc, #332]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800e2ac:	613b      	str	r3, [r7, #16]
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e2b4:	d02c      	beq.n	800e310 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e2bc:	d833      	bhi.n	800e326 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e2c4:	d01a      	beq.n	800e2fc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e2cc:	d82b      	bhi.n	800e326 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d004      	beq.n	800e2de <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e2da:	d004      	beq.n	800e2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 800e2dc:	e023      	b.n	800e326 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e2de:	f7fe ffc5 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800e2e2:	61f8      	str	r0, [r7, #28]
          break;
 800e2e4:	e026      	b.n	800e334 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800e2e6:	4b42      	ldr	r3, [pc, #264]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e2e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e2ec:	f003 0302 	and.w	r3, r3, #2
 800e2f0:	2b02      	cmp	r3, #2
 800e2f2:	d11a      	bne.n	800e32a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800e2f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e2f8:	61fb      	str	r3, [r7, #28]
          break;
 800e2fa:	e016      	b.n	800e32a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e2fc:	4b3c      	ldr	r3, [pc, #240]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e308:	d111      	bne.n	800e32e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800e30a:	4b3a      	ldr	r3, [pc, #232]	; (800e3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800e30c:	61fb      	str	r3, [r7, #28]
          break;
 800e30e:	e00e      	b.n	800e32e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e310:	4b37      	ldr	r3, [pc, #220]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e316:	f003 0302 	and.w	r3, r3, #2
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d109      	bne.n	800e332 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800e31e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e322:	61fb      	str	r3, [r7, #28]
          break;
 800e324:	e005      	b.n	800e332 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800e326:	bf00      	nop
 800e328:	e07a      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e32a:	bf00      	nop
 800e32c:	e078      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e32e:	bf00      	nop
 800e330:	e076      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e332:	bf00      	nop
        break;
 800e334:	e074      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e336:	4b2e      	ldr	r3, [pc, #184]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e33c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e340:	613b      	str	r3, [r7, #16]
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e348:	d02c      	beq.n	800e3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e350:	d833      	bhi.n	800e3ba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e358:	d01a      	beq.n	800e390 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e360:	d82b      	bhi.n	800e3ba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d004      	beq.n	800e372 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e36e:	d004      	beq.n	800e37a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 800e370:	e023      	b.n	800e3ba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e372:	f7fe ff7b 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800e376:	61f8      	str	r0, [r7, #28]
          break;
 800e378:	e026      	b.n	800e3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800e37a:	4b1d      	ldr	r3, [pc, #116]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e37c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e380:	f003 0302 	and.w	r3, r3, #2
 800e384:	2b02      	cmp	r3, #2
 800e386:	d11a      	bne.n	800e3be <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 800e388:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e38c:	61fb      	str	r3, [r7, #28]
          break;
 800e38e:	e016      	b.n	800e3be <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e390:	4b17      	ldr	r3, [pc, #92]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e39c:	d111      	bne.n	800e3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800e39e:	4b15      	ldr	r3, [pc, #84]	; (800e3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800e3a0:	61fb      	str	r3, [r7, #28]
          break;
 800e3a2:	e00e      	b.n	800e3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e3a4:	4b12      	ldr	r3, [pc, #72]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3aa:	f003 0302 	and.w	r3, r3, #2
 800e3ae:	2b02      	cmp	r3, #2
 800e3b0:	d109      	bne.n	800e3c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800e3b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3b6:	61fb      	str	r3, [r7, #28]
          break;
 800e3b8:	e005      	b.n	800e3c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800e3ba:	bf00      	nop
 800e3bc:	e030      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e3be:	bf00      	nop
 800e3c0:	e02e      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e3c2:	bf00      	nop
 800e3c4:	e02c      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800e3c6:	bf00      	nop
        break;
 800e3c8:	e02a      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800e3ca:	4b09      	ldr	r3, [pc, #36]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800e3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e3d4:	613b      	str	r3, [r7, #16]
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d004      	beq.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3e2:	d009      	beq.n	800e3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800e3e4:	e012      	b.n	800e40c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800e3e6:	f7fe ff41 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800e3ea:	61f8      	str	r0, [r7, #28]
          break;
 800e3ec:	e00e      	b.n	800e40c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800e3ee:	bf00      	nop
 800e3f0:	40021000 	.word	0x40021000
 800e3f4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e3f8:	4b0c      	ldr	r3, [pc, #48]	; (800e42c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e404:	d101      	bne.n	800e40a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800e406:	4b0a      	ldr	r3, [pc, #40]	; (800e430 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800e408:	61fb      	str	r3, [r7, #28]
          break;
 800e40a:	bf00      	nop
        break;
 800e40c:	e008      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800e40e:	bf00      	nop
 800e410:	e006      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800e412:	bf00      	nop
 800e414:	e004      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800e416:	bf00      	nop
 800e418:	e002      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800e41a:	bf00      	nop
 800e41c:	e000      	b.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800e41e:	bf00      	nop
    }
  }

  return(frequency);
 800e420:	69fb      	ldr	r3, [r7, #28]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3720      	adds	r7, #32
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	40021000 	.word	0x40021000
 800e430:	00f42400 	.word	0x00f42400

0800e434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e43e:	2300      	movs	r3, #0
 800e440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e442:	4b75      	ldr	r3, [pc, #468]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	f003 0303 	and.w	r3, r3, #3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d018      	beq.n	800e480 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800e44e:	4b72      	ldr	r3, [pc, #456]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	f003 0203 	and.w	r2, r3, #3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d10d      	bne.n	800e47a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
       ||
 800e462:	2b00      	cmp	r3, #0
 800e464:	d009      	beq.n	800e47a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800e466:	4b6c      	ldr	r3, [pc, #432]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	091b      	lsrs	r3, r3, #4
 800e46c:	f003 0307 	and.w	r3, r3, #7
 800e470:	1c5a      	adds	r2, r3, #1
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	685b      	ldr	r3, [r3, #4]
       ||
 800e476:	429a      	cmp	r2, r3
 800e478:	d047      	beq.n	800e50a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800e47a:	2301      	movs	r3, #1
 800e47c:	73fb      	strb	r3, [r7, #15]
 800e47e:	e044      	b.n	800e50a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2b03      	cmp	r3, #3
 800e486:	d018      	beq.n	800e4ba <RCCEx_PLLSAI1_Config+0x86>
 800e488:	2b03      	cmp	r3, #3
 800e48a:	d825      	bhi.n	800e4d8 <RCCEx_PLLSAI1_Config+0xa4>
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d002      	beq.n	800e496 <RCCEx_PLLSAI1_Config+0x62>
 800e490:	2b02      	cmp	r3, #2
 800e492:	d009      	beq.n	800e4a8 <RCCEx_PLLSAI1_Config+0x74>
 800e494:	e020      	b.n	800e4d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e496:	4b60      	ldr	r3, [pc, #384]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f003 0302 	and.w	r3, r3, #2
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d11d      	bne.n	800e4de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e4a6:	e01a      	b.n	800e4de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e4a8:	4b5b      	ldr	r3, [pc, #364]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d116      	bne.n	800e4e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e4b8:	e013      	b.n	800e4e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e4ba:	4b57      	ldr	r3, [pc, #348]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d10f      	bne.n	800e4e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e4c6:	4b54      	ldr	r3, [pc, #336]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d109      	bne.n	800e4e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e4d6:	e006      	b.n	800e4e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	73fb      	strb	r3, [r7, #15]
      break;
 800e4dc:	e004      	b.n	800e4e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e4de:	bf00      	nop
 800e4e0:	e002      	b.n	800e4e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e4e2:	bf00      	nop
 800e4e4:	e000      	b.n	800e4e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e4e6:	bf00      	nop
    }

    if(status == HAL_OK)
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10d      	bne.n	800e50a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800e4ee:	4b4a      	ldr	r3, [pc, #296]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6819      	ldr	r1, [r3, #0]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	3b01      	subs	r3, #1
 800e500:	011b      	lsls	r3, r3, #4
 800e502:	430b      	orrs	r3, r1
 800e504:	4944      	ldr	r1, [pc, #272]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e506:	4313      	orrs	r3, r2
 800e508:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800e50a:	7bfb      	ldrb	r3, [r7, #15]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d17d      	bne.n	800e60c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800e510:	4b41      	ldr	r3, [pc, #260]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a40      	ldr	r2, [pc, #256]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e516:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e51a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e51c:	f7fd fae0 	bl	800bae0 <HAL_GetTick>
 800e520:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e522:	e009      	b.n	800e538 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e524:	f7fd fadc 	bl	800bae0 <HAL_GetTick>
 800e528:	4602      	mov	r2, r0
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	2b02      	cmp	r3, #2
 800e530:	d902      	bls.n	800e538 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800e532:	2303      	movs	r3, #3
 800e534:	73fb      	strb	r3, [r7, #15]
        break;
 800e536:	e005      	b.n	800e544 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e538:	4b37      	ldr	r3, [pc, #220]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1ef      	bne.n	800e524 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800e544:	7bfb      	ldrb	r3, [r7, #15]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d160      	bne.n	800e60c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d111      	bne.n	800e574 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e550:	4b31      	ldr	r3, [pc, #196]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e552:	691b      	ldr	r3, [r3, #16]
 800e554:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800e558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	6892      	ldr	r2, [r2, #8]
 800e560:	0211      	lsls	r1, r2, #8
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	68d2      	ldr	r2, [r2, #12]
 800e566:	0912      	lsrs	r2, r2, #4
 800e568:	0452      	lsls	r2, r2, #17
 800e56a:	430a      	orrs	r2, r1
 800e56c:	492a      	ldr	r1, [pc, #168]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e56e:	4313      	orrs	r3, r2
 800e570:	610b      	str	r3, [r1, #16]
 800e572:	e027      	b.n	800e5c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d112      	bne.n	800e5a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e57a:	4b27      	ldr	r3, [pc, #156]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800e582:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	6892      	ldr	r2, [r2, #8]
 800e58a:	0211      	lsls	r1, r2, #8
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	6912      	ldr	r2, [r2, #16]
 800e590:	0852      	lsrs	r2, r2, #1
 800e592:	3a01      	subs	r2, #1
 800e594:	0552      	lsls	r2, r2, #21
 800e596:	430a      	orrs	r2, r1
 800e598:	491f      	ldr	r1, [pc, #124]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e59a:	4313      	orrs	r3, r2
 800e59c:	610b      	str	r3, [r1, #16]
 800e59e:	e011      	b.n	800e5c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e5a0:	4b1d      	ldr	r3, [pc, #116]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e5a2:	691b      	ldr	r3, [r3, #16]
 800e5a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800e5a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	6892      	ldr	r2, [r2, #8]
 800e5b0:	0211      	lsls	r1, r2, #8
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	6952      	ldr	r2, [r2, #20]
 800e5b6:	0852      	lsrs	r2, r2, #1
 800e5b8:	3a01      	subs	r2, #1
 800e5ba:	0652      	lsls	r2, r2, #25
 800e5bc:	430a      	orrs	r2, r1
 800e5be:	4916      	ldr	r1, [pc, #88]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e5c0:	4313      	orrs	r3, r2
 800e5c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800e5c4:	4b14      	ldr	r3, [pc, #80]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a13      	ldr	r2, [pc, #76]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e5ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e5ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5d0:	f7fd fa86 	bl	800bae0 <HAL_GetTick>
 800e5d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e5d6:	e009      	b.n	800e5ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e5d8:	f7fd fa82 	bl	800bae0 <HAL_GetTick>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	2b02      	cmp	r3, #2
 800e5e4:	d902      	bls.n	800e5ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800e5e6:	2303      	movs	r3, #3
 800e5e8:	73fb      	strb	r3, [r7, #15]
          break;
 800e5ea:	e005      	b.n	800e5f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e5ec:	4b0a      	ldr	r3, [pc, #40]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d0ef      	beq.n	800e5d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d106      	bne.n	800e60c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800e5fe:	4b06      	ldr	r3, [pc, #24]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e600:	691a      	ldr	r2, [r3, #16]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	699b      	ldr	r3, [r3, #24]
 800e606:	4904      	ldr	r1, [pc, #16]	; (800e618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e608:	4313      	orrs	r3, r2
 800e60a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800e60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	40021000 	.word	0x40021000

0800e61c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e626:	2300      	movs	r3, #0
 800e628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e62a:	4b6a      	ldr	r3, [pc, #424]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	f003 0303 	and.w	r3, r3, #3
 800e632:	2b00      	cmp	r3, #0
 800e634:	d018      	beq.n	800e668 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800e636:	4b67      	ldr	r3, [pc, #412]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	f003 0203 	and.w	r2, r3, #3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	429a      	cmp	r2, r3
 800e644:	d10d      	bne.n	800e662 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
       ||
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d009      	beq.n	800e662 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800e64e:	4b61      	ldr	r3, [pc, #388]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	091b      	lsrs	r3, r3, #4
 800e654:	f003 0307 	and.w	r3, r3, #7
 800e658:	1c5a      	adds	r2, r3, #1
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	685b      	ldr	r3, [r3, #4]
       ||
 800e65e:	429a      	cmp	r2, r3
 800e660:	d047      	beq.n	800e6f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800e662:	2301      	movs	r3, #1
 800e664:	73fb      	strb	r3, [r7, #15]
 800e666:	e044      	b.n	800e6f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b03      	cmp	r3, #3
 800e66e:	d018      	beq.n	800e6a2 <RCCEx_PLLSAI2_Config+0x86>
 800e670:	2b03      	cmp	r3, #3
 800e672:	d825      	bhi.n	800e6c0 <RCCEx_PLLSAI2_Config+0xa4>
 800e674:	2b01      	cmp	r3, #1
 800e676:	d002      	beq.n	800e67e <RCCEx_PLLSAI2_Config+0x62>
 800e678:	2b02      	cmp	r3, #2
 800e67a:	d009      	beq.n	800e690 <RCCEx_PLLSAI2_Config+0x74>
 800e67c:	e020      	b.n	800e6c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e67e:	4b55      	ldr	r3, [pc, #340]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f003 0302 	and.w	r3, r3, #2
 800e686:	2b00      	cmp	r3, #0
 800e688:	d11d      	bne.n	800e6c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800e68a:	2301      	movs	r3, #1
 800e68c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e68e:	e01a      	b.n	800e6c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e690:	4b50      	ldr	r3, [pc, #320]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d116      	bne.n	800e6ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800e69c:	2301      	movs	r3, #1
 800e69e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6a0:	e013      	b.n	800e6ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e6a2:	4b4c      	ldr	r3, [pc, #304]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d10f      	bne.n	800e6ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e6ae:	4b49      	ldr	r3, [pc, #292]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d109      	bne.n	800e6ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e6be:	e006      	b.n	800e6ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	73fb      	strb	r3, [r7, #15]
      break;
 800e6c4:	e004      	b.n	800e6d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800e6c6:	bf00      	nop
 800e6c8:	e002      	b.n	800e6d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800e6ca:	bf00      	nop
 800e6cc:	e000      	b.n	800e6d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800e6ce:	bf00      	nop
    }

    if(status == HAL_OK)
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d10d      	bne.n	800e6f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800e6d6:	4b3f      	ldr	r3, [pc, #252]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6819      	ldr	r1, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	011b      	lsls	r3, r3, #4
 800e6ea:	430b      	orrs	r3, r1
 800e6ec:	4939      	ldr	r1, [pc, #228]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800e6f2:	7bfb      	ldrb	r3, [r7, #15]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d167      	bne.n	800e7c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800e6f8:	4b36      	ldr	r3, [pc, #216]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a35      	ldr	r2, [pc, #212]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e6fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e704:	f7fd f9ec 	bl	800bae0 <HAL_GetTick>
 800e708:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e70a:	e009      	b.n	800e720 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e70c:	f7fd f9e8 	bl	800bae0 <HAL_GetTick>
 800e710:	4602      	mov	r2, r0
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	2b02      	cmp	r3, #2
 800e718:	d902      	bls.n	800e720 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800e71a:	2303      	movs	r3, #3
 800e71c:	73fb      	strb	r3, [r7, #15]
        break;
 800e71e:	e005      	b.n	800e72c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e720:	4b2c      	ldr	r3, [pc, #176]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d1ef      	bne.n	800e70c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800e72c:	7bfb      	ldrb	r3, [r7, #15]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d14a      	bne.n	800e7c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d111      	bne.n	800e75c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e738:	4b26      	ldr	r3, [pc, #152]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e73a:	695b      	ldr	r3, [r3, #20]
 800e73c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800e740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	6892      	ldr	r2, [r2, #8]
 800e748:	0211      	lsls	r1, r2, #8
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	68d2      	ldr	r2, [r2, #12]
 800e74e:	0912      	lsrs	r2, r2, #4
 800e750:	0452      	lsls	r2, r2, #17
 800e752:	430a      	orrs	r2, r1
 800e754:	491f      	ldr	r1, [pc, #124]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e756:	4313      	orrs	r3, r2
 800e758:	614b      	str	r3, [r1, #20]
 800e75a:	e011      	b.n	800e780 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e75c:	4b1d      	ldr	r3, [pc, #116]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e75e:	695b      	ldr	r3, [r3, #20]
 800e760:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800e764:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	6892      	ldr	r2, [r2, #8]
 800e76c:	0211      	lsls	r1, r2, #8
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	6912      	ldr	r2, [r2, #16]
 800e772:	0852      	lsrs	r2, r2, #1
 800e774:	3a01      	subs	r2, #1
 800e776:	0652      	lsls	r2, r2, #25
 800e778:	430a      	orrs	r2, r1
 800e77a:	4916      	ldr	r1, [pc, #88]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e77c:	4313      	orrs	r3, r2
 800e77e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800e780:	4b14      	ldr	r3, [pc, #80]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a13      	ldr	r2, [pc, #76]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e78a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e78c:	f7fd f9a8 	bl	800bae0 <HAL_GetTick>
 800e790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e792:	e009      	b.n	800e7a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e794:	f7fd f9a4 	bl	800bae0 <HAL_GetTick>
 800e798:	4602      	mov	r2, r0
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	2b02      	cmp	r3, #2
 800e7a0:	d902      	bls.n	800e7a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800e7a2:	2303      	movs	r3, #3
 800e7a4:	73fb      	strb	r3, [r7, #15]
          break;
 800e7a6:	e005      	b.n	800e7b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e7a8:	4b0a      	ldr	r3, [pc, #40]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d0ef      	beq.n	800e794 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800e7b4:	7bfb      	ldrb	r3, [r7, #15]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d106      	bne.n	800e7c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800e7ba:	4b06      	ldr	r3, [pc, #24]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e7bc:	695a      	ldr	r2, [r3, #20]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	695b      	ldr	r3, [r3, #20]
 800e7c2:	4904      	ldr	r1, [pc, #16]	; (800e7d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800e7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	40021000 	.word	0x40021000

0800e7d8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b089      	sub	sp, #36	; 0x24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7f4:	d10c      	bne.n	800e810 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800e7f6:	4b6e      	ldr	r3, [pc, #440]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7fc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800e800:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800e802:	69bb      	ldr	r3, [r7, #24]
 800e804:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e808:	d112      	bne.n	800e830 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e80a:	4b6a      	ldr	r3, [pc, #424]	; (800e9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800e80c:	61fb      	str	r3, [r7, #28]
 800e80e:	e00f      	b.n	800e830 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e816:	d10b      	bne.n	800e830 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800e818:	4b65      	ldr	r3, [pc, #404]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e81a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e81e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800e822:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e82a:	d101      	bne.n	800e830 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800e82c:	4b61      	ldr	r3, [pc, #388]	; (800e9b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800e82e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	2b00      	cmp	r3, #0
 800e834:	f040 80b4 	bne.w	800e9a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e842:	d003      	beq.n	800e84c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e84a:	d135      	bne.n	800e8b8 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800e84c:	4b58      	ldr	r3, [pc, #352]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e858:	f040 80a1 	bne.w	800e99e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800e85c:	4b54      	ldr	r3, [pc, #336]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e864:	2b00      	cmp	r3, #0
 800e866:	f000 809a 	beq.w	800e99e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e86a:	4b51      	ldr	r3, [pc, #324]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	091b      	lsrs	r3, r3, #4
 800e870:	f003 0307 	and.w	r3, r3, #7
 800e874:	3301      	adds	r3, #1
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	fbb2 f3f3 	udiv	r3, r2, r3
 800e87c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e87e:	4b4c      	ldr	r3, [pc, #304]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	0a1b      	lsrs	r3, r3, #8
 800e884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e888:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d10a      	bne.n	800e8a6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800e890:	4b47      	ldr	r3, [pc, #284]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d002      	beq.n	800e8a2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800e89c:	2311      	movs	r3, #17
 800e89e:	617b      	str	r3, [r7, #20]
 800e8a0:	e001      	b.n	800e8a6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800e8a2:	2307      	movs	r3, #7
 800e8a4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	fb03 f202 	mul.w	r2, r3, r2
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8b4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800e8b6:	e072      	b.n	800e99e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d133      	bne.n	800e926 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800e8be:	4b3c      	ldr	r3, [pc, #240]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e8c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e8ca:	d169      	bne.n	800e9a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800e8cc:	4b38      	ldr	r3, [pc, #224]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e8ce:	691b      	ldr	r3, [r3, #16]
 800e8d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d063      	beq.n	800e9a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e8d8:	4b35      	ldr	r3, [pc, #212]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	091b      	lsrs	r3, r3, #4
 800e8de:	f003 0307 	and.w	r3, r3, #7
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	693a      	ldr	r2, [r7, #16]
 800e8e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8ea:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800e8ec:	4b30      	ldr	r3, [pc, #192]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	0a1b      	lsrs	r3, r3, #8
 800e8f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8f6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d10a      	bne.n	800e914 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800e8fe:	4b2c      	ldr	r3, [pc, #176]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e900:	691b      	ldr	r3, [r3, #16]
 800e902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e906:	2b00      	cmp	r3, #0
 800e908:	d002      	beq.n	800e910 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800e90a:	2311      	movs	r3, #17
 800e90c:	617b      	str	r3, [r7, #20]
 800e90e:	e001      	b.n	800e914 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800e910:	2307      	movs	r3, #7
 800e912:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	68fa      	ldr	r2, [r7, #12]
 800e918:	fb03 f202 	mul.w	r2, r3, r2
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e922:	61fb      	str	r3, [r7, #28]
 800e924:	e03c      	b.n	800e9a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e92c:	d003      	beq.n	800e936 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e934:	d134      	bne.n	800e9a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800e936:	4b1e      	ldr	r3, [pc, #120]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e93e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e942:	d12d      	bne.n	800e9a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800e944:	4b1a      	ldr	r3, [pc, #104]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e946:	695b      	ldr	r3, [r3, #20]
 800e948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d027      	beq.n	800e9a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800e950:	4b17      	ldr	r3, [pc, #92]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	091b      	lsrs	r3, r3, #4
 800e956:	f003 0307 	and.w	r3, r3, #7
 800e95a:	3301      	adds	r3, #1
 800e95c:	693a      	ldr	r2, [r7, #16]
 800e95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e962:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800e964:	4b12      	ldr	r3, [pc, #72]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e966:	695b      	ldr	r3, [r3, #20]
 800e968:	0a1b      	lsrs	r3, r3, #8
 800e96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e96e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d10a      	bne.n	800e98c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800e976:	4b0e      	ldr	r3, [pc, #56]	; (800e9b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800e978:	695b      	ldr	r3, [r3, #20]
 800e97a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d002      	beq.n	800e988 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800e982:	2311      	movs	r3, #17
 800e984:	617b      	str	r3, [r7, #20]
 800e986:	e001      	b.n	800e98c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800e988:	2307      	movs	r3, #7
 800e98a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	68fa      	ldr	r2, [r7, #12]
 800e990:	fb03 f202 	mul.w	r2, r3, r2
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	fbb2 f3f3 	udiv	r3, r2, r3
 800e99a:	61fb      	str	r3, [r7, #28]
 800e99c:	e000      	b.n	800e9a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800e99e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800e9a0:	69fb      	ldr	r3, [r7, #28]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3724      	adds	r7, #36	; 0x24
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ac:	4770      	bx	lr
 800e9ae:	bf00      	nop
 800e9b0:	40021000 	.word	0x40021000
 800e9b4:	001fff68 	.word	0x001fff68

0800e9b8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
 800e9c4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d904      	bls.n	800e9d6 <HAL_SAI_InitProtocol+0x1e>
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	3b03      	subs	r3, #3
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d812      	bhi.n	800e9fa <HAL_SAI_InitProtocol+0x42>
 800e9d4:	e008      	b.n	800e9e8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	68b9      	ldr	r1, [r7, #8]
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f000 fa7b 	bl	800eed8 <SAI_InitI2S>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	75fb      	strb	r3, [r7, #23]
      break;
 800e9e6:	e00b      	b.n	800ea00 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	68b9      	ldr	r1, [r7, #8]
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	f000 fb24 	bl	800f03c <SAI_InitPCM>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	75fb      	strb	r3, [r7, #23]
      break;
 800e9f8:	e002      	b.n	800ea00 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	75fb      	strb	r3, [r7, #23]
      break;
 800e9fe:	bf00      	nop
  }

  if (status == HAL_OK)
 800ea00:	7dfb      	ldrb	r3, [r7, #23]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d104      	bne.n	800ea10 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f000 f808 	bl	800ea1c <HAL_SAI_Init>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ea10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3718      	adds	r7, #24
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
	...

0800ea1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b088      	sub	sp, #32
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d101      	bne.n	800ea2e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e155      	b.n	800ecda <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d106      	bne.n	800ea48 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f7fc fe02 	bl	800b64c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f000 fbb1 	bl	800f1b0 <SAI_Disable>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d001      	beq.n	800ea58 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800ea54:	2301      	movs	r3, #1
 800ea56:	e140      	b.n	800ecda <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2202      	movs	r2, #2
 800ea5c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	d00c      	beq.n	800ea82 <HAL_SAI_Init+0x66>
 800ea68:	2b02      	cmp	r3, #2
 800ea6a:	d80d      	bhi.n	800ea88 <HAL_SAI_Init+0x6c>
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d002      	beq.n	800ea76 <HAL_SAI_Init+0x5a>
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d003      	beq.n	800ea7c <HAL_SAI_Init+0x60>
 800ea74:	e008      	b.n	800ea88 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	61fb      	str	r3, [r7, #28]
      break;
 800ea7a:	e008      	b.n	800ea8e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ea7c:	2310      	movs	r3, #16
 800ea7e:	61fb      	str	r3, [r7, #28]
      break;
 800ea80:	e005      	b.n	800ea8e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ea82:	2320      	movs	r3, #32
 800ea84:	61fb      	str	r3, [r7, #28]
      break;
 800ea86:	e002      	b.n	800ea8e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	61fb      	str	r3, [r7, #28]
      break;
 800ea8c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	2b03      	cmp	r3, #3
 800ea94:	d81d      	bhi.n	800ead2 <HAL_SAI_Init+0xb6>
 800ea96:	a201      	add	r2, pc, #4	; (adr r2, 800ea9c <HAL_SAI_Init+0x80>)
 800ea98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea9c:	0800eaad 	.word	0x0800eaad
 800eaa0:	0800eab3 	.word	0x0800eab3
 800eaa4:	0800eabb 	.word	0x0800eabb
 800eaa8:	0800eac3 	.word	0x0800eac3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800eaac:	2300      	movs	r3, #0
 800eaae:	617b      	str	r3, [r7, #20]
      break;
 800eab0:	e012      	b.n	800ead8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800eab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eab6:	617b      	str	r3, [r7, #20]
      break;
 800eab8:	e00e      	b.n	800ead8 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800eaba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eabe:	617b      	str	r3, [r7, #20]
      break;
 800eac0:	e00a      	b.n	800ead8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800eac2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eac6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	f043 0301 	orr.w	r3, r3, #1
 800eace:	61fb      	str	r3, [r7, #28]
      break;
 800ead0:	e002      	b.n	800ead8 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800ead2:	2300      	movs	r3, #0
 800ead4:	617b      	str	r3, [r7, #20]
      break;
 800ead6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4a81      	ldr	r2, [pc, #516]	; (800ece4 <HAL_SAI_Init+0x2c8>)
 800eade:	4293      	cmp	r3, r2
 800eae0:	d004      	beq.n	800eaec <HAL_SAI_Init+0xd0>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4a80      	ldr	r2, [pc, #512]	; (800ece8 <HAL_SAI_Init+0x2cc>)
 800eae8:	4293      	cmp	r3, r2
 800eaea:	d103      	bne.n	800eaf4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800eaec:	4a7f      	ldr	r2, [pc, #508]	; (800ecec <HAL_SAI_Init+0x2d0>)
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	6013      	str	r3, [r2, #0]
 800eaf2:	e002      	b.n	800eafa <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800eaf4:	4a7e      	ldr	r2, [pc, #504]	; (800ecf0 <HAL_SAI_Init+0x2d4>)
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	69db      	ldr	r3, [r3, #28]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d041      	beq.n	800eb86 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4a77      	ldr	r2, [pc, #476]	; (800ece4 <HAL_SAI_Init+0x2c8>)
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d004      	beq.n	800eb16 <HAL_SAI_Init+0xfa>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4a75      	ldr	r2, [pc, #468]	; (800ece8 <HAL_SAI_Init+0x2cc>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d105      	bne.n	800eb22 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800eb16:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800eb1a:	f7fe ff1d 	bl	800d958 <HAL_RCCEx_GetPeriphCLKFreq>
 800eb1e:	6138      	str	r0, [r7, #16]
 800eb20:	e004      	b.n	800eb2c <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800eb22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800eb26:	f7fe ff17 	bl	800d958 <HAL_RCCEx_GetPeriphCLKFreq>
 800eb2a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800eb2c:	693a      	ldr	r2, [r7, #16]
 800eb2e:	4613      	mov	r3, r2
 800eb30:	009b      	lsls	r3, r3, #2
 800eb32:	4413      	add	r3, r2
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	461a      	mov	r2, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	69db      	ldr	r3, [r3, #28]
 800eb3c:	025b      	lsls	r3, r3, #9
 800eb3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb42:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	4a6b      	ldr	r2, [pc, #428]	; (800ecf4 <HAL_SAI_Init+0x2d8>)
 800eb48:	fba2 2303 	umull	r2, r3, r2, r3
 800eb4c:	08da      	lsrs	r2, r3, #3
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800eb52:	68f9      	ldr	r1, [r7, #12]
 800eb54:	4b67      	ldr	r3, [pc, #412]	; (800ecf4 <HAL_SAI_Init+0x2d8>)
 800eb56:	fba3 2301 	umull	r2, r3, r3, r1
 800eb5a:	08da      	lsrs	r2, r3, #3
 800eb5c:	4613      	mov	r3, r2
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	4413      	add	r3, r2
 800eb62:	005b      	lsls	r3, r3, #1
 800eb64:	1aca      	subs	r2, r1, r3
 800eb66:	2a08      	cmp	r2, #8
 800eb68:	d904      	bls.n	800eb74 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6a1b      	ldr	r3, [r3, #32]
 800eb6e:	1c5a      	adds	r2, r3, #1
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb78:	2b04      	cmp	r3, #4
 800eb7a:	d104      	bne.n	800eb86 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a1b      	ldr	r3, [r3, #32]
 800eb80:	085a      	lsrs	r2, r3, #1
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d003      	beq.n	800eb96 <HAL_SAI_Init+0x17a>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	d109      	bne.n	800ebaa <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d101      	bne.n	800eba2 <HAL_SAI_Init+0x186>
 800eb9e:	2300      	movs	r3, #0
 800eba0:	e001      	b.n	800eba6 <HAL_SAI_Init+0x18a>
 800eba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eba6:	61bb      	str	r3, [r7, #24]
 800eba8:	e008      	b.n	800ebbc <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d102      	bne.n	800ebb8 <HAL_SAI_Init+0x19c>
 800ebb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebb6:	e000      	b.n	800ebba <HAL_SAI_Init+0x19e>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	6819      	ldr	r1, [r3, #0]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	4b4c      	ldr	r3, [pc, #304]	; (800ecf8 <HAL_SAI_Init+0x2dc>)
 800ebc8:	400b      	ands	r3, r1
 800ebca:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	6819      	ldr	r1, [r3, #0]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	685a      	ldr	r2, [r3, #4]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebda:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ebe0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe6:	431a      	orrs	r2, r3
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800ebf4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ec00:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6a1b      	ldr	r3, [r3, #32]
 800ec06:	051b      	lsls	r3, r3, #20
 800ec08:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	430a      	orrs	r2, r1
 800ec10:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	6812      	ldr	r2, [r2, #0]
 800ec1c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800ec20:	f023 030f 	bic.w	r3, r3, #15
 800ec24:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6859      	ldr	r1, [r3, #4]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	699a      	ldr	r2, [r3, #24]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec34:	431a      	orrs	r2, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3a:	431a      	orrs	r2, r3
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	430a      	orrs	r2, r1
 800ec42:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	6899      	ldr	r1, [r3, #8]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	4b2b      	ldr	r3, [pc, #172]	; (800ecfc <HAL_SAI_Init+0x2e0>)
 800ec50:	400b      	ands	r3, r1
 800ec52:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6899      	ldr	r1, [r3, #8]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec5e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ec64:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800ec6a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800ec70:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec76:	3b01      	subs	r3, #1
 800ec78:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ec7a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	430a      	orrs	r2, r1
 800ec82:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68d9      	ldr	r1, [r3, #12]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ec92:	400b      	ands	r3, r1
 800ec94:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	68d9      	ldr	r1, [r3, #12]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eca4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ecaa:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ecac:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	021b      	lsls	r3, r3, #8
 800ecb6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	430a      	orrs	r2, r1
 800ecbe:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2201      	movs	r2, #1
 800eccc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ecd8:	2300      	movs	r3, #0
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3720      	adds	r7, #32
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	40015404 	.word	0x40015404
 800ece8:	40015424 	.word	0x40015424
 800ecec:	40015400 	.word	0x40015400
 800ecf0:	40015800 	.word	0x40015800
 800ecf4:	cccccccd 	.word	0xcccccccd
 800ecf8:	ff05c010 	.word	0xff05c010
 800ecfc:	fff88000 	.word	0xfff88000

0800ed00 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d101      	bne.n	800ed1a <HAL_SAI_DMAStop+0x1a>
 800ed16:	2302      	movs	r3, #2
 800ed18:	e042      	b.n	800eda0 <HAL_SAI_DMAStop+0xa0>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ed30:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	2b12      	cmp	r3, #18
 800ed3c:	d108      	bne.n	800ed50 <HAL_SAI_DMAStop+0x50>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d004      	beq.n	800ed50 <HAL_SAI_DMAStop+0x50>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmatx);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fd f9e8 	bl	800c120 <HAL_DMA_Abort>
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	2b22      	cmp	r3, #34	; 0x22
 800ed5a:	d108      	bne.n	800ed6e <HAL_SAI_DMAStop+0x6e>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d004      	beq.n	800ed6e <HAL_SAI_DMAStop+0x6e>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmarx);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7fd f9d9 	bl	800c120 <HAL_DMA_Abort>
  }

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 fa1e 	bl	800f1b0 <SAI_Disable>
 800ed74:	4603      	mov	r3, r0
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d001      	beq.n	800ed7e <HAL_SAI_DMAStop+0x7e>
  {
    status = HAL_ERROR;
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	685a      	ldr	r2, [r3, #4]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f042 0208 	orr.w	r2, r2, #8
 800ed8c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2201      	movs	r2, #1
 800ed92:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800ed9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	4613      	mov	r3, r2
 800edb4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d002      	beq.n	800edc2 <HAL_SAI_Receive_DMA+0x1a>
 800edbc:	88fb      	ldrh	r3, [r7, #6]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e074      	b.n	800eeb0 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d16d      	bne.n	800eeae <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d101      	bne.n	800ede0 <HAL_SAI_Receive_DMA+0x38>
 800eddc:	2302      	movs	r3, #2
 800edde:	e067      	b.n	800eeb0 <HAL_SAI_Receive_DMA+0x108>
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	68ba      	ldr	r2, [r7, #8]
 800edec:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	88fa      	ldrh	r2, [r7, #6]
 800edf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	88fa      	ldrh	r2, [r7, #6]
 800edfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2200      	movs	r2, #0
 800ee02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2222      	movs	r2, #34	; 0x22
 800ee0a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee12:	4a29      	ldr	r2, [pc, #164]	; (800eeb8 <HAL_SAI_Receive_DMA+0x110>)
 800ee14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee1a:	4a28      	ldr	r2, [pc, #160]	; (800eebc <HAL_SAI_Receive_DMA+0x114>)
 800ee1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee22:	4a27      	ldr	r2, [pc, #156]	; (800eec0 <HAL_SAI_Receive_DMA+0x118>)
 800ee24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	331c      	adds	r3, #28
 800ee38:	4619      	mov	r1, r3
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee3e:	461a      	mov	r2, r3
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee46:	f7fd f90b 	bl	800c060 <HAL_DMA_Start_IT>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d005      	beq.n	800ee5c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	e029      	b.n	800eeb0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f000 f96e 	bl	800f140 <SAI_InterruptFlag>
 800ee64:	4601      	mov	r1, r0
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	691a      	ldr	r2, [r3, #16]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	430a      	orrs	r2, r1
 800ee72:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ee82:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d107      	bne.n	800eea2 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800eea0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e000      	b.n	800eeb0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800eeae:	2302      	movs	r3, #2
  }
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3710      	adds	r7, #16
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	0800f277 	.word	0x0800f277
 800eebc:	0800f219 	.word	0x0800f219
 800eec0:	0800f293 	.word	0x0800f293

0800eec4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800eecc:	bf00      	nop
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b087      	sub	sp, #28
 800eedc:	af00      	add	r7, sp, #0
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	607a      	str	r2, [r7, #4]
 800eee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eee6:	2300      	movs	r3, #0
 800eee8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2200      	movs	r2, #0
 800eeee:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2200      	movs	r2, #0
 800eef4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d003      	beq.n	800ef06 <SAI_InitI2S+0x2e>
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	2b02      	cmp	r3, #2
 800ef04:	d103      	bne.n	800ef0e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	63da      	str	r2, [r3, #60]	; 0x3c
 800ef0c:	e002      	b.n	800ef14 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2201      	movs	r2, #1
 800ef12:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ef1a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef22:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2200      	movs	r2, #0
 800ef28:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	683a      	ldr	r2, [r7, #0]
 800ef2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	f003 0301 	and.w	r3, r3, #1
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d001      	beq.n	800ef3e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e077      	b.n	800f02e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d107      	bne.n	800ef54 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2200      	movs	r2, #0
 800ef48:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ef50:	651a      	str	r2, [r3, #80]	; 0x50
 800ef52:	e006      	b.n	800ef62 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ef5a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2b03      	cmp	r3, #3
 800ef66:	d84f      	bhi.n	800f008 <SAI_InitI2S+0x130>
 800ef68:	a201      	add	r2, pc, #4	; (adr r2, 800ef70 <SAI_InitI2S+0x98>)
 800ef6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef6e:	bf00      	nop
 800ef70:	0800ef81 	.word	0x0800ef81
 800ef74:	0800efa3 	.word	0x0800efa3
 800ef78:	0800efc5 	.word	0x0800efc5
 800ef7c:	0800efe7 	.word	0x0800efe7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2280      	movs	r2, #128	; 0x80
 800ef84:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	085b      	lsrs	r3, r3, #1
 800ef8a:	015a      	lsls	r2, r3, #5
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	085b      	lsrs	r3, r3, #1
 800ef94:	011a      	lsls	r2, r3, #4
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2240      	movs	r2, #64	; 0x40
 800ef9e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800efa0:	e035      	b.n	800f00e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2280      	movs	r2, #128	; 0x80
 800efa6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	085b      	lsrs	r3, r3, #1
 800efac:	019a      	lsls	r2, r3, #6
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	085b      	lsrs	r3, r3, #1
 800efb6:	015a      	lsls	r2, r3, #5
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2280      	movs	r2, #128	; 0x80
 800efc0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800efc2:	e024      	b.n	800f00e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	22c0      	movs	r2, #192	; 0xc0
 800efc8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	085b      	lsrs	r3, r3, #1
 800efce:	019a      	lsls	r2, r3, #6
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	085b      	lsrs	r3, r3, #1
 800efd8:	015a      	lsls	r2, r3, #5
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2280      	movs	r2, #128	; 0x80
 800efe2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800efe4:	e013      	b.n	800f00e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	22e0      	movs	r2, #224	; 0xe0
 800efea:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	085b      	lsrs	r3, r3, #1
 800eff0:	019a      	lsls	r2, r3, #6
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	085b      	lsrs	r3, r3, #1
 800effa:	015a      	lsls	r2, r3, #5
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2280      	movs	r2, #128	; 0x80
 800f004:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800f006:	e002      	b.n	800f00e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800f008:	2301      	movs	r3, #1
 800f00a:	75fb      	strb	r3, [r7, #23]
      break;
 800f00c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	2b02      	cmp	r3, #2
 800f012:	d10b      	bne.n	800f02c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b01      	cmp	r3, #1
 800f018:	d102      	bne.n	800f020 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2210      	movs	r2, #16
 800f01e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b02      	cmp	r3, #2
 800f024:	d102      	bne.n	800f02c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2208      	movs	r2, #8
 800f02a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 800f02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f02e:	4618      	mov	r0, r3
 800f030:	371c      	adds	r7, #28
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop

0800f03c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b087      	sub	sp, #28
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	607a      	str	r2, [r7, #4]
 800f048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f04a:	2300      	movs	r3, #0
 800f04c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2200      	movs	r2, #0
 800f058:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d003      	beq.n	800f06a <SAI_InitPCM+0x2e>
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	2b02      	cmp	r3, #2
 800f068:	d103      	bne.n	800f072 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2201      	movs	r2, #1
 800f06e:	63da      	str	r2, [r3, #60]	; 0x3c
 800f070:	e002      	b.n	800f078 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2200      	movs	r2, #0
 800f076:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2200      	movs	r2, #0
 800f07c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f084:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f08c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2200      	movs	r2, #0
 800f092:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0a0:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	2b04      	cmp	r3, #4
 800f0a6:	d103      	bne.n	800f0b0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	645a      	str	r2, [r3, #68]	; 0x44
 800f0ae:	e002      	b.n	800f0b6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	220d      	movs	r2, #13
 800f0b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2b03      	cmp	r3, #3
 800f0ba:	d837      	bhi.n	800f12c <SAI_InitPCM+0xf0>
 800f0bc:	a201      	add	r2, pc, #4	; (adr r2, 800f0c4 <SAI_InitPCM+0x88>)
 800f0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0c2:	bf00      	nop
 800f0c4:	0800f0d5 	.word	0x0800f0d5
 800f0c8:	0800f0eb 	.word	0x0800f0eb
 800f0cc:	0800f101 	.word	0x0800f101
 800f0d0:	0800f117 	.word	0x0800f117
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2280      	movs	r2, #128	; 0x80
 800f0d8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	011a      	lsls	r2, r3, #4
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2240      	movs	r2, #64	; 0x40
 800f0e6:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800f0e8:	e023      	b.n	800f132 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2280      	movs	r2, #128	; 0x80
 800f0ee:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	015a      	lsls	r2, r3, #5
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2280      	movs	r2, #128	; 0x80
 800f0fc:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800f0fe:	e018      	b.n	800f132 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	22c0      	movs	r2, #192	; 0xc0
 800f104:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	015a      	lsls	r2, r3, #5
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2280      	movs	r2, #128	; 0x80
 800f112:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800f114:	e00d      	b.n	800f132 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	22e0      	movs	r2, #224	; 0xe0
 800f11a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	015a      	lsls	r2, r3, #5
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2280      	movs	r2, #128	; 0x80
 800f128:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800f12a:	e002      	b.n	800f132 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800f12c:	2301      	movs	r3, #1
 800f12e:	75fb      	strb	r3, [r7, #23]
      break;
 800f130:	bf00      	nop
  }

  return status;
 800f132:	7dfb      	ldrb	r3, [r7, #23]
}
 800f134:	4618      	mov	r0, r3
 800f136:	371c      	adds	r7, #28
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr

0800f140 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800f140:	b480      	push	{r7}
 800f142:	b085      	sub	sp, #20
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	460b      	mov	r3, r1
 800f14a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f14c:	2301      	movs	r3, #1
 800f14e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f150:	78fb      	ldrb	r3, [r7, #3]
 800f152:	2b01      	cmp	r3, #1
 800f154:	d103      	bne.n	800f15e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f043 0308 	orr.w	r3, r3, #8
 800f15c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f162:	2b08      	cmp	r3, #8
 800f164:	d10b      	bne.n	800f17e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f16a:	2b03      	cmp	r3, #3
 800f16c:	d003      	beq.n	800f176 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	2b01      	cmp	r3, #1
 800f174:	d103      	bne.n	800f17e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f043 0310 	orr.w	r3, r3, #16
 800f17c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	2b03      	cmp	r3, #3
 800f184:	d003      	beq.n	800f18e <SAI_InterruptFlag+0x4e>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	d104      	bne.n	800f198 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f194:	60fb      	str	r3, [r7, #12]
 800f196:	e003      	b.n	800f1a0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f043 0304 	orr.w	r3, r3, #4
 800f19e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3714      	adds	r7, #20
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
	...

0800f1b0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f1b0:	b490      	push	{r4, r7}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f1b8:	4b15      	ldr	r3, [pc, #84]	; (800f210 <SAI_Disable+0x60>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4a15      	ldr	r2, [pc, #84]	; (800f214 <SAI_Disable+0x64>)
 800f1be:	fba2 2303 	umull	r2, r3, r2, r3
 800f1c2:	0b1b      	lsrs	r3, r3, #12
 800f1c4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f1d8:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800f1da:	2c00      	cmp	r4, #0
 800f1dc:	d10a      	bne.n	800f1f4 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f1e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800f1ee:	2303      	movs	r3, #3
 800f1f0:	73fb      	strb	r3, [r7, #15]
      break;
 800f1f2:	e007      	b.n	800f204 <SAI_Disable+0x54>
    }
    count--;
 800f1f4:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1ea      	bne.n	800f1da <SAI_Disable+0x2a>

  return status;
 800f204:	7bfb      	ldrb	r3, [r7, #15]
}
 800f206:	4618      	mov	r0, r3
 800f208:	3710      	adds	r7, #16
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bc90      	pop	{r4, r7}
 800f20e:	4770      	bx	lr
 800f210:	20000060 	.word	0x20000060
 800f214:	95cbec1b 	.word	0x95cbec1b

0800f218 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f224:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	69db      	ldr	r3, [r3, #28]
 800f22a:	2b20      	cmp	r3, #32
 800f22c:	d01c      	beq.n	800f268 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f23c:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2200      	movs	r2, #0
 800f242:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f246:	2100      	movs	r1, #0
 800f248:	68f8      	ldr	r0, [r7, #12]
 800f24a:	f7ff ff79 	bl	800f140 <SAI_InterruptFlag>
 800f24e:	4603      	mov	r3, r0
 800f250:	43d9      	mvns	r1, r3
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	691a      	ldr	r2, [r3, #16]
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	400a      	ands	r2, r1
 800f25e:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2201      	movs	r2, #1
 800f264:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f7f9 fcb9 	bl	8008be0 <HAL_SAI_RxCpltCallback>
#endif
}
 800f26e:	bf00      	nop
 800f270:	3710      	adds	r7, #16
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}

0800f276 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f276:	b580      	push	{r7, lr}
 800f278:	b084      	sub	sp, #16
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f282:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f7f9 fc97 	bl	8008bb8 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800f28a:	bf00      	nop
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f292:	b580      	push	{r7, lr}
 800f294:	b084      	sub	sp, #16
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f29e:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	681a      	ldr	r2, [r3, #0]
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f2be:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f7ff ff75 	bl	800f1b0 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f7ff fdf4 	bl	800eec4 <HAL_SAI_ErrorCallback>
#endif
}
 800f2dc:	bf00      	nop
 800f2de:	3710      	adds	r7, #16
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d101      	bne.n	800f2f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e040      	b.n	800f378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d106      	bne.n	800f30c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2200      	movs	r2, #0
 800f302:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f7fc f95e 	bl	800b5c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2224      	movs	r2, #36	; 0x24
 800f310:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	681a      	ldr	r2, [r3, #0]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f022 0201 	bic.w	r2, r2, #1
 800f320:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 f8c0 	bl	800f4a8 <UART_SetConfig>
 800f328:	4603      	mov	r3, r0
 800f32a:	2b01      	cmp	r3, #1
 800f32c:	d101      	bne.n	800f332 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f32e:	2301      	movs	r3, #1
 800f330:	e022      	b.n	800f378 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f336:	2b00      	cmp	r3, #0
 800f338:	d002      	beq.n	800f340 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 fc54 	bl	800fbe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	685a      	ldr	r2, [r3, #4]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f34e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	689a      	ldr	r2, [r3, #8]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f35e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f042 0201 	orr.w	r2, r2, #1
 800f36e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f000 fcdb 	bl	800fd2c <UART_CheckIdleState>
 800f376:	4603      	mov	r3, r0
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b08a      	sub	sp, #40	; 0x28
 800f384:	af02      	add	r7, sp, #8
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	60b9      	str	r1, [r7, #8]
 800f38a:	603b      	str	r3, [r7, #0]
 800f38c:	4613      	mov	r3, r2
 800f38e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f394:	2b20      	cmp	r3, #32
 800f396:	f040 8081 	bne.w	800f49c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d002      	beq.n	800f3a6 <HAL_UART_Transmit+0x26>
 800f3a0:	88fb      	ldrh	r3, [r7, #6]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d101      	bne.n	800f3aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	e079      	b.n	800f49e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d101      	bne.n	800f3b8 <HAL_UART_Transmit+0x38>
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	e072      	b.n	800f49e <HAL_UART_Transmit+0x11e>
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2221      	movs	r2, #33	; 0x21
 800f3ca:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f3cc:	f7fc fb88 	bl	800bae0 <HAL_GetTick>
 800f3d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	88fa      	ldrh	r2, [r7, #6]
 800f3d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	88fa      	ldrh	r2, [r7, #6]
 800f3de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3ea:	d108      	bne.n	800f3fe <HAL_UART_Transmit+0x7e>
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	691b      	ldr	r3, [r3, #16]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d104      	bne.n	800f3fe <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	61bb      	str	r3, [r7, #24]
 800f3fc:	e003      	b.n	800f406 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f402:	2300      	movs	r3, #0
 800f404:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2200      	movs	r2, #0
 800f40a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800f40e:	e02d      	b.n	800f46c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	9300      	str	r3, [sp, #0]
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	2200      	movs	r2, #0
 800f418:	2180      	movs	r1, #128	; 0x80
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f000 fccb 	bl	800fdb6 <UART_WaitOnFlagUntilTimeout>
 800f420:	4603      	mov	r3, r0
 800f422:	2b00      	cmp	r3, #0
 800f424:	d001      	beq.n	800f42a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800f426:	2303      	movs	r3, #3
 800f428:	e039      	b.n	800f49e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d10b      	bne.n	800f448 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	881a      	ldrh	r2, [r3, #0]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f43c:	b292      	uxth	r2, r2
 800f43e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	3302      	adds	r3, #2
 800f444:	61bb      	str	r3, [r7, #24]
 800f446:	e008      	b.n	800f45a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	781a      	ldrb	r2, [r3, #0]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	b292      	uxth	r2, r2
 800f452:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	3301      	adds	r3, #1
 800f458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f460:	b29b      	uxth	r3, r3
 800f462:	3b01      	subs	r3, #1
 800f464:	b29a      	uxth	r2, r3
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f472:	b29b      	uxth	r3, r3
 800f474:	2b00      	cmp	r3, #0
 800f476:	d1cb      	bne.n	800f410 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	9300      	str	r3, [sp, #0]
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	2200      	movs	r2, #0
 800f480:	2140      	movs	r1, #64	; 0x40
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	f000 fc97 	bl	800fdb6 <UART_WaitOnFlagUntilTimeout>
 800f488:	4603      	mov	r3, r0
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d001      	beq.n	800f492 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800f48e:	2303      	movs	r3, #3
 800f490:	e005      	b.n	800f49e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2220      	movs	r2, #32
 800f496:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800f498:	2300      	movs	r3, #0
 800f49a:	e000      	b.n	800f49e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800f49c:	2302      	movs	r3, #2
  }
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3720      	adds	r7, #32
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
	...

0800f4a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f4a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4ac:	b0a0      	sub	sp, #128	; 0x80
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f4c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4c2:	689a      	ldr	r2, [r3, #8]
 800f4c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4c6:	691b      	ldr	r3, [r3, #16]
 800f4c8:	431a      	orrs	r2, r3
 800f4ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4cc:	695b      	ldr	r3, [r3, #20]
 800f4ce:	431a      	orrs	r2, r3
 800f4d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4d2:	69db      	ldr	r3, [r3, #28]
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f4d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	49a4      	ldr	r1, [pc, #656]	; (800f770 <UART_SetConfig+0x2c8>)
 800f4e0:	4019      	ands	r1, r3
 800f4e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f4e8:	430b      	orrs	r3, r1
 800f4ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f4ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f4f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4f8:	68d9      	ldr	r1, [r3, #12]
 800f4fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	ea40 0301 	orr.w	r3, r0, r1
 800f502:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f506:	699b      	ldr	r3, [r3, #24]
 800f508:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f50a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	4b99      	ldr	r3, [pc, #612]	; (800f774 <UART_SetConfig+0x2cc>)
 800f510:	429a      	cmp	r2, r3
 800f512:	d004      	beq.n	800f51e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f516:	6a1a      	ldr	r2, [r3, #32]
 800f518:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f51a:	4313      	orrs	r3, r2
 800f51c:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f51e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f52e:	430b      	orrs	r3, r1
 800f530:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	4b90      	ldr	r3, [pc, #576]	; (800f778 <UART_SetConfig+0x2d0>)
 800f538:	429a      	cmp	r2, r3
 800f53a:	d125      	bne.n	800f588 <UART_SetConfig+0xe0>
 800f53c:	4b8f      	ldr	r3, [pc, #572]	; (800f77c <UART_SetConfig+0x2d4>)
 800f53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f542:	f003 0303 	and.w	r3, r3, #3
 800f546:	2b03      	cmp	r3, #3
 800f548:	d81a      	bhi.n	800f580 <UART_SetConfig+0xd8>
 800f54a:	a201      	add	r2, pc, #4	; (adr r2, 800f550 <UART_SetConfig+0xa8>)
 800f54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f550:	0800f561 	.word	0x0800f561
 800f554:	0800f571 	.word	0x0800f571
 800f558:	0800f569 	.word	0x0800f569
 800f55c:	0800f579 	.word	0x0800f579
 800f560:	2301      	movs	r3, #1
 800f562:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f566:	e116      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f568:	2302      	movs	r3, #2
 800f56a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f56e:	e112      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f570:	2304      	movs	r3, #4
 800f572:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f576:	e10e      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f578:	2308      	movs	r3, #8
 800f57a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f57e:	e10a      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f580:	2310      	movs	r3, #16
 800f582:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f586:	e106      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f58a:	681a      	ldr	r2, [r3, #0]
 800f58c:	4b7c      	ldr	r3, [pc, #496]	; (800f780 <UART_SetConfig+0x2d8>)
 800f58e:	429a      	cmp	r2, r3
 800f590:	d138      	bne.n	800f604 <UART_SetConfig+0x15c>
 800f592:	4b7a      	ldr	r3, [pc, #488]	; (800f77c <UART_SetConfig+0x2d4>)
 800f594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f598:	f003 030c 	and.w	r3, r3, #12
 800f59c:	2b0c      	cmp	r3, #12
 800f59e:	d82d      	bhi.n	800f5fc <UART_SetConfig+0x154>
 800f5a0:	a201      	add	r2, pc, #4	; (adr r2, 800f5a8 <UART_SetConfig+0x100>)
 800f5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a6:	bf00      	nop
 800f5a8:	0800f5dd 	.word	0x0800f5dd
 800f5ac:	0800f5fd 	.word	0x0800f5fd
 800f5b0:	0800f5fd 	.word	0x0800f5fd
 800f5b4:	0800f5fd 	.word	0x0800f5fd
 800f5b8:	0800f5ed 	.word	0x0800f5ed
 800f5bc:	0800f5fd 	.word	0x0800f5fd
 800f5c0:	0800f5fd 	.word	0x0800f5fd
 800f5c4:	0800f5fd 	.word	0x0800f5fd
 800f5c8:	0800f5e5 	.word	0x0800f5e5
 800f5cc:	0800f5fd 	.word	0x0800f5fd
 800f5d0:	0800f5fd 	.word	0x0800f5fd
 800f5d4:	0800f5fd 	.word	0x0800f5fd
 800f5d8:	0800f5f5 	.word	0x0800f5f5
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f5e2:	e0d8      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f5e4:	2302      	movs	r3, #2
 800f5e6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f5ea:	e0d4      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f5ec:	2304      	movs	r3, #4
 800f5ee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f5f2:	e0d0      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f5f4:	2308      	movs	r3, #8
 800f5f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f5fa:	e0cc      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f5fc:	2310      	movs	r3, #16
 800f5fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f602:	e0c8      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f606:	681a      	ldr	r2, [r3, #0]
 800f608:	4b5e      	ldr	r3, [pc, #376]	; (800f784 <UART_SetConfig+0x2dc>)
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d125      	bne.n	800f65a <UART_SetConfig+0x1b2>
 800f60e:	4b5b      	ldr	r3, [pc, #364]	; (800f77c <UART_SetConfig+0x2d4>)
 800f610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f614:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f618:	2b30      	cmp	r3, #48	; 0x30
 800f61a:	d016      	beq.n	800f64a <UART_SetConfig+0x1a2>
 800f61c:	2b30      	cmp	r3, #48	; 0x30
 800f61e:	d818      	bhi.n	800f652 <UART_SetConfig+0x1aa>
 800f620:	2b20      	cmp	r3, #32
 800f622:	d00a      	beq.n	800f63a <UART_SetConfig+0x192>
 800f624:	2b20      	cmp	r3, #32
 800f626:	d814      	bhi.n	800f652 <UART_SetConfig+0x1aa>
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d002      	beq.n	800f632 <UART_SetConfig+0x18a>
 800f62c:	2b10      	cmp	r3, #16
 800f62e:	d008      	beq.n	800f642 <UART_SetConfig+0x19a>
 800f630:	e00f      	b.n	800f652 <UART_SetConfig+0x1aa>
 800f632:	2300      	movs	r3, #0
 800f634:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f638:	e0ad      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f63a:	2302      	movs	r3, #2
 800f63c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f640:	e0a9      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f642:	2304      	movs	r3, #4
 800f644:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f648:	e0a5      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f64a:	2308      	movs	r3, #8
 800f64c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f650:	e0a1      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f652:	2310      	movs	r3, #16
 800f654:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f658:	e09d      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f65a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f65c:	681a      	ldr	r2, [r3, #0]
 800f65e:	4b4a      	ldr	r3, [pc, #296]	; (800f788 <UART_SetConfig+0x2e0>)
 800f660:	429a      	cmp	r2, r3
 800f662:	d125      	bne.n	800f6b0 <UART_SetConfig+0x208>
 800f664:	4b45      	ldr	r3, [pc, #276]	; (800f77c <UART_SetConfig+0x2d4>)
 800f666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f66a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f66e:	2bc0      	cmp	r3, #192	; 0xc0
 800f670:	d016      	beq.n	800f6a0 <UART_SetConfig+0x1f8>
 800f672:	2bc0      	cmp	r3, #192	; 0xc0
 800f674:	d818      	bhi.n	800f6a8 <UART_SetConfig+0x200>
 800f676:	2b80      	cmp	r3, #128	; 0x80
 800f678:	d00a      	beq.n	800f690 <UART_SetConfig+0x1e8>
 800f67a:	2b80      	cmp	r3, #128	; 0x80
 800f67c:	d814      	bhi.n	800f6a8 <UART_SetConfig+0x200>
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d002      	beq.n	800f688 <UART_SetConfig+0x1e0>
 800f682:	2b40      	cmp	r3, #64	; 0x40
 800f684:	d008      	beq.n	800f698 <UART_SetConfig+0x1f0>
 800f686:	e00f      	b.n	800f6a8 <UART_SetConfig+0x200>
 800f688:	2300      	movs	r3, #0
 800f68a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f68e:	e082      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f690:	2302      	movs	r3, #2
 800f692:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f696:	e07e      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f698:	2304      	movs	r3, #4
 800f69a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f69e:	e07a      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f6a0:	2308      	movs	r3, #8
 800f6a2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f6a6:	e076      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f6a8:	2310      	movs	r3, #16
 800f6aa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f6ae:	e072      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f6b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6b2:	681a      	ldr	r2, [r3, #0]
 800f6b4:	4b35      	ldr	r3, [pc, #212]	; (800f78c <UART_SetConfig+0x2e4>)
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d12a      	bne.n	800f710 <UART_SetConfig+0x268>
 800f6ba:	4b30      	ldr	r3, [pc, #192]	; (800f77c <UART_SetConfig+0x2d4>)
 800f6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f6c8:	d01a      	beq.n	800f700 <UART_SetConfig+0x258>
 800f6ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f6ce:	d81b      	bhi.n	800f708 <UART_SetConfig+0x260>
 800f6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6d4:	d00c      	beq.n	800f6f0 <UART_SetConfig+0x248>
 800f6d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6da:	d815      	bhi.n	800f708 <UART_SetConfig+0x260>
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d003      	beq.n	800f6e8 <UART_SetConfig+0x240>
 800f6e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6e4:	d008      	beq.n	800f6f8 <UART_SetConfig+0x250>
 800f6e6:	e00f      	b.n	800f708 <UART_SetConfig+0x260>
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f6ee:	e052      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f6f0:	2302      	movs	r3, #2
 800f6f2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f6f6:	e04e      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f6f8:	2304      	movs	r3, #4
 800f6fa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f6fe:	e04a      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f700:	2308      	movs	r3, #8
 800f702:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f706:	e046      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f708:	2310      	movs	r3, #16
 800f70a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f70e:	e042      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	4b17      	ldr	r3, [pc, #92]	; (800f774 <UART_SetConfig+0x2cc>)
 800f716:	429a      	cmp	r2, r3
 800f718:	d13a      	bne.n	800f790 <UART_SetConfig+0x2e8>
 800f71a:	4b18      	ldr	r3, [pc, #96]	; (800f77c <UART_SetConfig+0x2d4>)
 800f71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f720:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f724:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f728:	d01a      	beq.n	800f760 <UART_SetConfig+0x2b8>
 800f72a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f72e:	d81b      	bhi.n	800f768 <UART_SetConfig+0x2c0>
 800f730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f734:	d00c      	beq.n	800f750 <UART_SetConfig+0x2a8>
 800f736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f73a:	d815      	bhi.n	800f768 <UART_SetConfig+0x2c0>
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d003      	beq.n	800f748 <UART_SetConfig+0x2a0>
 800f740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f744:	d008      	beq.n	800f758 <UART_SetConfig+0x2b0>
 800f746:	e00f      	b.n	800f768 <UART_SetConfig+0x2c0>
 800f748:	2300      	movs	r3, #0
 800f74a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f74e:	e022      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f750:	2302      	movs	r3, #2
 800f752:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f756:	e01e      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f758:	2304      	movs	r3, #4
 800f75a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f75e:	e01a      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f760:	2308      	movs	r3, #8
 800f762:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f766:	e016      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f768:	2310      	movs	r3, #16
 800f76a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f76e:	e012      	b.n	800f796 <UART_SetConfig+0x2ee>
 800f770:	efff69f3 	.word	0xefff69f3
 800f774:	40008000 	.word	0x40008000
 800f778:	40013800 	.word	0x40013800
 800f77c:	40021000 	.word	0x40021000
 800f780:	40004400 	.word	0x40004400
 800f784:	40004800 	.word	0x40004800
 800f788:	40004c00 	.word	0x40004c00
 800f78c:	40005000 	.word	0x40005000
 800f790:	2310      	movs	r3, #16
 800f792:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	4bb6      	ldr	r3, [pc, #728]	; (800fa74 <UART_SetConfig+0x5cc>)
 800f79c:	429a      	cmp	r2, r3
 800f79e:	f040 810c 	bne.w	800f9ba <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f7a2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800f7a6:	2b08      	cmp	r3, #8
 800f7a8:	d823      	bhi.n	800f7f2 <UART_SetConfig+0x34a>
 800f7aa:	a201      	add	r2, pc, #4	; (adr r2, 800f7b0 <UART_SetConfig+0x308>)
 800f7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b0:	0800f7d5 	.word	0x0800f7d5
 800f7b4:	0800f7f3 	.word	0x0800f7f3
 800f7b8:	0800f7dd 	.word	0x0800f7dd
 800f7bc:	0800f7f3 	.word	0x0800f7f3
 800f7c0:	0800f7e3 	.word	0x0800f7e3
 800f7c4:	0800f7f3 	.word	0x0800f7f3
 800f7c8:	0800f7f3 	.word	0x0800f7f3
 800f7cc:	0800f7f3 	.word	0x0800f7f3
 800f7d0:	0800f7eb 	.word	0x0800f7eb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800f7d4:	f7fd fd4a 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800f7d8:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800f7da:	e00e      	b.n	800f7fa <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800f7dc:	4ba6      	ldr	r3, [pc, #664]	; (800fa78 <UART_SetConfig+0x5d0>)
 800f7de:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800f7e0:	e00b      	b.n	800f7fa <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800f7e2:	f7fd fcab 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800f7e6:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800f7e8:	e007      	b.n	800f7fa <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800f7ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7ee:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800f7f0:	e003      	b.n	800f7fa <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 800f7f8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800f7fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f000 81e5 	beq.w	800fbcc <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	4613      	mov	r3, r2
 800f808:	005b      	lsls	r3, r3, #1
 800f80a:	441a      	add	r2, r3
 800f80c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f80e:	4293      	cmp	r3, r2
 800f810:	d305      	bcc.n	800f81e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d903      	bls.n	800f826 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 800f81e:	2301      	movs	r3, #1
 800f820:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800f824:	e1d2      	b.n	800fbcc <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 800f826:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800f82a:	2b08      	cmp	r3, #8
 800f82c:	f200 80b0 	bhi.w	800f990 <UART_SetConfig+0x4e8>
 800f830:	a201      	add	r2, pc, #4	; (adr r2, 800f838 <UART_SetConfig+0x390>)
 800f832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f836:	bf00      	nop
 800f838:	0800f85d 	.word	0x0800f85d
 800f83c:	0800f991 	.word	0x0800f991
 800f840:	0800f8bd 	.word	0x0800f8bd
 800f844:	0800f991 	.word	0x0800f991
 800f848:	0800f8fd 	.word	0x0800f8fd
 800f84c:	0800f991 	.word	0x0800f991
 800f850:	0800f991 	.word	0x0800f991
 800f854:	0800f991 	.word	0x0800f991
 800f858:	0800f959 	.word	0x0800f959
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800f85c:	f7fd fd06 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800f860:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800f862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f864:	2200      	movs	r2, #0
 800f866:	4698      	mov	r8, r3
 800f868:	4691      	mov	r9, r2
 800f86a:	f04f 0200 	mov.w	r2, #0
 800f86e:	f04f 0300 	mov.w	r3, #0
 800f872:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800f876:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800f87a:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800f87e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f880:	6849      	ldr	r1, [r1, #4]
 800f882:	0849      	lsrs	r1, r1, #1
 800f884:	2000      	movs	r0, #0
 800f886:	6539      	str	r1, [r7, #80]	; 0x50
 800f888:	6578      	str	r0, [r7, #84]	; 0x54
 800f88a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800f88e:	4621      	mov	r1, r4
 800f890:	1851      	adds	r1, r2, r1
 800f892:	64b9      	str	r1, [r7, #72]	; 0x48
 800f894:	4629      	mov	r1, r5
 800f896:	eb43 0101 	adc.w	r1, r3, r1
 800f89a:	64f9      	str	r1, [r7, #76]	; 0x4c
 800f89c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	643b      	str	r3, [r7, #64]	; 0x40
 800f8a4:	647a      	str	r2, [r7, #68]	; 0x44
 800f8a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f8aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800f8ae:	f7f1 fa3b 	bl	8000d28 <__aeabi_uldivmod>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	4613      	mov	r3, r2
 800f8b8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800f8ba:	e06d      	b.n	800f998 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800f8bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	085b      	lsrs	r3, r3, #1
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8c6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f8c8:	4b6c      	ldr	r3, [pc, #432]	; (800fa7c <UART_SetConfig+0x5d4>)
 800f8ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	18d3      	adds	r3, r2, r3
 800f8d2:	633b      	str	r3, [r7, #48]	; 0x30
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	f143 0300 	adc.w	r3, r3, #0
 800f8da:	637b      	str	r3, [r7, #52]	; 0x34
 800f8dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800f8e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f8e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f8ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f8ee:	f7f1 fa1b 	bl	8000d28 <__aeabi_uldivmod>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	4613      	mov	r3, r2
 800f8f8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800f8fa:	e04d      	b.n	800f998 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800f8fc:	f7fd fc1e 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800f900:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800f902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f904:	2200      	movs	r2, #0
 800f906:	461c      	mov	r4, r3
 800f908:	4615      	mov	r5, r2
 800f90a:	f04f 0200 	mov.w	r2, #0
 800f90e:	f04f 0300 	mov.w	r3, #0
 800f912:	022b      	lsls	r3, r5, #8
 800f914:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800f918:	0222      	lsls	r2, r4, #8
 800f91a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f91c:	6849      	ldr	r1, [r1, #4]
 800f91e:	0849      	lsrs	r1, r1, #1
 800f920:	2000      	movs	r0, #0
 800f922:	6239      	str	r1, [r7, #32]
 800f924:	6278      	str	r0, [r7, #36]	; 0x24
 800f926:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800f92a:	4621      	mov	r1, r4
 800f92c:	1851      	adds	r1, r2, r1
 800f92e:	61b9      	str	r1, [r7, #24]
 800f930:	4629      	mov	r1, r5
 800f932:	eb43 0101 	adc.w	r1, r3, r1
 800f936:	61f9      	str	r1, [r7, #28]
 800f938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	613b      	str	r3, [r7, #16]
 800f940:	617a      	str	r2, [r7, #20]
 800f942:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f946:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f94a:	f7f1 f9ed 	bl	8000d28 <__aeabi_uldivmod>
 800f94e:	4602      	mov	r2, r0
 800f950:	460b      	mov	r3, r1
 800f952:	4613      	mov	r3, r2
 800f954:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800f956:	e01f      	b.n	800f998 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800f958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	085b      	lsrs	r3, r3, #1
 800f95e:	2200      	movs	r2, #0
 800f960:	469a      	mov	sl, r3
 800f962:	4693      	mov	fp, r2
 800f964:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 800f968:	60bb      	str	r3, [r7, #8]
 800f96a:	f14b 0300 	adc.w	r3, fp, #0
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	2200      	movs	r2, #0
 800f976:	603b      	str	r3, [r7, #0]
 800f978:	607a      	str	r2, [r7, #4]
 800f97a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f97e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f982:	f7f1 f9d1 	bl	8000d28 <__aeabi_uldivmod>
 800f986:	4602      	mov	r2, r0
 800f988:	460b      	mov	r3, r1
 800f98a:	4613      	mov	r3, r2
 800f98c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800f98e:	e003      	b.n	800f998 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 800f990:	2301      	movs	r3, #1
 800f992:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 800f996:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f99a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f99e:	d308      	bcc.n	800f9b2 <UART_SetConfig+0x50a>
 800f9a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f9a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9a6:	d204      	bcs.n	800f9b2 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 800f9a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f9ae:	60da      	str	r2, [r3, #12]
 800f9b0:	e10c      	b.n	800fbcc <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800f9b8:	e108      	b.n	800fbcc <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f9ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9bc:	69db      	ldr	r3, [r3, #28]
 800f9be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9c2:	f040 808f 	bne.w	800fae4 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 800f9c6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800f9ca:	2b08      	cmp	r3, #8
 800f9cc:	d864      	bhi.n	800fa98 <UART_SetConfig+0x5f0>
 800f9ce:	a201      	add	r2, pc, #4	; (adr r2, 800f9d4 <UART_SetConfig+0x52c>)
 800f9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d4:	0800f9f9 	.word	0x0800f9f9
 800f9d8:	0800fa19 	.word	0x0800fa19
 800f9dc:	0800fa39 	.word	0x0800fa39
 800f9e0:	0800fa99 	.word	0x0800fa99
 800f9e4:	0800fa55 	.word	0x0800fa55
 800f9e8:	0800fa99 	.word	0x0800fa99
 800f9ec:	0800fa99 	.word	0x0800fa99
 800f9f0:	0800fa99 	.word	0x0800fa99
 800f9f4:	0800fa81 	.word	0x0800fa81
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9f8:	f7fd fc38 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800f9fc:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f9fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa00:	005a      	lsls	r2, r3, #1
 800fa02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa04:	685b      	ldr	r3, [r3, #4]
 800fa06:	085b      	lsrs	r3, r3, #1
 800fa08:	441a      	add	r2, r3
 800fa0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800fa16:	e043      	b.n	800faa0 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa18:	f7fd fc3e 	bl	800d298 <HAL_RCC_GetPCLK2Freq>
 800fa1c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fa1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa20:	005a      	lsls	r2, r3, #1
 800fa22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	085b      	lsrs	r3, r3, #1
 800fa28:	441a      	add	r2, r3
 800fa2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800fa36:	e033      	b.n	800faa0 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800fa38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa3a:	685b      	ldr	r3, [r3, #4]
 800fa3c:	085b      	lsrs	r3, r3, #1
 800fa3e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800fa42:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800fa46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa48:	6852      	ldr	r2, [r2, #4]
 800fa4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800fa52:	e025      	b.n	800faa0 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fa54:	f7fd fb72 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800fa58:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fa5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa5c:	005a      	lsls	r2, r3, #1
 800fa5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	085b      	lsrs	r3, r3, #1
 800fa64:	441a      	add	r2, r3
 800fa66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa68:	685b      	ldr	r3, [r3, #4]
 800fa6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800fa72:	e015      	b.n	800faa0 <UART_SetConfig+0x5f8>
 800fa74:	40008000 	.word	0x40008000
 800fa78:	00f42400 	.word	0x00f42400
 800fa7c:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800fa80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	085b      	lsrs	r3, r3, #1
 800fa86:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800fa8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800fa96:	e003      	b.n	800faa0 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 800fa98:	2301      	movs	r3, #1
 800fa9a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 800fa9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800faa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800faa2:	2b0f      	cmp	r3, #15
 800faa4:	d91a      	bls.n	800fadc <UART_SetConfig+0x634>
 800faa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800faa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800faac:	d216      	bcs.n	800fadc <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800faae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	f023 030f 	bic.w	r3, r3, #15
 800fab6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800faba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fabc:	085b      	lsrs	r3, r3, #1
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	f003 0307 	and.w	r3, r3, #7
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800faca:	4313      	orrs	r3, r2
 800facc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 800fad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800fad8:	60da      	str	r2, [r3, #12]
 800fada:	e077      	b.n	800fbcc <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 800fadc:	2301      	movs	r3, #1
 800fade:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800fae2:	e073      	b.n	800fbcc <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 800fae4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800fae8:	2b08      	cmp	r3, #8
 800faea:	d85c      	bhi.n	800fba6 <UART_SetConfig+0x6fe>
 800faec:	a201      	add	r2, pc, #4	; (adr r2, 800faf4 <UART_SetConfig+0x64c>)
 800faee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf2:	bf00      	nop
 800faf4:	0800fb19 	.word	0x0800fb19
 800faf8:	0800fb37 	.word	0x0800fb37
 800fafc:	0800fb55 	.word	0x0800fb55
 800fb00:	0800fba7 	.word	0x0800fba7
 800fb04:	0800fb71 	.word	0x0800fb71
 800fb08:	0800fba7 	.word	0x0800fba7
 800fb0c:	0800fba7 	.word	0x0800fba7
 800fb10:	0800fba7 	.word	0x0800fba7
 800fb14:	0800fb8f 	.word	0x0800fb8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb18:	f7fd fba8 	bl	800d26c <HAL_RCC_GetPCLK1Freq>
 800fb1c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fb1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	085a      	lsrs	r2, r3, #1
 800fb24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb26:	441a      	add	r2, r3
 800fb28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800fb34:	e03b      	b.n	800fbae <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb36:	f7fd fbaf 	bl	800d298 <HAL_RCC_GetPCLK2Freq>
 800fb3a:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fb3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	085a      	lsrs	r2, r3, #1
 800fb42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb44:	441a      	add	r2, r3
 800fb46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800fb52:	e02c      	b.n	800fbae <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800fb54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb56:	685b      	ldr	r3, [r3, #4]
 800fb58:	085b      	lsrs	r3, r3, #1
 800fb5a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800fb5e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800fb62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fb64:	6852      	ldr	r2, [r2, #4]
 800fb66:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800fb6e:	e01e      	b.n	800fbae <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fb70:	f7fd fae4 	bl	800d13c <HAL_RCC_GetSysClockFreq>
 800fb74:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fb76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	085a      	lsrs	r2, r3, #1
 800fb7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb7e:	441a      	add	r2, r3
 800fb80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800fb8c:	e00f      	b.n	800fbae <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800fb8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	085b      	lsrs	r3, r3, #1
 800fb94:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800fb98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fba0:	b29b      	uxth	r3, r3
 800fba2:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800fba4:	e003      	b.n	800fbae <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 800fba6:	2301      	movs	r3, #1
 800fba8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 800fbac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fbae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbb0:	2b0f      	cmp	r3, #15
 800fbb2:	d908      	bls.n	800fbc6 <UART_SetConfig+0x71e>
 800fbb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbba:	d204      	bcs.n	800fbc6 <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 800fbbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fbc2:	60da      	str	r2, [r3, #12]
 800fbc4:	e002      	b.n	800fbcc <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fbcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbce:	2200      	movs	r2, #0
 800fbd0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800fbd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800fbd8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3780      	adds	r7, #128	; 0x80
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fbe6:	bf00      	nop

0800fbe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf4:	f003 0301 	and.w	r3, r3, #1
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d00a      	beq.n	800fc12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	430a      	orrs	r2, r1
 800fc10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc16:	f003 0302 	and.w	r3, r3, #2
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d00a      	beq.n	800fc34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	430a      	orrs	r2, r1
 800fc32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc38:	f003 0304 	and.w	r3, r3, #4
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00a      	beq.n	800fc56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	685b      	ldr	r3, [r3, #4]
 800fc46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	430a      	orrs	r2, r1
 800fc54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5a:	f003 0308 	and.w	r3, r3, #8
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d00a      	beq.n	800fc78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	430a      	orrs	r2, r1
 800fc76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc7c:	f003 0310 	and.w	r3, r3, #16
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d00a      	beq.n	800fc9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	430a      	orrs	r2, r1
 800fc98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9e:	f003 0320 	and.w	r3, r3, #32
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00a      	beq.n	800fcbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	689b      	ldr	r3, [r3, #8]
 800fcac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	430a      	orrs	r2, r1
 800fcba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d01a      	beq.n	800fcfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	430a      	orrs	r2, r1
 800fcdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fce6:	d10a      	bne.n	800fcfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	430a      	orrs	r2, r1
 800fcfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d00a      	beq.n	800fd20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	430a      	orrs	r2, r1
 800fd1e:	605a      	str	r2, [r3, #4]
  }
}
 800fd20:	bf00      	nop
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b086      	sub	sp, #24
 800fd30:	af02      	add	r7, sp, #8
 800fd32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fd3a:	f7fb fed1 	bl	800bae0 <HAL_GetTick>
 800fd3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f003 0308 	and.w	r3, r3, #8
 800fd4a:	2b08      	cmp	r3, #8
 800fd4c:	d10e      	bne.n	800fd6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2200      	movs	r2, #0
 800fd58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 f82a 	bl	800fdb6 <UART_WaitOnFlagUntilTimeout>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d001      	beq.n	800fd6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd68:	2303      	movs	r3, #3
 800fd6a:	e020      	b.n	800fdae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f003 0304 	and.w	r3, r3, #4
 800fd76:	2b04      	cmp	r3, #4
 800fd78:	d10e      	bne.n	800fd98 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fd7e:	9300      	str	r3, [sp, #0]
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2200      	movs	r2, #0
 800fd84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 f814 	bl	800fdb6 <UART_WaitOnFlagUntilTimeout>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d001      	beq.n	800fd98 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd94:	2303      	movs	r3, #3
 800fd96:	e00a      	b.n	800fdae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2220      	movs	r2, #32
 800fd9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2220      	movs	r2, #32
 800fda2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3710      	adds	r7, #16
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}

0800fdb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b084      	sub	sp, #16
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	60f8      	str	r0, [r7, #12]
 800fdbe:	60b9      	str	r1, [r7, #8]
 800fdc0:	603b      	str	r3, [r7, #0]
 800fdc2:	4613      	mov	r3, r2
 800fdc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fdc6:	e05d      	b.n	800fe84 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fdc8:	69bb      	ldr	r3, [r7, #24]
 800fdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdce:	d059      	beq.n	800fe84 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fdd0:	f7fb fe86 	bl	800bae0 <HAL_GetTick>
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	1ad3      	subs	r3, r2, r3
 800fdda:	69ba      	ldr	r2, [r7, #24]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d302      	bcc.n	800fde6 <UART_WaitOnFlagUntilTimeout+0x30>
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d11b      	bne.n	800fe1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fdf4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	689a      	ldr	r2, [r3, #8]
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f022 0201 	bic.w	r2, r2, #1
 800fe04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2220      	movs	r2, #32
 800fe0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2220      	movs	r2, #32
 800fe10:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2200      	movs	r2, #0
 800fe16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800fe1a:	2303      	movs	r3, #3
 800fe1c:	e042      	b.n	800fea4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f003 0304 	and.w	r3, r3, #4
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d02b      	beq.n	800fe84 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	69db      	ldr	r3, [r3, #28]
 800fe32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe3a:	d123      	bne.n	800fe84 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe44:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fe54:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	689a      	ldr	r2, [r3, #8]
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f022 0201 	bic.w	r2, r2, #1
 800fe64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2220      	movs	r2, #32
 800fe6a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2220      	movs	r2, #32
 800fe70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2220      	movs	r2, #32
 800fe76:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800fe80:	2303      	movs	r3, #3
 800fe82:	e00f      	b.n	800fea4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	69da      	ldr	r2, [r3, #28]
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	4013      	ands	r3, r2
 800fe8e:	68ba      	ldr	r2, [r7, #8]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	bf0c      	ite	eq
 800fe94:	2301      	moveq	r3, #1
 800fe96:	2300      	movne	r3, #0
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	79fb      	ldrb	r3, [r7, #7]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d092      	beq.n	800fdc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3710      	adds	r7, #16
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800feac:	b480      	push	{r7}
 800feae:	b093      	sub	sp, #76	; 0x4c
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	881b      	ldrh	r3, [r3, #0]
 800feda:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	885b      	ldrh	r3, [r3, #2]
 800fee0:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	885b      	ldrh	r3, [r3, #2]
 800fee6:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800fee8:	2300      	movs	r3, #0
 800feea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feec:	8b7b      	ldrh	r3, [r7, #26]
 800feee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800fef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef2:	009b      	lsls	r3, r3, #2
 800fef4:	69fa      	ldr	r2, [r7, #28]
 800fef6:	4413      	add	r3, r2
 800fef8:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800fefa:	8b3b      	ldrh	r3, [r7, #24]
 800fefc:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800ff04:	f04f 0300 	mov.w	r3, #0
 800ff08:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800ff0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff0c:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800ff0e:	8afb      	ldrh	r3, [r7, #22]
 800ff10:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800ff12:	e017      	b.n	800ff44 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800ff14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff16:	1d1a      	adds	r2, r3, #4
 800ff18:	647a      	str	r2, [r7, #68]	; 0x44
 800ff1a:	ed93 7a00 	vldr	s14, [r3]
 800ff1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff20:	edd3 7a00 	vldr	s15, [r3]
 800ff24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ff2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff30:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 800ff34:	8b3b      	ldrh	r3, [r7, #24]
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff3a:	4413      	add	r3, r2
 800ff3c:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 800ff3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff40:	3b01      	subs	r3, #1
 800ff42:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 800ff44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d1e4      	bne.n	800ff14 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800ff4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4c:	1d1a      	adds	r2, r3, #4
 800ff4e:	63ba      	str	r2, [r7, #56]	; 0x38
 800ff50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff52:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800ff54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff56:	3b01      	subs	r3, #1
 800ff58:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800ff5a:	8b3a      	ldrh	r2, [r7, #24]
 800ff5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5e:	1ad3      	subs	r3, r2, r3
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	6a3a      	ldr	r2, [r7, #32]
 800ff64:	4413      	add	r3, r2
 800ff66:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 800ff68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d1ca      	bne.n	800ff04 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800ff6e:	8b3b      	ldrh	r3, [r7, #24]
 800ff70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff72:	4413      	add	r3, r2
 800ff74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 800ff76:	8afb      	ldrh	r3, [r7, #22]
 800ff78:	009b      	lsls	r3, r3, #2
 800ff7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff7c:	4413      	add	r3, r2
 800ff7e:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 800ff80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff82:	3b01      	subs	r3, #1
 800ff84:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 800ff86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1b1      	bne.n	800fef0 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800ff90:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	374c      	adds	r7, #76	; 0x4c
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr

0800ffa0 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b08b      	sub	sp, #44	; 0x2c
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	ed87 0a02 	vstr	s0, [r7, #8]
 800ffac:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	881b      	ldrh	r3, [r3, #0]
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	885b      	ldrh	r3, [r3, #2]
 800ffc4:	fb02 f303 	mul.w	r3, r2, r3
 800ffc8:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ffca:	69bb      	ldr	r3, [r7, #24]
 800ffcc:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ffce:	e010      	b.n	800fff2 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800ffd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd2:	1d1a      	adds	r2, r3, #4
 800ffd4:	627a      	str	r2, [r7, #36]	; 0x24
 800ffd6:	ed93 7a00 	vldr	s14, [r3]
 800ffda:	6a3b      	ldr	r3, [r7, #32]
 800ffdc:	1d1a      	adds	r2, r3, #4
 800ffde:	623a      	str	r2, [r7, #32]
 800ffe0:	edd7 7a02 	vldr	s15, [r7, #8]
 800ffe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffe8:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	3b01      	subs	r3, #1
 800fff0:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1eb      	bne.n	800ffd0 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800fff8:	2300      	movs	r3, #0
 800fffa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800fffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010000:	4618      	mov	r0, r3
 8010002:	372c      	adds	r7, #44	; 0x2c
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801000c:	b480      	push	{r7}
 801000e:	b08b      	sub	sp, #44	; 0x2c
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	881b      	ldrh	r3, [r3, #0]
 8010026:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	885b      	ldrh	r3, [r3, #2]
 801002c:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 801002e:	89fb      	ldrh	r3, [r7, #14]
 8010030:	61bb      	str	r3, [r7, #24]
 8010032:	2300      	movs	r3, #0
 8010034:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	693a      	ldr	r2, [r7, #16]
 801003c:	4413      	add	r3, r2
 801003e:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8010040:	89bb      	ldrh	r3, [r7, #12]
 8010042:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8010044:	e00d      	b.n	8010062 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8010046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010048:	1d1a      	adds	r2, r3, #4
 801004a:	627a      	str	r2, [r7, #36]	; 0x24
 801004c:	681a      	ldr	r2, [r3, #0]
 801004e:	6a3b      	ldr	r3, [r7, #32]
 8010050:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8010052:	89fb      	ldrh	r3, [r7, #14]
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	6a3a      	ldr	r2, [r7, #32]
 8010058:	4413      	add	r3, r2
 801005a:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	3b01      	subs	r3, #1
 8010060:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d1ee      	bne.n	8010046 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	3301      	adds	r3, #1
 801006c:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 801006e:	69bb      	ldr	r3, [r7, #24]
 8010070:	3b01      	subs	r3, #1
 8010072:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8010074:	69bb      	ldr	r3, [r7, #24]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1dd      	bne.n	8010036 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801007a:	2300      	movs	r3, #0
 801007c:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 801007e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010082:	4618      	mov	r0, r3
 8010084:	372c      	adds	r7, #44	; 0x2c
 8010086:	46bd      	mov	sp, r7
 8010088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008c:	4770      	bx	lr

0801008e <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 801008e:	b480      	push	{r7}
 8010090:	b089      	sub	sp, #36	; 0x24
 8010092:	af00      	add	r7, sp, #0
 8010094:	60f8      	str	r0, [r7, #12]
 8010096:	60b9      	str	r1, [r7, #8]
 8010098:	607a      	str	r2, [r7, #4]
 801009a:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 801009c:	2300      	movs	r3, #0
 801009e:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	1d1a      	adds	r2, r3, #4
 80100a4:	60fa      	str	r2, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	3b01      	subs	r3, #1
 80100ae:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80100b0:	e016      	b.n	80100e0 <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	1d1a      	adds	r2, r3, #4
 80100b6:	60fa      	str	r2, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 80100bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80100c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80100c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100cc:	d505      	bpl.n	80100da <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 80100d2:	68ba      	ldr	r2, [r7, #8]
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 80100da:	69bb      	ldr	r3, [r7, #24]
 80100dc:	3b01      	subs	r3, #1
 80100de:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 80100e0:	69bb      	ldr	r3, [r7, #24]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d1e5      	bne.n	80100b2 <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	69fa      	ldr	r2, [r7, #28]
 80100ea:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	697a      	ldr	r2, [r7, #20]
 80100f0:	601a      	str	r2, [r3, #0]
}
 80100f2:	bf00      	nop
 80100f4:	3724      	adds	r7, #36	; 0x24
 80100f6:	46bd      	mov	sp, r7
 80100f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fc:	4770      	bx	lr

080100fe <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 80100fe:	b480      	push	{r7}
 8010100:	b089      	sub	sp, #36	; 0x24
 8010102:	af00      	add	r7, sp, #0
 8010104:	60f8      	str	r0, [r7, #12]
 8010106:	60b9      	str	r1, [r7, #8]
 8010108:	607a      	str	r2, [r7, #4]
 801010a:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 801010c:	2300      	movs	r3, #0
 801010e:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	1d1a      	adds	r2, r3, #4
 8010114:	60fa      	str	r2, [r7, #12]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	3b01      	subs	r3, #1
 801011e:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8010120:	e016      	b.n	8010150 <arm_min_f32+0x52>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal = *pSrc++;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	1d1a      	adds	r2, r3, #4
 8010126:	60fa      	str	r2, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal)
 801012c:	ed97 7a07 	vldr	s14, [r7, #28]
 8010130:	edd7 7a04 	vldr	s15, [r7, #16]
 8010134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801013c:	dd05      	ble.n	801014a <arm_min_f32+0x4c>
    {
      /* Update the minimum value and it's index */
      out = minVal;
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	3b01      	subs	r3, #1
 801014e:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8010150:	69bb      	ldr	r3, [r7, #24]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1e5      	bne.n	8010122 <arm_min_f32+0x24>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	69fa      	ldr	r2, [r7, #28]
 801015a:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	697a      	ldr	r2, [r7, #20]
 8010160:	601a      	str	r2, [r3, #0]
}
 8010162:	bf00      	nop
 8010164:	3724      	adds	r7, #36	; 0x24
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr

0801016e <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 801016e:	b580      	push	{r7, lr}
 8010170:	b08a      	sub	sp, #40	; 0x28
 8010172:	af00      	add	r7, sp, #0
 8010174:	60f8      	str	r0, [r7, #12]
 8010176:	60b9      	str	r1, [r7, #8]
 8010178:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 801017a:	f04f 0300 	mov.w	r3, #0
 801017e:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8010184:	e011      	b.n	80101aa <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	1d1a      	adds	r2, r3, #4
 801018a:	60fa      	str	r2, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 8010190:	edd7 7a07 	vldr	s15, [r7, #28]
 8010194:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010198:	ed97 7a08 	vldr	s14, [r7, #32]
 801019c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101a0:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 80101a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a6:	3b01      	subs	r3, #1
 80101a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1ea      	bne.n	8010186 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	ee07 3a90 	vmov	s15, r3
 80101b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80101ba:	edd7 6a08 	vldr	s13, [r7, #32]
 80101be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101c2:	edc7 7a06 	vstr	s15, [r7, #24]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 80101ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80101ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80101d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d6:	db09      	blt.n	80101ec <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 80101d8:	ed97 0a06 	vldr	s0, [r7, #24]
 80101dc:	f01a fcd8 	bl	802ab90 <sqrtf>
 80101e0:	eef0 7a40 	vmov.f32	s15, s0
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80101ea:	e004      	b.n	80101f6 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	f04f 0200 	mov.w	r2, #0
 80101f2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80101f4:	bf00      	nop
}
 80101f6:	bf00      	nop
 80101f8:	3728      	adds	r7, #40	; 0x28
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 80101fe:	b480      	push	{r7}
 8010200:	b089      	sub	sp, #36	; 0x24
 8010202:	af00      	add	r7, sp, #0
 8010204:	60f8      	str	r0, [r7, #12]
 8010206:	460b      	mov	r3, r1
 8010208:	607a      	str	r2, [r7, #4]
 801020a:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 801020c:	2300      	movs	r3, #0
 801020e:	61fb      	str	r3, [r7, #28]
 8010210:	e043      	b.n	801029a <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8010212:	69fb      	ldr	r3, [r7, #28]
 8010214:	005b      	lsls	r3, r3, #1
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	4413      	add	r3, r2
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	089b      	lsrs	r3, r3, #2
 801021e:	b29b      	uxth	r3, r3
 8010220:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	3301      	adds	r3, #1
 8010226:	005b      	lsls	r3, r3, #1
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	4413      	add	r3, r2
 801022c:	881b      	ldrh	r3, [r3, #0]
 801022e:	089b      	lsrs	r3, r3, #2
 8010230:	b29b      	uxth	r3, r3
 8010232:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	4413      	add	r3, r2
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	68fa      	ldr	r2, [r7, #12]
 8010246:	441a      	add	r2, r3
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	009b      	lsls	r3, r3, #2
 801024c:	68f9      	ldr	r1, [r7, #12]
 801024e:	440b      	add	r3, r1
 8010250:	6812      	ldr	r2, [r2, #0]
 8010252:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	009b      	lsls	r3, r3, #2
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	4413      	add	r3, r2
 801025c:	693a      	ldr	r2, [r7, #16]
 801025e:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	3301      	adds	r3, #1
 8010264:	009b      	lsls	r3, r3, #2
 8010266:	68fa      	ldr	r2, [r7, #12]
 8010268:	4413      	add	r3, r2
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	3301      	adds	r3, #1
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	68fa      	ldr	r2, [r7, #12]
 8010276:	441a      	add	r2, r3
 8010278:	69bb      	ldr	r3, [r7, #24]
 801027a:	3301      	adds	r3, #1
 801027c:	009b      	lsls	r3, r3, #2
 801027e:	68f9      	ldr	r1, [r7, #12]
 8010280:	440b      	add	r3, r1
 8010282:	6812      	ldr	r2, [r2, #0]
 8010284:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	3301      	adds	r3, #1
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	4413      	add	r3, r2
 8010290:	693a      	ldr	r2, [r7, #16]
 8010292:	601a      	str	r2, [r3, #0]

    i += 2;
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	3302      	adds	r3, #2
 8010298:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 801029a:	897b      	ldrh	r3, [r7, #10]
 801029c:	69fa      	ldr	r2, [r7, #28]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d3b7      	bcc.n	8010212 <arm_bitreversal_32+0x14>
  }
}
 80102a2:	bf00      	nop
 80102a4:	bf00      	nop
 80102a6:	3724      	adds	r7, #36	; 0x24
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b0a0      	sub	sp, #128	; 0x80
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	881b      	ldrh	r3, [r3, #0]
 80102be:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 80102c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	683a      	ldr	r2, [r7, #0]
 80102c6:	4413      	add	r3, r2
 80102c8:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 80102d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102d6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 80102d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102da:	085b      	lsrs	r3, r3, #1
 80102dc:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80102de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102e0:	009b      	lsls	r3, r3, #2
 80102e2:	683a      	ldr	r2, [r7, #0]
 80102e4:	4413      	add	r3, r2
 80102e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 80102e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80102ee:	4413      	add	r3, r2
 80102f0:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80102f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102f4:	089b      	lsrs	r3, r3, #2
 80102f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80102f8:	e1b6      	b.n	8010668 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	689b      	ldr	r3, [r3, #8]
 801030a:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8010312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8010318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 801031e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010320:	689b      	ldr	r3, [r3, #8]
 8010322:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8010324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 801032a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8010330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8010336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010338:	689b      	ldr	r3, [r3, #8]
 801033a:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 801033c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8010342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8010348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 801034e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010350:	689b      	ldr	r3, [r3, #8]
 8010352:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8010354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010356:	68db      	ldr	r3, [r3, #12]
 8010358:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 801035a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801035e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	1d1a      	adds	r2, r3, #4
 8010366:	603a      	str	r2, [r7, #0]
 8010368:	ee77 7a27 	vadd.f32	s15, s14, s15
 801036c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8010370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8010374:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	1d1a      	adds	r2, r3, #4
 801037c:	603a      	str	r2, [r7, #0]
 801037e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010382:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8010386:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801038a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	1d1a      	adds	r2, r3, #4
 8010392:	603a      	str	r2, [r7, #0]
 8010394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010398:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 801039c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80103a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	1d1a      	adds	r2, r3, #4
 80103a8:	603a      	str	r2, [r7, #0]
 80103aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103ae:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 80103b2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80103b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80103ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 80103c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80103c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80103ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 80103d2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80103d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80103da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80103e2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80103e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80103ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103ee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80103f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80103f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80103fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80103fc:	1d1a      	adds	r2, r3, #4
 80103fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010404:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8010408:	ed97 7a07 	vldr	s14, [r7, #28]
 801040c:	edd7 7a03 	vldr	s15, [r7, #12]
 8010410:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010412:	1d1a      	adds	r2, r3, #4
 8010414:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010416:	ee77 7a27 	vadd.f32	s15, s14, s15
 801041a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 801041e:	ed97 7a08 	vldr	s14, [r7, #32]
 8010422:	edd7 7a04 	vldr	s15, [r7, #16]
 8010426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010428:	1d1a      	adds	r2, r3, #4
 801042a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801042c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010430:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8010434:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8010438:	edd7 7a05 	vldr	s15, [r7, #20]
 801043c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801043e:	1d1a      	adds	r2, r3, #4
 8010440:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010446:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 801044a:	ed97 7a02 	vldr	s14, [r7, #8]
 801044e:	edd7 7a06 	vldr	s15, [r7, #24]
 8010452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010456:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 801045a:	ed97 7a03 	vldr	s14, [r7, #12]
 801045e:	edd7 7a07 	vldr	s15, [r7, #28]
 8010462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010466:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 801046a:	ed97 7a04 	vldr	s14, [r7, #16]
 801046e:	edd7 7a08 	vldr	s15, [r7, #32]
 8010472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010476:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 801047a:	ed97 7a05 	vldr	s14, [r7, #20]
 801047e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010486:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 801048a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801048c:	1d1a      	adds	r2, r3, #4
 801048e:	673a      	str	r2, [r7, #112]	; 0x70
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8010494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010496:	1d1a      	adds	r2, r3, #4
 8010498:	673a      	str	r2, [r7, #112]	; 0x70
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 801049e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80104a2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80104a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104aa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 80104ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80104b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80104b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104ba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 80104be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80104c2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80104c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104ca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 80104ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80104d2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80104d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104da:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80104de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104e0:	1d1a      	adds	r2, r3, #4
 80104e2:	677a      	str	r2, [r7, #116]	; 0x74
 80104e4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80104e8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80104ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104f0:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80104f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104f6:	1d1a      	adds	r2, r3, #4
 80104f8:	677a      	str	r2, [r7, #116]	; 0x74
 80104fa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80104fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8010502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010506:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 801050a:	edd7 7a02 	vldr	s15, [r7, #8]
 801050e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010516:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 801051a:	edd7 7a03 	vldr	s15, [r7, #12]
 801051e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010526:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 801052a:	edd7 7a03 	vldr	s15, [r7, #12]
 801052e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010536:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 801053a:	edd7 7a02 	vldr	s15, [r7, #8]
 801053e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010546:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 801054a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801054c:	1d1a      	adds	r2, r3, #4
 801054e:	67ba      	str	r2, [r7, #120]	; 0x78
 8010550:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010554:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8010558:	ee77 7a67 	vsub.f32	s15, s14, s15
 801055c:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8010560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010562:	1d1a      	adds	r2, r3, #4
 8010564:	67ba      	str	r2, [r7, #120]	; 0x78
 8010566:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801056a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801056e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010572:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8010576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010578:	1d1a      	adds	r2, r3, #4
 801057a:	673a      	str	r2, [r7, #112]	; 0x70
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8010580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010582:	1d1a      	adds	r2, r3, #4
 8010584:	673a      	str	r2, [r7, #112]	; 0x70
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 801058a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801058e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010596:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 801059a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801059e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80105a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105a6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 80105aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80105ae:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80105b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105b6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 80105ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80105be:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80105c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105c6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 80105ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105cc:	1d1a      	adds	r2, r3, #4
 80105ce:	677a      	str	r2, [r7, #116]	; 0x74
 80105d0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80105d4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80105d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105dc:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80105e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105e2:	1d1a      	adds	r2, r3, #4
 80105e4:	677a      	str	r2, [r7, #116]	; 0x74
 80105e6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80105ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80105ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105f2:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80105f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80105fa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80105fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010602:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8010606:	edd7 7a05 	vldr	s15, [r7, #20]
 801060a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801060e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010612:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8010616:	edd7 7a05 	vldr	s15, [r7, #20]
 801061a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801061e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010622:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8010626:	edd7 7a04 	vldr	s15, [r7, #16]
 801062a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801062e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010632:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8010636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010638:	1d1a      	adds	r2, r3, #4
 801063a:	67ba      	str	r2, [r7, #120]	; 0x78
 801063c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010640:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8010644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010648:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 801064c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801064e:	1d1a      	adds	r2, r3, #4
 8010650:	67ba      	str	r2, [r7, #120]	; 0x78
 8010652:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010656:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801065a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801065e:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8010662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010664:	3b01      	subs	r3, #1
 8010666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801066a:	2b00      	cmp	r3, #0
 801066c:	f47f ae45 	bne.w	80102fa <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8010670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010672:	b299      	uxth	r1, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	685a      	ldr	r2, [r3, #4]
 8010678:	2302      	movs	r3, #2
 801067a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801067c:	f000 fef6 	bl	801146c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8010680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010682:	b299      	uxth	r1, r3
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	685a      	ldr	r2, [r3, #4]
 8010688:	2302      	movs	r3, #2
 801068a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801068c:	f000 feee 	bl	801146c <arm_radix8_butterfly_f32>
}
 8010690:	bf00      	nop
 8010692:	3780      	adds	r7, #128	; 0x80
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b0ac      	sub	sp, #176	; 0xb0
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	881b      	ldrh	r3, [r3, #0]
 80106a6:	085b      	lsrs	r3, r3, #1
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80106ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	683a      	ldr	r2, [r7, #0]
 80106b6:	4413      	add	r3, r2
 80106b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80106bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80106c0:	009b      	lsls	r3, r3, #2
 80106c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80106c6:	4413      	add	r3, r2
 80106c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80106cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80106d0:	009b      	lsls	r3, r3, #2
 80106d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80106d6:	4413      	add	r3, r2
 80106d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80106e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106e4:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80106e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106ea:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80106ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80106f0:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80106f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106f6:	3b04      	subs	r3, #4
 80106f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80106fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010700:	3b04      	subs	r3, #4
 8010702:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8010706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801070a:	3b04      	subs	r3, #4
 801070c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8010710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010714:	009b      	lsls	r3, r3, #2
 8010716:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801071a:	4413      	add	r3, r2
 801071c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010728:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801072c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010734:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8010738:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801073c:	085b      	lsrs	r3, r3, #1
 801073e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8010742:	2302      	movs	r3, #2
 8010744:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8010746:	2304      	movs	r3, #4
 8010748:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 801074a:	2306      	movs	r3, #6
 801074c:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	ed93 7a00 	vldr	s14, [r3]
 8010754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010758:	edd3 7a00 	vldr	s15, [r3]
 801075c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010760:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	ed93 7a00 	vldr	s14, [r3]
 801076a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801076e:	edd3 7a00 	vldr	s15, [r3]
 8010772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010776:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	3304      	adds	r3, #4
 801077e:	ed93 7a00 	vldr	s14, [r3]
 8010782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010786:	3304      	adds	r3, #4
 8010788:	edd3 7a00 	vldr	s15, [r3]
 801078c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010790:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	3304      	adds	r3, #4
 8010798:	ed93 7a00 	vldr	s14, [r3]
 801079c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107a0:	3304      	adds	r3, #4
 80107a2:	edd3 7a00 	vldr	s15, [r3]
 80107a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107aa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80107ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107b2:	3304      	adds	r3, #4
 80107b4:	ed93 7a00 	vldr	s14, [r3]
 80107b8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80107bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80107c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80107c4:	3304      	adds	r3, #4
 80107c6:	edd3 7a00 	vldr	s15, [r3]
 80107ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80107d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107d6:	edd3 7a00 	vldr	s15, [r3]
 80107da:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80107de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80107e6:	edd3 7a00 	vldr	s15, [r3]
 80107ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107ee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80107f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107f6:	edd3 7a00 	vldr	s15, [r3]
 80107fa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80107fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010802:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010806:	edd3 7a00 	vldr	s15, [r3]
 801080a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801080e:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8010812:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010816:	3304      	adds	r3, #4
 8010818:	edd3 7a00 	vldr	s15, [r3]
 801081c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010820:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010828:	3304      	adds	r3, #4
 801082a:	edd3 7a00 	vldr	s15, [r3]
 801082e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010832:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8010836:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801083a:	3304      	adds	r3, #4
 801083c:	edd3 7a00 	vldr	s15, [r3]
 8010840:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010844:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801084c:	3304      	adds	r3, #4
 801084e:	edd3 7a00 	vldr	s15, [r3]
 8010852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010856:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 801085a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801085e:	ed93 7a00 	vldr	s14, [r3]
 8010862:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010866:	ee37 7a27 	vadd.f32	s14, s14, s15
 801086a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801086e:	edd3 7a00 	vldr	s15, [r3]
 8010872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010876:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 801087a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801087e:	ed93 7a00 	vldr	s14, [r3]
 8010882:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010886:	ee37 7a27 	vadd.f32	s14, s14, s15
 801088a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801088e:	edd3 7a00 	vldr	s15, [r3]
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	1d1a      	adds	r2, r3, #4
 8010896:	603a      	str	r2, [r7, #0]
 8010898:	ee77 7a27 	vadd.f32	s15, s14, s15
 801089c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80108a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108a4:	3304      	adds	r3, #4
 80108a6:	ed93 7a00 	vldr	s14, [r3]
 80108aa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80108ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80108b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80108b6:	3304      	adds	r3, #4
 80108b8:	edd3 7a00 	vldr	s15, [r3]
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	1d1a      	adds	r2, r3, #4
 80108c0:	603a      	str	r2, [r7, #0]
 80108c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108c6:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80108ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108ce:	1d1a      	adds	r2, r3, #4
 80108d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80108d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108d6:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80108d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108dc:	1d1a      	adds	r2, r3, #4
 80108de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80108e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108e4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80108e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108ea:	1d1a      	adds	r2, r3, #4
 80108ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80108f0:	69fa      	ldr	r2, [r7, #28]
 80108f2:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80108f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108f8:	1d1a      	adds	r2, r3, #4
 80108fa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80108fe:	6a3a      	ldr	r2, [r7, #32]
 8010900:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8010902:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010906:	1d1a      	adds	r2, r3, #4
 8010908:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801090c:	68fa      	ldr	r2, [r7, #12]
 801090e:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8010910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010914:	1d1a      	adds	r2, r3, #4
 8010916:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801091a:	693a      	ldr	r2, [r7, #16]
 801091c:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 801091e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010920:	009b      	lsls	r3, r3, #2
 8010922:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010926:	4413      	add	r3, r2
 8010928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 801092c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801092e:	009b      	lsls	r3, r3, #2
 8010930:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010934:	4413      	add	r3, r2
 8010936:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 801093a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801093c:	009b      	lsls	r3, r3, #2
 801093e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010942:	4413      	add	r3, r2
 8010944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8010948:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801094c:	3b02      	subs	r3, #2
 801094e:	085b      	lsrs	r3, r3, #1
 8010950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010954:	e31c      	b.n	8010f90 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	ed93 7a00 	vldr	s14, [r3]
 801095c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010960:	edd3 7a00 	vldr	s15, [r3]
 8010964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010968:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	ed93 7a00 	vldr	s14, [r3]
 8010972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010976:	edd3 7a00 	vldr	s15, [r3]
 801097a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801097e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	3304      	adds	r3, #4
 8010986:	ed93 7a00 	vldr	s14, [r3]
 801098a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801098e:	3304      	adds	r3, #4
 8010990:	edd3 7a00 	vldr	s15, [r3]
 8010994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010998:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	3304      	adds	r3, #4
 80109a0:	ed93 7a00 	vldr	s14, [r3]
 80109a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80109a8:	3304      	adds	r3, #4
 80109aa:	edd3 7a00 	vldr	s15, [r3]
 80109ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109b2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 80109b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109ba:	3304      	adds	r3, #4
 80109bc:	ed93 7a00 	vldr	s14, [r3]
 80109c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80109c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80109c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80109cc:	3304      	adds	r3, #4
 80109ce:	edd3 7a00 	vldr	s15, [r3]
 80109d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80109da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109de:	edd3 7a00 	vldr	s15, [r3]
 80109e2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80109e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80109ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80109ee:	edd3 7a00 	vldr	s15, [r3]
 80109f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109f6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80109fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109fe:	edd3 7a00 	vldr	s15, [r3]
 8010a02:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010a06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a0e:	edd3 7a00 	vldr	s15, [r3]
 8010a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a16:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8010a1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a1e:	3304      	adds	r3, #4
 8010a20:	edd3 7a00 	vldr	s15, [r3]
 8010a24:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010a28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a30:	3304      	adds	r3, #4
 8010a32:	edd3 7a00 	vldr	s15, [r3]
 8010a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a3a:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8010a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a42:	3304      	adds	r3, #4
 8010a44:	edd3 7a00 	vldr	s15, [r3]
 8010a48:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010a4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a54:	3304      	adds	r3, #4
 8010a56:	edd3 7a00 	vldr	s15, [r3]
 8010a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a5e:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8010a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a66:	ed93 7a00 	vldr	s14, [r3]
 8010a6a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a76:	edd3 7a00 	vldr	s15, [r3]
 8010a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a7e:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8010a82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a86:	ed93 7a00 	vldr	s14, [r3]
 8010a8a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a96:	edd3 7a00 	vldr	s15, [r3]
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	1d1a      	adds	r2, r3, #4
 8010a9e:	603a      	str	r2, [r7, #0]
 8010aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010aa4:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8010aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010aac:	3304      	adds	r3, #4
 8010aae:	ed93 7a00 	vldr	s14, [r3]
 8010ab2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010ab6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010abe:	3304      	adds	r3, #4
 8010ac0:	edd3 7a00 	vldr	s15, [r3]
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	1d1a      	adds	r2, r3, #4
 8010ac8:	603a      	str	r2, [r7, #0]
 8010aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ace:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8010ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010ad6:	3b04      	subs	r3, #4
 8010ad8:	ed93 7a00 	vldr	s14, [r3]
 8010adc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010ae0:	3b04      	subs	r3, #4
 8010ae2:	edd3 7a00 	vldr	s15, [r3]
 8010ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010aea:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8010aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010af2:	3b04      	subs	r3, #4
 8010af4:	ed93 7a00 	vldr	s14, [r3]
 8010af8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010afc:	3b04      	subs	r3, #4
 8010afe:	edd3 7a00 	vldr	s15, [r3]
 8010b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b06:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8010b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b0e:	ed93 7a00 	vldr	s14, [r3]
 8010b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b16:	edd3 7a00 	vldr	s15, [r3]
 8010b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b1e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8010b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b26:	ed93 7a00 	vldr	s14, [r3]
 8010b2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b2e:	edd3 7a00 	vldr	s15, [r3]
 8010b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b36:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8010b3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010b3e:	ed93 7a00 	vldr	s14, [r3]
 8010b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010b46:	edd3 7a00 	vldr	s15, [r3]
 8010b4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010b4e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b56:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8010b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b5e:	ed93 7a00 	vldr	s14, [r3]
 8010b62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b66:	edd3 7a00 	vldr	s15, [r3]
 8010b6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010b6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010b72:	3b04      	subs	r3, #4
 8010b74:	edd3 7a00 	vldr	s15, [r3]
 8010b78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010b7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010b80:	3b04      	subs	r3, #4
 8010b82:	edd3 7a00 	vldr	s15, [r3]
 8010b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b8a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8010b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010b92:	3b04      	subs	r3, #4
 8010b94:	edd3 7a00 	vldr	s15, [r3]
 8010b98:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010b9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010ba0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010ba4:	3b04      	subs	r3, #4
 8010ba6:	edd3 7a00 	vldr	s15, [r3]
 8010baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010bae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8010bb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010bb6:	edd3 7a00 	vldr	s15, [r3]
 8010bba:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010bbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010bc6:	edd3 7a00 	vldr	s15, [r3]
 8010bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010bce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8010bd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010bd6:	ed93 7a00 	vldr	s14, [r3]
 8010bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010bde:	edd3 7a00 	vldr	s15, [r3]
 8010be2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010be6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010bee:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8010bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010bf6:	3b04      	subs	r3, #4
 8010bf8:	ed93 7a00 	vldr	s14, [r3]
 8010bfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c00:	3b04      	subs	r3, #4
 8010c02:	edd3 7a00 	vldr	s15, [r3]
 8010c06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c0a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8010c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c12:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8010c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c1a:	ed93 7a00 	vldr	s14, [r3]
 8010c1e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010c22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c2a:	edd3 7a00 	vldr	s15, [r3]
 8010c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c32:	1f1a      	subs	r2, r3, #4
 8010c34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c3c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8010c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c44:	3b04      	subs	r3, #4
 8010c46:	ed93 7a00 	vldr	s14, [r3]
 8010c4a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c56:	3b04      	subs	r3, #4
 8010c58:	edd3 7a00 	vldr	s15, [r3]
 8010c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c60:	1f1a      	subs	r2, r3, #4
 8010c62:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c6a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8010c6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c72:	1d1a      	adds	r2, r3, #4
 8010c74:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8010c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c80:	1d1a      	adds	r2, r3, #4
 8010c82:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8010c8a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010c8e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c96:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8010c9a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010c9e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ca6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8010caa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010cae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cb6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8010cba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010cbe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cc6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8010cca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010cce:	1d1a      	adds	r2, r3, #4
 8010cd0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010cd4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010cd8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ce0:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8010ce4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ce8:	1d1a      	adds	r2, r3, #4
 8010cea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010cee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010cf2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cfa:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8010cfe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010d02:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d0a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8010d0e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010d12:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d1a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8010d1e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010d22:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d2a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8010d2e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010d32:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d3a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8010d3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d42:	1f1a      	subs	r2, r3, #4
 8010d44:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010d48:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010d4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d54:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8010d58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d5c:	1f1a      	subs	r2, r3, #4
 8010d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010d62:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010d66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d6e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8010d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8010d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d7e:	3304      	adds	r3, #4
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8010d84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010d8c:	4413      	add	r3, r2
 8010d8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8010d92:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d9e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8010da2:	edd7 7a08 	vldr	s15, [r7, #32]
 8010da6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dae:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8010db2:	edd7 7a08 	vldr	s15, [r7, #32]
 8010db6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dbe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8010dc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8010dc6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8010dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010dd6:	1d1a      	adds	r2, r3, #4
 8010dd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010ddc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010de0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010de8:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8010dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010df0:	1d1a      	adds	r2, r3, #4
 8010df2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010df6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010dfa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e02:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8010e06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010e0a:	eef1 7a67 	vneg.f32	s15, s15
 8010e0e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e16:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8010e1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010e1e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e26:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8010e2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010e2e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e36:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8010e3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010e3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e46:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8010e4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010e4e:	1f1a      	subs	r2, r3, #4
 8010e50:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010e54:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010e58:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e60:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8010e64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010e68:	1f1a      	subs	r2, r3, #4
 8010e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010e6e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8010e72:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8010e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e7a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8010e7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8010e86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e8a:	3304      	adds	r3, #4
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8010e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e92:	009b      	lsls	r3, r3, #2
 8010e94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010e98:	4413      	add	r3, r2
 8010e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8010e9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8010ea2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eaa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8010eae:	edd7 7a04 	vldr	s15, [r7, #16]
 8010eb2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8010ebe:	edd7 7a04 	vldr	s15, [r7, #16]
 8010ec2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8010ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8010ed2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eda:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8010ede:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ee2:	1d1a      	adds	r2, r3, #4
 8010ee4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010ee8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010eec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ef4:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8010ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010efc:	1d1a      	adds	r2, r3, #4
 8010efe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010f02:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010f06:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f0e:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8010f12:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f16:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f1e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8010f22:	edd7 7a05 	vldr	s15, [r7, #20]
 8010f26:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f2e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8010f32:	edd7 7a05 	vldr	s15, [r7, #20]
 8010f36:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f3e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8010f42:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f46:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f4e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8010f52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010f56:	1f1a      	subs	r2, r3, #4
 8010f58:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8010f5c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010f60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f68:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8010f6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010f70:	1f1a      	subs	r2, r3, #4
 8010f72:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8010f76:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010f7a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f82:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8010f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f8a:	3b01      	subs	r3, #1
 8010f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f47f acde 	bne.w	8010956 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	ed93 7a00 	vldr	s14, [r3]
 8010fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010fa4:	edd3 7a00 	vldr	s15, [r3]
 8010fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fac:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	ed93 7a00 	vldr	s14, [r3]
 8010fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010fba:	edd3 7a00 	vldr	s15, [r3]
 8010fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fc2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	3304      	adds	r3, #4
 8010fca:	ed93 7a00 	vldr	s14, [r3]
 8010fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010fd2:	3304      	adds	r3, #4
 8010fd4:	edd3 7a00 	vldr	s15, [r3]
 8010fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fdc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	3304      	adds	r3, #4
 8010fe4:	ed93 7a00 	vldr	s14, [r3]
 8010fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010fec:	3304      	adds	r3, #4
 8010fee:	edd3 7a00 	vldr	s15, [r3]
 8010ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ff6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8010ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ffe:	3304      	adds	r3, #4
 8011000:	ed93 7a00 	vldr	s14, [r3]
 8011004:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8011008:	ee37 7a27 	vadd.f32	s14, s14, s15
 801100c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011010:	3304      	adds	r3, #4
 8011012:	edd3 7a00 	vldr	s15, [r3]
 8011016:	ee77 7a67 	vsub.f32	s15, s14, s15
 801101a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 801101e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011022:	edd3 7a00 	vldr	s15, [r3]
 8011026:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801102a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801102e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011032:	edd3 7a00 	vldr	s15, [r3]
 8011036:	ee77 7a27 	vadd.f32	s15, s14, s15
 801103a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 801103e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011042:	edd3 7a00 	vldr	s15, [r3]
 8011046:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801104a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801104e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011052:	edd3 7a00 	vldr	s15, [r3]
 8011056:	ee77 7a67 	vsub.f32	s15, s14, s15
 801105a:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 801105e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011062:	3304      	adds	r3, #4
 8011064:	edd3 7a00 	vldr	s15, [r3]
 8011068:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801106c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011074:	3304      	adds	r3, #4
 8011076:	edd3 7a00 	vldr	s15, [r3]
 801107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801107e:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8011082:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011086:	3304      	adds	r3, #4
 8011088:	edd3 7a00 	vldr	s15, [r3]
 801108c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011090:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011098:	3304      	adds	r3, #4
 801109a:	edd3 7a00 	vldr	s15, [r3]
 801109e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110a2:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80110a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80110aa:	ed93 7a00 	vldr	s14, [r3]
 80110ae:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80110b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80110b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80110ba:	edd3 7a00 	vldr	s15, [r3]
 80110be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110c2:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80110c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80110ca:	ed93 7a00 	vldr	s14, [r3]
 80110ce:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80110d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80110d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80110da:	edd3 7a00 	vldr	s15, [r3]
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	1d1a      	adds	r2, r3, #4
 80110e2:	603a      	str	r2, [r7, #0]
 80110e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110e8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80110ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80110f0:	3304      	adds	r3, #4
 80110f2:	ed93 7a00 	vldr	s14, [r3]
 80110f6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80110fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80110fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011102:	3304      	adds	r3, #4
 8011104:	edd3 7a00 	vldr	s15, [r3]
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	1d1a      	adds	r2, r3, #4
 801110c:	603a      	str	r2, [r7, #0]
 801110e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011112:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8011116:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 801111e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011122:	3304      	adds	r3, #4
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8011128:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801112c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011134:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8011138:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801113c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011144:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8011148:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801114c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011154:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8011158:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801115c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011164:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8011168:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801116c:	1d1a      	adds	r2, r3, #4
 801116e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8011172:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8011176:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801117a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801117e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8011182:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011186:	1d1a      	adds	r2, r3, #4
 8011188:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801118c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8011190:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011198:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 801119c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80111a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80111a8:	3304      	adds	r3, #4
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 80111ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80111b2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80111b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 80111be:	edd7 7a08 	vldr	s15, [r7, #32]
 80111c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80111c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111ca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80111ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80111d2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80111d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111da:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80111de:	edd7 7a07 	vldr	s15, [r7, #28]
 80111e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80111e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80111ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80111f2:	1d1a      	adds	r2, r3, #4
 80111f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80111f8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80111fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011204:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8011208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801120c:	1d1a      	adds	r2, r3, #4
 801120e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011212:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8011216:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801121a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801121e:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8011222:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 801122a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801122e:	3304      	adds	r3, #4
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8011234:	edd7 7a03 	vldr	s15, [r7, #12]
 8011238:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801123c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011240:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8011244:	edd7 7a04 	vldr	s15, [r7, #16]
 8011248:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011250:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8011254:	edd7 7a04 	vldr	s15, [r7, #16]
 8011258:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801125c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011260:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8011264:	edd7 7a03 	vldr	s15, [r7, #12]
 8011268:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801126c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011270:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8011274:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011278:	1d1a      	adds	r2, r3, #4
 801127a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801127e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8011282:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011286:	ee77 7a27 	vadd.f32	s15, s14, s15
 801128a:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 801128e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011292:	1d1a      	adds	r2, r3, #4
 8011294:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8011298:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801129c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80112a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112a4:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80112a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80112ac:	b299      	uxth	r1, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	685a      	ldr	r2, [r3, #4]
 80112b2:	2304      	movs	r3, #4
 80112b4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80112b6:	f000 f8d9 	bl	801146c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80112ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80112be:	b299      	uxth	r1, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	685a      	ldr	r2, [r3, #4]
 80112c4:	2304      	movs	r3, #4
 80112c6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80112c8:	f000 f8d0 	bl	801146c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80112cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80112d0:	b299      	uxth	r1, r3
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	685a      	ldr	r2, [r3, #4]
 80112d6:	2304      	movs	r3, #4
 80112d8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80112da:	f000 f8c7 	bl	801146c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80112de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80112e2:	b299      	uxth	r1, r3
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	685a      	ldr	r2, [r3, #4]
 80112e8:	2304      	movs	r3, #4
 80112ea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80112ec:	f000 f8be 	bl	801146c <arm_radix8_butterfly_f32>
}
 80112f0:	bf00      	nop
 80112f2:	37b0      	adds	r7, #176	; 0xb0
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b088      	sub	sp, #32
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	60f8      	str	r0, [r7, #12]
 8011300:	60b9      	str	r1, [r7, #8]
 8011302:	4611      	mov	r1, r2
 8011304:	461a      	mov	r2, r3
 8011306:	460b      	mov	r3, r1
 8011308:	71fb      	strb	r3, [r7, #7]
 801130a:	4613      	mov	r3, r2
 801130c:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	881b      	ldrh	r3, [r3, #0]
 8011312:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8011314:	79fb      	ldrb	r3, [r7, #7]
 8011316:	2b01      	cmp	r3, #1
 8011318:	d117      	bne.n	801134a <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	3304      	adds	r3, #4
 801131e:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8011320:	2300      	movs	r3, #0
 8011322:	61fb      	str	r3, [r7, #28]
 8011324:	e00d      	b.n	8011342 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8011326:	69bb      	ldr	r3, [r7, #24]
 8011328:	edd3 7a00 	vldr	s15, [r3]
 801132c:	eef1 7a67 	vneg.f32	s15, s15
 8011330:	69bb      	ldr	r3, [r7, #24]
 8011332:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8011336:	69bb      	ldr	r3, [r7, #24]
 8011338:	3308      	adds	r3, #8
 801133a:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 801133c:	69fb      	ldr	r3, [r7, #28]
 801133e:	3301      	adds	r3, #1
 8011340:	61fb      	str	r3, [r7, #28]
 8011342:	69fa      	ldr	r2, [r7, #28]
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	429a      	cmp	r2, r3
 8011348:	d3ed      	bcc.n	8011326 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011350:	d040      	beq.n	80113d4 <arm_cfft_f32+0xdc>
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011358:	d845      	bhi.n	80113e6 <arm_cfft_f32+0xee>
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011360:	d033      	beq.n	80113ca <arm_cfft_f32+0xd2>
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011368:	d83d      	bhi.n	80113e6 <arm_cfft_f32+0xee>
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011370:	d026      	beq.n	80113c0 <arm_cfft_f32+0xc8>
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011378:	d835      	bhi.n	80113e6 <arm_cfft_f32+0xee>
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011380:	d028      	beq.n	80113d4 <arm_cfft_f32+0xdc>
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011388:	d82d      	bhi.n	80113e6 <arm_cfft_f32+0xee>
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011390:	d01b      	beq.n	80113ca <arm_cfft_f32+0xd2>
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011398:	d825      	bhi.n	80113e6 <arm_cfft_f32+0xee>
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	2b80      	cmp	r3, #128	; 0x80
 801139e:	d00f      	beq.n	80113c0 <arm_cfft_f32+0xc8>
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	2b80      	cmp	r3, #128	; 0x80
 80113a4:	d81f      	bhi.n	80113e6 <arm_cfft_f32+0xee>
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	2b40      	cmp	r3, #64	; 0x40
 80113aa:	d013      	beq.n	80113d4 <arm_cfft_f32+0xdc>
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	2b40      	cmp	r3, #64	; 0x40
 80113b0:	d819      	bhi.n	80113e6 <arm_cfft_f32+0xee>
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	2b10      	cmp	r3, #16
 80113b6:	d003      	beq.n	80113c0 <arm_cfft_f32+0xc8>
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	2b20      	cmp	r3, #32
 80113bc:	d005      	beq.n	80113ca <arm_cfft_f32+0xd2>
 80113be:	e012      	b.n	80113e6 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80113c0:	68b9      	ldr	r1, [r7, #8]
 80113c2:	68f8      	ldr	r0, [r7, #12]
 80113c4:	f7fe ff74 	bl	80102b0 <arm_cfft_radix8by2_f32>
    break;
 80113c8:	e00d      	b.n	80113e6 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80113ca:	68b9      	ldr	r1, [r7, #8]
 80113cc:	68f8      	ldr	r0, [r7, #12]
 80113ce:	f7ff f963 	bl	8010698 <arm_cfft_radix8by4_f32>
    break;
 80113d2:	e008      	b.n	80113e6 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	b299      	uxth	r1, r3
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	685a      	ldr	r2, [r3, #4]
 80113dc:	2301      	movs	r3, #1
 80113de:	68b8      	ldr	r0, [r7, #8]
 80113e0:	f000 f844 	bl	801146c <arm_radix8_butterfly_f32>
    break;
 80113e4:	bf00      	nop
  }

  if ( bitReverseFlag )
 80113e6:	79bb      	ldrb	r3, [r7, #6]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d007      	beq.n	80113fc <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	8999      	ldrh	r1, [r3, #12]
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	689b      	ldr	r3, [r3, #8]
 80113f4:	461a      	mov	r2, r3
 80113f6:	68b8      	ldr	r0, [r7, #8]
 80113f8:	f7fe ff01 	bl	80101fe <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80113fc:	79fb      	ldrb	r3, [r7, #7]
 80113fe:	2b01      	cmp	r3, #1
 8011400:	d130      	bne.n	8011464 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	ee07 3a90 	vmov	s15, r3
 8011408:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801140c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011414:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 801141c:	2300      	movs	r3, #0
 801141e:	61fb      	str	r3, [r7, #28]
 8011420:	e01c      	b.n	801145c <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	1d1a      	adds	r2, r3, #4
 8011426:	61ba      	str	r2, [r7, #24]
 8011428:	ed93 7a00 	vldr	s14, [r3]
 801142c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011434:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8011438:	69bb      	ldr	r3, [r7, #24]
 801143a:	edd3 7a00 	vldr	s15, [r3]
 801143e:	eeb1 7a67 	vneg.f32	s14, s15
 8011442:	edd7 7a04 	vldr	s15, [r7, #16]
 8011446:	ee67 7a27 	vmul.f32	s15, s14, s15
 801144a:	69bb      	ldr	r3, [r7, #24]
 801144c:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8011450:	69bb      	ldr	r3, [r7, #24]
 8011452:	3304      	adds	r3, #4
 8011454:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8011456:	69fb      	ldr	r3, [r7, #28]
 8011458:	3301      	adds	r3, #1
 801145a:	61fb      	str	r3, [r7, #28]
 801145c:	69fa      	ldr	r2, [r7, #28]
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	429a      	cmp	r2, r3
 8011462:	d3de      	bcc.n	8011422 <arm_cfft_f32+0x12a>
    }
  }
}
 8011464:	bf00      	nop
 8011466:	3720      	adds	r7, #32
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}

0801146c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 801146c:	b480      	push	{r7}
 801146e:	b0bd      	sub	sp, #244	; 0xf4
 8011470:	af00      	add	r7, sp, #0
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	607a      	str	r2, [r7, #4]
 8011476:	461a      	mov	r2, r3
 8011478:	460b      	mov	r3, r1
 801147a:	817b      	strh	r3, [r7, #10]
 801147c:	4613      	mov	r3, r2
 801147e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8011480:	4b09      	ldr	r3, [pc, #36]	; (80114a8 <arm_radix8_butterfly_f32+0x3c>)
 8011482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8011486:	897b      	ldrh	r3, [r7, #10]
 8011488:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 801148c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8011494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011498:	08db      	lsrs	r3, r3, #3
 801149a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 801149e:	2300      	movs	r3, #0
 80114a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80114a4:	e002      	b.n	80114ac <arm_radix8_butterfly_f32+0x40>
 80114a6:	bf00      	nop
 80114a8:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80114ac:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80114b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80114b4:	4413      	add	r3, r2
 80114b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80114ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80114be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80114c2:	4413      	add	r3, r2
 80114c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80114c8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80114cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80114d0:	4413      	add	r3, r2
 80114d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80114d6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80114da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80114de:	4413      	add	r3, r2
 80114e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80114e4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80114e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80114ec:	4413      	add	r3, r2
 80114ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80114f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80114f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80114fa:	4413      	add	r3, r2
 80114fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8011500:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011508:	4413      	add	r3, r2
 801150a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 801150e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011512:	00db      	lsls	r3, r3, #3
 8011514:	68fa      	ldr	r2, [r7, #12]
 8011516:	4413      	add	r3, r2
 8011518:	ed93 7a00 	vldr	s14, [r3]
 801151c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011520:	00db      	lsls	r3, r3, #3
 8011522:	68fa      	ldr	r2, [r7, #12]
 8011524:	4413      	add	r3, r2
 8011526:	edd3 7a00 	vldr	s15, [r3]
 801152a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801152e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8011532:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011536:	00db      	lsls	r3, r3, #3
 8011538:	68fa      	ldr	r2, [r7, #12]
 801153a:	4413      	add	r3, r2
 801153c:	ed93 7a00 	vldr	s14, [r3]
 8011540:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011544:	00db      	lsls	r3, r3, #3
 8011546:	68fa      	ldr	r2, [r7, #12]
 8011548:	4413      	add	r3, r2
 801154a:	edd3 7a00 	vldr	s15, [r3]
 801154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011552:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8011556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801155a:	00db      	lsls	r3, r3, #3
 801155c:	68fa      	ldr	r2, [r7, #12]
 801155e:	4413      	add	r3, r2
 8011560:	ed93 7a00 	vldr	s14, [r3]
 8011564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011568:	00db      	lsls	r3, r3, #3
 801156a:	68fa      	ldr	r2, [r7, #12]
 801156c:	4413      	add	r3, r2
 801156e:	edd3 7a00 	vldr	s15, [r3]
 8011572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011576:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 801157a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801157e:	00db      	lsls	r3, r3, #3
 8011580:	68fa      	ldr	r2, [r7, #12]
 8011582:	4413      	add	r3, r2
 8011584:	ed93 7a00 	vldr	s14, [r3]
 8011588:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801158c:	00db      	lsls	r3, r3, #3
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	4413      	add	r3, r2
 8011592:	edd3 7a00 	vldr	s15, [r3]
 8011596:	ee77 7a67 	vsub.f32	s15, s14, s15
 801159a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 801159e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80115a2:	00db      	lsls	r3, r3, #3
 80115a4:	68fa      	ldr	r2, [r7, #12]
 80115a6:	4413      	add	r3, r2
 80115a8:	ed93 7a00 	vldr	s14, [r3]
 80115ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80115b0:	00db      	lsls	r3, r3, #3
 80115b2:	68fa      	ldr	r2, [r7, #12]
 80115b4:	4413      	add	r3, r2
 80115b6:	edd3 7a00 	vldr	s15, [r3]
 80115ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115be:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80115c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80115c6:	00db      	lsls	r3, r3, #3
 80115c8:	68fa      	ldr	r2, [r7, #12]
 80115ca:	4413      	add	r3, r2
 80115cc:	ed93 7a00 	vldr	s14, [r3]
 80115d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80115d4:	00db      	lsls	r3, r3, #3
 80115d6:	68fa      	ldr	r2, [r7, #12]
 80115d8:	4413      	add	r3, r2
 80115da:	edd3 7a00 	vldr	s15, [r3]
 80115de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115e2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80115e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80115ea:	00db      	lsls	r3, r3, #3
 80115ec:	68fa      	ldr	r2, [r7, #12]
 80115ee:	4413      	add	r3, r2
 80115f0:	ed93 7a00 	vldr	s14, [r3]
 80115f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80115f8:	00db      	lsls	r3, r3, #3
 80115fa:	68fa      	ldr	r2, [r7, #12]
 80115fc:	4413      	add	r3, r2
 80115fe:	edd3 7a00 	vldr	s15, [r3]
 8011602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011606:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 801160a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801160e:	00db      	lsls	r3, r3, #3
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	4413      	add	r3, r2
 8011614:	ed93 7a00 	vldr	s14, [r3]
 8011618:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801161c:	00db      	lsls	r3, r3, #3
 801161e:	68fa      	ldr	r2, [r7, #12]
 8011620:	4413      	add	r3, r2
 8011622:	edd3 7a00 	vldr	s15, [r3]
 8011626:	ee77 7a67 	vsub.f32	s15, s14, s15
 801162a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 801162e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011632:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011636:	ee77 7a67 	vsub.f32	s15, s14, s15
 801163a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 801163e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011642:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011646:	ee77 7a27 	vadd.f32	s15, s14, s15
 801164a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 801164e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011652:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011656:	ee77 7a67 	vsub.f32	s15, s14, s15
 801165a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 801165e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011662:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011666:	ee77 7a27 	vadd.f32	s15, s14, s15
 801166a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 801166e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011672:	00db      	lsls	r3, r3, #3
 8011674:	68fa      	ldr	r2, [r7, #12]
 8011676:	4413      	add	r3, r2
 8011678:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801167c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011684:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8011688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	68fa      	ldr	r2, [r7, #12]
 8011690:	4413      	add	r3, r2
 8011692:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011696:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801169a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801169e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80116a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80116a6:	00db      	lsls	r3, r3, #3
 80116a8:	3304      	adds	r3, #4
 80116aa:	68fa      	ldr	r2, [r7, #12]
 80116ac:	4413      	add	r3, r2
 80116ae:	ed93 7a00 	vldr	s14, [r3]
 80116b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80116b6:	00db      	lsls	r3, r3, #3
 80116b8:	3304      	adds	r3, #4
 80116ba:	68fa      	ldr	r2, [r7, #12]
 80116bc:	4413      	add	r3, r2
 80116be:	edd3 7a00 	vldr	s15, [r3]
 80116c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116c6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80116ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80116ce:	00db      	lsls	r3, r3, #3
 80116d0:	3304      	adds	r3, #4
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	4413      	add	r3, r2
 80116d6:	ed93 7a00 	vldr	s14, [r3]
 80116da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80116de:	00db      	lsls	r3, r3, #3
 80116e0:	3304      	adds	r3, #4
 80116e2:	68fa      	ldr	r2, [r7, #12]
 80116e4:	4413      	add	r3, r2
 80116e6:	edd3 7a00 	vldr	s15, [r3]
 80116ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116ee:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80116f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80116f6:	00db      	lsls	r3, r3, #3
 80116f8:	3304      	adds	r3, #4
 80116fa:	68fa      	ldr	r2, [r7, #12]
 80116fc:	4413      	add	r3, r2
 80116fe:	ed93 7a00 	vldr	s14, [r3]
 8011702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011706:	00db      	lsls	r3, r3, #3
 8011708:	3304      	adds	r3, #4
 801170a:	68fa      	ldr	r2, [r7, #12]
 801170c:	4413      	add	r3, r2
 801170e:	edd3 7a00 	vldr	s15, [r3]
 8011712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011716:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 801171a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801171e:	00db      	lsls	r3, r3, #3
 8011720:	3304      	adds	r3, #4
 8011722:	68fa      	ldr	r2, [r7, #12]
 8011724:	4413      	add	r3, r2
 8011726:	ed93 7a00 	vldr	s14, [r3]
 801172a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801172e:	00db      	lsls	r3, r3, #3
 8011730:	3304      	adds	r3, #4
 8011732:	68fa      	ldr	r2, [r7, #12]
 8011734:	4413      	add	r3, r2
 8011736:	edd3 7a00 	vldr	s15, [r3]
 801173a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801173e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8011742:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011746:	00db      	lsls	r3, r3, #3
 8011748:	3304      	adds	r3, #4
 801174a:	68fa      	ldr	r2, [r7, #12]
 801174c:	4413      	add	r3, r2
 801174e:	ed93 7a00 	vldr	s14, [r3]
 8011752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011756:	00db      	lsls	r3, r3, #3
 8011758:	3304      	adds	r3, #4
 801175a:	68fa      	ldr	r2, [r7, #12]
 801175c:	4413      	add	r3, r2
 801175e:	edd3 7a00 	vldr	s15, [r3]
 8011762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011766:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 801176a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801176e:	00db      	lsls	r3, r3, #3
 8011770:	3304      	adds	r3, #4
 8011772:	68fa      	ldr	r2, [r7, #12]
 8011774:	4413      	add	r3, r2
 8011776:	ed93 7a00 	vldr	s14, [r3]
 801177a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801177e:	00db      	lsls	r3, r3, #3
 8011780:	3304      	adds	r3, #4
 8011782:	68fa      	ldr	r2, [r7, #12]
 8011784:	4413      	add	r3, r2
 8011786:	edd3 7a00 	vldr	s15, [r3]
 801178a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801178e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8011792:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011796:	00db      	lsls	r3, r3, #3
 8011798:	3304      	adds	r3, #4
 801179a:	68fa      	ldr	r2, [r7, #12]
 801179c:	4413      	add	r3, r2
 801179e:	ed93 7a00 	vldr	s14, [r3]
 80117a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80117a6:	00db      	lsls	r3, r3, #3
 80117a8:	3304      	adds	r3, #4
 80117aa:	68fa      	ldr	r2, [r7, #12]
 80117ac:	4413      	add	r3, r2
 80117ae:	edd3 7a00 	vldr	s15, [r3]
 80117b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117b6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80117ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80117be:	00db      	lsls	r3, r3, #3
 80117c0:	3304      	adds	r3, #4
 80117c2:	68fa      	ldr	r2, [r7, #12]
 80117c4:	4413      	add	r3, r2
 80117c6:	ed93 7a00 	vldr	s14, [r3]
 80117ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80117ce:	00db      	lsls	r3, r3, #3
 80117d0:	3304      	adds	r3, #4
 80117d2:	68fa      	ldr	r2, [r7, #12]
 80117d4:	4413      	add	r3, r2
 80117d6:	edd3 7a00 	vldr	s15, [r3]
 80117da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117de:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80117e2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80117e6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80117ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117ee:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 80117f2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80117f6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80117fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117fe:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8011802:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011806:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801180a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801180e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8011812:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011816:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801181a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801181e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8011822:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011826:	00db      	lsls	r3, r3, #3
 8011828:	3304      	adds	r3, #4
 801182a:	68fa      	ldr	r2, [r7, #12]
 801182c:	4413      	add	r3, r2
 801182e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011832:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011836:	ee77 7a27 	vadd.f32	s15, s14, s15
 801183a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 801183e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011842:	00db      	lsls	r3, r3, #3
 8011844:	3304      	adds	r3, #4
 8011846:	68fa      	ldr	r2, [r7, #12]
 8011848:	4413      	add	r3, r2
 801184a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801184e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011856:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 801185a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801185e:	00db      	lsls	r3, r3, #3
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	4413      	add	r3, r2
 8011864:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011868:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801186c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011870:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8011874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011878:	00db      	lsls	r3, r3, #3
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	4413      	add	r3, r2
 801187e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011882:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011886:	ee77 7a67 	vsub.f32	s15, s14, s15
 801188a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 801188e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011892:	00db      	lsls	r3, r3, #3
 8011894:	3304      	adds	r3, #4
 8011896:	68fa      	ldr	r2, [r7, #12]
 8011898:	4413      	add	r3, r2
 801189a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801189e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80118a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118a6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80118aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80118ae:	00db      	lsls	r3, r3, #3
 80118b0:	3304      	adds	r3, #4
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	4413      	add	r3, r2
 80118b6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80118ba:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80118be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118c2:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80118c6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80118ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80118ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118d2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80118d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118da:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80118de:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80118e2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80118e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118ea:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80118ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118f2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80118f6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80118fa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80118fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011902:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011906:	ee67 7a27 	vmul.f32	s15, s14, s15
 801190a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 801190e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8011912:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011916:	ee77 7a27 	vadd.f32	s15, s14, s15
 801191a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801191e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011922:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8011926:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801192a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801192e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011932:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8011936:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801193a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801193e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011942:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8011946:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 801194a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801194e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011952:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8011956:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 801195a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801195e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011962:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8011966:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801196a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801196e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011972:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8011976:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801197a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801197e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011982:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8011986:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 801198a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801198e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011992:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8011996:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 801199a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801199e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119a2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80119a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80119aa:	00db      	lsls	r3, r3, #3
 80119ac:	68fa      	ldr	r2, [r7, #12]
 80119ae:	4413      	add	r3, r2
 80119b0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80119b4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80119b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119bc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80119c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80119c4:	00db      	lsls	r3, r3, #3
 80119c6:	68fa      	ldr	r2, [r7, #12]
 80119c8:	4413      	add	r3, r2
 80119ca:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80119ce:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80119d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119d6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80119da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80119de:	00db      	lsls	r3, r3, #3
 80119e0:	68fa      	ldr	r2, [r7, #12]
 80119e2:	4413      	add	r3, r2
 80119e4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80119e8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80119ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119f0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80119f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80119f8:	00db      	lsls	r3, r3, #3
 80119fa:	68fa      	ldr	r2, [r7, #12]
 80119fc:	4413      	add	r3, r2
 80119fe:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011a02:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a0a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8011a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011a12:	00db      	lsls	r3, r3, #3
 8011a14:	3304      	adds	r3, #4
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	4413      	add	r3, r2
 8011a1a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011a1e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a26:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8011a2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011a2e:	00db      	lsls	r3, r3, #3
 8011a30:	3304      	adds	r3, #4
 8011a32:	68fa      	ldr	r2, [r7, #12]
 8011a34:	4413      	add	r3, r2
 8011a36:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011a3a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a42:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8011a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011a4a:	00db      	lsls	r3, r3, #3
 8011a4c:	3304      	adds	r3, #4
 8011a4e:	68fa      	ldr	r2, [r7, #12]
 8011a50:	4413      	add	r3, r2
 8011a52:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011a56:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a5e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8011a62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011a66:	00db      	lsls	r3, r3, #3
 8011a68:	3304      	adds	r3, #4
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011a72:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a7a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8011a7e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011a86:	4413      	add	r3, r2
 8011a88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8011a8c:	897b      	ldrh	r3, [r7, #10]
 8011a8e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011a92:	429a      	cmp	r2, r3
 8011a94:	f4ff ad0a 	bcc.w	80114ac <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8011a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011a9c:	2b07      	cmp	r3, #7
 8011a9e:	f240 84e3 	bls.w	8012468 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8011aae:	893b      	ldrh	r3, [r7, #8]
 8011ab0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011ab4:	4413      	add	r3, r2
 8011ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8011ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011aba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8011abe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011ac2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011ac4:	4413      	add	r3, r2
 8011ac6:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8011ac8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011acc:	4413      	add	r3, r2
 8011ace:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8011ad0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011ad2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011ad4:	4413      	add	r3, r2
 8011ad6:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8011ad8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011ada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011adc:	4413      	add	r3, r2
 8011ade:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8011ae0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011ae2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011ae4:	4413      	add	r3, r2
 8011ae6:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8011ae8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011aea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011aec:	4413      	add	r3, r2
 8011aee:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8011af0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011af4:	00db      	lsls	r3, r3, #3
 8011af6:	687a      	ldr	r2, [r7, #4]
 8011af8:	4413      	add	r3, r2
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8011afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b00:	00db      	lsls	r3, r3, #3
 8011b02:	687a      	ldr	r2, [r7, #4]
 8011b04:	4413      	add	r3, r2
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8011b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011b0c:	00db      	lsls	r3, r3, #3
 8011b0e:	687a      	ldr	r2, [r7, #4]
 8011b10:	4413      	add	r3, r2
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8011b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b18:	00db      	lsls	r3, r3, #3
 8011b1a:	687a      	ldr	r2, [r7, #4]
 8011b1c:	4413      	add	r3, r2
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8011b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b24:	00db      	lsls	r3, r3, #3
 8011b26:	687a      	ldr	r2, [r7, #4]
 8011b28:	4413      	add	r3, r2
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8011b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b30:	00db      	lsls	r3, r3, #3
 8011b32:	687a      	ldr	r2, [r7, #4]
 8011b34:	4413      	add	r3, r2
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8011b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b3c:	00db      	lsls	r3, r3, #3
 8011b3e:	687a      	ldr	r2, [r7, #4]
 8011b40:	4413      	add	r3, r2
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8011b46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b4a:	00db      	lsls	r3, r3, #3
 8011b4c:	3304      	adds	r3, #4
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	4413      	add	r3, r2
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8011b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b58:	00db      	lsls	r3, r3, #3
 8011b5a:	3304      	adds	r3, #4
 8011b5c:	687a      	ldr	r2, [r7, #4]
 8011b5e:	4413      	add	r3, r2
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8011b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011b66:	00db      	lsls	r3, r3, #3
 8011b68:	3304      	adds	r3, #4
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	4413      	add	r3, r2
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8011b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b74:	00db      	lsls	r3, r3, #3
 8011b76:	3304      	adds	r3, #4
 8011b78:	687a      	ldr	r2, [r7, #4]
 8011b7a:	4413      	add	r3, r2
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8011b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b82:	00db      	lsls	r3, r3, #3
 8011b84:	3304      	adds	r3, #4
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	4413      	add	r3, r2
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8011b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b90:	00db      	lsls	r3, r3, #3
 8011b92:	3304      	adds	r3, #4
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	4413      	add	r3, r2
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8011b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b9e:	00db      	lsls	r3, r3, #3
 8011ba0:	3304      	adds	r3, #4
 8011ba2:	687a      	ldr	r2, [r7, #4]
 8011ba4:	4413      	add	r3, r2
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8011baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011bae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8011bb2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011bba:	4413      	add	r3, r2
 8011bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8011bc0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8011bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011bc8:	4413      	add	r3, r2
 8011bca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8011bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011bd6:	4413      	add	r3, r2
 8011bd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8011bdc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011be4:	4413      	add	r3, r2
 8011be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8011bea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011bf2:	4413      	add	r3, r2
 8011bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8011bf8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c00:	4413      	add	r3, r2
 8011c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8011c06:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c0e:	4413      	add	r3, r2
 8011c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8011c14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011c18:	00db      	lsls	r3, r3, #3
 8011c1a:	68fa      	ldr	r2, [r7, #12]
 8011c1c:	4413      	add	r3, r2
 8011c1e:	ed93 7a00 	vldr	s14, [r3]
 8011c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011c26:	00db      	lsls	r3, r3, #3
 8011c28:	68fa      	ldr	r2, [r7, #12]
 8011c2a:	4413      	add	r3, r2
 8011c2c:	edd3 7a00 	vldr	s15, [r3]
 8011c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c34:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8011c38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011c3c:	00db      	lsls	r3, r3, #3
 8011c3e:	68fa      	ldr	r2, [r7, #12]
 8011c40:	4413      	add	r3, r2
 8011c42:	ed93 7a00 	vldr	s14, [r3]
 8011c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011c4a:	00db      	lsls	r3, r3, #3
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	4413      	add	r3, r2
 8011c50:	edd3 7a00 	vldr	s15, [r3]
 8011c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c58:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8011c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011c60:	00db      	lsls	r3, r3, #3
 8011c62:	68fa      	ldr	r2, [r7, #12]
 8011c64:	4413      	add	r3, r2
 8011c66:	ed93 7a00 	vldr	s14, [r3]
 8011c6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011c6e:	00db      	lsls	r3, r3, #3
 8011c70:	68fa      	ldr	r2, [r7, #12]
 8011c72:	4413      	add	r3, r2
 8011c74:	edd3 7a00 	vldr	s15, [r3]
 8011c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c7c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8011c80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011c84:	00db      	lsls	r3, r3, #3
 8011c86:	68fa      	ldr	r2, [r7, #12]
 8011c88:	4413      	add	r3, r2
 8011c8a:	ed93 7a00 	vldr	s14, [r3]
 8011c8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011c92:	00db      	lsls	r3, r3, #3
 8011c94:	68fa      	ldr	r2, [r7, #12]
 8011c96:	4413      	add	r3, r2
 8011c98:	edd3 7a00 	vldr	s15, [r3]
 8011c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ca0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8011ca4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011ca8:	00db      	lsls	r3, r3, #3
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	4413      	add	r3, r2
 8011cae:	ed93 7a00 	vldr	s14, [r3]
 8011cb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011cb6:	00db      	lsls	r3, r3, #3
 8011cb8:	68fa      	ldr	r2, [r7, #12]
 8011cba:	4413      	add	r3, r2
 8011cbc:	edd3 7a00 	vldr	s15, [r3]
 8011cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011cc4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8011cc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011ccc:	00db      	lsls	r3, r3, #3
 8011cce:	68fa      	ldr	r2, [r7, #12]
 8011cd0:	4413      	add	r3, r2
 8011cd2:	ed93 7a00 	vldr	s14, [r3]
 8011cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011cda:	00db      	lsls	r3, r3, #3
 8011cdc:	68fa      	ldr	r2, [r7, #12]
 8011cde:	4413      	add	r3, r2
 8011ce0:	edd3 7a00 	vldr	s15, [r3]
 8011ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ce8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8011cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011cf0:	00db      	lsls	r3, r3, #3
 8011cf2:	68fa      	ldr	r2, [r7, #12]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	ed93 7a00 	vldr	s14, [r3]
 8011cfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011cfe:	00db      	lsls	r3, r3, #3
 8011d00:	68fa      	ldr	r2, [r7, #12]
 8011d02:	4413      	add	r3, r2
 8011d04:	edd3 7a00 	vldr	s15, [r3]
 8011d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d0c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8011d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011d14:	00db      	lsls	r3, r3, #3
 8011d16:	68fa      	ldr	r2, [r7, #12]
 8011d18:	4413      	add	r3, r2
 8011d1a:	ed93 7a00 	vldr	s14, [r3]
 8011d1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011d22:	00db      	lsls	r3, r3, #3
 8011d24:	68fa      	ldr	r2, [r7, #12]
 8011d26:	4413      	add	r3, r2
 8011d28:	edd3 7a00 	vldr	s15, [r3]
 8011d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d30:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8011d34:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011d38:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d40:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8011d44:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011d48:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d50:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8011d54:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011d58:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d60:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8011d64:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011d68:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d70:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8011d74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011d78:	00db      	lsls	r3, r3, #3
 8011d7a:	68fa      	ldr	r2, [r7, #12]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011d82:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d8a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8011d8e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011d92:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d9a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8011d9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011da2:	00db      	lsls	r3, r3, #3
 8011da4:	3304      	adds	r3, #4
 8011da6:	68fa      	ldr	r2, [r7, #12]
 8011da8:	4413      	add	r3, r2
 8011daa:	ed93 7a00 	vldr	s14, [r3]
 8011dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011db2:	00db      	lsls	r3, r3, #3
 8011db4:	3304      	adds	r3, #4
 8011db6:	68fa      	ldr	r2, [r7, #12]
 8011db8:	4413      	add	r3, r2
 8011dba:	edd3 7a00 	vldr	s15, [r3]
 8011dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011dc2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8011dc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011dca:	00db      	lsls	r3, r3, #3
 8011dcc:	3304      	adds	r3, #4
 8011dce:	68fa      	ldr	r2, [r7, #12]
 8011dd0:	4413      	add	r3, r2
 8011dd2:	ed93 7a00 	vldr	s14, [r3]
 8011dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011dda:	00db      	lsls	r3, r3, #3
 8011ddc:	3304      	adds	r3, #4
 8011dde:	68fa      	ldr	r2, [r7, #12]
 8011de0:	4413      	add	r3, r2
 8011de2:	edd3 7a00 	vldr	s15, [r3]
 8011de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011dea:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8011dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011df2:	00db      	lsls	r3, r3, #3
 8011df4:	3304      	adds	r3, #4
 8011df6:	68fa      	ldr	r2, [r7, #12]
 8011df8:	4413      	add	r3, r2
 8011dfa:	ed93 7a00 	vldr	s14, [r3]
 8011dfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011e02:	00db      	lsls	r3, r3, #3
 8011e04:	3304      	adds	r3, #4
 8011e06:	68fa      	ldr	r2, [r7, #12]
 8011e08:	4413      	add	r3, r2
 8011e0a:	edd3 7a00 	vldr	s15, [r3]
 8011e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e12:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8011e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011e1a:	00db      	lsls	r3, r3, #3
 8011e1c:	3304      	adds	r3, #4
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	4413      	add	r3, r2
 8011e22:	ed93 7a00 	vldr	s14, [r3]
 8011e26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011e2a:	00db      	lsls	r3, r3, #3
 8011e2c:	3304      	adds	r3, #4
 8011e2e:	68fa      	ldr	r2, [r7, #12]
 8011e30:	4413      	add	r3, r2
 8011e32:	edd3 7a00 	vldr	s15, [r3]
 8011e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e3a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8011e3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011e42:	00db      	lsls	r3, r3, #3
 8011e44:	3304      	adds	r3, #4
 8011e46:	68fa      	ldr	r2, [r7, #12]
 8011e48:	4413      	add	r3, r2
 8011e4a:	ed93 7a00 	vldr	s14, [r3]
 8011e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011e52:	00db      	lsls	r3, r3, #3
 8011e54:	3304      	adds	r3, #4
 8011e56:	68fa      	ldr	r2, [r7, #12]
 8011e58:	4413      	add	r3, r2
 8011e5a:	edd3 7a00 	vldr	s15, [r3]
 8011e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e62:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8011e66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011e6a:	00db      	lsls	r3, r3, #3
 8011e6c:	3304      	adds	r3, #4
 8011e6e:	68fa      	ldr	r2, [r7, #12]
 8011e70:	4413      	add	r3, r2
 8011e72:	ed93 7a00 	vldr	s14, [r3]
 8011e76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011e7a:	00db      	lsls	r3, r3, #3
 8011e7c:	3304      	adds	r3, #4
 8011e7e:	68fa      	ldr	r2, [r7, #12]
 8011e80:	4413      	add	r3, r2
 8011e82:	edd3 7a00 	vldr	s15, [r3]
 8011e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e8a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8011e8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011e92:	00db      	lsls	r3, r3, #3
 8011e94:	3304      	adds	r3, #4
 8011e96:	68fa      	ldr	r2, [r7, #12]
 8011e98:	4413      	add	r3, r2
 8011e9a:	ed93 7a00 	vldr	s14, [r3]
 8011e9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011ea2:	00db      	lsls	r3, r3, #3
 8011ea4:	3304      	adds	r3, #4
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	4413      	add	r3, r2
 8011eaa:	edd3 7a00 	vldr	s15, [r3]
 8011eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011eb2:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8011eb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011eba:	00db      	lsls	r3, r3, #3
 8011ebc:	3304      	adds	r3, #4
 8011ebe:	68fa      	ldr	r2, [r7, #12]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	ed93 7a00 	vldr	s14, [r3]
 8011ec6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011eca:	00db      	lsls	r3, r3, #3
 8011ecc:	3304      	adds	r3, #4
 8011ece:	68fa      	ldr	r2, [r7, #12]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	edd3 7a00 	vldr	s15, [r3]
 8011ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011eda:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8011ede:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011ee2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011eea:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8011eee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011ef2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011efa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8011efe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011f02:	edd7 7a08 	vldr	s15, [r7, #32]
 8011f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f0a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8011f0e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011f12:	edd7 7a08 	vldr	s15, [r7, #32]
 8011f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f1a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8011f1e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011f22:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f2a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8011f2e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011f32:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f3a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8011f3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011f42:	00db      	lsls	r3, r3, #3
 8011f44:	3304      	adds	r3, #4
 8011f46:	68fa      	ldr	r2, [r7, #12]
 8011f48:	4413      	add	r3, r2
 8011f4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011f4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f56:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8011f5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011f5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8011f6a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011f6e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f76:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8011f7a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011f7e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f86:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8011f8a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8011f8e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f96:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8011f9a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011f9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fa6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8011faa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8011fae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fb6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8011fba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011fbe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fc6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8011fca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011fce:	00db      	lsls	r3, r3, #3
 8011fd0:	68fa      	ldr	r2, [r7, #12]
 8011fd2:	4413      	add	r3, r2
 8011fd4:	ed97 7a07 	vldr	s14, [r7, #28]
 8011fd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8011fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fe0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8011fe4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011fe8:	00db      	lsls	r3, r3, #3
 8011fea:	3304      	adds	r3, #4
 8011fec:	68fa      	ldr	r2, [r7, #12]
 8011fee:	4413      	add	r3, r2
 8011ff0:	ed97 7a05 	vldr	s14, [r7, #20]
 8011ff4:	edd7 7a04 	vldr	s15, [r7, #16]
 8011ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ffc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8012000:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012004:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8012008:	ee67 7a27 	vmul.f32	s15, s14, s15
 801200c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8012010:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8012014:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012018:	ee67 7a27 	vmul.f32	s15, s14, s15
 801201c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8012020:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012024:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012028:	ee67 7a27 	vmul.f32	s15, s14, s15
 801202c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8012030:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8012034:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8012038:	ee67 7a27 	vmul.f32	s15, s14, s15
 801203c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8012040:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012044:	00db      	lsls	r3, r3, #3
 8012046:	68fa      	ldr	r2, [r7, #12]
 8012048:	4413      	add	r3, r2
 801204a:	ed97 7a07 	vldr	s14, [r7, #28]
 801204e:	edd7 7a06 	vldr	s15, [r7, #24]
 8012052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012056:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 801205a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801205e:	00db      	lsls	r3, r3, #3
 8012060:	3304      	adds	r3, #4
 8012062:	68fa      	ldr	r2, [r7, #12]
 8012064:	4413      	add	r3, r2
 8012066:	ed97 7a05 	vldr	s14, [r7, #20]
 801206a:	edd7 7a04 	vldr	s15, [r7, #16]
 801206e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012072:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8012076:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801207a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012082:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8012086:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801208a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801208e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012092:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8012096:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801209a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120a2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 80120a6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80120aa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80120ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120b2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 80120b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80120ba:	00db      	lsls	r3, r3, #3
 80120bc:	68fa      	ldr	r2, [r7, #12]
 80120be:	4413      	add	r3, r2
 80120c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80120c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80120c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120cc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 80120d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80120d4:	00db      	lsls	r3, r3, #3
 80120d6:	3304      	adds	r3, #4
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	4413      	add	r3, r2
 80120dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80120e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80120e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120e8:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80120ec:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80120f0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80120f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120f8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80120fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012100:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8012104:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8012108:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801210c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012110:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8012114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012118:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 801211c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8012120:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8012124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012128:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801212c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012130:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8012134:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8012138:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801213c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012140:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8012144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012148:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 801214c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8012150:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8012154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012158:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 801215c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8012160:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8012164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012168:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 801216c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8012170:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8012174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012178:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 801217c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8012180:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8012184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012188:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 801218c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8012190:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012198:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 801219c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80121a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80121a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121a8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80121ac:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80121b0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80121b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121b8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80121bc:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80121c0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80121c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121c8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80121cc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80121d0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80121d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121d8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80121dc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80121e0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80121e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121e8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80121ec:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80121f0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80121f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121f8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80121fc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8012200:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8012204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012208:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 801220c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8012210:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8012214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012218:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 801221c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8012220:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8012224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012228:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 801222c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8012230:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8012234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012238:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 801223c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8012240:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8012244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012248:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 801224c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8012250:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8012254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012258:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 801225c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8012260:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012268:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 801226c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8012270:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012278:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 801227c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8012280:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8012284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012288:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 801228c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012290:	00db      	lsls	r3, r3, #3
 8012292:	68fa      	ldr	r2, [r7, #12]
 8012294:	4413      	add	r3, r2
 8012296:	ed97 7a07 	vldr	s14, [r7, #28]
 801229a:	edd7 7a06 	vldr	s15, [r7, #24]
 801229e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122a2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80122a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80122aa:	00db      	lsls	r3, r3, #3
 80122ac:	3304      	adds	r3, #4
 80122ae:	68fa      	ldr	r2, [r7, #12]
 80122b0:	4413      	add	r3, r2
 80122b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80122b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80122ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122be:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80122c2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80122c6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80122ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122ce:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80122d2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80122d6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80122da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122de:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80122e2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80122e6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80122ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122ee:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80122f2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80122f6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80122fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122fe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8012302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012306:	00db      	lsls	r3, r3, #3
 8012308:	68fa      	ldr	r2, [r7, #12]
 801230a:	4413      	add	r3, r2
 801230c:	ed97 7a07 	vldr	s14, [r7, #28]
 8012310:	edd7 7a06 	vldr	s15, [r7, #24]
 8012314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012318:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 801231c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012320:	00db      	lsls	r3, r3, #3
 8012322:	3304      	adds	r3, #4
 8012324:	68fa      	ldr	r2, [r7, #12]
 8012326:	4413      	add	r3, r2
 8012328:	ed97 7a05 	vldr	s14, [r7, #20]
 801232c:	edd7 7a04 	vldr	s15, [r7, #16]
 8012330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012334:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8012338:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801233c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8012340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012344:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8012348:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801234c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8012350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012354:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8012358:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801235c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8012360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012364:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8012368:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801236c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8012370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012374:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8012378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801237c:	00db      	lsls	r3, r3, #3
 801237e:	68fa      	ldr	r2, [r7, #12]
 8012380:	4413      	add	r3, r2
 8012382:	ed97 7a07 	vldr	s14, [r7, #28]
 8012386:	edd7 7a06 	vldr	s15, [r7, #24]
 801238a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801238e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8012392:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012396:	00db      	lsls	r3, r3, #3
 8012398:	3304      	adds	r3, #4
 801239a:	68fa      	ldr	r2, [r7, #12]
 801239c:	4413      	add	r3, r2
 801239e:	ed97 7a05 	vldr	s14, [r7, #20]
 80123a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80123a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123aa:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80123ae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80123b2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80123b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123ba:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80123be:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80123c2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80123c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123ca:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80123ce:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80123d2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80123d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123da:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80123de:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80123e2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80123e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123ea:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80123ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80123f2:	00db      	lsls	r3, r3, #3
 80123f4:	68fa      	ldr	r2, [r7, #12]
 80123f6:	4413      	add	r3, r2
 80123f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80123fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8012400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012404:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8012408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801240c:	00db      	lsls	r3, r3, #3
 801240e:	3304      	adds	r3, #4
 8012410:	68fa      	ldr	r2, [r7, #12]
 8012412:	4413      	add	r3, r2
 8012414:	ed97 7a05 	vldr	s14, [r7, #20]
 8012418:	edd7 7a04 	vldr	s15, [r7, #16]
 801241c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012420:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8012424:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8012428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801242c:	4413      	add	r3, r2
 801242e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8012432:	897b      	ldrh	r3, [r7, #10]
 8012434:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8012438:	429a      	cmp	r2, r3
 801243a:	f4ff abba 	bcc.w	8011bb2 <arm_radix8_butterfly_f32+0x746>

         j++;
 801243e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012442:	3301      	adds	r3, #1
 8012444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8012448:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801244c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012450:	429a      	cmp	r2, r3
 8012452:	f4ff ab2c 	bcc.w	8011aae <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8012456:	893b      	ldrh	r3, [r7, #8]
 8012458:	00db      	lsls	r3, r3, #3
 801245a:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 801245c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012460:	2b07      	cmp	r3, #7
 8012462:	f63f a813 	bhi.w	801148c <arm_radix8_butterfly_f32+0x20>
}
 8012466:	e000      	b.n	801246a <arm_radix8_butterfly_f32+0xffe>
         break;
 8012468:	bf00      	nop
}
 801246a:	bf00      	nop
 801246c:	37f4      	adds	r7, #244	; 0xf4
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop

08012478 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8012478:	b480      	push	{r7}
 801247a:	b095      	sub	sp, #84	; 0x54
 801247c:	af00      	add	r7, sp, #0
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	60b9      	str	r1, [r7, #8]
 8012482:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	695b      	ldr	r3, [r3, #20]
 8012488:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 801248a:	68bb      	ldr	r3, [r7, #8]
 801248c:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	881b      	ldrh	r3, [r3, #0]
 8012496:	3b01      	subs	r3, #1
 8012498:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 801249a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 80124a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 80124a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 80124ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 80124b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124b4:	1d1a      	adds	r2, r3, #4
 80124b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 80124bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124be:	1d1a      	adds	r2, r3, #4
 80124c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80124c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80124ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80124ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80124d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80124d6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80124da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80124de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80124e2:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80124e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80124ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80124ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	1d1a      	adds	r2, r3, #4
 80124f6:	607a      	str	r2, [r7, #4]
 80124f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80124fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012500:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8012504:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8012508:	edd7 7a08 	vldr	s15, [r7, #32]
 801250c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	1d1a      	adds	r2, r3, #4
 8012514:	607a      	str	r2, [r7, #4]
 8012516:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801251a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801251e:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8012522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012524:	00db      	lsls	r3, r3, #3
 8012526:	68ba      	ldr	r2, [r7, #8]
 8012528:	4413      	add	r3, r2
 801252a:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 801252c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801252e:	3308      	adds	r3, #8
 8012530:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8012532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8012538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 801253e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8012544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 801254a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801254c:	1d1a      	adds	r2, r3, #4
 801254e:	64ba      	str	r2, [r7, #72]	; 0x48
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8012554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012556:	1d1a      	adds	r2, r3, #4
 8012558:	64ba      	str	r2, [r7, #72]	; 0x48
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 801255e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012562:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012566:	ee77 7a67 	vsub.f32	s15, s14, s15
 801256a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 801256e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012572:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012576:	ee77 7a27 	vadd.f32	s15, s14, s15
 801257a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 801257e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8012582:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012586:	ee67 7a27 	vmul.f32	s15, s14, s15
 801258a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 801258e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8012592:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012596:	ee67 7a27 	vmul.f32	s15, s14, s15
 801259a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 801259e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80125a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80125a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125aa:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80125ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80125b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80125b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125ba:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80125be:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80125c2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80125c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80125ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80125ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80125d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80125d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	1d1a      	adds	r2, r3, #4
 80125de:	607a      	str	r2, [r7, #4]
 80125e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80125e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125e8:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80125ec:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80125f0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80125f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80125f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80125fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012600:	edd7 7a05 	vldr	s15, [r7, #20]
 8012604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	1d1a      	adds	r2, r3, #4
 801260c:	607a      	str	r2, [r7, #4]
 801260e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012616:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 801261a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801261c:	3308      	adds	r3, #8
 801261e:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8012620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012622:	3b08      	subs	r3, #8
 8012624:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8012626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012628:	3b01      	subs	r3, #1
 801262a:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 801262c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801262e:	2b00      	cmp	r3, #0
 8012630:	f73f af7f 	bgt.w	8012532 <stage_rfft_f32+0xba>
}
 8012634:	bf00      	nop
 8012636:	bf00      	nop
 8012638:	3754      	adds	r7, #84	; 0x54
 801263a:	46bd      	mov	sp, r7
 801263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012640:	4770      	bx	lr

08012642 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8012642:	b480      	push	{r7}
 8012644:	b095      	sub	sp, #84	; 0x54
 8012646:	af00      	add	r7, sp, #0
 8012648:	60f8      	str	r0, [r7, #12]
 801264a:	60b9      	str	r1, [r7, #8]
 801264c:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	695b      	ldr	r3, [r3, #20]
 8012652:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	881b      	ldrh	r3, [r3, #0]
 8012660:	3b01      	subs	r3, #1
 8012662:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8012664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 801266a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8012670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012672:	3308      	adds	r3, #8
 8012674:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8012676:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801267a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801267e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	1d1a      	adds	r2, r3, #4
 8012686:	607a      	str	r2, [r7, #4]
 8012688:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801268c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012690:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8012694:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012698:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801269c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	1d1a      	adds	r2, r3, #4
 80126a4:	607a      	str	r2, [r7, #4]
 80126a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80126aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80126ae:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80126b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126b4:	00db      	lsls	r3, r3, #3
 80126b6:	68ba      	ldr	r2, [r7, #8]
 80126b8:	4413      	add	r3, r2
 80126ba:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 80126bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126be:	3308      	adds	r3, #8
 80126c0:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 80126c2:	e07c      	b.n	80127be <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80126c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80126ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 80126d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 80126d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 80126dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126de:	1d1a      	adds	r2, r3, #4
 80126e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80126e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126e8:	1d1a      	adds	r2, r3, #4
 80126ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 80126f0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80126f4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80126f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8012700:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012704:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012708:	ee77 7a27 	vadd.f32	s15, s14, s15
 801270c:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8012710:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8012714:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012718:	ee67 7a27 	vmul.f32	s15, s14, s15
 801271c:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8012720:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8012724:	edd7 7a08 	vldr	s15, [r7, #32]
 8012728:	ee67 7a27 	vmul.f32	s15, s14, s15
 801272c:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8012730:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8012734:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012738:	ee67 7a27 	vmul.f32	s15, s14, s15
 801273c:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8012740:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8012744:	edd7 7a08 	vldr	s15, [r7, #32]
 8012748:	ee67 7a27 	vmul.f32	s15, s14, s15
 801274c:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8012750:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012754:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012758:	ee37 7a27 	vadd.f32	s14, s14, s15
 801275c:	edd7 7a07 	vldr	s15, [r7, #28]
 8012760:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012764:	edd7 7a06 	vldr	s15, [r7, #24]
 8012768:	ee77 7a67 	vsub.f32	s15, s14, s15
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	1d1a      	adds	r2, r3, #4
 8012770:	607a      	str	r2, [r7, #4]
 8012772:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012776:	ee67 7a87 	vmul.f32	s15, s15, s14
 801277a:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 801277e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012782:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012786:	ee37 7a67 	vsub.f32	s14, s14, s15
 801278a:	edd7 7a05 	vldr	s15, [r7, #20]
 801278e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012792:	edd7 7a04 	vldr	s15, [r7, #16]
 8012796:	ee77 7a67 	vsub.f32	s15, s14, s15
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	1d1a      	adds	r2, r3, #4
 801279e:	607a      	str	r2, [r7, #4]
 80127a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80127a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80127a8:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80127ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127ae:	3308      	adds	r3, #8
 80127b0:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80127b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127b4:	3b08      	subs	r3, #8
 80127b6:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80127b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127ba:	3b01      	subs	r3, #1
 80127bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 80127be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	f73f af7f 	bgt.w	80126c4 <merge_rfft_f32+0x82>
   }

}
 80127c6:	bf00      	nop
 80127c8:	bf00      	nop
 80127ca:	3754      	adds	r7, #84	; 0x54
 80127cc:	46bd      	mov	sp, r7
 80127ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d2:	4770      	bx	lr

080127d4 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b086      	sub	sp, #24
 80127d8:	af00      	add	r7, sp, #0
 80127da:	60f8      	str	r0, [r7, #12]
 80127dc:	60b9      	str	r1, [r7, #8]
 80127de:	607a      	str	r2, [r7, #4]
 80127e0:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80127e6:	78fb      	ldrb	r3, [r7, #3]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d00b      	beq.n	8012804 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	68b9      	ldr	r1, [r7, #8]
 80127f0:	68f8      	ldr	r0, [r7, #12]
 80127f2:	f7ff ff26 	bl	8012642 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80127f6:	78fa      	ldrb	r2, [r7, #3]
 80127f8:	2301      	movs	r3, #1
 80127fa:	6879      	ldr	r1, [r7, #4]
 80127fc:	6978      	ldr	r0, [r7, #20]
 80127fe:	f7fe fd7b 	bl	80112f8 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8012802:	e00a      	b.n	801281a <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8012804:	78fa      	ldrb	r2, [r7, #3]
 8012806:	2301      	movs	r3, #1
 8012808:	68b9      	ldr	r1, [r7, #8]
 801280a:	6978      	ldr	r0, [r7, #20]
 801280c:	f7fe fd74 	bl	80112f8 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	68b9      	ldr	r1, [r7, #8]
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f7ff fe2f 	bl	8012478 <stage_rfft_f32>
}
 801281a:	bf00      	nop
 801281c:	3718      	adds	r7, #24
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}

08012822 <arm_convolve_1_x_n_s8>:
                                          const q7_t *filter_data,
                                          const cmsis_nn_dims *bias_dims,
                                          const int32_t *bias_data,
                                          const cmsis_nn_dims *output_dims,
                                          q7_t *output_data)
{
 8012822:	b580      	push	{r7, lr}
 8012824:	b08e      	sub	sp, #56	; 0x38
 8012826:	af08      	add	r7, sp, #32
 8012828:	60f8      	str	r0, [r7, #12]
 801282a:	60b9      	str	r1, [r7, #8]
 801282c:	607a      	str	r2, [r7, #4]
 801282e:	603b      	str	r3, [r7, #0]
    (void)bias_dims;
    arm_cmsis_nn_status status = ARM_CMSIS_NN_SUCCESS;
 8012830:	2300      	movs	r3, #0
 8012832:	75fb      	strb	r3, [r7, #23]
    /* The wrapper API is the ultimate reference for argument check */
    if ((input_dims->h != 1) || (output_dims->w % 4 != 0) || conv_params->dilation.w != 1)
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	2b01      	cmp	r3, #1
 801283a:	d109      	bne.n	8012850 <arm_convolve_1_x_n_s8+0x2e>
 801283c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801283e:	689b      	ldr	r3, [r3, #8]
 8012840:	f003 0303 	and.w	r3, r3, #3
 8012844:	2b00      	cmp	r3, #0
 8012846:	d103      	bne.n	8012850 <arm_convolve_1_x_n_s8+0x2e>
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	699b      	ldr	r3, [r3, #24]
 801284c:	2b01      	cmp	r3, #1
 801284e:	d002      	beq.n	8012856 <arm_convolve_1_x_n_s8+0x34>
    {
        status = ARM_CMSIS_NN_ARG_ERROR;
 8012850:	23ff      	movs	r3, #255	; 0xff
 8012852:	75fb      	strb	r3, [r7, #23]
        goto out;
 8012854:	e015      	b.n	8012882 <arm_convolve_1_x_n_s8+0x60>
        /* Advance to the next batch */
        input_data += (input_x * input_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 8012856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012858:	9306      	str	r3, [sp, #24]
 801285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801285c:	9305      	str	r3, [sp, #20]
 801285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012860:	9304      	str	r3, [sp, #16]
 8012862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012864:	9303      	str	r3, [sp, #12]
 8012866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012868:	9302      	str	r3, [sp, #8]
 801286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286c:	9301      	str	r3, [sp, #4]
 801286e:	6a3b      	ldr	r3, [r7, #32]
 8012870:	9300      	str	r3, [sp, #0]
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	68b9      	ldr	r1, [r7, #8]
 8012878:	68f8      	ldr	r0, [r7, #12]
 801287a:	f001 f869 	bl	8013950 <arm_convolve_s8>
 801287e:	4603      	mov	r3, r0
 8012880:	75fb      	strb	r3, [r7, #23]
                             output_data);
#endif

out:
    /* Return to application */
    return status;
 8012882:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012886:	4618      	mov	r0, r3
 8012888:	3718      	adds	r7, #24
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}

0801288e <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 801288e:	b580      	push	{r7, lr}
 8012890:	b082      	sub	sp, #8
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
 8012896:	6039      	str	r1, [r7, #0]
#if !defined(ARM_MATH_MVEI)
    return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 8012898:	6839      	ldr	r1, [r7, #0]
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f001 fd1e 	bl	80142dc <arm_convolve_s8_get_buffer_size>
 80128a0:	4603      	mov	r3, r0
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3708      	adds	r7, #8
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}

080128aa <arm_convolve_1x1_s8_fast>:
                                             const q7_t *filter_data,
                                             const cmsis_nn_dims *bias_dims,
                                             const int32_t *bias_data,
                                             const cmsis_nn_dims *output_dims,
                                             q7_t *output_data)
{
 80128aa:	b5b0      	push	{r4, r5, r7, lr}
 80128ac:	b092      	sub	sp, #72	; 0x48
 80128ae:	af0a      	add	r7, sp, #40	; 0x28
 80128b0:	60f8      	str	r0, [r7, #12]
 80128b2:	60b9      	str	r1, [r7, #8]
 80128b4:	607a      	str	r2, [r7, #4]
 80128b6:	603b      	str	r3, [r7, #0]
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	691b      	ldr	r3, [r3, #16]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d10b      	bne.n	80128d8 <arm_convolve_1x1_s8_fast+0x2e>
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	695b      	ldr	r3, [r3, #20]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d107      	bne.n	80128d8 <arm_convolve_1x1_s8_fast+0x2e>
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	689b      	ldr	r3, [r3, #8]
 80128cc:	2b01      	cmp	r3, #1
 80128ce:	d103      	bne.n	80128d8 <arm_convolve_1x1_s8_fast+0x2e>
        conv_params->stride.h != 1)
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	68db      	ldr	r3, [r3, #12]
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
 80128d4:	2b01      	cmp	r3, #1
 80128d6:	d002      	beq.n	80128de <arm_convolve_1x1_s8_fast+0x34>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
 80128d8:	f04f 33ff 	mov.w	r3, #4294967295
 80128dc:	e02f      	b.n	801293e <arm_convolve_1x1_s8_fast+0x94>
    }

#else
    /* Run the following code as reference implementation for Cortex-M processors with or without DSP extension */

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	689b      	ldr	r3, [r3, #8]
 80128e2:	683a      	ldr	r2, [r7, #0]
 80128e4:	6852      	ldr	r2, [r2, #4]
 80128e6:	fb02 f303 	mul.w	r3, r2, r3
 80128ea:	683a      	ldr	r2, [r7, #0]
 80128ec:	6812      	ldr	r2, [r2, #0]
 80128ee:	fb02 f303 	mul.w	r3, r2, r3
 80128f2:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 80128f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	68db      	ldr	r3, [r3, #12]
 80128fe:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 8012904:	687a      	ldr	r2, [r7, #4]
 8012906:	6852      	ldr	r2, [r2, #4]
                            lhs_rows,
                            rhs_rows,
                            rhs_cols,
                            conv_params->input_offset,
 8012908:	68b9      	ldr	r1, [r7, #8]
 801290a:	6809      	ldr	r1, [r1, #0]
                            conv_params->output_offset,
 801290c:	68b8      	ldr	r0, [r7, #8]
 801290e:	6840      	ldr	r0, [r0, #4]
                            conv_params->activation.min,
 8012910:	68bc      	ldr	r4, [r7, #8]
 8012912:	6a24      	ldr	r4, [r4, #32]
                            conv_params->activation.max);
 8012914:	68bd      	ldr	r5, [r7, #8]
 8012916:	6a6d      	ldr	r5, [r5, #36]	; 0x24
    arm_nn_mat_mult_nt_t_s8(input_data,
 8012918:	9508      	str	r5, [sp, #32]
 801291a:	9407      	str	r4, [sp, #28]
 801291c:	9006      	str	r0, [sp, #24]
 801291e:	9105      	str	r1, [sp, #20]
 8012920:	6979      	ldr	r1, [r7, #20]
 8012922:	9104      	str	r1, [sp, #16]
 8012924:	69b9      	ldr	r1, [r7, #24]
 8012926:	9103      	str	r1, [sp, #12]
 8012928:	69f9      	ldr	r1, [r7, #28]
 801292a:	9102      	str	r1, [sp, #8]
 801292c:	9201      	str	r2, [sp, #4]
 801292e:	9300      	str	r3, [sp, #0]
 8012930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012934:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012938:	f006 fa46 	bl	8018dc8 <arm_nn_mat_mult_nt_t_s8>

#endif

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
 801293c:	2300      	movs	r3, #0
}
 801293e:	4618      	mov	r0, r3
 8012940:	3720      	adds	r7, #32
 8012942:	46bd      	mov	sp, r7
 8012944:	bdb0      	pop	{r4, r5, r7, pc}

08012946 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 8012946:	b480      	push	{r7}
 8012948:	b083      	sub	sp, #12
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 801294e:	2300      	movs	r3, #0
}
 8012950:	4618      	mov	r0, r3
 8012952:	370c      	adds	r7, #12
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr

0801295c <arm_convolve_fast_s16>:
                                          const q7_t *filter_data,
                                          const cmsis_nn_dims *bias_dims,
                                          const int64_t *bias_data,
                                          const cmsis_nn_dims *output_dims,
                                          q15_t *output_data)
{
 801295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012960:	b0fb      	sub	sp, #492	; 0x1ec
 8012962:	af06      	add	r7, sp, #24
 8012964:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8012968:	f5a4 74ca 	sub.w	r4, r4, #404	; 0x194
 801296c:	6020      	str	r0, [r4, #0]
 801296e:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8012972:	f5a0 70cc 	sub.w	r0, r0, #408	; 0x198
 8012976:	6001      	str	r1, [r0, #0]
 8012978:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 801297c:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 8012980:	600a      	str	r2, [r1, #0]
 8012982:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8012986:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 801298a:	6013      	str	r3, [r2, #0]
    (void)bias_dims;
    if (filter_dims->w * filter_dims->h * input_dims->c >= 512)
 801298c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012990:	689a      	ldr	r2, [r3, #8]
 8012992:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	fb03 f202 	mul.w	r2, r3, r2
 801299c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80129a0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	68db      	ldr	r3, [r3, #12]
 80129a8:	fb02 f303 	mul.w	r3, r2, r3
 80129ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129b0:	db03      	blt.n	80129ba <arm_convolve_fast_s16+0x5e>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
 80129b2:	f04f 33ff 	mov.w	r3, #4294967295
 80129b6:	f000 bd61 	b.w	801347c <arm_convolve_fast_s16+0xb20>
    }

    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
 80129ba:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80129be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d10f      	bne.n	80129ea <arm_convolve_fast_s16+0x8e>
 80129ca:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80129ce:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80129d2:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 80129d6:	6818      	ldr	r0, [r3, #0]
 80129d8:	f001 fc80 	bl	80142dc <arm_convolve_s8_get_buffer_size>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	dd03      	ble.n	80129ea <arm_convolve_fast_s16+0x8e>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
 80129e2:	f04f 33ff 	mov.w	r3, #4294967295
 80129e6:	f000 bd49 	b.w	801347c <arm_convolve_fast_s16+0xb20>
    }
    q15_t *buffer_a = (q15_t *)ctx->buf;
 80129ea:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80129ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

    const int32_t input_batches = input_dims->n;
 80129fa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80129fe:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    const int32_t input_x = input_dims->w;
 8012a0a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012a0e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	689b      	ldr	r3, [r3, #8]
 8012a16:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    const int32_t input_y = input_dims->h;
 8012a1a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012a1e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    const int32_t input_ch = input_dims->c;
 8012a2a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012a2e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	68db      	ldr	r3, [r3, #12]
 8012a36:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    const int32_t kernel_x = filter_dims->w;
 8012a3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a3e:	689b      	ldr	r3, [r3, #8]
 8012a40:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    const int32_t kernel_y = filter_dims->h;
 8012a44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    const int32_t output_x = output_dims->w;
 8012a4e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012a52:	689b      	ldr	r3, [r3, #8]
 8012a54:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    const int32_t output_y = output_dims->h;
 8012a58:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012a5c:	685b      	ldr	r3, [r3, #4]
 8012a5e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    const int32_t output_ch = output_dims->c;
 8012a62:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012a66:	68db      	ldr	r3, [r3, #12]
 8012a68:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

    const int32_t pad_x = conv_params->padding.w;
 8012a6c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012a70:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	691b      	ldr	r3, [r3, #16]
 8012a78:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    const int32_t pad_y = conv_params->padding.h;
 8012a7c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012a80:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	695b      	ldr	r3, [r3, #20]
 8012a88:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    const int32_t stride_x = conv_params->stride.w;
 8012a8c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012a90:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	689b      	ldr	r3, [r3, #8]
 8012a98:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    const int32_t stride_y = conv_params->stride.h;
 8012a9c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012aa0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	68db      	ldr	r3, [r3, #12]
 8012aa8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    const int16_t out_activation_min = conv_params->activation.min;
 8012aac:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012ab0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	6a1b      	ldr	r3, [r3, #32]
 8012ab8:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a
    const int16_t out_activation_max = conv_params->activation.max;
 8012abc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012ac0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ac8:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
    int32_t *output_mult = quant_params->multiplier;
 8012acc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012ad0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    int32_t *output_shift = quant_params->shift;
 8012adc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012ae0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

    for (int i_batch = 0; i_batch < input_batches; i_batch++)
 8012aec:	2300      	movs	r3, #0
 8012aee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8012af2:	f000 bcbb 	b.w	801346c <arm_convolve_fast_s16+0xb10>
    {
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
        /* Generate two columns from the input tensor a GEMM computation */
        q15_t *two_column_buf = buffer_a;
 8012af6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012afa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
        q15_t *out = output_data;
 8012afe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8012b02:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        /* This part implements the im2col function */
        for (int32_t i_out_y = 0; i_out_y < output_y; i_out_y++)
 8012b06:	2300      	movs	r3, #0
 8012b08:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8012b0c:	e0e7      	b.n	8012cde <arm_convolve_fast_s16+0x382>
        {
            for (int32_t i_out_x = 0; i_out_x < output_x; i_out_x++)
 8012b0e:	2300      	movs	r3, #0
 8012b10:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8012b14:	e0d7      	b.n	8012cc6 <arm_convolve_fast_s16+0x36a>
            {
                for (int32_t i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y;
 8012b16:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8012b1a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8012b1e:	fb03 f202 	mul.w	r2, r3, r2
 8012b22:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8012b26:	1ad3      	subs	r3, r2, r3
 8012b28:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8012b2c:	e079      	b.n	8012c22 <arm_convolve_fast_s16+0x2c6>
                     i_ker_y++)
                {
                    for (int32_t i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 8012b2e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8012b32:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8012b36:	fb03 f202 	mul.w	r2, r3, r2
 8012b3a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012b3e:	1ad3      	subs	r3, r2, r3
 8012b40:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8012b44:	e058      	b.n	8012bf8 <arm_convolve_fast_s16+0x29c>
                         i_ker_x++)
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 8012b46:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	db0f      	blt.n	8012b6e <arm_convolve_fast_s16+0x212>
 8012b4e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8012b52:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012b56:	429a      	cmp	r2, r3
 8012b58:	da09      	bge.n	8012b6e <arm_convolve_fast_s16+0x212>
 8012b5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	db05      	blt.n	8012b6e <arm_convolve_fast_s16+0x212>
 8012b62:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8012b66:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	db12      	blt.n	8012b94 <arm_convolve_fast_s16+0x238>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            arm_memset_q7((q7_t *)two_column_buf, 0, sizeof(q15_t) * input_ch);
 8012b6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012b72:	005a      	lsls	r2, r3, #1
 8012b74:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8012b78:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8012b7c:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
                   "1:                                                    \n"
                   : [in] "+r"(dst)
                   : [cnt] "r"(block_size), [set_val] "r"(val)
                   : "q0", "memory", "r14");
#else
    memset(dst, val, block_size);
 8012b80:	2300      	movs	r3, #0
 8012b82:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012b86:	4619      	mov	r1, r3
 8012b88:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8012b8c:	f01b fdda 	bl	802e744 <memset>
#endif
}
 8012b90:	bf00      	nop
 8012b92:	e024      	b.n	8012bde <arm_convolve_fast_s16+0x282>
                        }
                        else
                        {
                            arm_memcpy_q7((q7_t *)two_column_buf,
                                          (const q7_t *)(input_data + (i_ker_y * input_x + i_ker_x) * input_ch),
 8012b94:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8012b98:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8012b9c:	fb03 f202 	mul.w	r2, r3, r2
 8012ba0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8012ba4:	441a      	add	r2, r3
 8012ba6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012baa:	fb02 f303 	mul.w	r3, r2, r3
 8012bae:	005a      	lsls	r2, r3, #1
 8012bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8012bb4:	1899      	adds	r1, r3, r2
                            arm_memcpy_q7((q7_t *)two_column_buf,
 8012bb6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012bba:	005a      	lsls	r2, r3, #1
 8012bbc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8012bc0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8012bc4:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8012bc8:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
                   "1:                                                    \n"
                   : [in] "+r"(src), [out] "+r"(dst)
                   : [cnt] "r"(block_size)
                   : "q0", "memory", "r14");
#else
    memcpy(dst, src, block_size);
 8012bcc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012bd0:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012bd4:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8012bd8:	f01b fe87 	bl	802e8ea <memcpy>
#endif
}
 8012bdc:	bf00      	nop
                                          input_ch * sizeof(q15_t));
                        }
                        two_column_buf += input_ch;
 8012bde:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012be2:	005a      	lsls	r2, r3, #1
 8012be4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8012be8:	4413      	add	r3, r2
 8012bea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                         i_ker_x++)
 8012bee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
                    for (int32_t i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 8012bf8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8012bfc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8012c00:	fb03 f202 	mul.w	r2, r3, r2
 8012c04:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012c08:	1ad2      	subs	r2, r2, r3
 8012c0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012c0e:	441a      	add	r2, r3
 8012c10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8012c14:	4293      	cmp	r3, r2
 8012c16:	db96      	blt.n	8012b46 <arm_convolve_fast_s16+0x1ea>
                     i_ker_y++)
 8012c18:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8012c1c:	3301      	adds	r3, #1
 8012c1e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
                for (int32_t i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y;
 8012c22:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8012c26:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8012c2a:	fb03 f202 	mul.w	r2, r3, r2
 8012c2e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8012c32:	1ad2      	subs	r2, r2, r3
 8012c34:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8012c38:	441a      	add	r2, r3
 8012c3a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	f6ff af75 	blt.w	8012b2e <arm_convolve_fast_s16+0x1d2>
                    }
                }
                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 8012c44:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8012c48:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8012c4c:	fb03 f202 	mul.w	r2, r3, r2
 8012c50:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012c54:	fb02 f303 	mul.w	r3, r2, r3
 8012c58:	009a      	lsls	r2, r3, #2
 8012c5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012c5e:	441a      	add	r2, r3
 8012c60:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8012c64:	4293      	cmp	r3, r2
 8012c66:	d129      	bne.n	8012cbc <arm_convolve_fast_s16+0x360>
                                                     output_ch,
                                                     output_shift,
                                                     output_mult,
                                                     out_activation_min,
                                                     out_activation_max,
                                                     (input_ch * kernel_y * kernel_x),
 8012c68:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8012c6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8012c70:	fb03 f202 	mul.w	r2, r3, r2
                    out = arm_nn_mat_mult_kernel_s16(filter_data,
 8012c74:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012c78:	fb03 f202 	mul.w	r2, r3, r2
 8012c7c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012c80:	9305      	str	r3, [sp, #20]
 8012c82:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8012c86:	9304      	str	r3, [sp, #16]
 8012c88:	9203      	str	r2, [sp, #12]
 8012c8a:	f9b7 3168 	ldrsh.w	r3, [r7, #360]	; 0x168
 8012c8e:	9302      	str	r3, [sp, #8]
 8012c90:	f9b7 316a 	ldrsh.w	r3, [r7, #362]	; 0x16a
 8012c94:	9301      	str	r3, [sp, #4]
 8012c96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8012c9a:	9300      	str	r3, [sp, #0]
 8012c9c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8012ca0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8012ca4:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8012ca8:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 8012cac:	f003 fc60 	bl	8016570 <arm_nn_mat_mult_kernel_s16>
 8012cb0:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
                                                     bias_data,
                                                     out);

                    /* Counter reset */
                    two_column_buf = buffer_a;
 8012cb4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012cb8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
            for (int32_t i_out_x = 0; i_out_x < output_x; i_out_x++)
 8012cbc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012cc0:	3301      	adds	r3, #1
 8012cc2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8012cc6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8012cca:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	f6ff af21 	blt.w	8012b16 <arm_convolve_fast_s16+0x1ba>
        for (int32_t i_out_y = 0; i_out_y < output_y; i_out_y++)
 8012cd4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8012cd8:	3301      	adds	r3, #1
 8012cda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8012cde:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8012ce2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	f6ff af11 	blt.w	8012b0e <arm_convolve_fast_s16+0x1b2>
                }
            }
        }

        /* Left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 8012cec:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8012cf0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	f000 8394 	beq.w	8013422 <arm_convolve_fast_s16+0xac6>
        {
            const q7_t *ker_a = filter_data;
 8012cfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012cfe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            int i;

            for (i = 0; i < output_ch; i++)
 8012d02:	2300      	movs	r3, #0
 8012d04:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8012d08:	e384      	b.n	8013414 <arm_convolve_fast_s16+0xab8>
            {
                /* Init the accumulator*/
                q31_t sum = 0;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 8012d10:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012d14:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8012d18:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012d1c:	6013      	str	r3, [r2, #0]

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 8012d1e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8012d22:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8012d26:	fb03 f202 	mul.w	r2, r3, r2
 8012d2a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012d2e:	fb02 f303 	mul.w	r3, r2, r3
 8012d32:	109b      	asrs	r3, r3, #2
 8012d34:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6

                while (col_count)
 8012d38:	e149      	b.n	8012fce <arm_convolve_fast_s16+0x672>
 8012d3a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012d3e:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8012d42:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8012d46:	6013      	str	r3, [r2, #0]
 8012d48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012d4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8012d50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012d54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012d58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012d5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    memcpy(&val, *in_q7, 4);
 8012d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012d6e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8012d72:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	1d1a      	adds	r2, r3, #4
 8012d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012d80:	601a      	str	r2, [r3, #0]
    return (val);
 8012d82:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012d86:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8012d8a:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8012d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 8012d90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012d94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012d98:	2308      	movs	r3, #8
 8012d9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012da2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012da6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012daa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 8012dae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012db2:	f003 031f 	and.w	r3, r3, #31
 8012db6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  if (op2 == 0U)
 8012dba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d102      	bne.n	8012dc8 <arm_convolve_fast_s16+0x46c>
  {
    return op1;
 8012dc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012dc6:	e005      	b.n	8012dd4 <arm_convolve_fast_s16+0x478>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8012dc8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8012dcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012dd0:	fa62 f303 	ror.w	r3, r2, r3
 8012dd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8012dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ddc:	fa2f f383 	sxtb16	r3, r3
 8012de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 8012de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
  } else {
    result = __SXTB16(__ROR(op1, rotate)) ;
 8012de8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  }
  return result;
 8012dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012df0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    q31_t inAbuf2 = __SXTB16(inA);
 8012df4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8012dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012e00:	fa2f f283 	sxtb16	r2, r3
 8012e04:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012e0c:	601a      	str	r2, [r3, #0]
  return(result);
 8012e0e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e20:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8012e22:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e26:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8012e2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012e2e:	6013      	str	r3, [r2, #0]
 8012e30:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e34:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8012e38:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	6013      	str	r3, [r2, #0]
 8012e44:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e4c:	681a      	ldr	r2, [r3, #0]
 8012e4e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 8012e5c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012e64:	601a      	str	r2, [r3, #0]
 8012e66:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e6a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	461a      	mov	r2, r3
 8012e72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012e76:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8012e78:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e7c:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8012e80:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	6013      	str	r3, [r2, #0]
 8012e8c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e90:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8012e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012e98:	6013      	str	r3, [r2, #0]
 8012e9a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012e9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012ea2:	681a      	ldr	r2, [r3, #0]
 8012ea4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012ea8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8012eb2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012eb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012eba:	601a      	str	r2, [r3, #0]
 8012ebc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012ec0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ecc:	601a      	str	r2, [r3, #0]
    return source;
 8012ece:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012ed2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8012ed6:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 8012ed8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8012edc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012ee0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    memcpy(&val, *in_q15, 4);
 8012ee4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	461a      	mov	r2, r3
 8012eee:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012ef2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8012ef6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8012ef8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	1d1a      	adds	r2, r3, #4
 8012f00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012f04:	601a      	str	r2, [r3, #0]
    return (val);
 8012f06:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012f0a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8012f0e:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8012f10:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 8012f14:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012f18:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	4619      	mov	r1, r3
 8012f20:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8012f24:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012f28:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8012f2c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8012f30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012f34:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8012f38:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8012f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8012f40:	fb21 3302 	smlad	r3, r1, r2, r3
 8012f44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 8012f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f4c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8012f50:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012f54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(&val, *in_q15, 4);
 8012f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	461a      	mov	r2, r3
 8012f62:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012f66:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8012f6a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8012f6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	1d1a      	adds	r2, r3, #4
 8012f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8012f78:	601a      	str	r2, [r3, #0]
    return (val);
 8012f7a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012f7e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8012f82:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8012f84:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 8012f88:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012f8c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	4619      	mov	r1, r3
 8012f94:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8012f98:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012f9c:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8012fa0:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8012fa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012fa8:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012fac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8012fb0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8012fb4:	fb21 3302 	smlad	r3, r1, r2, r3
 8012fb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  return(result);
 8012fbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012fc0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

                    col_count--;
 8012fc4:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 8012fc8:	3b01      	subs	r3, #1
 8012fca:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
                while (col_count)
 8012fce:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	f47f aeb1 	bne.w	8012d3a <arm_convolve_fast_s16+0x3de>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 8012fd8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	fb12 f303 	smulbb	r3, r2, r3
 8012fe8:	b29a      	uxth	r2, r3
 8012fea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	fb12 f303 	smulbb	r3, r2, r3
 8012ff4:	b29b      	uxth	r3, r3
 8012ff6:	f003 0303 	and.w	r3, r3, #3
 8012ffa:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
                while (col_count)
 8012ffe:	e025      	b.n	801304c <arm_convolve_fast_s16+0x6f0>
                {
                    q7_t ker_a1 = *ker_a++;
 8013000:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8013004:	1c53      	adds	r3, r2, #1
 8013006:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 801300a:	7813      	ldrb	r3, [r2, #0]
 801300c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
                    q15_t ip_b1 = *ip_as_col++;
 8013010:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013014:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8013018:	6819      	ldr	r1, [r3, #0]
 801301a:	1c8a      	adds	r2, r1, #2
 801301c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013020:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8013024:	601a      	str	r2, [r3, #0]
 8013026:	880b      	ldrh	r3, [r1, #0]
 8013028:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
                    sum += ker_a1 * ip_b1;
 801302c:	f997 214f 	ldrsb.w	r2, [r7, #335]	; 0x14f
 8013030:	f9b7 314c 	ldrsh.w	r3, [r7, #332]	; 0x14c
 8013034:	fb03 f202 	mul.w	r2, r3, r2
 8013038:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801303c:	4413      	add	r3, r2
 801303e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
                    col_count--;
 8013042:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 8013046:	3b01      	subs	r3, #1
 8013048:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
                while (col_count)
 801304c:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 8013050:	2b00      	cmp	r3, #0
 8013052:	d1d5      	bne.n	8013000 <arm_convolve_fast_s16+0x6a4>
                }
                if (bias_data)
 8013054:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8013058:	2b00      	cmp	r3, #0
 801305a:	f000 80a0 	beq.w	801319e <arm_convolve_fast_s16+0x842>
                {
                    q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[i]);
 801305e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013062:	009a      	lsls	r2, r3, #2
 8013064:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8013068:	4413      	add	r3, r2
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	4b9a      	ldr	r3, [pc, #616]	; (80132d8 <arm_convolve_fast_s16+0x97c>)
 801306e:	429a      	cmp	r2, r3
 8013070:	dc0a      	bgt.n	8013088 <arm_convolve_fast_s16+0x72c>
 8013072:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013076:	009a      	lsls	r2, r3, #2
 8013078:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801307c:	4413      	add	r3, r2
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013084:	141b      	asrs	r3, r3, #16
 8013086:	e001      	b.n	801308c <arm_convolve_fast_s16+0x730>
 8013088:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801308c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                    q63_t acc_64 = sum + bias_data[i];
 8013090:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8013094:	17da      	asrs	r2, r3, #31
 8013096:	613b      	str	r3, [r7, #16]
 8013098:	617a      	str	r2, [r7, #20]
 801309a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801309e:	00da      	lsls	r2, r3, #3
 80130a0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80130a4:	4413      	add	r3, r2
 80130a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130aa:	6939      	ldr	r1, [r7, #16]
 80130ac:	1889      	adds	r1, r1, r2
 80130ae:	6039      	str	r1, [r7, #0]
 80130b0:	6979      	ldr	r1, [r7, #20]
 80130b2:	eb41 0303 	adc.w	r3, r1, r3
 80130b6:	607b      	str	r3, [r7, #4]
 80130b8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80130bc:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
                    sum = arm_nn_requantize_s64(acc_64, reduced_multiplier, output_shift[i]);
 80130c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80130c4:	009a      	lsls	r2, r3, #2
 80130c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80130ca:	4413      	add	r3, r2
 80130cc:	6819      	ldr	r1, [r3, #0]
 80130ce:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80130d2:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 80130d6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80130da:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 80130de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80130e2:	6013      	str	r3, [r2, #0]
 80130e4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80130e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80130ec:	6019      	str	r1, [r3, #0]
    const q63_t new_val = val * reduced_multiplier;
 80130ee:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80130f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	17da      	asrs	r2, r3, #31
 80130fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80130fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80130fe:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013102:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8013106:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801310a:	f5a3 7194 	sub.w	r1, r3, #296	; 0x128
 801310e:	6813      	ldr	r3, [r2, #0]
 8013110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013112:	fb02 f203 	mul.w	r2, r2, r3
 8013116:	680b      	ldr	r3, [r1, #0]
 8013118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801311a:	fb00 f303 	mul.w	r3, r0, r3
 801311e:	441a      	add	r2, r3
 8013120:	680b      	ldr	r3, [r1, #0]
 8013122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013124:	fba3 ab01 	umull	sl, fp, r3, r1
 8013128:	eb02 030b 	add.w	r3, r2, fp
 801312c:	469b      	mov	fp, r3
 801312e:	e9c7 ab26 	strd	sl, fp, [r7, #152]	; 0x98
 8013132:	e9c7 ab26 	strd	sl, fp, [r7, #152]	; 0x98
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 8013136:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801313a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f1c3 040e 	rsb	r4, r3, #14
 8013144:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8013148:	f1c4 0120 	rsb	r1, r4, #32
 801314c:	f1b4 0020 	subs.w	r0, r4, #32
 8013150:	fa22 f804 	lsr.w	r8, r2, r4
 8013154:	fa03 f101 	lsl.w	r1, r3, r1
 8013158:	ea48 0801 	orr.w	r8, r8, r1
 801315c:	d403      	bmi.n	8013166 <arm_convolve_fast_s16+0x80a>
 801315e:	fa43 f000 	asr.w	r0, r3, r0
 8013162:	ea48 0800 	orr.w	r8, r8, r0
 8013166:	fa43 f904 	asr.w	r9, r3, r4
 801316a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801316e:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8013172:	4643      	mov	r3, r8
 8013174:	6013      	str	r3, [r2, #0]
    result = (result + 1) >> 1;             // Last shift position and insert round
 8013176:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801317a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	1c59      	adds	r1, r3, #1
 8013182:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013186:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 801318a:	104b      	asrs	r3, r1, #1
 801318c:	6013      	str	r3, [r2, #0]
    return result;
 801318e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013192:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 801319c:	e11a      	b.n	80133d4 <arm_convolve_fast_s16+0xa78>
                }
                else
                {
                    sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 801319e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80131a2:	009a      	lsls	r2, r3, #2
 80131a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80131a8:	4413      	add	r3, r2
 80131aa:	6818      	ldr	r0, [r3, #0]
 80131ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80131b0:	009a      	lsls	r2, r3, #2
 80131b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80131b6:	4413      	add	r3, r2
 80131b8:	6819      	ldr	r1, [r3, #0]
 80131ba:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80131be:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80131c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80131c6:	6013      	str	r3, [r2, #0]
 80131c8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80131cc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80131d0:	6018      	str	r0, [r3, #0]
 80131d2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80131d6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80131da:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80131dc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80131e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80131ea:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80131ee:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	fa03 f202 	lsl.w	r2, r3, r2
 80131f8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80131fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8013200:	601a      	str	r2, [r3, #0]
 8013202:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013206:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 801320a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801320e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013216:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801321a:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 801321e:	2300      	movs	r3, #0
 8013220:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8013222:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013226:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 801322a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801322e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8013230:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013234:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8013238:	2300      	movs	r3, #0
 801323a:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801323c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8013240:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013244:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	17da      	asrs	r2, r3, #31
 801324c:	623b      	str	r3, [r7, #32]
 801324e:	627a      	str	r2, [r7, #36]	; 0x24
 8013250:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013254:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	17da      	asrs	r2, r3, #31
 801325c:	61bb      	str	r3, [r7, #24]
 801325e:	61fa      	str	r2, [r7, #28]
 8013260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013262:	69ba      	ldr	r2, [r7, #24]
 8013264:	fb02 f203 	mul.w	r2, r2, r3
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	6a3c      	ldr	r4, [r7, #32]
 801326c:	fb04 f303 	mul.w	r3, r4, r3
 8013270:	4413      	add	r3, r2
 8013272:	6a3a      	ldr	r2, [r7, #32]
 8013274:	69bc      	ldr	r4, [r7, #24]
 8013276:	fba2 5604 	umull	r5, r6, r2, r4
 801327a:	4433      	add	r3, r6
 801327c:	461e      	mov	r6, r3
 801327e:	1943      	adds	r3, r0, r5
 8013280:	60bb      	str	r3, [r7, #8]
 8013282:	eb41 0306 	adc.w	r3, r1, r6
 8013286:	60fb      	str	r3, [r7, #12]
 8013288:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801328c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 8013290:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8013294:	f04f 0000 	mov.w	r0, #0
 8013298:	f04f 0100 	mov.w	r1, #0
 801329c:	0fd0      	lsrs	r0, r2, #31
 801329e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80132a2:	17d9      	asrs	r1, r3, #31
 80132a4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80132a8:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 80132ac:	4603      	mov	r3, r0
 80132ae:	6013      	str	r3, [r2, #0]
    return result;
 80132b0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80132b4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80132b8:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80132ba:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80132be:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	dc09      	bgt.n	80132dc <arm_convolve_fast_s16+0x980>
 80132c8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80132cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	425a      	negs	r2, r3
 80132d4:	e003      	b.n	80132de <arm_convolve_fast_s16+0x982>
 80132d6:	bf00      	nop
 80132d8:	7ffeffff 	.word	0x7ffeffff
 80132dc:	2200      	movs	r2, #0
 80132de:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80132e2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80132e6:	6019      	str	r1, [r3, #0]
 80132e8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80132ec:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80132f0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80132f2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80132f6:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 80132fa:	2300      	movs	r3, #0
 80132fc:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80132fe:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013302:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8013306:	2201      	movs	r2, #1
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	fa02 f103 	lsl.w	r1, r2, r3
 801330e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013312:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8013316:	1e4b      	subs	r3, r1, #1
 8013318:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801331a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801331e:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 8013322:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013326:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 801332a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801332e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8013332:	6812      	ldr	r2, [r2, #0]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	4013      	ands	r3, r2
 8013338:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801333a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801333e:	f5a3 71b0 	sub.w	r1, r3, #352	; 0x160
 8013342:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013346:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 801334a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801334e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8013352:	6812      	ldr	r2, [r2, #0]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	fa42 f303 	asr.w	r3, r2, r3
 801335a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801335c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013360:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8013364:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013368:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	105b      	asrs	r3, r3, #1
 8013370:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013372:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013376:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	2b00      	cmp	r3, #0
 801337e:	da0a      	bge.n	8013396 <arm_convolve_fast_s16+0xa3a>
        threshold++;
 8013380:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013384:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8013388:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801338c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	3301      	adds	r3, #1
 8013394:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8013396:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801339a:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 801339e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80133a2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80133a6:	6812      	ldr	r2, [r2, #0]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	dd0a      	ble.n	80133c4 <arm_convolve_fast_s16+0xa68>
        result++;
 80133ae:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80133b2:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 80133b6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80133ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	3301      	adds	r3, #1
 80133c2:	6013      	str	r3, [r2, #0]
    return result;
 80133c4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80133c8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80133cc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80133ce:	bf00      	nop
 80133d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
                }
                sum = MAX(sum, out_activation_min);
 80133d4:	f9b7 216a 	ldrsh.w	r2, [r7, #362]	; 0x16a
 80133d8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80133dc:	4293      	cmp	r3, r2
 80133de:	bfb8      	it	lt
 80133e0:	4613      	movlt	r3, r2
 80133e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
                sum = MIN(sum, out_activation_max);
 80133e6:	f9b7 2168 	ldrsh.w	r2, [r7, #360]	; 0x168
 80133ea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80133ee:	4293      	cmp	r3, r2
 80133f0:	bfa8      	it	ge
 80133f2:	4613      	movge	r3, r2
 80133f4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
                *out++ = (q15_t)sum;
 80133f8:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80133fc:	1c93      	adds	r3, r2, #2
 80133fe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8013402:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8013406:	b21b      	sxth	r3, r3
 8013408:	8013      	strh	r3, [r2, #0]
            for (i = 0; i < output_ch; i++)
 801340a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801340e:	3301      	adds	r3, #1
 8013410:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8013414:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8013418:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801341c:	429a      	cmp	r2, r3
 801341e:	f6ff ac74 	blt.w	8012d0a <arm_convolve_fast_s16+0x3ae>
        (void)output_mult;
        (void)output_shift;
        return ARM_CMSIS_NN_ARG_ERROR;
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 8013422:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8013426:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801342a:	fb03 f202 	mul.w	r2, r3, r2
 801342e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8013432:	fb02 f303 	mul.w	r3, r2, r3
 8013436:	005a      	lsls	r2, r3, #1
 8013438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801343c:	4413      	add	r3, r2
 801343e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        output_data += (output_x * output_y * output_ch);
 8013442:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8013446:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801344a:	fb03 f202 	mul.w	r2, r3, r2
 801344e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8013452:	fb02 f303 	mul.w	r3, r2, r3
 8013456:	005a      	lsls	r2, r3, #1
 8013458:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801345c:	4413      	add	r3, r2
 801345e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
 8013462:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8013466:	3301      	adds	r3, #1
 8013468:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 801346c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013470:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013474:	429a      	cmp	r2, r3
 8013476:	f6ff ab3e 	blt.w	8012af6 <arm_convolve_fast_s16+0x19a>
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
 801347a:	2300      	movs	r3, #0
}
 801347c:	4618      	mov	r0, r3
 801347e:	f507 77ea 	add.w	r7, r7, #468	; 0x1d4
 8013482:	46bd      	mov	sp, r7
 8013484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013488 <arm_convolve_fast_s16_get_buffer_size>:

int32_t arm_convolve_fast_s16_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8013488:	b480      	push	{r7}
 801348a:	b083      	sub	sp, #12
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	68db      	ldr	r3, [r3, #12]
 8013496:	683a      	ldr	r2, [r7, #0]
 8013498:	6892      	ldr	r2, [r2, #8]
 801349a:	fb02 f303 	mul.w	r3, r2, r3
 801349e:	683a      	ldr	r2, [r7, #0]
 80134a0:	6852      	ldr	r2, [r2, #4]
 80134a2:	fb02 f303 	mul.w	r3, r2, r3
 80134a6:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	370c      	adds	r7, #12
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr

080134b4 <arm_convolve_s16>:
                                     const q7_t *filter_data,
                                     const cmsis_nn_dims *bias_dims,
                                     const int64_t *bias_data,
                                     const cmsis_nn_dims *output_dims,
                                     q15_t *output_data)
{
 80134b4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80134b8:	b0bc      	sub	sp, #240	; 0xf0
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	6278      	str	r0, [r7, #36]	; 0x24
 80134be:	6239      	str	r1, [r7, #32]
 80134c0:	61fa      	str	r2, [r7, #28]
 80134c2:	61bb      	str	r3, [r7, #24]
    (void)bias_dims;
    (void)ctx;

    const int32_t input_batches = input_dims->n;
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    const int32_t input_x = input_dims->w;
 80134cc:	69bb      	ldr	r3, [r7, #24]
 80134ce:	689b      	ldr	r3, [r3, #8]
 80134d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    const int32_t input_y = input_dims->h;
 80134d4:	69bb      	ldr	r3, [r7, #24]
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    const int32_t input_ch = input_dims->c;
 80134dc:	69bb      	ldr	r3, [r7, #24]
 80134de:	68db      	ldr	r3, [r3, #12]
 80134e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    const int32_t kernel_x = filter_dims->w;
 80134e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80134e8:	689b      	ldr	r3, [r3, #8]
 80134ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    const int32_t kernel_y = filter_dims->h;
 80134ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    const int32_t output_x = output_dims->w;
 80134f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80134fc:	689b      	ldr	r3, [r3, #8]
 80134fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    const int32_t output_y = output_dims->h;
 8013502:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    const int32_t output_ch = output_dims->c;
 801350c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013510:	68db      	ldr	r3, [r3, #12]
 8013512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    const int32_t pad_x = conv_params->padding.w;
 8013516:	6a3b      	ldr	r3, [r7, #32]
 8013518:	691b      	ldr	r3, [r3, #16]
 801351a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    const int32_t pad_y = conv_params->padding.h;
 801351e:	6a3b      	ldr	r3, [r7, #32]
 8013520:	695b      	ldr	r3, [r3, #20]
 8013522:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    const int32_t stride_x = conv_params->stride.w;
 8013526:	6a3b      	ldr	r3, [r7, #32]
 8013528:	689b      	ldr	r3, [r3, #8]
 801352a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    const int32_t stride_y = conv_params->stride.h;
 801352e:	6a3b      	ldr	r3, [r7, #32]
 8013530:	68db      	ldr	r3, [r3, #12]
 8013532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    const int32_t dilation_x = conv_params->dilation.w;
 8013536:	6a3b      	ldr	r3, [r7, #32]
 8013538:	699b      	ldr	r3, [r3, #24]
 801353a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const int32_t dilation_y = conv_params->dilation.h;
 801353e:	6a3b      	ldr	r3, [r7, #32]
 8013540:	69db      	ldr	r3, [r3, #28]
 8013542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    const int32_t out_activation_min = conv_params->activation.min;
 8013546:	6a3b      	ldr	r3, [r7, #32]
 8013548:	6a1b      	ldr	r3, [r3, #32]
 801354a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const int32_t out_activation_max = conv_params->activation.max;
 801354e:	6a3b      	ldr	r3, [r7, #32]
 8013550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t *output_mult = quant_params->multiplier;
 8013556:	69fb      	ldr	r3, [r7, #28]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t *output_shift = quant_params->shift;
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	67bb      	str	r3, [r7, #120]	; 0x78

    for (int i_batch = 0; i_batch < input_batches; i_batch++)
 8013562:	2300      	movs	r3, #0
 8013564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013568:	e1d8      	b.n	801391c <arm_convolve_s16+0x468>
    {
        /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
        for (int32_t i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
 801356a:	2300      	movs	r3, #0
 801356c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013570:	e1a8      	b.n	80138c4 <arm_convolve_s16+0x410>
        {
            const q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[i_out_ch]);
 8013572:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013576:	009b      	lsls	r3, r3, #2
 8013578:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801357a:	4413      	add	r3, r2
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	4a48      	ldr	r2, [pc, #288]	; (80136a0 <arm_convolve_s16+0x1ec>)
 8013580:	4293      	cmp	r3, r2
 8013582:	dc09      	bgt.n	8013598 <arm_convolve_s16+0xe4>
 8013584:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013588:	009b      	lsls	r3, r3, #2
 801358a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801358c:	4413      	add	r3, r2
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8013594:	141b      	asrs	r3, r3, #16
 8013596:	e001      	b.n	801359c <arm_convolve_s16+0xe8>
 8013598:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801359c:	677b      	str	r3, [r7, #116]	; 0x74

            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
 801359e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80135a2:	425b      	negs	r3, r3
 80135a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80135a8:	2300      	movs	r3, #0
 80135aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80135ae:	e17d      	b.n	80138ac <arm_convolve_s16+0x3f8>
            {
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
 80135b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80135b4:	425b      	negs	r3, r3
 80135b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80135ba:	2300      	movs	r3, #0
 80135bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80135c0:	e161      	b.n	8013886 <arm_convolve_s16+0x3d2>
                {
                    int64_t conv_out_acc = 0;
 80135c2:	f04f 0200 	mov.w	r2, #0
 80135c6:	f04f 0300 	mov.w	r3, #0
 80135ca:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

                    const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
 80135ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80135d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80135d6:	1ad3      	subs	r3, r2, r3
 80135d8:	1e5a      	subs	r2, r3, #1
 80135da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80135de:	fb92 f3f3 	sdiv	r3, r2, r3
 80135e2:	673b      	str	r3, [r7, #112]	; 0x70
                    const int32_t ker_y_start = MAX(0, start_y_max);
 80135e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80135e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80135ea:	66fb      	str	r3, [r7, #108]	; 0x6c
                    const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
 80135ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80135f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80135f4:	1ad3      	subs	r3, r2, r3
 80135f6:	1e5a      	subs	r2, r3, #1
 80135f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80135fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8013600:	66bb      	str	r3, [r7, #104]	; 0x68
                    const int32_t ker_x_start = MAX(0, start_x_max);
 8013602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013604:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013608:	667b      	str	r3, [r7, #100]	; 0x64
                    const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
 801360a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801360e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013612:	1ad2      	subs	r2, r2, r3
 8013614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013618:	4413      	add	r3, r2
 801361a:	1e5a      	subs	r2, r3, #1
 801361c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013620:	fb92 f3f3 	sdiv	r3, r2, r3
 8013624:	663b      	str	r3, [r7, #96]	; 0x60
                    const int32_t ker_y_end = MIN(kernel_y, end_min_y);
 8013626:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801362c:	4293      	cmp	r3, r2
 801362e:	bfa8      	it	ge
 8013630:	4613      	movge	r3, r2
 8013632:	65fb      	str	r3, [r7, #92]	; 0x5c
                    const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
 8013634:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8013638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801363c:	1ad2      	subs	r2, r2, r3
 801363e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013642:	4413      	add	r3, r2
 8013644:	1e5a      	subs	r2, r3, #1
 8013646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801364a:	fb92 f3f3 	sdiv	r3, r2, r3
 801364e:	65bb      	str	r3, [r7, #88]	; 0x58
                    const int32_t ker_x_end = MIN(kernel_x, end_min_x);
 8013650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013652:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013656:	4293      	cmp	r3, r2
 8013658:	bfa8      	it	ge
 801365a:	4613      	movge	r3, r2
 801365c:	657b      	str	r3, [r7, #84]	; 0x54

                    for (int32_t i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801365e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013660:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013664:	e083      	b.n	801376e <arm_convolve_s16+0x2ba>
                    {
                        for (int32_t i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 8013666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801366c:	e075      	b.n	801375a <arm_convolve_s16+0x2a6>
                        {
                            const int32_t in_row = base_idx_y + dilation_y * i_ker_y;
 801366e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013672:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8013676:	fb02 f303 	mul.w	r3, r2, r3
 801367a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801367e:	4413      	add	r3, r2
 8013680:	64fb      	str	r3, [r7, #76]	; 0x4c
                            const int32_t in_col = base_idx_x + dilation_x * i_ker_x;
 8013682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013686:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801368a:	fb02 f303 	mul.w	r3, r2, r3
 801368e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013692:	4413      	add	r3, r2
 8013694:	64bb      	str	r3, [r7, #72]	; 0x48

                            for (int32_t i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 8013696:	2300      	movs	r3, #0
 8013698:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801369c:	e052      	b.n	8013744 <arm_convolve_s16+0x290>
 801369e:	bf00      	nop
 80136a0:	7ffeffff 	.word	0x7ffeffff
                            {
                                conv_out_acc += input_data[(in_row * input_x + in_col) * input_ch + i_input_ch] *
 80136a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80136aa:	fb03 f202 	mul.w	r2, r3, r2
 80136ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136b0:	4413      	add	r3, r2
 80136b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80136b6:	fb03 f202 	mul.w	r2, r3, r2
 80136ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80136be:	4413      	add	r3, r2
 80136c0:	005b      	lsls	r3, r3, #1
 80136c2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80136c6:	4413      	add	r3, r2
 80136c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80136cc:	4618      	mov	r0, r3
                                    filter_data[i_out_ch * input_ch * kernel_y * kernel_x +
 80136ce:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80136d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80136d6:	fb03 f202 	mul.w	r2, r3, r2
 80136da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80136de:	fb03 f202 	mul.w	r2, r3, r2
 80136e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80136e6:	fb03 f102 	mul.w	r1, r3, r2
                                                (i_ker_y * kernel_x + i_ker_x) * input_ch + i_input_ch];
 80136ea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80136ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80136f2:	fb03 f202 	mul.w	r2, r3, r2
 80136f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80136fa:	441a      	add	r2, r3
 80136fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013700:	fb02 f303 	mul.w	r3, r2, r3
                                    filter_data[i_out_ch * input_ch * kernel_y * kernel_x +
 8013704:	18ca      	adds	r2, r1, r3
                                                (i_ker_y * kernel_x + i_ker_x) * input_ch + i_input_ch];
 8013706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801370a:	4413      	add	r3, r2
 801370c:	461a      	mov	r2, r3
                                    filter_data[i_out_ch * input_ch * kernel_y * kernel_x +
 801370e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013712:	4413      	add	r3, r2
 8013714:	f993 3000 	ldrsb.w	r3, [r3]
                                conv_out_acc += input_data[(in_row * input_x + in_col) * input_ch + i_input_ch] *
 8013718:	fb00 f303 	mul.w	r3, r0, r3
 801371c:	17da      	asrs	r2, r3, #31
 801371e:	613b      	str	r3, [r7, #16]
 8013720:	617a      	str	r2, [r7, #20]
 8013722:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8013726:	6939      	ldr	r1, [r7, #16]
 8013728:	1851      	adds	r1, r2, r1
 801372a:	60b9      	str	r1, [r7, #8]
 801372c:	6979      	ldr	r1, [r7, #20]
 801372e:	414b      	adcs	r3, r1
 8013730:	60fb      	str	r3, [r7, #12]
 8013732:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013736:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
                            for (int32_t i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801373a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801373e:	3301      	adds	r3, #1
 8013740:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013744:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013748:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801374c:	429a      	cmp	r2, r3
 801374e:	dba9      	blt.n	80136a4 <arm_convolve_s16+0x1f0>
                        for (int32_t i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 8013750:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013754:	3301      	adds	r3, #1
 8013756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801375a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801375e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013760:	429a      	cmp	r2, r3
 8013762:	db84      	blt.n	801366e <arm_convolve_s16+0x1ba>
                    for (int32_t i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 8013764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013768:	3301      	adds	r3, #1
 801376a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801376e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8013772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013774:	429a      	cmp	r2, r3
 8013776:	f6ff af76 	blt.w	8013666 <arm_convolve_s16+0x1b2>
                            }
                        }
                    }

                    if (bias_data)
 801377a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801377e:	2b00      	cmp	r3, #0
 8013780:	d011      	beq.n	80137a6 <arm_convolve_s16+0x2f2>
                    {
                        conv_out_acc += bias_data[i_out_ch];
 8013782:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013786:	00db      	lsls	r3, r3, #3
 8013788:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801378c:	4413      	add	r3, r2
 801378e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013792:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8013796:	1814      	adds	r4, r2, r0
 8013798:	603c      	str	r4, [r7, #0]
 801379a:	414b      	adcs	r3, r1
 801379c:	607b      	str	r3, [r7, #4]
 801379e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80137a2:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
                    }

                    int32_t conv_out = arm_nn_requantize_s64(conv_out_acc, reduced_multiplier, output_shift[i_out_ch]);
 80137a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80137aa:	009b      	lsls	r3, r3, #2
 80137ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80137ae:	4413      	add	r3, r2
 80137b0:	6819      	ldr	r1, [r3, #0]
 80137b2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80137b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80137ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80137bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137be:	63b9      	str	r1, [r7, #56]	; 0x38
    const q63_t new_val = val * reduced_multiplier;
 80137c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137c2:	17da      	asrs	r2, r3, #31
 80137c4:	461d      	mov	r5, r3
 80137c6:	4616      	mov	r6, r2
 80137c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ca:	fb05 f203 	mul.w	r2, r5, r3
 80137ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137d0:	fb06 f303 	mul.w	r3, r6, r3
 80137d4:	4413      	add	r3, r2
 80137d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80137d8:	fba2 ab05 	umull	sl, fp, r2, r5
 80137dc:	445b      	add	r3, fp
 80137de:	469b      	mov	fp, r3
 80137e0:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
 80137e4:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 80137e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ea:	f1c3 040e 	rsb	r4, r3, #14
 80137ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80137f2:	f1c4 0120 	rsb	r1, r4, #32
 80137f6:	f1b4 0020 	subs.w	r0, r4, #32
 80137fa:	fa22 f804 	lsr.w	r8, r2, r4
 80137fe:	fa03 f101 	lsl.w	r1, r3, r1
 8013802:	ea48 0801 	orr.w	r8, r8, r1
 8013806:	d403      	bmi.n	8013810 <arm_convolve_s16+0x35c>
 8013808:	fa43 f000 	asr.w	r0, r3, r0
 801380c:	ea48 0800 	orr.w	r8, r8, r0
 8013810:	fa43 f904 	asr.w	r9, r3, r4
 8013814:	4643      	mov	r3, r8
 8013816:	62fb      	str	r3, [r7, #44]	; 0x2c
    result = (result + 1) >> 1;             // Last shift position and insert round
 8013818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381a:	3301      	adds	r3, #1
 801381c:	105b      	asrs	r3, r3, #1
 801381e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return result;
 8013820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013822:	653b      	str	r3, [r7, #80]	; 0x50
                    conv_out = MAX(conv_out, out_activation_min);
 8013824:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801382a:	4293      	cmp	r3, r2
 801382c:	bfb8      	it	lt
 801382e:	4613      	movlt	r3, r2
 8013830:	653b      	str	r3, [r7, #80]	; 0x50
                    conv_out = MIN(conv_out, out_activation_max);
 8013832:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013838:	4293      	cmp	r3, r2
 801383a:	bfa8      	it	ge
 801383c:	4613      	movge	r3, r2
 801383e:	653b      	str	r3, [r7, #80]	; 0x50
                    output_data[i_out_ch + (i_out_y * output_x + i_out_x) * output_ch] = (int16_t)conv_out;
 8013840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013844:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013848:	fb03 f202 	mul.w	r2, r3, r2
 801384c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013850:	4413      	add	r3, r2
 8013852:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013856:	fb03 f202 	mul.w	r2, r3, r2
 801385a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801385e:	4413      	add	r3, r2
 8013860:	005b      	lsls	r3, r3, #1
 8013862:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8013866:	441a      	add	r2, r3
 8013868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801386a:	b21b      	sxth	r3, r3
 801386c:	8013      	strh	r3, [r2, #0]
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
 801386e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013876:	4413      	add	r3, r2
 8013878:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801387c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013880:	3301      	adds	r3, #1
 8013882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013886:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801388a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801388e:	429a      	cmp	r2, r3
 8013890:	f6ff ae97 	blt.w	80135c2 <arm_convolve_s16+0x10e>
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
 8013894:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801389c:	4413      	add	r3, r2
 801389e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80138a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80138a6:	3301      	adds	r3, #1
 80138a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80138ac:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80138b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80138b4:	429a      	cmp	r2, r3
 80138b6:	f6ff ae7b 	blt.w	80135b0 <arm_convolve_s16+0xfc>
        for (int32_t i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
 80138ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80138be:	3301      	adds	r3, #1
 80138c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80138c4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80138c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80138cc:	429a      	cmp	r2, r3
 80138ce:	f6ff ae50 	blt.w	8013572 <arm_convolve_s16+0xbe>
                }
            }
        }
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 80138d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80138d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80138da:	fb02 f303 	mul.w	r3, r2, r3
 80138de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80138e2:	fb02 f303 	mul.w	r3, r2, r3
 80138e6:	005b      	lsls	r3, r3, #1
 80138e8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80138ec:	4413      	add	r3, r2
 80138ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        output_data += (output_x * output_y * output_ch);
 80138f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80138f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80138fa:	fb02 f303 	mul.w	r3, r2, r3
 80138fe:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013902:	fb02 f303 	mul.w	r3, r2, r3
 8013906:	005b      	lsls	r3, r3, #1
 8013908:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801390c:	4413      	add	r3, r2
 801390e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
 8013912:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013916:	3301      	adds	r3, #1
 8013918:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801391c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013924:	429a      	cmp	r2, r3
 8013926:	f6ff ae20 	blt.w	801356a <arm_convolve_s16+0xb6>
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
 801392a:	2300      	movs	r3, #0
}
 801392c:	4618      	mov	r0, r3
 801392e:	37f0      	adds	r7, #240	; 0xf0
 8013930:	46bd      	mov	sp, r7
 8013932:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013936:	4770      	bx	lr

08013938 <arm_convolve_s16_get_buffer_size>:

int32_t arm_convolve_s16_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8013938:	b480      	push	{r7}
 801393a:	b083      	sub	sp, #12
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
 8013940:	6039      	str	r1, [r7, #0]
    (void)input_dims;
    (void)filter_dims;
    return 0;
 8013942:	2300      	movs	r3, #0
}
 8013944:	4618      	mov	r0, r3
 8013946:	370c      	adds	r7, #12
 8013948:	46bd      	mov	sp, r7
 801394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394e:	4770      	bx	lr

08013950 <arm_convolve_s8>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 8013950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013954:	b0e5      	sub	sp, #404	; 0x194
 8013956:	af08      	add	r7, sp, #32
 8013958:	f507 76b8 	add.w	r6, r7, #368	; 0x170
 801395c:	f5a6 76ae 	sub.w	r6, r6, #348	; 0x15c
 8013960:	6030      	str	r0, [r6, #0]
 8013962:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8013966:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 801396a:	6001      	str	r1, [r0, #0]
 801396c:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8013970:	f5a1 71b2 	sub.w	r1, r1, #356	; 0x164
 8013974:	600a      	str	r2, [r1, #0]
 8013976:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801397a:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 801397e:	6013      	str	r3, [r2, #0]
    (void)bias_dims;

    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
 8013980:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013984:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d10f      	bne.n	80139b0 <arm_convolve_s8+0x60>
 8013990:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013994:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8013998:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 801399c:	6818      	ldr	r0, [r3, #0]
 801399e:	f000 fc9d 	bl	80142dc <arm_convolve_s8_get_buffer_size>
 80139a2:	4603      	mov	r3, r0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	dd03      	ble.n	80139b0 <arm_convolve_s8+0x60>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
 80139a8:	f04f 33ff 	mov.w	r3, #4294967295
 80139ac:	f000 bc90 	b.w	80142d0 <arm_convolve_s8+0x980>
    }
    q15_t *buffer_a = (q15_t *)ctx->buf;
 80139b0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80139b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    const int32_t input_batches = input_dims->n;
 80139c0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80139c4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    const uint16_t input_x = input_dims->w;
 80139d0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80139d4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	689b      	ldr	r3, [r3, #8]
 80139dc:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
    const uint16_t input_y = input_dims->h;
 80139e0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80139e4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	685b      	ldr	r3, [r3, #4]
 80139ec:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    const uint16_t input_ch = input_dims->c;
 80139f0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80139f4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	68db      	ldr	r3, [r3, #12]
 80139fc:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
    const uint16_t kernel_x = filter_dims->w;
 8013a00:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013a04:	689b      	ldr	r3, [r3, #8]
 8013a06:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
    const uint16_t kernel_y = filter_dims->h;
 8013a0a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013a0e:	685b      	ldr	r3, [r3, #4]
 8013a10:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    const uint16_t output_x = output_dims->w;
 8013a14:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013a18:	689b      	ldr	r3, [r3, #8]
 8013a1a:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
    const uint16_t output_y = output_dims->h;
 8013a1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
    const uint16_t output_ch = output_dims->c;
 8013a28:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c

    const uint16_t pad_x = conv_params->padding.w;
 8013a32:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013a36:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	691b      	ldr	r3, [r3, #16]
 8013a3e:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    const uint16_t pad_y = conv_params->padding.h;
 8013a42:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013a46:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	695b      	ldr	r3, [r3, #20]
 8013a4e:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    const uint16_t stride_x = conv_params->stride.w;
 8013a52:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013a56:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	689b      	ldr	r3, [r3, #8]
 8013a5e:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    const uint16_t stride_y = conv_params->stride.h;
 8013a62:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013a66:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	68db      	ldr	r3, [r3, #12]
 8013a6e:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

    const int32_t input_offset = conv_params->input_offset;
 8013a72:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013a76:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    const int32_t out_offset = conv_params->output_offset;
 8013a82:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013a86:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    const int32_t out_activation_min = conv_params->activation.min;
 8013a92:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013a96:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	6a1b      	ldr	r3, [r3, #32]
 8013a9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    const int32_t out_activation_max = conv_params->activation.max;
 8013aa2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013aa6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    int32_t *output_mult = quant_params->multiplier;
 8013ab2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013ab6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t *output_shift = quant_params->shift;
 8013ac2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013ac6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	685b      	ldr	r3, [r3, #4]
 8013ace:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8013ad8:	e3f2      	b.n	80142c0 <arm_convolve_s8+0x970>
                                     num_elem,
                                     bias_data,
                                     out);
        }
#else // #if defined(ARM_MATH_MVEI)
        const uint16_t dilation_x = conv_params->dilation.w;
 8013ada:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013ade:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	699b      	ldr	r3, [r3, #24]
 8013ae6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        const uint16_t dilation_y = conv_params->dilation.h;
 8013aea:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013aee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	69db      	ldr	r3, [r3, #28]
 8013af6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108

        int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;

        /* Generate two columns from the input tensor a GEMM computation */
        q15_t *two_column_buf = buffer_a;
 8013afa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013afe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        q7_t *out = output_data;
 8013b02:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013b06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

        /* This part implements the im2col function */
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8013b10:	e0e2      	b.n	8013cd8 <arm_convolve_s8+0x388>
        {
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8013b12:	2300      	movs	r3, #0
 8013b14:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8013b18:	e0d2      	b.n	8013cc0 <arm_convolve_s8+0x370>
            {
                const int32_t base_idx_y = stride_y * i_out_y - pad_y;
 8013b1a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8013b1e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8013b22:	fb03 f202 	mul.w	r2, r3, r2
 8013b26:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8013b2a:	1ad3      	subs	r3, r2, r3
 8013b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
                const int32_t base_idx_x = stride_x * i_out_x - pad_x;
 8013b30:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8013b34:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8013b38:	fb03 f202 	mul.w	r2, r3, r2
 8013b3c:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8013b40:	1ad3      	subs	r3, r2, r3
 8013b42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

                for (i_ker_y = 0; i_ker_y < kernel_y; i_ker_y++)
 8013b46:	2300      	movs	r3, #0
 8013b48:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8013b4c:	e069      	b.n	8013c22 <arm_convolve_s8+0x2d2>
                {
                    for (i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 8013b4e:	2300      	movs	r3, #0
 8013b50:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8013b54:	e05a      	b.n	8013c0c <arm_convolve_s8+0x2bc>
                    {
                        const int32_t k_y = base_idx_y + dilation_y * i_ker_y;
 8013b56:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8013b5a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8013b5e:	fb02 f303 	mul.w	r3, r2, r3
 8013b62:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8013b66:	4413      	add	r3, r2
 8013b68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                        const int32_t k_x = base_idx_x + dilation_x * i_ker_x;
 8013b6c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8013b70:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8013b74:	fb02 f303 	mul.w	r3, r2, r3
 8013b78:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8013b7c:	4413      	add	r3, r2
 8013b7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                        if (k_y < 0 || k_y >= input_y || k_x < 0 || k_x >= input_x)
 8013b82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	db0f      	blt.n	8013baa <arm_convolve_s8+0x25a>
 8013b8a:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8013b8e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8013b92:	429a      	cmp	r2, r3
 8013b94:	da09      	bge.n	8013baa <arm_convolve_s8+0x25a>
 8013b96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	db05      	blt.n	8013baa <arm_convolve_s8+0x25a>
 8013b9e:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8013ba2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	db09      	blt.n	8013bbe <arm_convolve_s8+0x26e>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 8013baa:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8013bae:	005b      	lsls	r3, r3, #1
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	2100      	movs	r1, #0
 8013bb4:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8013bb8:	f01a fdc4 	bl	802e744 <memset>
 8013bbc:	e019      	b.n	8013bf2 <arm_convolve_s8+0x2a2>
                        }
                        else
                        {
                            /* Copying the pixel data to column */
                            arm_q7_to_q15_with_offset(
                                input_data + (k_y * input_x + k_x) * input_ch, two_column_buf, input_ch, input_offset);
 8013bbe:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8013bc2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8013bc6:	fb03 f202 	mul.w	r2, r3, r2
 8013bca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013bce:	4413      	add	r3, r2
 8013bd0:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8013bd4:	fb02 f303 	mul.w	r3, r2, r3
 8013bd8:	461a      	mov	r2, r3
                            arm_q7_to_q15_with_offset(
 8013bda:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8013bde:	1898      	adds	r0, r3, r2
 8013be0:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8013be4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013be8:	b21b      	sxth	r3, r3
 8013bea:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8013bee:	f00b f882 	bl	801ecf6 <arm_q7_to_q15_with_offset>
                        }
                        two_column_buf += input_ch;
 8013bf2:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8013bf6:	005b      	lsls	r3, r3, #1
 8013bf8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8013bfc:	4413      	add	r3, r2
 8013bfe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
                    for (i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 8013c02:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8013c06:	3301      	adds	r3, #1
 8013c08:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8013c0c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8013c10:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8013c14:	429a      	cmp	r2, r3
 8013c16:	db9e      	blt.n	8013b56 <arm_convolve_s8+0x206>
                for (i_ker_y = 0; i_ker_y < kernel_y; i_ker_y++)
 8013c18:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8013c22:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8013c26:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	db8f      	blt.n	8013b4e <arm_convolve_s8+0x1fe>
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 8013c2e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8013c32:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8013c36:	fb02 f303 	mul.w	r3, r2, r3
 8013c3a:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8013c3e:	fb02 f303 	mul.w	r3, r2, r3
 8013c42:	009b      	lsls	r3, r3, #2
 8013c44:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8013c48:	4413      	add	r3, r2
 8013c4a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d131      	bne.n	8013cb6 <arm_convolve_s8+0x366>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 8013c52:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013c56:	b21b      	sxth	r3, r3
 8013c58:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8013c5c:	b212      	sxth	r2, r2
 8013c5e:	f8b7 0136 	ldrh.w	r0, [r7, #310]	; 0x136
 8013c62:	f8b7 1132 	ldrh.w	r1, [r7, #306]	; 0x132
 8013c66:	fb10 f101 	smulbb	r1, r0, r1
 8013c6a:	b289      	uxth	r1, r1
 8013c6c:	f8b7 0134 	ldrh.w	r0, [r7, #308]	; 0x134
 8013c70:	fb10 f101 	smulbb	r1, r0, r1
 8013c74:	b289      	uxth	r1, r1
 8013c76:	f8b7 612c 	ldrh.w	r6, [r7, #300]	; 0x12c
 8013c7a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8013c7e:	9006      	str	r0, [sp, #24]
 8013c80:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 8013c84:	9005      	str	r0, [sp, #20]
 8013c86:	9104      	str	r1, [sp, #16]
 8013c88:	9203      	str	r2, [sp, #12]
 8013c8a:	9302      	str	r3, [sp, #8]
 8013c8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013c90:	9301      	str	r3, [sp, #4]
 8013c92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c9c:	4632      	mov	r2, r6
 8013c9e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8013ca2:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8013ca6:	f000 fc70 	bl	801458a <arm_nn_mat_mult_kernel_s8_s16>
 8013caa:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
                                                        input_ch * kernel_y * kernel_x,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    two_column_buf = buffer_a;
 8013cae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013cb2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8013cb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8013cba:	3301      	adds	r3, #1
 8013cbc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8013cc0:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8013cc4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	f6ff af26 	blt.w	8013b1a <arm_convolve_s8+0x1ca>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 8013cce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8013cd8:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8013cdc:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	f6ff af16 	blt.w	8013b12 <arm_convolve_s8+0x1c2>
                }
            }
        }

        /* left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 8013ce6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8013cea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	f000 82c1 	beq.w	8014276 <arm_convolve_s8+0x926>
        {
            const q7_t *ker_a = filter_data;
 8013cf4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8013cf8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
            int i;

            for (i = 0; i < output_ch; i++)
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8013d02:	e2b1      	b.n	8014268 <arm_convolve_s8+0x918>
            {
                /* Load the accumulator with bias first */
                q31_t sum = 0;
 8013d04:	2300      	movs	r3, #0
 8013d06:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                if (bias_data)
 8013d0a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d008      	beq.n	8013d24 <arm_convolve_s8+0x3d4>
                {
                    sum = bias_data[i];
 8013d12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013d16:	009b      	lsls	r3, r3, #2
 8013d18:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8013d1c:	4413      	add	r3, r2
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                }

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 8013d24:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013d28:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8013d2c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8013d30:	601a      	str	r2, [r3, #0]

                /* 4 multiply and accumulates are done in one loop. */
#if defined(ARM_MATH_DSP)
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 8013d32:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8013d36:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8013d3a:	fb02 f303 	mul.w	r3, r2, r3
 8013d3e:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8013d42:	fb02 f303 	mul.w	r3, r2, r3
 8013d46:	109b      	asrs	r3, r3, #2
 8013d48:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

                while (col_count)
 8013d4c:	e116      	b.n	8013f7c <arm_convolve_s8+0x62c>
 8013d4e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013d52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8013d56:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8013d5a:	601a      	str	r2, [r3, #0]
 8013d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013d60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013d68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8013d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    memcpy(&val, *in_q7, 4);
 8013d74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013d82:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8013d86:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013d88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	1d1a      	adds	r2, r3, #4
 8013d90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013d94:	601a      	str	r2, [r3, #0]
    return (val);
 8013d96:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013d9a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8013d9e:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8013da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 8013da4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013dac:	2308      	movs	r3, #8
 8013dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013db2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013db6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  op2 %= 32U;
 8013dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013dc6:	f003 031f 	and.w	r3, r3, #31
 8013dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (op2 == 0U)
 8013dce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d102      	bne.n	8013ddc <arm_convolve_s8+0x48c>
    return op1;
 8013dd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013dda:	e005      	b.n	8013de8 <arm_convolve_s8+0x498>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013ddc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013de0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013de4:	fa62 f303 	ror.w	r3, r2, r3
 8013de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013dec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013df0:	fa2f f383 	sxtb16	r3, r3
 8013df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 8013df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    result = __SXTB16(__ROR(op1, rotate)) ;
 8013dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return result;
 8013e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q31_t inAbuf2 = __SXTB16(inA);
 8013e08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013e0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e14:	fa2f f383 	sxtb16	r3, r3
 8013e18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8013e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8013e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013e28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013e38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013e3c:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8013e40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e44:	461a      	mov	r2, r3
 8013e46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013e4a:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8013e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013e50:	67bb      	str	r3, [r7, #120]	; 0x78
 8013e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013e56:	677b      	str	r3, [r7, #116]	; 0x74
 8013e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013e5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013e5c:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 8013e60:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013e64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013e68:	601a      	str	r2, [r3, #0]
 8013e6a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013e6e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	461a      	mov	r2, r3
 8013e76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013e7a:	601a      	str	r2, [r3, #0]
    return source;
 8013e7c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013e80:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8013e84:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 8013e86:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8013e8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013e8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    memcpy(&val, *in_q15, 4);
 8013e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	461a      	mov	r2, r3
 8013e9c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013ea0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8013ea4:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8013ea6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	1d1a      	adds	r2, r3, #4
 8013eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013eb2:	601a      	str	r2, [r3, #0]
    return (val);
 8013eb4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013eb8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8013ebc:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8013ebe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 8013ec2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013ec6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	4619      	mov	r1, r3
 8013ece:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8013ed2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013ed6:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8013eda:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8013ede:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013eea:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8013eee:	fb23 1302 	smlad	r3, r3, r2, r1
 8013ef2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8013ef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013efa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8013efe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    memcpy(&val, *in_q15, 4);
 8013f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	461a      	mov	r2, r3
 8013f10:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013f14:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013f18:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8013f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	1d1a      	adds	r2, r3, #4
 8013f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013f26:	601a      	str	r2, [r3, #0]
    return (val);
 8013f28:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013f2c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013f30:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8013f32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 8013f36:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013f3a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	4619      	mov	r1, r3
 8013f42:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8013f46:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013f4a:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8013f4e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8013f52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013f56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013f5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013f5e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8013f62:	fb23 1302 	smlad	r3, r3, r2, r1
 8013f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  return(result);
 8013f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013f6e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

                    col_count--;
 8013f72:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8013f76:	3b01      	subs	r3, #1
 8013f78:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
                while (col_count)
 8013f7c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	f47f aee4 	bne.w	8013d4e <arm_convolve_s8+0x3fe>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 8013f86:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8013f8a:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8013f8e:	fb12 f303 	smulbb	r3, r2, r3
 8013f92:	b29b      	uxth	r3, r3
 8013f94:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8013f98:	fb12 f303 	smulbb	r3, r2, r3
 8013f9c:	b29b      	uxth	r3, r3
 8013f9e:	f003 0303 	and.w	r3, r3, #3
 8013fa2:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
#else
                uint16_t col_count = input_ch * kernel_y * kernel_x;
#endif
                while (col_count)
 8013fa6:	e025      	b.n	8013ff4 <arm_convolve_s8+0x6a4>
                {
                    q7_t ker_a1 = *ker_a++;
 8013fa8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8013fac:	1c5a      	adds	r2, r3, #1
 8013fae:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
                    q15_t ip_b1 = *ip_as_col++;
 8013fb8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013fbc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	1c99      	adds	r1, r3, #2
 8013fc4:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8013fc8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8013fcc:	6011      	str	r1, [r2, #0]
 8013fce:	881b      	ldrh	r3, [r3, #0]
 8013fd0:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
                    sum += ker_a1 * ip_b1;
 8013fd4:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 8013fd8:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 8013fdc:	fb02 f303 	mul.w	r3, r2, r3
 8013fe0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013fe4:	4413      	add	r3, r2
 8013fe6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                    col_count--;
 8013fea:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8013fee:	3b01      	subs	r3, #1
 8013ff0:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
                while (col_count)
 8013ff4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d1d5      	bne.n	8013fa8 <arm_convolve_s8+0x658>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 8013ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8014000:	009b      	lsls	r3, r3, #2
 8014002:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014006:	4413      	add	r3, r2
 8014008:	6819      	ldr	r1, [r3, #0]
 801400a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801400e:	009b      	lsls	r3, r3, #2
 8014010:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8014014:	4413      	add	r3, r2
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801401c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014020:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8014024:	6018      	str	r0, [r3, #0]
 8014026:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801402a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801402e:	6019      	str	r1, [r3, #0]
 8014030:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014034:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014038:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801403a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801403e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014048:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801404c:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8014050:	6812      	ldr	r2, [r2, #0]
 8014052:	409a      	lsls	r2, r3
 8014054:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014058:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801405c:	601a      	str	r2, [r3, #0]
 801405e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014062:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014066:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801406a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 801406e:	6812      	ldr	r2, [r2, #0]
 8014070:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8014072:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014076:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801407a:	2200      	movs	r2, #0
 801407c:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801407e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014082:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8014086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801408a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801408c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014090:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8014094:	2200      	movs	r2, #0
 8014096:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8014098:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801409c:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80140a0:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80140a4:	6809      	ldr	r1, [r1, #0]
 80140a6:	17c8      	asrs	r0, r1, #31
 80140a8:	4688      	mov	r8, r1
 80140aa:	4681      	mov	r9, r0
 80140ac:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80140b0:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 80140b4:	6809      	ldr	r1, [r1, #0]
 80140b6:	17c8      	asrs	r0, r1, #31
 80140b8:	468a      	mov	sl, r1
 80140ba:	4683      	mov	fp, r0
 80140bc:	fb0a f009 	mul.w	r0, sl, r9
 80140c0:	fb08 f10b 	mul.w	r1, r8, fp
 80140c4:	4401      	add	r1, r0
 80140c6:	fba8 450a 	umull	r4, r5, r8, sl
 80140ca:	4429      	add	r1, r5
 80140cc:	460d      	mov	r5, r1
 80140ce:	1911      	adds	r1, r2, r4
 80140d0:	6039      	str	r1, [r7, #0]
 80140d2:	416b      	adcs	r3, r5
 80140d4:	607b      	str	r3, [r7, #4]
 80140d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80140da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 80140de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80140e2:	f04f 0200 	mov.w	r2, #0
 80140e6:	f04f 0300 	mov.w	r3, #0
 80140ea:	0fc2      	lsrs	r2, r0, #31
 80140ec:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80140f0:	17cb      	asrs	r3, r1, #31
 80140f2:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80140f6:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 80140fa:	4613      	mov	r3, r2
 80140fc:	600b      	str	r3, [r1, #0]
    return result;
 80140fe:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014102:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014106:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014108:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801410c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	dc06      	bgt.n	8014124 <arm_convolve_s8+0x7d4>
 8014116:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801411a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	425b      	negs	r3, r3
 8014122:	e000      	b.n	8014126 <arm_convolve_s8+0x7d6>
 8014124:	2300      	movs	r3, #0
 8014126:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801412a:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 801412e:	6011      	str	r1, [r2, #0]
 8014130:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8014134:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8014138:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801413a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801413e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8014142:	2200      	movs	r2, #0
 8014144:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014146:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801414a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801414e:	2201      	movs	r2, #1
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	409a      	lsls	r2, r3
 8014154:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014158:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801415c:	3a01      	subs	r2, #1
 801415e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8014160:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014168:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801416c:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 8014170:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8014174:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8014178:	6809      	ldr	r1, [r1, #0]
 801417a:	6812      	ldr	r2, [r2, #0]
 801417c:	400a      	ands	r2, r1
 801417e:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8014180:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014184:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8014188:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801418c:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 8014190:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8014194:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8014198:	6809      	ldr	r1, [r1, #0]
 801419a:	6812      	ldr	r2, [r2, #0]
 801419c:	fa41 f202 	asr.w	r2, r1, r2
 80141a0:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80141a2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80141a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80141aa:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80141ae:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80141b2:	6812      	ldr	r2, [r2, #0]
 80141b4:	1052      	asrs	r2, r2, #1
 80141b6:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80141b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80141bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	da0a      	bge.n	80141dc <arm_convolve_s8+0x88c>
        threshold++;
 80141c6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80141ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80141ce:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80141d2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80141d6:	6812      	ldr	r2, [r2, #0]
 80141d8:	3201      	adds	r2, #1
 80141da:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80141dc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80141e0:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 80141e4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80141e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80141ec:	6812      	ldr	r2, [r2, #0]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	dd0a      	ble.n	801420a <arm_convolve_s8+0x8ba>
        result++;
 80141f4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80141f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80141fc:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8014200:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8014204:	6812      	ldr	r2, [r2, #0]
 8014206:	3201      	adds	r2, #1
 8014208:	601a      	str	r2, [r3, #0]
    return result;
 801420a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801420e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8014212:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014214:	bf00      	nop
 8014216:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                sum += out_offset;
 801421a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801421e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014222:	4413      	add	r3, r2
 8014224:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                sum = MAX(sum, out_activation_min);
 8014228:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801422c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014230:	4293      	cmp	r3, r2
 8014232:	bfb8      	it	lt
 8014234:	4613      	movlt	r3, r2
 8014236:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                sum = MIN(sum, out_activation_max);
 801423a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8014242:	4293      	cmp	r3, r2
 8014244:	bfa8      	it	ge
 8014246:	4613      	movge	r3, r2
 8014248:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                *out++ = (q7_t)sum;
 801424c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8014250:	1c5a      	adds	r2, r3, #1
 8014252:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8014256:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801425a:	b252      	sxtb	r2, r2
 801425c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 801425e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8014262:	3301      	adds	r3, #1
 8014264:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8014268:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 801426c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8014270:	429a      	cmp	r2, r3
 8014272:	f6ff ad47 	blt.w	8013d04 <arm_convolve_s8+0x3b4>
            }
        }
#endif // #if defined(ARM_MATH_MVEI)
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 8014276:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 801427a:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 801427e:	fb02 f303 	mul.w	r3, r2, r3
 8014282:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8014286:	fb02 f303 	mul.w	r3, r2, r3
 801428a:	461a      	mov	r2, r3
 801428c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8014290:	4413      	add	r3, r2
 8014292:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
        output_data += (output_x * output_y * output_ch);
 8014296:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 801429a:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 801429e:	fb02 f303 	mul.w	r3, r2, r3
 80142a2:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 80142a6:	fb02 f303 	mul.w	r3, r2, r3
 80142aa:	461a      	mov	r2, r3
 80142ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80142b0:	4413      	add	r3, r2
 80142b2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 80142b6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80142ba:	3301      	adds	r3, #1
 80142bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80142c0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80142c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80142c8:	429a      	cmp	r2, r3
 80142ca:	f6ff ac06 	blt.w	8013ada <arm_convolve_s8+0x18a>
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
 80142ce:	2300      	movs	r3, #0
}
 80142d0:	4618      	mov	r0, r3
 80142d2:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80142d6:	46bd      	mov	sp, r7
 80142d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080142dc <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 80142dc:	b480      	push	{r7}
 80142de:	b083      	sub	sp, #12
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
 80142e4:	6039      	str	r1, [r7, #0]
    // implementation of  arm_nn_mat_mult_s8
    col_length = (col_length + 7) / 8;
    // 4 -> number of im2col buffers, 8 -> 8 elements per Q register
    return 4 * col_length * 8 * (int32_t)sizeof(int8_t);
#else
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	68db      	ldr	r3, [r3, #12]
 80142ea:	683a      	ldr	r2, [r7, #0]
 80142ec:	6892      	ldr	r2, [r2, #8]
 80142ee:	fb02 f303 	mul.w	r3, r2, r3
 80142f2:	683a      	ldr	r2, [r7, #0]
 80142f4:	6852      	ldr	r2, [r2, #4]
 80142f6:	fb02 f303 	mul.w	r3, r2, r3
 80142fa:	009b      	lsls	r3, r3, #2
#endif
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	370c      	adds	r7, #12
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr

08014308 <arm_convolve_wrapper_s16>:
                                             const q7_t *filter_data,
                                             const cmsis_nn_dims *bias_dims,
                                             const int64_t *bias_data,
                                             const cmsis_nn_dims *output_dims,
                                             q15_t *output_data)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b08c      	sub	sp, #48	; 0x30
 801430c:	af08      	add	r7, sp, #32
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	607a      	str	r2, [r7, #4]
 8014314:	603b      	str	r3, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
 8014316:	69fb      	ldr	r3, [r7, #28]
 8014318:	689b      	ldr	r3, [r3, #8]
 801431a:	69fa      	ldr	r2, [r7, #28]
 801431c:	6852      	ldr	r2, [r2, #4]
 801431e:	fb02 f303 	mul.w	r3, r2, r3
 8014322:	683a      	ldr	r2, [r7, #0]
 8014324:	68d2      	ldr	r2, [r2, #12]
 8014326:	fb02 f303 	mul.w	r3, r2, r3
 801432a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801432e:	da1d      	bge.n	801436c <arm_convolve_wrapper_s16+0x64>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	699b      	ldr	r3, [r3, #24]
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
 8014334:	2b01      	cmp	r3, #1
 8014336:	d119      	bne.n	801436c <arm_convolve_wrapper_s16+0x64>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	69db      	ldr	r3, [r3, #28]
 801433c:	2b01      	cmp	r3, #1
 801433e:	d115      	bne.n	801436c <arm_convolve_wrapper_s16+0x64>
    {
        return arm_convolve_fast_s16(ctx,
 8014340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014342:	9306      	str	r3, [sp, #24]
 8014344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014346:	9305      	str	r3, [sp, #20]
 8014348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801434a:	9304      	str	r3, [sp, #16]
 801434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434e:	9303      	str	r3, [sp, #12]
 8014350:	6a3b      	ldr	r3, [r7, #32]
 8014352:	9302      	str	r3, [sp, #8]
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	9301      	str	r3, [sp, #4]
 8014358:	69bb      	ldr	r3, [r7, #24]
 801435a:	9300      	str	r3, [sp, #0]
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	687a      	ldr	r2, [r7, #4]
 8014360:	68b9      	ldr	r1, [r7, #8]
 8014362:	68f8      	ldr	r0, [r7, #12]
 8014364:	f7fe fafa 	bl	801295c <arm_convolve_fast_s16>
 8014368:	4603      	mov	r3, r0
 801436a:	e014      	b.n	8014396 <arm_convolve_wrapper_s16+0x8e>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s16(ctx,
 801436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801436e:	9306      	str	r3, [sp, #24]
 8014370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014372:	9305      	str	r3, [sp, #20]
 8014374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014376:	9304      	str	r3, [sp, #16]
 8014378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437a:	9303      	str	r3, [sp, #12]
 801437c:	6a3b      	ldr	r3, [r7, #32]
 801437e:	9302      	str	r3, [sp, #8]
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	9301      	str	r3, [sp, #4]
 8014384:	69bb      	ldr	r3, [r7, #24]
 8014386:	9300      	str	r3, [sp, #0]
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	687a      	ldr	r2, [r7, #4]
 801438c:	68b9      	ldr	r1, [r7, #8]
 801438e:	68f8      	ldr	r0, [r7, #12]
 8014390:	f7ff f890 	bl	80134b4 <arm_convolve_s16>
 8014394:	4603      	mov	r3, r0
                            bias_dims,
                            bias_data,
                            output_dims,
                            output_data);
#endif
}
 8014396:	4618      	mov	r0, r3
 8014398:	3710      	adds	r7, #16
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}

0801439e <arm_convolve_wrapper_s16_get_buffer_size>:

int32_t arm_convolve_wrapper_s16_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                 const cmsis_nn_dims *input_dims,
                                                 const cmsis_nn_dims *filter_dims,
                                                 const cmsis_nn_dims *output_dims)
{
 801439e:	b580      	push	{r7, lr}
 80143a0:	b084      	sub	sp, #16
 80143a2:	af00      	add	r7, sp, #0
 80143a4:	60f8      	str	r0, [r7, #12]
 80143a6:	60b9      	str	r1, [r7, #8]
 80143a8:	607a      	str	r2, [r7, #4]
 80143aa:	603b      	str	r3, [r7, #0]
    (void)conv_params;
    (void)output_dims;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	689b      	ldr	r3, [r3, #8]
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	6852      	ldr	r2, [r2, #4]
 80143b4:	fb02 f303 	mul.w	r3, r2, r3
 80143b8:	68ba      	ldr	r2, [r7, #8]
 80143ba:	68d2      	ldr	r2, [r2, #12]
 80143bc:	fb02 f303 	mul.w	r3, r2, r3
 80143c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143c4:	da0d      	bge.n	80143e2 <arm_convolve_wrapper_s16_get_buffer_size+0x44>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	699b      	ldr	r3, [r3, #24]
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
 80143ca:	2b01      	cmp	r3, #1
 80143cc:	d109      	bne.n	80143e2 <arm_convolve_wrapper_s16_get_buffer_size+0x44>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	69db      	ldr	r3, [r3, #28]
 80143d2:	2b01      	cmp	r3, #1
 80143d4:	d105      	bne.n	80143e2 <arm_convolve_wrapper_s16_get_buffer_size+0x44>
    {
        return arm_convolve_fast_s16_get_buffer_size(input_dims, filter_dims);
 80143d6:	6879      	ldr	r1, [r7, #4]
 80143d8:	68b8      	ldr	r0, [r7, #8]
 80143da:	f7ff f855 	bl	8013488 <arm_convolve_fast_s16_get_buffer_size>
 80143de:	4603      	mov	r3, r0
 80143e0:	e004      	b.n	80143ec <arm_convolve_wrapper_s16_get_buffer_size+0x4e>
    }

    return arm_convolve_s16_get_buffer_size(input_dims, filter_dims);
 80143e2:	6879      	ldr	r1, [r7, #4]
 80143e4:	68b8      	ldr	r0, [r7, #8]
 80143e6:	f7ff faa7 	bl	8013938 <arm_convolve_s16_get_buffer_size>
 80143ea:	4603      	mov	r3, r0
#else
    return arm_convolve_s16_get_buffer_size(input_dims, filter_dims);
#endif
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	3710      	adds	r7, #16
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}

080143f4 <arm_convolve_wrapper_s8>:
                                            const q7_t *filter_data,
                                            const cmsis_nn_dims *bias_dims,
                                            const int32_t *bias_data,
                                            const cmsis_nn_dims *output_dims,
                                            q7_t *output_data)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b08c      	sub	sp, #48	; 0x30
 80143f8:	af08      	add	r7, sp, #32
 80143fa:	60f8      	str	r0, [r7, #12]
 80143fc:	60b9      	str	r1, [r7, #8]
 80143fe:	607a      	str	r2, [r7, #4]
 8014400:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
 8014402:	68bb      	ldr	r3, [r7, #8]
 8014404:	691b      	ldr	r3, [r3, #16]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d131      	bne.n	801446e <arm_convolve_wrapper_s8+0x7a>
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	695b      	ldr	r3, [r3, #20]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d12d      	bne.n	801446e <arm_convolve_wrapper_s8+0x7a>
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	689b      	ldr	r3, [r3, #8]
 8014416:	2b01      	cmp	r3, #1
 8014418:	d129      	bne.n	801446e <arm_convolve_wrapper_s8+0x7a>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	68db      	ldr	r3, [r3, #12]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
 801441e:	2b01      	cmp	r3, #1
 8014420:	d125      	bne.n	801446e <arm_convolve_wrapper_s8+0x7a>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
 8014422:	69fb      	ldr	r3, [r7, #28]
 8014424:	689b      	ldr	r3, [r3, #8]
 8014426:	2b01      	cmp	r3, #1
 8014428:	d121      	bne.n	801446e <arm_convolve_wrapper_s8+0x7a>
 801442a:	69fb      	ldr	r3, [r7, #28]
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	2b01      	cmp	r3, #1
 8014430:	d11d      	bne.n	801446e <arm_convolve_wrapper_s8+0x7a>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	699b      	ldr	r3, [r3, #24]
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
 8014436:	2b01      	cmp	r3, #1
 8014438:	d119      	bne.n	801446e <arm_convolve_wrapper_s8+0x7a>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	69db      	ldr	r3, [r3, #28]
 801443e:	2b01      	cmp	r3, #1
 8014440:	d115      	bne.n	801446e <arm_convolve_wrapper_s8+0x7a>
    {
        return arm_convolve_1x1_s8_fast(ctx,
 8014442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014444:	9306      	str	r3, [sp, #24]
 8014446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014448:	9305      	str	r3, [sp, #20]
 801444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801444c:	9304      	str	r3, [sp, #16]
 801444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014450:	9303      	str	r3, [sp, #12]
 8014452:	6a3b      	ldr	r3, [r7, #32]
 8014454:	9302      	str	r3, [sp, #8]
 8014456:	69fb      	ldr	r3, [r7, #28]
 8014458:	9301      	str	r3, [sp, #4]
 801445a:	69bb      	ldr	r3, [r7, #24]
 801445c:	9300      	str	r3, [sp, #0]
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	687a      	ldr	r2, [r7, #4]
 8014462:	68b9      	ldr	r1, [r7, #8]
 8014464:	68f8      	ldr	r0, [r7, #12]
 8014466:	f7fe fa20 	bl	80128aa <arm_convolve_1x1_s8_fast>
 801446a:	4603      	mov	r3, r0
 801446c:	e03c      	b.n	80144e8 <arm_convolve_wrapper_s8+0xf4>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((input_dims->h == 1) && (output_dims->w % 4 == 0) && conv_params->dilation.w == 1 && (filter_dims->h == 1))
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	2b01      	cmp	r3, #1
 8014474:	d123      	bne.n	80144be <arm_convolve_wrapper_s8+0xca>
 8014476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014478:	689b      	ldr	r3, [r3, #8]
 801447a:	f003 0303 	and.w	r3, r3, #3
 801447e:	2b00      	cmp	r3, #0
 8014480:	d11d      	bne.n	80144be <arm_convolve_wrapper_s8+0xca>
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	699b      	ldr	r3, [r3, #24]
 8014486:	2b01      	cmp	r3, #1
 8014488:	d119      	bne.n	80144be <arm_convolve_wrapper_s8+0xca>
 801448a:	69fb      	ldr	r3, [r7, #28]
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	2b01      	cmp	r3, #1
 8014490:	d115      	bne.n	80144be <arm_convolve_wrapper_s8+0xca>
    {
        return arm_convolve_1_x_n_s8(ctx,
 8014492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014494:	9306      	str	r3, [sp, #24]
 8014496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014498:	9305      	str	r3, [sp, #20]
 801449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801449c:	9304      	str	r3, [sp, #16]
 801449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a0:	9303      	str	r3, [sp, #12]
 80144a2:	6a3b      	ldr	r3, [r7, #32]
 80144a4:	9302      	str	r3, [sp, #8]
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	9301      	str	r3, [sp, #4]
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	9300      	str	r3, [sp, #0]
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	68b9      	ldr	r1, [r7, #8]
 80144b4:	68f8      	ldr	r0, [r7, #12]
 80144b6:	f7fe f9b4 	bl	8012822 <arm_convolve_1_x_n_s8>
 80144ba:	4603      	mov	r3, r0
 80144bc:	e014      	b.n	80144e8 <arm_convolve_wrapper_s8+0xf4>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 80144be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c0:	9306      	str	r3, [sp, #24]
 80144c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c4:	9305      	str	r3, [sp, #20]
 80144c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c8:	9304      	str	r3, [sp, #16]
 80144ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144cc:	9303      	str	r3, [sp, #12]
 80144ce:	6a3b      	ldr	r3, [r7, #32]
 80144d0:	9302      	str	r3, [sp, #8]
 80144d2:	69fb      	ldr	r3, [r7, #28]
 80144d4:	9301      	str	r3, [sp, #4]
 80144d6:	69bb      	ldr	r3, [r7, #24]
 80144d8:	9300      	str	r3, [sp, #0]
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	68b9      	ldr	r1, [r7, #8]
 80144e0:	68f8      	ldr	r0, [r7, #12]
 80144e2:	f7ff fa35 	bl	8013950 <arm_convolve_s8>
 80144e6:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3710      	adds	r7, #16
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b084      	sub	sp, #16
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	60b9      	str	r1, [r7, #8]
 80144fa:	607a      	str	r2, [r7, #4]
 80144fc:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	691b      	ldr	r3, [r3, #16]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d120      	bne.n	8014548 <arm_convolve_wrapper_s8_get_buffer_size+0x58>
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	695b      	ldr	r3, [r3, #20]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d11c      	bne.n	8014548 <arm_convolve_wrapper_s8_get_buffer_size+0x58>
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	689b      	ldr	r3, [r3, #8]
 8014512:	2b01      	cmp	r3, #1
 8014514:	d118      	bne.n	8014548 <arm_convolve_wrapper_s8_get_buffer_size+0x58>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	68db      	ldr	r3, [r3, #12]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
 801451a:	2b01      	cmp	r3, #1
 801451c:	d114      	bne.n	8014548 <arm_convolve_wrapper_s8_get_buffer_size+0x58>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	689b      	ldr	r3, [r3, #8]
 8014522:	2b01      	cmp	r3, #1
 8014524:	d110      	bne.n	8014548 <arm_convolve_wrapper_s8_get_buffer_size+0x58>
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	685b      	ldr	r3, [r3, #4]
 801452a:	2b01      	cmp	r3, #1
 801452c:	d10c      	bne.n	8014548 <arm_convolve_wrapper_s8_get_buffer_size+0x58>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	699b      	ldr	r3, [r3, #24]
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
 8014532:	2b01      	cmp	r3, #1
 8014534:	d108      	bne.n	8014548 <arm_convolve_wrapper_s8_get_buffer_size+0x58>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	69db      	ldr	r3, [r3, #28]
 801453a:	2b01      	cmp	r3, #1
 801453c:	d104      	bne.n	8014548 <arm_convolve_wrapper_s8_get_buffer_size+0x58>
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 801453e:	68b8      	ldr	r0, [r7, #8]
 8014540:	f7fe fa01 	bl	8012946 <arm_convolve_1x1_s8_fast_get_buffer_size>
 8014544:	4603      	mov	r3, r0
 8014546:	e01c      	b.n	8014582 <arm_convolve_wrapper_s8_get_buffer_size+0x92>
    }
    else if ((input_dims->h == 1) && (output_dims->w % 4 == 0) && (conv_params->dilation.w == 1) &&
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	2b01      	cmp	r3, #1
 801454e:	d113      	bne.n	8014578 <arm_convolve_wrapper_s8_get_buffer_size+0x88>
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	689b      	ldr	r3, [r3, #8]
 8014554:	f003 0303 	and.w	r3, r3, #3
 8014558:	2b00      	cmp	r3, #0
 801455a:	d10d      	bne.n	8014578 <arm_convolve_wrapper_s8_get_buffer_size+0x88>
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	699b      	ldr	r3, [r3, #24]
 8014560:	2b01      	cmp	r3, #1
 8014562:	d109      	bne.n	8014578 <arm_convolve_wrapper_s8_get_buffer_size+0x88>
             (filter_dims->h == 1))
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	685b      	ldr	r3, [r3, #4]
    else if ((input_dims->h == 1) && (output_dims->w % 4 == 0) && (conv_params->dilation.w == 1) &&
 8014568:	2b01      	cmp	r3, #1
 801456a:	d105      	bne.n	8014578 <arm_convolve_wrapper_s8_get_buffer_size+0x88>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 801456c:	6879      	ldr	r1, [r7, #4]
 801456e:	68b8      	ldr	r0, [r7, #8]
 8014570:	f7fe f98d 	bl	801288e <arm_convolve_1_x_n_s8_get_buffer_size>
 8014574:	4603      	mov	r3, r0
 8014576:	e004      	b.n	8014582 <arm_convolve_wrapper_s8_get_buffer_size+0x92>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 8014578:	6879      	ldr	r1, [r7, #4]
 801457a:	68b8      	ldr	r0, [r7, #8]
 801457c:	f7ff feae 	bl	80142dc <arm_convolve_s8_get_buffer_size>
 8014580:	4603      	mov	r3, r0
    }
}
 8014582:	4618      	mov	r0, r3
 8014584:	3710      	adds	r7, #16
 8014586:	46bd      	mov	sp, r7
 8014588:	bd80      	pop	{r7, pc}

0801458a <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 801458a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801458e:	f5ad 6d93 	sub.w	sp, sp, #1176	; 0x498
 8014592:	af00      	add	r7, sp, #0
 8014594:	f507 6493 	add.w	r4, r7, #1176	; 0x498
 8014598:	f5a4 7479 	sub.w	r4, r4, #996	; 0x3e4
 801459c:	6020      	str	r0, [r4, #0]
 801459e:	f507 6093 	add.w	r0, r7, #1176	; 0x498
 80145a2:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 80145a6:	6001      	str	r1, [r0, #0]
 80145a8:	4611      	mov	r1, r2
 80145aa:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80145ae:	f5a2 727c 	sub.w	r2, r2, #1008	; 0x3f0
 80145b2:	6013      	str	r3, [r2, #0]
 80145b4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80145b8:	f2a3 32ea 	subw	r2, r3, #1002	; 0x3ea
 80145bc:	460b      	mov	r3, r1
 80145be:	8013      	strh	r3, [r2, #0]
#if !defined(ARM_MATH_MVEI)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 80145c0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80145c4:	f2a3 33ea 	subw	r3, r3, #1002	; 0x3ea
 80145c8:	881a      	ldrh	r2, [r3, #0]
 80145ca:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 80145ce:	4413      	add	r3, r2
 80145d0:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
    const int32_t *bias = output_bias;
 80145d4:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 80145d8:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490

    uint16_t row_count = output_ch / 2;
 80145dc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80145e0:	f2a3 33ea 	subw	r3, r3, #1002	; 0x3ea
 80145e4:	881b      	ldrh	r3, [r3, #0]
 80145e6:	085b      	lsrs	r3, r3, #1
 80145e8:	f8a7 348e 	strh.w	r3, [r7, #1166]	; 0x48e
    const q7_t *ip_a0 = input_a;
 80145ec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80145f0:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
    /* this loop over rows in A */
    while (row_count)
 80145fa:	f001 b97d 	b.w	80158f8 <arm_nn_mat_mult_kernel_s8_s16+0x136e>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 80145fe:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014602:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8014606:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801460a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8014612:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014616:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801461a:	681a      	ldr	r2, [r3, #0]
 801461c:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	; 0x4c8
 8014620:	005b      	lsls	r3, r3, #1
 8014622:	441a      	add	r2, r3
 8014624:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014628:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801462c:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 801462e:	f8b7 24c8 	ldrh.w	r2, [r7, #1224]	; 0x4c8
 8014632:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8014636:	4413      	add	r3, r2
 8014638:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

        q31_t ch_0_out_0 = 0;
 801463c:	2300      	movs	r3, #0
 801463e:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
        q31_t ch_0_out_1 = 0;
 8014642:	2300      	movs	r3, #0
 8014644:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
        q31_t ch_1_out_0 = 0;
 8014648:	2300      	movs	r3, #0
 801464a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
        q31_t ch_1_out_1 = 0;
 801464e:	2300      	movs	r3, #0
 8014650:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        /* Init accumulator with bias for channel N and N + 1 */
        if (bias)
 8014654:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8014658:	2b00      	cmp	r3, #0
 801465a:	d019      	beq.n	8014690 <arm_nn_mat_mult_kernel_s8_s16+0x106>
        {
            ch_0_out_0 = *bias;
 801465c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
            ch_0_out_1 = *bias++;
 8014666:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 801466a:	1d13      	adds	r3, r2, #4
 801466c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8014670:	6813      	ldr	r3, [r2, #0]
 8014672:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
            ch_1_out_0 = *bias;
 8014676:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
            ch_1_out_1 = *bias++;
 8014680:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 8014684:	1d13      	adds	r3, r2, #4
 8014686:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 801468a:	6813      	ldr	r3, [r2, #0]
 801468c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        }

#if defined(ARM_MATH_DSP)
        uint16_t col_count = num_col_a / 4;
 8014690:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	; 0x4c8
 8014694:	089b      	lsrs	r3, r3, #2
 8014696:	f8a7 3472 	strh.w	r3, [r7, #1138]	; 0x472
        /* accumulate over the vector */
        while (col_count)
 801469a:	e39e      	b.n	8014dda <arm_nn_mat_mult_kernel_s8_s16+0x850>
 801469c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80146a0:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80146a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80146a8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80146aa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80146ae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	461a      	mov	r2, r3
 80146ba:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80146be:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80146c2:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80146c4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80146c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	1d1a      	adds	r2, r3, #4
 80146d2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80146d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	601a      	str	r2, [r3, #0]
    return (val);
 80146de:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80146e2:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80146e6:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 80146e8:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 80146ec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80146f0:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80146f4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80146f8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80146fa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80146fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	461a      	mov	r2, r3
 801470a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801470e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014712:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8014714:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014718:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	1d1a      	adds	r2, r3, #4
 8014722:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014726:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	601a      	str	r2, [r3, #0]
    return (val);
 801472e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014732:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014736:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8014738:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 801473c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014740:	f5a3 7265 	sub.w	r2, r3, #916	; 0x394
 8014744:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8014748:	6013      	str	r3, [r2, #0]
 801474a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801474e:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8014752:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8014756:	6013      	str	r3, [r2, #0]
 8014758:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801475c:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8014760:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014764:	6013      	str	r3, [r2, #0]
 8014766:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801476a:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 801476e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8014772:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8014774:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014778:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	461a      	mov	r2, r3
 8014784:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014788:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 801478c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801478e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014792:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	1d1a      	adds	r2, r3, #4
 801479c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80147a0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	601a      	str	r2, [r3, #0]
    return (val);
 80147a8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80147ac:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80147b0:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80147b2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80147b6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80147ba:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 80147bc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80147c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80147c4:	681a      	ldr	r2, [r3, #0]
 80147c6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80147ca:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80147ce:	601a      	str	r2, [r3, #0]
 80147d0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80147d4:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 80147d8:	2308      	movs	r3, #8
 80147da:	6013      	str	r3, [r2, #0]
 80147dc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80147e0:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80147e4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80147e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	6013      	str	r3, [r2, #0]
 80147f0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80147f4:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 80147f8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80147fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8014804:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014808:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 801480c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014810:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	f003 031f 	and.w	r3, r3, #31
 801481a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801481c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014820:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d105      	bne.n	8014836 <arm_nn_mat_mult_kernel_s8_s16+0x2ac>
    return op1;
 801482a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801482e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8014832:	681a      	ldr	r2, [r3, #0]
 8014834:	e00a      	b.n	801484c <arm_nn_mat_mult_kernel_s8_s16+0x2c2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014836:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801483a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 801483e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014842:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8014846:	6812      	ldr	r2, [r2, #0]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	41da      	rors	r2, r3
 801484c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014850:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8014854:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014856:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801485a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	fa2f f283 	sxtb16	r2, r3
 8014864:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014868:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801486c:	601a      	str	r2, [r3, #0]
  return(result);
 801486e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014872:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8014876:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8014878:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801487c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8014880:	601a      	str	r2, [r3, #0]
  return result;
 8014882:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014886:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801488a:	681a      	ldr	r2, [r3, #0]
 801488c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014890:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8014894:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8014896:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801489a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801489e:	681a      	ldr	r2, [r3, #0]
 80148a0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80148a4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80148a8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80148aa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80148ae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	fa2f f283 	sxtb16	r2, r3
 80148b8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80148bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80148c0:	601a      	str	r2, [r3, #0]
  return(result);
 80148c2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80148c6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80148ca:	681a      	ldr	r2, [r3, #0]
 80148cc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80148d0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80148d4:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80148d6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80148da:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80148de:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80148e2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	6013      	str	r3, [r2, #0]
 80148ea:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80148ee:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80148f2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80148f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	6013      	str	r3, [r2, #0]
 80148fe:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014902:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8014906:	681a      	ldr	r2, [r3, #0]
 8014908:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801490c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 8014916:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801491a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801491e:	601a      	str	r2, [r3, #0]
 8014920:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014924:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	461a      	mov	r2, r3
 801492c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014930:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8014938:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801493c:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8014940:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014944:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	6013      	str	r3, [r2, #0]
 801494c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014950:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8014954:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014958:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	6013      	str	r3, [r2, #0]
 8014960:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014964:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801496e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8014978:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801497c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8014980:	601a      	str	r2, [r3, #0]
 8014982:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014986:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	461a      	mov	r2, r3
 801498e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	601a      	str	r2, [r3, #0]
    return source;
 801499a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801499e:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80149a2:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 80149a4:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 80149a8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80149ac:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 80149b0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80149b4:	6013      	str	r3, [r2, #0]
 80149b6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80149ba:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80149be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80149c2:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80149c6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80149ca:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
    memcpy(&val, *in_q7, 4);
 80149ce:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	461a      	mov	r2, r3
 80149d8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80149dc:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80149e0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80149e2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	1d1a      	adds	r2, r3, #4
 80149ea:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80149ee:	601a      	str	r2, [r3, #0]
    return (val);
 80149f0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80149f4:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80149f8:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80149fa:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 80149fe:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8014a02:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8014a06:	2308      	movs	r3, #8
 8014a08:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8014a0c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8014a10:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8014a14:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8014a18:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
  op2 %= 32U;
 8014a1c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8014a20:	f003 031f 	and.w	r3, r3, #31
 8014a24:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
  if (op2 == 0U)
 8014a28:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d102      	bne.n	8014a36 <arm_nn_mat_mult_kernel_s8_s16+0x4ac>
    return op1;
 8014a30:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8014a34:	e005      	b.n	8014a42 <arm_nn_mat_mult_kernel_s8_s16+0x4b8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014a36:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8014a3a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8014a3e:	fa62 f303 	ror.w	r3, r2, r3
 8014a42:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014a46:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8014a4a:	fa2f f283 	sxtb16	r2, r3
 8014a4e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014a52:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8014a56:	601a      	str	r2, [r3, #0]
  return(result);
 8014a58:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014a5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8014a60:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8014a62:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014a6a:	601a      	str	r2, [r3, #0]
  return result;
 8014a6c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014a74:	681a      	ldr	r2, [r3, #0]
 8014a76:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014a7e:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8014a80:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8014a84:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014a88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014a8c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8014a8e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014a92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	fa2f f283 	sxtb16	r2, r3
 8014a9c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014aa0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014aa4:	601a      	str	r2, [r3, #0]
  return(result);
 8014aa6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014aaa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014aae:	681a      	ldr	r2, [r3, #0]
 8014ab0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014ab4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014ab8:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8014aba:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014abe:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8014ac2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	6013      	str	r3, [r2, #0]
 8014ace:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014ad2:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8014ad6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014ada:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	6013      	str	r3, [r2, #0]
 8014ae2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014ae6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014af0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 8014afa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014afe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014b02:	601a      	str	r2, [r3, #0]
 8014b04:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014b08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	461a      	mov	r2, r3
 8014b10:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8014b14:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8014b16:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014b1a:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8014b1e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014b22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	6013      	str	r3, [r2, #0]
 8014b2a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014b2e:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8014b32:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	6013      	str	r3, [r2, #0]
 8014b3e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014b42:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8014b46:	681a      	ldr	r2, [r3, #0]
 8014b48:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014b4c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8014b56:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014b5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014b5e:	601a      	str	r2, [r3, #0]
 8014b60:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014b64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	461a      	mov	r2, r3
 8014b6c:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8014b70:	601a      	str	r2, [r3, #0]
    return source;
 8014b72:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014b76:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014b7a:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 8014b7c:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8014b80:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014b84:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8014b90:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8014b94:	f8c7 13cc 	str.w	r1, [r7, #972]	; 0x3cc
 8014b98:	f8c7 23c8 	str.w	r2, [r7, #968]	; 0x3c8
 8014b9c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014ba0:	f8d7 13cc 	ldr.w	r1, [r7, #972]	; 0x3cc
 8014ba4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8014ba8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8014bac:	fb21 3302 	smlad	r3, r1, r2, r3
 8014bb0:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
  return(result);
 8014bb4:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8014bb8:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8014bbc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014bc0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	4619      	mov	r1, r3
 8014bc8:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8014bcc:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8014bd0:	f8c7 13dc 	str.w	r1, [r7, #988]	; 0x3dc
 8014bd4:	f8c7 23d8 	str.w	r2, [r7, #984]	; 0x3d8
 8014bd8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014bdc:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 8014be0:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8014be4:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8014be8:	fb21 3302 	smlad	r3, r1, r2, r3
 8014bec:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
  return(result);
 8014bf0:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8014bf4:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8014bf8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014bfc:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	4619      	mov	r1, r3
 8014c04:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8014c08:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8014c0c:	f8c7 13ec 	str.w	r1, [r7, #1004]	; 0x3ec
 8014c10:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 8014c14:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014c18:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8014c1c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8014c20:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8014c24:	fb21 3302 	smlad	r3, r1, r2, r3
 8014c28:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  return(result);
 8014c2c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8014c30:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 8014c34:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014c38:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	4619      	mov	r1, r3
 8014c40:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8014c44:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8014c48:	f8c7 13fc 	str.w	r1, [r7, #1020]	; 0x3fc
 8014c4c:	f8c7 23f8 	str.w	r2, [r7, #1016]	; 0x3f8
 8014c50:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014c54:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8014c58:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8014c5c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8014c60:	fb21 3302 	smlad	r3, r1, r2, r3
 8014c64:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
  return(result);
 8014c68:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8014c6c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8014c70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014c74:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
    memcpy(&val, *in_q15, 4);
 8014c78:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	461a      	mov	r2, r3
 8014c82:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014c86:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014c8a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8014c8c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	1d1a      	adds	r2, r3, #4
 8014c94:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8014c98:	601a      	str	r2, [r3, #0]
    return (val);
 8014c9a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014c9e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014ca2:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8014ca4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8014ca8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8014cac:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
    memcpy(&val, *in_q15, 4);
 8014cb0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	461a      	mov	r2, r3
 8014cba:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014cbe:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8014cc2:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8014cc4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	1d1a      	adds	r2, r3, #4
 8014ccc:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8014cd0:	601a      	str	r2, [r3, #0]
    return (val);
 8014cd2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014cd6:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8014cda:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8014cdc:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 8014ce0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014ce4:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	4619      	mov	r1, r3
 8014cec:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8014cf0:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8014cf4:	f8c7 1414 	str.w	r1, [r7, #1044]	; 0x414
 8014cf8:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 8014cfc:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014d00:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 8014d04:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8014d08:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8014d0c:	fb21 3302 	smlad	r3, r1, r2, r3
 8014d10:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
  return(result);
 8014d14:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8014d18:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8014d1c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014d20:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	4619      	mov	r1, r3
 8014d28:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8014d2c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8014d30:	f8c7 1424 	str.w	r1, [r7, #1060]	; 0x424
 8014d34:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8014d38:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014d3c:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
 8014d40:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8014d44:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8014d48:	fb21 3302 	smlad	r3, r1, r2, r3
 8014d4c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  return(result);
 8014d50:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8014d54:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 8014d58:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014d5c:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	4619      	mov	r1, r3
 8014d64:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8014d68:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8014d6c:	f8c7 1434 	str.w	r1, [r7, #1076]	; 0x434
 8014d70:	f8c7 2430 	str.w	r2, [r7, #1072]	; 0x430
 8014d74:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014d78:	f8d7 1434 	ldr.w	r1, [r7, #1076]	; 0x434
 8014d7c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8014d80:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8014d84:	fb21 3302 	smlad	r3, r1, r2, r3
 8014d88:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
  return(result);
 8014d8c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8014d90:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 8014d94:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014d98:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	4619      	mov	r1, r3
 8014da0:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8014da4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8014da8:	f8c7 1444 	str.w	r1, [r7, #1092]	; 0x444
 8014dac:	f8c7 2440 	str.w	r2, [r7, #1088]	; 0x440
 8014db0:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014db4:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 8014db8:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8014dbc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8014dc0:	fb21 3302 	smlad	r3, r1, r2, r3
 8014dc4:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
  return(result);
 8014dc8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8014dcc:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

            col_count--;
 8014dd0:	f8b7 3472 	ldrh.w	r3, [r7, #1138]	; 0x472
 8014dd4:	3b01      	subs	r3, #1
 8014dd6:	f8a7 3472 	strh.w	r3, [r7, #1138]	; 0x472
        while (col_count)
 8014dda:	f8b7 3472 	ldrh.w	r3, [r7, #1138]	; 0x472
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	f47f ac5c 	bne.w	801469c <arm_nn_mat_mult_kernel_s8_s16+0x112>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 8014de4:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	; 0x4c8
 8014de8:	f003 0303 	and.w	r3, r3, #3
 8014dec:	f8a7 3472 	strh.w	r3, [r7, #1138]	; 0x472
#else
        uint16_t col_count = num_col_a;
#endif
        while (col_count)
 8014df0:	e05c      	b.n	8014eac <arm_nn_mat_mult_kernel_s8_s16+0x922>
        {
            q7_t a0 = *ip_a0++;
 8014df2:	f8d7 2488 	ldr.w	r2, [r7, #1160]	; 0x488
 8014df6:	1c53      	adds	r3, r2, #1
 8014df8:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8014dfc:	7813      	ldrb	r3, [r2, #0]
 8014dfe:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
            q15_t b0 = *ip_b0++;
 8014e02:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014e06:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8014e0a:	6819      	ldr	r1, [r3, #0]
 8014e0c:	1c8a      	adds	r2, r1, #2
 8014e0e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014e12:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8014e16:	601a      	str	r2, [r3, #0]
 8014e18:	880b      	ldrh	r3, [r1, #0]
 8014e1a:	f8a7 3454 	strh.w	r3, [r7, #1108]	; 0x454
            q7_t a1 = *ip_a1++;
 8014e1e:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 8014e22:	1c53      	adds	r3, r2, #1
 8014e24:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 8014e28:	7813      	ldrb	r3, [r2, #0]
 8014e2a:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
            q15_t b1 = *ip_b1++;
 8014e2e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014e32:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8014e36:	6819      	ldr	r1, [r3, #0]
 8014e38:	1c8a      	adds	r2, r1, #2
 8014e3a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014e3e:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8014e42:	601a      	str	r2, [r3, #0]
 8014e44:	880b      	ldrh	r3, [r1, #0]
 8014e46:	f8a7 3450 	strh.w	r3, [r7, #1104]	; 0x450

            ch_0_out_0 += a0 * b0;
 8014e4a:	f997 2457 	ldrsb.w	r2, [r7, #1111]	; 0x457
 8014e4e:	f9b7 3454 	ldrsh.w	r3, [r7, #1108]	; 0x454
 8014e52:	fb03 f202 	mul.w	r2, r3, r2
 8014e56:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8014e5a:	4413      	add	r3, r2
 8014e5c:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
            ch_0_out_1 += a0 * b1;
 8014e60:	f997 2457 	ldrsb.w	r2, [r7, #1111]	; 0x457
 8014e64:	f9b7 3450 	ldrsh.w	r3, [r7, #1104]	; 0x450
 8014e68:	fb03 f202 	mul.w	r2, r3, r2
 8014e6c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8014e70:	4413      	add	r3, r2
 8014e72:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
            ch_1_out_0 += a1 * b0;
 8014e76:	f997 2453 	ldrsb.w	r2, [r7, #1107]	; 0x453
 8014e7a:	f9b7 3454 	ldrsh.w	r3, [r7, #1108]	; 0x454
 8014e7e:	fb03 f202 	mul.w	r2, r3, r2
 8014e82:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8014e86:	4413      	add	r3, r2
 8014e88:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
            ch_1_out_1 += a1 * b1;
 8014e8c:	f997 2453 	ldrsb.w	r2, [r7, #1107]	; 0x453
 8014e90:	f9b7 3450 	ldrsh.w	r3, [r7, #1104]	; 0x450
 8014e94:	fb03 f202 	mul.w	r2, r3, r2
 8014e98:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8014e9c:	4413      	add	r3, r2
 8014e9e:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
            col_count--;
 8014ea2:	f8b7 3472 	ldrh.w	r3, [r7, #1138]	; 0x472
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	f8a7 3472 	strh.w	r3, [r7, #1138]	; 0x472
        while (col_count)
 8014eac:	f8b7 3472 	ldrh.w	r3, [r7, #1138]	; 0x472
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d19e      	bne.n	8014df2 <arm_nn_mat_mult_kernel_s8_s16+0x868>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8014eb4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8014eb8:	6818      	ldr	r0, [r3, #0]
 8014eba:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014ebe:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	6819      	ldr	r1, [r3, #0]
 8014ec6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014eca:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8014ece:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8014ed2:	6013      	str	r3, [r2, #0]
 8014ed4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014ed8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014edc:	6018      	str	r0, [r3, #0]
 8014ede:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014ee2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8014ee6:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014ee8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014eec:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8014ef6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014efa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	fa03 f202 	lsl.w	r2, r3, r2
 8014f04:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014f08:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014f0c:	601a      	str	r2, [r3, #0]
 8014f0e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014f12:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8014f16:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014f1a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8014f22:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014f26:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8014f2e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014f32:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8014f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014f3a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8014f3c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014f40:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8014f44:	2300      	movs	r3, #0
 8014f46:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8014f48:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8014f4c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014f50:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	17da      	asrs	r2, r3, #31
 8014f58:	66bb      	str	r3, [r7, #104]	; 0x68
 8014f5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014f5c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014f60:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	17da      	asrs	r2, r3, #31
 8014f68:	663b      	str	r3, [r7, #96]	; 0x60
 8014f6a:	667a      	str	r2, [r7, #100]	; 0x64
 8014f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014f6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014f70:	fb02 f203 	mul.w	r2, r2, r3
 8014f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014f76:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8014f78:	fb04 f303 	mul.w	r3, r4, r3
 8014f7c:	4413      	add	r3, r2
 8014f7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014f80:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8014f82:	fba2 4204 	umull	r4, r2, r2, r4
 8014f86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014f8a:	4622      	mov	r2, r4
 8014f8c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8014f90:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014f94:	4413      	add	r3, r2
 8014f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8014f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014f9e:	18c3      	adds	r3, r0, r3
 8014fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8014fa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014fa6:	eb41 0303 	adc.w	r3, r1, r3
 8014faa:	637b      	str	r3, [r7, #52]	; 0x34
 8014fac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8014fb0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
    result = (int32_t)(mult.long_long >> 31);
 8014fb4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8014fb8:	f04f 0000 	mov.w	r0, #0
 8014fbc:	f04f 0100 	mov.w	r1, #0
 8014fc0:	0fd0      	lsrs	r0, r2, #31
 8014fc2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014fc6:	17d9      	asrs	r1, r3, #31
 8014fc8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014fcc:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	6013      	str	r3, [r2, #0]
    return result;
 8014fd4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014fd8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8014fdc:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014fde:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014fe2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	dc06      	bgt.n	8014ffa <arm_nn_mat_mult_kernel_s8_s16+0xa70>
 8014fec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8014ff0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	425a      	negs	r2, r3
 8014ff8:	e000      	b.n	8014ffc <arm_nn_mat_mult_kernel_s8_s16+0xa72>
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015000:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8015004:	6019      	str	r1, [r3, #0]
 8015006:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801500a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801500e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8015010:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015014:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 8015018:	2300      	movs	r3, #0
 801501a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801501c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015020:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015024:	2201      	movs	r2, #1
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	fa02 f103 	lsl.w	r1, r2, r3
 801502c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015030:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 8015034:	1e4b      	subs	r3, r1, #1
 8015036:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8015038:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801503c:	f5a3 7111 	sub.w	r1, r3, #580	; 0x244
 8015040:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015044:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8015048:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801504c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8015050:	6812      	ldr	r2, [r2, #0]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	4013      	ands	r3, r2
 8015056:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8015058:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801505c:	f5a3 710f 	sub.w	r1, r3, #572	; 0x23c
 8015060:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015064:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8015068:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801506c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015070:	6812      	ldr	r2, [r2, #0]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	fa42 f303 	asr.w	r3, r2, r3
 8015078:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801507a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801507e:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8015082:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015086:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	105b      	asrs	r3, r3, #1
 801508e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8015090:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015094:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	2b00      	cmp	r3, #0
 801509c:	da0a      	bge.n	80150b4 <arm_nn_mat_mult_kernel_s8_s16+0xb2a>
        threshold++;
 801509e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80150a2:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 80150a6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80150aa:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	3301      	adds	r3, #1
 80150b2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80150b4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80150b8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80150bc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80150c0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80150c4:	6812      	ldr	r2, [r2, #0]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	429a      	cmp	r2, r3
 80150ca:	dd0a      	ble.n	80150e2 <arm_nn_mat_mult_kernel_s8_s16+0xb58>
        result++;
 80150cc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80150d0:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 80150d4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80150d8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	3301      	adds	r3, #1
 80150e0:	6013      	str	r3, [r2, #0]
    return result;
 80150e2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80150e6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80150ea:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80150ec:	bf00      	nop
 80150ee:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
        ch_0_out_0 += out_offset;
 80150f2:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 80150f6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80150fa:	4413      	add	r3, r2
 80150fc:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8015100:	f9b7 24c0 	ldrsh.w	r2, [r7, #1216]	; 0x4c0
 8015104:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8015108:	4293      	cmp	r3, r2
 801510a:	bfb8      	it	lt
 801510c:	4613      	movlt	r3, r2
 801510e:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8015112:	f9b7 24c4 	ldrsh.w	r2, [r7, #1220]	; 0x4c4
 8015116:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 801511a:	4293      	cmp	r3, r2
 801511c:	bfa8      	it	ge
 801511e:	4613      	movge	r3, r2
 8015120:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
        *out_0++ = (q7_t)ch_0_out_0;
 8015124:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8015128:	1c53      	adds	r3, r2, #1
 801512a:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 801512e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8015132:	b25b      	sxtb	r3, r3
 8015134:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8015136:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801513a:	6818      	ldr	r0, [r3, #0]
 801513c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015140:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	6819      	ldr	r1, [r3, #0]
 8015148:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801514c:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8015150:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015154:	6013      	str	r3, [r2, #0]
 8015156:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801515a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801515e:	6018      	str	r0, [r3, #0]
 8015160:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015164:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8015168:	6019      	str	r1, [r3, #0]
 801516a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801516e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8015178:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801517c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	fa03 f202 	lsl.w	r2, r3, r2
 8015186:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801518a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801518e:	601a      	str	r2, [r3, #0]
 8015190:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015194:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8015198:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801519c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80151a4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80151a8:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80151ac:	2300      	movs	r3, #0
 80151ae:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80151b0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80151b4:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 80151b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80151bc:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80151be:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80151c2:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 80151c6:	2300      	movs	r3, #0
 80151c8:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80151ca:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80151ce:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80151d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	17da      	asrs	r2, r3, #31
 80151da:	67bb      	str	r3, [r7, #120]	; 0x78
 80151dc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80151de:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80151e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	17da      	asrs	r2, r3, #31
 80151ea:	673b      	str	r3, [r7, #112]	; 0x70
 80151ec:	677a      	str	r2, [r7, #116]	; 0x74
 80151ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80151f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80151f2:	fb02 f203 	mul.w	r2, r2, r3
 80151f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151f8:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80151fa:	fb04 f303 	mul.w	r3, r4, r3
 80151fe:	4413      	add	r3, r2
 8015200:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015202:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8015204:	fba2 5604 	umull	r5, r6, r2, r4
 8015208:	4433      	add	r3, r6
 801520a:	461e      	mov	r6, r3
 801520c:	1943      	adds	r3, r0, r5
 801520e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015210:	eb41 0306 	adc.w	r3, r1, r6
 8015214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015216:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801521a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
    result = (int32_t)(mult.long_long >> 31);
 801521e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8015222:	f04f 0000 	mov.w	r0, #0
 8015226:	f04f 0100 	mov.w	r1, #0
 801522a:	0fd0      	lsrs	r0, r2, #31
 801522c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015230:	17d9      	asrs	r1, r3, #31
 8015232:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015236:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 801523a:	4603      	mov	r3, r0
 801523c:	6013      	str	r3, [r2, #0]
    return result;
 801523e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015242:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8015246:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015248:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801524c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	2b00      	cmp	r3, #0
 8015254:	dc06      	bgt.n	8015264 <arm_nn_mat_mult_kernel_s8_s16+0xcda>
 8015256:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801525a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	425a      	negs	r2, r3
 8015262:	e000      	b.n	8015266 <arm_nn_mat_mult_kernel_s8_s16+0xcdc>
 8015264:	2200      	movs	r2, #0
 8015266:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801526a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801526e:	6019      	str	r1, [r3, #0]
 8015270:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015274:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8015278:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801527a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801527e:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8015282:	2300      	movs	r3, #0
 8015284:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015286:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801528a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801528e:	2201      	movs	r2, #1
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	fa02 f103 	lsl.w	r1, r2, r3
 8015296:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801529a:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 801529e:	1e4b      	subs	r3, r1, #1
 80152a0:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80152a2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80152a6:	f5a3 7105 	sub.w	r1, r3, #532	; 0x214
 80152aa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80152ae:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80152b2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80152b6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80152ba:	6812      	ldr	r2, [r2, #0]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	4013      	ands	r3, r2
 80152c0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80152c2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80152c6:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 80152ca:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80152ce:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80152d2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80152d6:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80152da:	6812      	ldr	r2, [r2, #0]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	fa42 f303 	asr.w	r3, r2, r3
 80152e2:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80152e4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80152e8:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80152ec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80152f0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	105b      	asrs	r3, r3, #1
 80152f8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80152fa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80152fe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	da0a      	bge.n	801531e <arm_nn_mat_mult_kernel_s8_s16+0xd94>
        threshold++;
 8015308:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801530c:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8015310:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015314:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	3301      	adds	r3, #1
 801531c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801531e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015322:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8015326:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801532a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801532e:	6812      	ldr	r2, [r2, #0]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	429a      	cmp	r2, r3
 8015334:	dd0a      	ble.n	801534c <arm_nn_mat_mult_kernel_s8_s16+0xdc2>
        result++;
 8015336:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801533a:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 801533e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015342:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	3301      	adds	r3, #1
 801534a:	6013      	str	r3, [r2, #0]
    return result;
 801534c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015350:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8015354:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015356:	bf00      	nop
 8015358:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
        ch_0_out_1 += out_offset;
 801535c:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8015360:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8015364:	4413      	add	r3, r2
 8015366:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801536a:	f9b7 24c0 	ldrsh.w	r2, [r7, #1216]	; 0x4c0
 801536e:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015372:	4293      	cmp	r3, r2
 8015374:	bfb8      	it	lt
 8015376:	4613      	movlt	r3, r2
 8015378:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801537c:	f9b7 24c4 	ldrsh.w	r2, [r7, #1220]	; 0x4c4
 8015380:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8015384:	4293      	cmp	r3, r2
 8015386:	bfa8      	it	ge
 8015388:	4613      	movge	r3, r2
 801538a:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
        *out_1++ = (q7_t)ch_0_out_1;
 801538e:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8015392:	1c53      	adds	r3, r2, #1
 8015394:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8015398:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 801539c:	b25b      	sxtb	r3, r3
 801539e:	7013      	strb	r3, [r2, #0]
        out_mult++;
 80153a0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80153a4:	3304      	adds	r3, #4
 80153a6:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
        out_shift++;
 80153aa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80153ae:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 80153b2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80153b6:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	3304      	adds	r3, #4
 80153be:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 80153c0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80153c4:	6818      	ldr	r0, [r3, #0]
 80153c6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80153ca:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	6819      	ldr	r1, [r3, #0]
 80153d2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80153d6:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 80153da:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80153de:	6013      	str	r3, [r2, #0]
 80153e0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80153e4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80153e8:	6018      	str	r0, [r3, #0]
 80153ea:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80153ee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80153f2:	6019      	str	r1, [r3, #0]
 80153f4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80153f8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8015402:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015406:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	fa03 f202 	lsl.w	r2, r3, r2
 8015410:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015414:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8015418:	601a      	str	r2, [r3, #0]
 801541a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801541e:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 8015422:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015426:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801542e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015432:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8015436:	2300      	movs	r3, #0
 8015438:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801543a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801543e:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8015442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015446:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8015448:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801544c:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8015450:	2300      	movs	r3, #0
 8015452:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8015454:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8015458:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801545c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	17da      	asrs	r2, r3, #31
 8015464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015468:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801546c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015470:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	17da      	asrs	r2, r3, #31
 8015478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801547c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8015480:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015484:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015488:	fb02 f203 	mul.w	r2, r2, r3
 801548c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015490:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8015494:	fb04 f303 	mul.w	r3, r4, r3
 8015498:	4413      	add	r3, r2
 801549a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801549e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80154a2:	fba2 ab04 	umull	sl, fp, r2, r4
 80154a6:	445b      	add	r3, fp
 80154a8:	469b      	mov	fp, r3
 80154aa:	eb10 030a 	adds.w	r3, r0, sl
 80154ae:	643b      	str	r3, [r7, #64]	; 0x40
 80154b0:	eb41 030b 	adc.w	r3, r1, fp
 80154b4:	647b      	str	r3, [r7, #68]	; 0x44
 80154b6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80154ba:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
    result = (int32_t)(mult.long_long >> 31);
 80154be:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80154c2:	f04f 0000 	mov.w	r0, #0
 80154c6:	f04f 0100 	mov.w	r1, #0
 80154ca:	0fd0      	lsrs	r0, r2, #31
 80154cc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80154d0:	17d9      	asrs	r1, r3, #31
 80154d2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80154d6:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 80154da:	4603      	mov	r3, r0
 80154dc:	6013      	str	r3, [r2, #0]
    return result;
 80154de:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80154e2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80154e6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80154e8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80154ec:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	dc06      	bgt.n	8015504 <arm_nn_mat_mult_kernel_s8_s16+0xf7a>
 80154f6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80154fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	425a      	negs	r2, r3
 8015502:	e000      	b.n	8015506 <arm_nn_mat_mult_kernel_s8_s16+0xf7c>
 8015504:	2200      	movs	r2, #0
 8015506:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801550a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801550e:	6019      	str	r1, [r3, #0]
 8015510:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015514:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015518:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801551a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801551e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8015522:	2300      	movs	r3, #0
 8015524:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015526:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801552a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801552e:	2201      	movs	r2, #1
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	fa02 f103 	lsl.w	r1, r2, r3
 8015536:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801553a:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 801553e:	1e4b      	subs	r3, r1, #1
 8015540:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8015542:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015546:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 801554a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801554e:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8015552:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015556:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801555a:	6812      	ldr	r2, [r2, #0]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	4013      	ands	r3, r2
 8015560:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8015562:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015566:	f5a3 71ee 	sub.w	r1, r3, #476	; 0x1dc
 801556a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801556e:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8015572:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015576:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801557a:	6812      	ldr	r2, [r2, #0]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	fa42 f303 	asr.w	r3, r2, r3
 8015582:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8015584:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015588:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 801558c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015590:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	105b      	asrs	r3, r3, #1
 8015598:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801559a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801559e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	da0a      	bge.n	80155be <arm_nn_mat_mult_kernel_s8_s16+0x1034>
        threshold++;
 80155a8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80155ac:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80155b0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80155b4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	3301      	adds	r3, #1
 80155bc:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80155be:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80155c2:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 80155c6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80155ca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80155ce:	6812      	ldr	r2, [r2, #0]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	dd0a      	ble.n	80155ec <arm_nn_mat_mult_kernel_s8_s16+0x1062>
        result++;
 80155d6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80155da:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80155de:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80155e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	3301      	adds	r3, #1
 80155ea:	6013      	str	r3, [r2, #0]
    return result;
 80155ec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80155f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80155f4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80155f6:	bf00      	nop
 80155f8:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
        ch_1_out_0 += out_offset;
 80155fc:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8015600:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8015604:	4413      	add	r3, r2
 8015606:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 801560a:	f9b7 24c0 	ldrsh.w	r2, [r7, #1216]	; 0x4c0
 801560e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8015612:	4293      	cmp	r3, r2
 8015614:	bfb8      	it	lt
 8015616:	4613      	movlt	r3, r2
 8015618:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 801561c:	f9b7 24c4 	ldrsh.w	r2, [r7, #1220]	; 0x4c4
 8015620:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8015624:	4293      	cmp	r3, r2
 8015626:	bfa8      	it	ge
 8015628:	4613      	movge	r3, r2
 801562a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
        *out_0++ = (q7_t)ch_1_out_0;
 801562e:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8015632:	1c53      	adds	r3, r2, #1
 8015634:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 8015638:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 801563c:	b25b      	sxtb	r3, r3
 801563e:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 8015640:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8015644:	6818      	ldr	r0, [r3, #0]
 8015646:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801564a:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	6819      	ldr	r1, [r3, #0]
 8015652:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015656:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801565a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801565e:	6013      	str	r3, [r2, #0]
 8015660:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015664:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8015668:	6018      	str	r0, [r3, #0]
 801566a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801566e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8015672:	6019      	str	r1, [r3, #0]
 8015674:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015678:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8015682:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015686:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	fa03 f202 	lsl.w	r2, r3, r2
 8015690:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015694:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8015698:	601a      	str	r2, [r3, #0]
 801569a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801569e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80156a2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80156a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80156ae:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80156b2:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 80156b6:	2300      	movs	r3, #0
 80156b8:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80156ba:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80156be:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 80156c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80156c6:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80156c8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80156cc:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 80156d0:	2300      	movs	r3, #0
 80156d2:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80156d4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80156d8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80156dc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	17da      	asrs	r2, r3, #31
 80156e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80156e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80156ec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80156f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	17da      	asrs	r2, r3, #31
 80156f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80156fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015704:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015708:	fb02 f203 	mul.w	r2, r2, r3
 801570c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015710:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8015714:	fb04 f303 	mul.w	r3, r4, r3
 8015718:	4413      	add	r3, r2
 801571a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801571e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8015722:	fba2 8904 	umull	r8, r9, r2, r4
 8015726:	444b      	add	r3, r9
 8015728:	4699      	mov	r9, r3
 801572a:	eb10 0308 	adds.w	r3, r0, r8
 801572e:	64bb      	str	r3, [r7, #72]	; 0x48
 8015730:	eb41 0309 	adc.w	r3, r1, r9
 8015734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015736:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 801573a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    result = (int32_t)(mult.long_long >> 31);
 801573e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8015742:	f04f 0000 	mov.w	r0, #0
 8015746:	f04f 0100 	mov.w	r1, #0
 801574a:	0fd0      	lsrs	r0, r2, #31
 801574c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015750:	17d9      	asrs	r1, r3, #31
 8015752:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015756:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 801575a:	4603      	mov	r3, r0
 801575c:	6013      	str	r3, [r2, #0]
    return result;
 801575e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015762:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8015766:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015768:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801576c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	2b00      	cmp	r3, #0
 8015774:	dc06      	bgt.n	8015784 <arm_nn_mat_mult_kernel_s8_s16+0x11fa>
 8015776:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801577a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	425a      	negs	r2, r3
 8015782:	e000      	b.n	8015786 <arm_nn_mat_mult_kernel_s8_s16+0x11fc>
 8015784:	2200      	movs	r2, #0
 8015786:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801578a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801578e:	6019      	str	r1, [r3, #0]
 8015790:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015794:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015798:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801579a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801579e:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80157a2:	2300      	movs	r3, #0
 80157a4:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80157a6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80157aa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80157ae:	2201      	movs	r2, #1
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	fa02 f103 	lsl.w	r1, r2, r3
 80157b6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80157ba:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 80157be:	1e4b      	subs	r3, r1, #1
 80157c0:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80157c2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80157c6:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 80157ca:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80157ce:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80157d2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80157d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80157da:	6812      	ldr	r2, [r2, #0]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	4013      	ands	r3, r2
 80157e0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80157e2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80157e6:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 80157ea:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80157ee:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80157f2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80157f6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80157fa:	6812      	ldr	r2, [r2, #0]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	fa42 f303 	asr.w	r3, r2, r3
 8015802:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8015804:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015808:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 801580c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015810:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	105b      	asrs	r3, r3, #1
 8015818:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801581a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801581e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	2b00      	cmp	r3, #0
 8015826:	da0a      	bge.n	801583e <arm_nn_mat_mult_kernel_s8_s16+0x12b4>
        threshold++;
 8015828:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801582c:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 8015830:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015834:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	3301      	adds	r3, #1
 801583c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801583e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015842:	f5a3 72da 	sub.w	r2, r3, #436	; 0x1b4
 8015846:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801584a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801584e:	6812      	ldr	r2, [r2, #0]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	429a      	cmp	r2, r3
 8015854:	dd0a      	ble.n	801586c <arm_nn_mat_mult_kernel_s8_s16+0x12e2>
        result++;
 8015856:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801585a:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 801585e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015862:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	3301      	adds	r3, #1
 801586a:	6013      	str	r3, [r2, #0]
    return result;
 801586c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015870:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015874:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015876:	bf00      	nop
 8015878:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        ch_1_out_1 += out_offset;
 801587c:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8015880:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8015884:	4413      	add	r3, r2
 8015886:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 801588a:	f9b7 24c0 	ldrsh.w	r2, [r7, #1216]	; 0x4c0
 801588e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8015892:	4293      	cmp	r3, r2
 8015894:	bfb8      	it	lt
 8015896:	4613      	movlt	r3, r2
 8015898:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 801589c:	f9b7 24c4 	ldrsh.w	r2, [r7, #1220]	; 0x4c4
 80158a0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80158a4:	4293      	cmp	r3, r2
 80158a6:	bfa8      	it	ge
 80158a8:	4613      	movge	r3, r2
 80158aa:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        *out_1++ = (q7_t)ch_1_out_1;
 80158ae:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 80158b2:	1c53      	adds	r3, r2, #1
 80158b4:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 80158b8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80158bc:	b25b      	sxtb	r3, r3
 80158be:	7013      	strb	r3, [r2, #0]
        out_mult++;
 80158c0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80158c4:	3304      	adds	r3, #4
 80158c6:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
        out_shift++;
 80158ca:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80158ce:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 80158d2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80158d6:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	3304      	adds	r3, #4
 80158de:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 80158e0:	f8b7 24c8 	ldrh.w	r2, [r7, #1224]	; 0x4c8
 80158e4:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80158e8:	4413      	add	r3, r2
 80158ea:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
        row_count--;
 80158ee:	f8b7 348e 	ldrh.w	r3, [r7, #1166]	; 0x48e
 80158f2:	3b01      	subs	r3, #1
 80158f4:	f8a7 348e 	strh.w	r3, [r7, #1166]	; 0x48e
    while (row_count)
 80158f8:	f8b7 348e 	ldrh.w	r3, [r7, #1166]	; 0x48e
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	f47e ae7e 	bne.w	80145fe <arm_nn_mat_mult_kernel_s8_s16+0x74>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 8015902:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015906:	f2a3 33ea 	subw	r3, r3, #1002	; 0x3ea
 801590a:	881b      	ldrh	r3, [r3, #0]
 801590c:	f003 0301 	and.w	r3, r3, #1
 8015910:	2b00      	cmp	r3, #0
 8015912:	f000 85c6 	beq.w	80164a2 <arm_nn_mat_mult_kernel_s8_s16+0x1f18>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 8015916:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801591a:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 801591e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015922:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801592a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801592e:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8015932:	681a      	ldr	r2, [r3, #0]
 8015934:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	; 0x4c8
 8015938:	005b      	lsls	r3, r3, #1
 801593a:	441a      	add	r2, r3
 801593c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015940:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8015944:	601a      	str	r2, [r3, #0]

        q31_t ch_0_out_0 = 0;
 8015946:	2300      	movs	r3, #0
 8015948:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
        q31_t ch_0_out_1 = 0;
 801594c:	2300      	movs	r3, #0
 801594e:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

        /* load the bias */
        if (bias)
 8015952:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8015956:	2b00      	cmp	r3, #0
 8015958:	d00c      	beq.n	8015974 <arm_nn_mat_mult_kernel_s8_s16+0x13ea>
        {
            ch_0_out_0 = *bias;
 801595a:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
            ch_0_out_1 = *bias++;
 8015964:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 8015968:	1d13      	adds	r3, r2, #4
 801596a:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 801596e:	6813      	ldr	r3, [r2, #0]
 8015970:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
        }

#if defined(ARM_MATH_DSP)
        uint16_t col_count = num_col_a >> 2;
 8015974:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	; 0x4c8
 8015978:	089b      	lsrs	r3, r3, #2
 801597a:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
        while (col_count)
 801597e:	e2b2      	b.n	8015ee6 <arm_nn_mat_mult_kernel_s8_s16+0x195c>
 8015980:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015984:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8015988:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801598c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 801598e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015992:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	461a      	mov	r2, r3
 801599e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80159a2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80159a6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80159a8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80159ac:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	1d1a      	adds	r2, r3, #4
 80159b6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80159ba:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	601a      	str	r2, [r3, #0]
    return (val);
 80159c2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80159c6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80159ca:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 80159cc:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80159d0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80159d4:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80159d8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80159dc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80159de:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80159e2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	461a      	mov	r2, r3
 80159ee:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80159f2:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80159f6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80159f8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80159fc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	1d1a      	adds	r2, r3, #4
 8015a06:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a0a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	601a      	str	r2, [r3, #0]
    return (val);
 8015a12:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a16:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8015a1a:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8015a1c:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8015a20:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a24:	f5a3 7275 	sub.w	r2, r3, #980	; 0x3d4
 8015a28:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8015a2c:	6013      	str	r3, [r2, #0]
 8015a2e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a32:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8015a36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015a3a:	6013      	str	r3, [r2, #0]
 8015a3c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a40:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8015a44:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8015a48:	6013      	str	r3, [r2, #0]
 8015a4a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a4e:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8015a52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015a56:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8015a58:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a5c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	461a      	mov	r2, r3
 8015a68:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a6c:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8015a70:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8015a72:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a76:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	1d1a      	adds	r2, r3, #4
 8015a80:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a84:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	601a      	str	r2, [r3, #0]
    return (val);
 8015a8c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a90:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8015a94:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8015a96:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015a9a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8015a9e:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 8015aa0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015aa4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8015aa8:	681a      	ldr	r2, [r3, #0]
 8015aaa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015aae:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8015ab2:	601a      	str	r2, [r3, #0]
 8015ab4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ab8:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8015abc:	2308      	movs	r3, #8
 8015abe:	6013      	str	r3, [r2, #0]
 8015ac0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ac4:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8015ac8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015acc:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	6013      	str	r3, [r2, #0]
 8015ad4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ad8:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8015adc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ae0:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8015ae8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015aec:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8015af0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015af4:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	f003 031f 	and.w	r3, r3, #31
 8015afe:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8015b00:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b04:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d105      	bne.n	8015b1a <arm_nn_mat_mult_kernel_s8_s16+0x1590>
    return op1;
 8015b0e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b12:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8015b16:	681a      	ldr	r2, [r3, #0]
 8015b18:	e00a      	b.n	8015b30 <arm_nn_mat_mult_kernel_s8_s16+0x15a6>
  return (op1 >> op2) | (op1 << (32U - op2));
 8015b1a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b1e:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8015b22:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b26:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8015b2a:	6812      	ldr	r2, [r2, #0]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	41da      	rors	r2, r3
 8015b30:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b34:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8015b38:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015b3a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b3e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	fa2f f283 	sxtb16	r2, r3
 8015b48:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b4c:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8015b50:	601a      	str	r2, [r3, #0]
  return(result);
 8015b52:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b56:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8015b5a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8015b5c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b60:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8015b64:	601a      	str	r2, [r3, #0]
  return result;
 8015b66:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b6a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b74:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8015b78:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8015b7a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b7e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8015b82:	681a      	ldr	r2, [r3, #0]
 8015b84:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b88:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8015b8c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015b8e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015b92:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	fa2f f283 	sxtb16	r2, r3
 8015b9c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ba0:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8015ba4:	601a      	str	r2, [r3, #0]
  return(result);
 8015ba6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015baa:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8015bae:	681a      	ldr	r2, [r3, #0]
 8015bb0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015bb4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015bb8:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8015bba:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015bbe:	f5a3 7234 	sub.w	r2, r3, #720	; 0x2d0
 8015bc2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015bc6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	6013      	str	r3, [r2, #0]
 8015bce:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015bd2:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 8015bd6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015bda:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	6013      	str	r3, [r2, #0]
 8015be2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015be6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8015bea:	681a      	ldr	r2, [r3, #0]
 8015bec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015bf0:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 8015bfa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015bfe:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8015c02:	601a      	str	r2, [r3, #0]
 8015c04:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c08:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	461a      	mov	r2, r3
 8015c10:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c14:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8015c1c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c20:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 8015c24:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c28:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	6013      	str	r3, [r2, #0]
 8015c30:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c34:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8015c38:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c3c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	6013      	str	r3, [r2, #0]
 8015c44:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c48:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8015c4c:	681a      	ldr	r2, [r3, #0]
 8015c4e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c52:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8015c5c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c60:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8015c64:	601a      	str	r2, [r3, #0]
 8015c66:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c6a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	461a      	mov	r2, r3
 8015c72:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c76:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	601a      	str	r2, [r3, #0]
    return source;
 8015c7e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c82:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8015c86:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 8015c88:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8015c8c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015c90:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	4618      	mov	r0, r3
 8015c98:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8015c9c:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 8015ca0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ca4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8015ca8:	6018      	str	r0, [r3, #0]
 8015caa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015cae:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8015cb2:	601a      	str	r2, [r3, #0]
 8015cb4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015cb8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8015cbc:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015cbe:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015cc2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8015cc6:	6819      	ldr	r1, [r3, #0]
 8015cc8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ccc:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8015cd0:	681a      	ldr	r2, [r3, #0]
 8015cd2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015cd6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	fb21 3202 	smlad	r2, r1, r2, r3
 8015ce0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ce4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8015ce8:	601a      	str	r2, [r3, #0]
  return(result);
 8015cea:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015cee:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8015cf8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015cfc:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	4618      	mov	r0, r3
 8015d04:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8015d08:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 8015d0c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d10:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8015d14:	6018      	str	r0, [r3, #0]
 8015d16:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d1a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8015d1e:	601a      	str	r2, [r3, #0]
 8015d20:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d24:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8015d28:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015d2a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d2e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8015d32:	6819      	ldr	r1, [r3, #0]
 8015d34:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d38:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8015d3c:	681a      	ldr	r2, [r3, #0]
 8015d3e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d42:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	fb21 3202 	smlad	r2, r1, r2, r3
 8015d4c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d50:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8015d54:	601a      	str	r2, [r3, #0]
  return(result);
 8015d56:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d5a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8015d64:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d68:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8015d6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8015d70:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8015d72:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d76:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	461a      	mov	r2, r3
 8015d82:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d86:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8015d8a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8015d8c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d90:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	1d1a      	adds	r2, r3, #4
 8015d9a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015d9e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	601a      	str	r2, [r3, #0]
    return (val);
 8015da6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015daa:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8015dae:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8015db0:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8015db4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015db8:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8015dbc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8015dc0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8015dc2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015dc6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	461a      	mov	r2, r3
 8015dd2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015dd6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8015dda:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8015ddc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015de0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	1d1a      	adds	r2, r3, #4
 8015dea:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015dee:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	601a      	str	r2, [r3, #0]
    return (val);
 8015df6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015dfa:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8015dfe:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8015e00:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 8015e04:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e08:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8015e14:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 8015e18:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e1c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8015e20:	6018      	str	r0, [r3, #0]
 8015e22:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e26:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8015e2a:	601a      	str	r2, [r3, #0]
 8015e2c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e30:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8015e34:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015e36:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e3a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8015e3e:	6819      	ldr	r1, [r3, #0]
 8015e40:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e44:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8015e48:	681a      	ldr	r2, [r3, #0]
 8015e4a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e4e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	fb21 3202 	smlad	r2, r1, r2, r3
 8015e58:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e5c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8015e60:	601a      	str	r2, [r3, #0]
  return(result);
 8015e62:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e66:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8015e70:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e74:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8015e80:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 8015e84:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015e8c:	6018      	str	r0, [r3, #0]
 8015e8e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e92:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8015e96:	601a      	str	r2, [r3, #0]
 8015e98:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015e9c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8015ea0:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015ea2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ea6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015eaa:	6819      	ldr	r1, [r3, #0]
 8015eac:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015eb0:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8015eb4:	681a      	ldr	r2, [r3, #0]
 8015eb6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015eba:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	fb21 3202 	smlad	r2, r1, r2, r3
 8015ec4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ec8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8015ecc:	601a      	str	r2, [r3, #0]
  return(result);
 8015ece:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ed2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

            col_count--;
 8015edc:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8015ee0:	3b01      	subs	r3, #1
 8015ee2:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
        while (col_count)
 8015ee6:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	f47f ad48 	bne.w	8015980 <arm_nn_mat_mult_kernel_s8_s16+0x13f6>
        }
        col_count = num_col_a & 0x3;
 8015ef0:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	; 0x4c8
 8015ef4:	f003 0303 	and.w	r3, r3, #3
 8015ef8:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
#else
        uint16_t col_count = num_col_a;
#endif
        while (col_count)
 8015efc:	e03e      	b.n	8015f7c <arm_nn_mat_mult_kernel_s8_s16+0x19f2>
        {
            q7_t a0 = *ip_a0++;
 8015efe:	f8d7 2488 	ldr.w	r2, [r7, #1160]	; 0x488
 8015f02:	1c53      	adds	r3, r2, #1
 8015f04:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8015f08:	7813      	ldrb	r3, [r2, #0]
 8015f0a:	f887 3465 	strb.w	r3, [r7, #1125]	; 0x465
            q15_t b0 = *ip_b0++;
 8015f0e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015f12:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8015f16:	6819      	ldr	r1, [r3, #0]
 8015f18:	1c8a      	adds	r2, r1, #2
 8015f1a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015f1e:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8015f22:	601a      	str	r2, [r3, #0]
 8015f24:	880b      	ldrh	r3, [r1, #0]
 8015f26:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
            q15_t b1 = *ip_b1++;
 8015f2a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015f2e:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8015f32:	6819      	ldr	r1, [r3, #0]
 8015f34:	1c8a      	adds	r2, r1, #2
 8015f36:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015f3a:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8015f3e:	601a      	str	r2, [r3, #0]
 8015f40:	880b      	ldrh	r3, [r1, #0]
 8015f42:	f8a7 3460 	strh.w	r3, [r7, #1120]	; 0x460

            ch_0_out_0 += a0 * b0;
 8015f46:	f997 2465 	ldrsb.w	r2, [r7, #1125]	; 0x465
 8015f4a:	f9b7 3462 	ldrsh.w	r3, [r7, #1122]	; 0x462
 8015f4e:	fb03 f202 	mul.w	r2, r3, r2
 8015f52:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8015f56:	4413      	add	r3, r2
 8015f58:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
            ch_0_out_1 += a0 * b1;
 8015f5c:	f997 2465 	ldrsb.w	r2, [r7, #1125]	; 0x465
 8015f60:	f9b7 3460 	ldrsh.w	r3, [r7, #1120]	; 0x460
 8015f64:	fb03 f202 	mul.w	r2, r3, r2
 8015f68:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8015f6c:	4413      	add	r3, r2
 8015f6e:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
            col_count--;
 8015f72:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8015f76:	3b01      	subs	r3, #1
 8015f78:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
        while (col_count)
 8015f7c:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d1bc      	bne.n	8015efe <arm_nn_mat_mult_kernel_s8_s16+0x1974>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8015f84:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8015f88:	6818      	ldr	r0, [r3, #0]
 8015f8a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015f8e:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	6819      	ldr	r1, [r3, #0]
 8015f96:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015f9a:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8015f9e:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8015fa2:	6013      	str	r3, [r2, #0]
 8015fa4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015fa8:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8015fac:	6018      	str	r0, [r3, #0]
 8015fae:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015fb2:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8015fb6:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015fb8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015fbc:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8015fc6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015fca:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	fa03 f202 	lsl.w	r2, r3, r2
 8015fd4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015fd8:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8015fdc:	601a      	str	r2, [r3, #0]
 8015fde:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015fe2:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 8015fe6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015fea:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015ff2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015ff6:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8015ffe:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016002:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8016006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801600a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801600c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016010:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8016014:	2300      	movs	r3, #0
 8016016:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8016018:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801601c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016020:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	17da      	asrs	r2, r3, #31
 8016028:	613b      	str	r3, [r7, #16]
 801602a:	617a      	str	r2, [r7, #20]
 801602c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016030:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	17da      	asrs	r2, r3, #31
 8016038:	60bb      	str	r3, [r7, #8]
 801603a:	60fa      	str	r2, [r7, #12]
 801603c:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8016040:	4633      	mov	r3, r6
 8016042:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8016046:	4642      	mov	r2, r8
 8016048:	fb02 f203 	mul.w	r2, r2, r3
 801604c:	464b      	mov	r3, r9
 801604e:	462c      	mov	r4, r5
 8016050:	fb04 f303 	mul.w	r3, r4, r3
 8016054:	4413      	add	r3, r2
 8016056:	462a      	mov	r2, r5
 8016058:	4644      	mov	r4, r8
 801605a:	fba2 4204 	umull	r4, r2, r2, r4
 801605e:	657a      	str	r2, [r7, #84]	; 0x54
 8016060:	4622      	mov	r2, r4
 8016062:	653a      	str	r2, [r7, #80]	; 0x50
 8016064:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016066:	4413      	add	r3, r2
 8016068:	657b      	str	r3, [r7, #84]	; 0x54
 801606a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 801606e:	4623      	mov	r3, r4
 8016070:	18c3      	adds	r3, r0, r3
 8016072:	603b      	str	r3, [r7, #0]
 8016074:	462b      	mov	r3, r5
 8016076:	eb41 0303 	adc.w	r3, r1, r3
 801607a:	607b      	str	r3, [r7, #4]
 801607c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016080:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
    result = (int32_t)(mult.long_long >> 31);
 8016084:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8016088:	f04f 0200 	mov.w	r2, #0
 801608c:	f04f 0300 	mov.w	r3, #0
 8016090:	0fc2      	lsrs	r2, r0, #31
 8016092:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8016096:	17cb      	asrs	r3, r1, #31
 8016098:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 801609c:	f5a1 714d 	sub.w	r1, r1, #820	; 0x334
 80160a0:	4613      	mov	r3, r2
 80160a2:	600b      	str	r3, [r1, #0]
    return result;
 80160a4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80160a8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80160ac:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80160ae:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80160b2:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	dc06      	bgt.n	80160ca <arm_nn_mat_mult_kernel_s8_s16+0x1b40>
 80160bc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80160c0:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	425b      	negs	r3, r3
 80160c8:	e000      	b.n	80160cc <arm_nn_mat_mult_kernel_s8_s16+0x1b42>
 80160ca:	2300      	movs	r3, #0
 80160cc:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80160d0:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 80160d4:	6011      	str	r1, [r2, #0]
 80160d6:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80160da:	f5a2 724f 	sub.w	r2, r2, #828	; 0x33c
 80160de:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80160e0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80160e4:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80160e8:	2200      	movs	r2, #0
 80160ea:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80160ec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80160f0:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80160f4:	2201      	movs	r2, #1
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	409a      	lsls	r2, r3
 80160fa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80160fe:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8016102:	3a01      	subs	r2, #1
 8016104:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8016106:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801610a:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 801610e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8016112:	f5a2 714e 	sub.w	r1, r2, #824	; 0x338
 8016116:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 801611a:	f5a2 7251 	sub.w	r2, r2, #836	; 0x344
 801611e:	6809      	ldr	r1, [r1, #0]
 8016120:	6812      	ldr	r2, [r2, #0]
 8016122:	400a      	ands	r2, r1
 8016124:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8016126:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801612a:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 801612e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8016132:	f5a2 714e 	sub.w	r1, r2, #824	; 0x338
 8016136:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 801613a:	f5a2 724f 	sub.w	r2, r2, #828	; 0x33c
 801613e:	6809      	ldr	r1, [r1, #0]
 8016140:	6812      	ldr	r2, [r2, #0]
 8016142:	fa41 f202 	asr.w	r2, r1, r2
 8016146:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8016148:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801614c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8016150:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8016154:	f5a2 7251 	sub.w	r2, r2, #836	; 0x344
 8016158:	6812      	ldr	r2, [r2, #0]
 801615a:	1052      	asrs	r2, r2, #1
 801615c:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801615e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016162:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	2b00      	cmp	r3, #0
 801616a:	da0a      	bge.n	8016182 <arm_nn_mat_mult_kernel_s8_s16+0x1bf8>
        threshold++;
 801616c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016170:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8016174:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8016178:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 801617c:	6812      	ldr	r2, [r2, #0]
 801617e:	3201      	adds	r2, #1
 8016180:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8016182:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016186:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 801618a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801618e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8016192:	6812      	ldr	r2, [r2, #0]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	429a      	cmp	r2, r3
 8016198:	dd0a      	ble.n	80161b0 <arm_nn_mat_mult_kernel_s8_s16+0x1c26>
        result++;
 801619a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801619e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80161a2:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80161a6:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 80161aa:	6812      	ldr	r2, [r2, #0]
 80161ac:	3201      	adds	r2, #1
 80161ae:	601a      	str	r2, [r3, #0]
    return result;
 80161b0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80161b4:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80161b8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80161ba:	bf00      	nop
 80161bc:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
        ch_0_out_0 += out_offset;
 80161c0:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 80161c4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80161c8:	4413      	add	r3, r2
 80161ca:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80161ce:	f9b7 34c0 	ldrsh.w	r3, [r7, #1216]	; 0x4c0
 80161d2:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 80161d6:	4293      	cmp	r3, r2
 80161d8:	bfb8      	it	lt
 80161da:	4613      	movlt	r3, r2
 80161dc:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80161e0:	f9b7 34c4 	ldrsh.w	r3, [r7, #1220]	; 0x4c4
 80161e4:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 80161e8:	4293      	cmp	r3, r2
 80161ea:	bfa8      	it	ge
 80161ec:	4613      	movge	r3, r2
 80161ee:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
        *out_0++ = (q7_t)ch_0_out_0;
 80161f2:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 80161f6:	1c5a      	adds	r2, r3, #1
 80161f8:	f8c7 24d0 	str.w	r2, [r7, #1232]	; 0x4d0
 80161fc:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8016200:	b252      	sxtb	r2, r2
 8016202:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8016204:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8016208:	6819      	ldr	r1, [r3, #0]
 801620a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801620e:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	681a      	ldr	r2, [r3, #0]
 8016216:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801621a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801621e:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 8016222:	6018      	str	r0, [r3, #0]
 8016224:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016228:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801622c:	6019      	str	r1, [r3, #0]
 801622e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016232:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8016236:	601a      	str	r2, [r3, #0]
 8016238:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801623c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016246:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 801624a:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 801624e:	6812      	ldr	r2, [r2, #0]
 8016250:	409a      	lsls	r2, r3
 8016252:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016256:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801625a:	601a      	str	r2, [r3, #0]
 801625c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016260:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8016264:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8016268:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 801626c:	6812      	ldr	r2, [r2, #0]
 801626e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8016270:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016274:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8016278:	2200      	movs	r2, #0
 801627a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801627c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016280:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8016284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016288:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801628a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801628e:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8016292:	2200      	movs	r2, #0
 8016294:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8016296:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 801629a:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 801629e:	f5a1 713f 	sub.w	r1, r1, #764	; 0x2fc
 80162a2:	6809      	ldr	r1, [r1, #0]
 80162a4:	17c8      	asrs	r0, r1, #31
 80162a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80162a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80162aa:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 80162ae:	f5a1 7140 	sub.w	r1, r1, #768	; 0x300
 80162b2:	6809      	ldr	r1, [r1, #0]
 80162b4:	17c8      	asrs	r0, r1, #31
 80162b6:	6239      	str	r1, [r7, #32]
 80162b8:	6278      	str	r0, [r7, #36]	; 0x24
 80162ba:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80162be:	4631      	mov	r1, r6
 80162c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80162c4:	4640      	mov	r0, r8
 80162c6:	fb00 f001 	mul.w	r0, r0, r1
 80162ca:	4649      	mov	r1, r9
 80162cc:	462c      	mov	r4, r5
 80162ce:	fb04 f101 	mul.w	r1, r4, r1
 80162d2:	4401      	add	r1, r0
 80162d4:	4628      	mov	r0, r5
 80162d6:	4644      	mov	r4, r8
 80162d8:	fba0 4004 	umull	r4, r0, r0, r4
 80162dc:	65f8      	str	r0, [r7, #92]	; 0x5c
 80162de:	4620      	mov	r0, r4
 80162e0:	65b8      	str	r0, [r7, #88]	; 0x58
 80162e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80162e4:	4401      	add	r1, r0
 80162e6:	65f9      	str	r1, [r7, #92]	; 0x5c
 80162e8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80162ec:	4621      	mov	r1, r4
 80162ee:	1851      	adds	r1, r2, r1
 80162f0:	61b9      	str	r1, [r7, #24]
 80162f2:	4629      	mov	r1, r5
 80162f4:	eb43 0101 	adc.w	r1, r3, r1
 80162f8:	61f9      	str	r1, [r7, #28]
 80162fa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80162fe:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
    result = (int32_t)(mult.long_long >> 31);
 8016302:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8016306:	f04f 0200 	mov.w	r2, #0
 801630a:	f04f 0300 	mov.w	r3, #0
 801630e:	0fc2      	lsrs	r2, r0, #31
 8016310:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8016314:	17cb      	asrs	r3, r1, #31
 8016316:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 801631a:	f5a1 7141 	sub.w	r1, r1, #772	; 0x304
 801631e:	4613      	mov	r3, r2
 8016320:	600b      	str	r3, [r1, #0]
    return result;
 8016322:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016326:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801632a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801632c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016330:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	2b00      	cmp	r3, #0
 8016338:	dc06      	bgt.n	8016348 <arm_nn_mat_mult_kernel_s8_s16+0x1dbe>
 801633a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801633e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	425b      	negs	r3, r3
 8016346:	e000      	b.n	801634a <arm_nn_mat_mult_kernel_s8_s16+0x1dc0>
 8016348:	2300      	movs	r3, #0
 801634a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 801634e:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 8016352:	6011      	str	r1, [r2, #0]
 8016354:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8016358:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 801635c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801635e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016362:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8016366:	2200      	movs	r2, #0
 8016368:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801636a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801636e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8016372:	2201      	movs	r2, #1
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	409a      	lsls	r2, r3
 8016378:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801637c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8016380:	3a01      	subs	r2, #1
 8016382:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8016384:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016388:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801638c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8016390:	f5a2 7142 	sub.w	r1, r2, #776	; 0x308
 8016394:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8016398:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 801639c:	6809      	ldr	r1, [r1, #0]
 801639e:	6812      	ldr	r2, [r2, #0]
 80163a0:	400a      	ands	r2, r1
 80163a2:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80163a4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80163a8:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80163ac:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80163b0:	f5a2 7142 	sub.w	r1, r2, #776	; 0x308
 80163b4:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80163b8:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 80163bc:	6809      	ldr	r1, [r1, #0]
 80163be:	6812      	ldr	r2, [r2, #0]
 80163c0:	fa41 f202 	asr.w	r2, r1, r2
 80163c4:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80163c6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80163ca:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80163ce:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80163d2:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 80163d6:	6812      	ldr	r2, [r2, #0]
 80163d8:	1052      	asrs	r2, r2, #1
 80163da:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80163dc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80163e0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	da0a      	bge.n	8016400 <arm_nn_mat_mult_kernel_s8_s16+0x1e76>
        threshold++;
 80163ea:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80163ee:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80163f2:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80163f6:	f5a2 7247 	sub.w	r2, r2, #796	; 0x31c
 80163fa:	6812      	ldr	r2, [r2, #0]
 80163fc:	3201      	adds	r2, #1
 80163fe:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8016400:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016404:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8016408:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801640c:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8016410:	6812      	ldr	r2, [r2, #0]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	429a      	cmp	r2, r3
 8016416:	dd0a      	ble.n	801642e <arm_nn_mat_mult_kernel_s8_s16+0x1ea4>
        result++;
 8016418:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801641c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8016420:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8016424:	f5a2 7244 	sub.w	r2, r2, #784	; 0x310
 8016428:	6812      	ldr	r2, [r2, #0]
 801642a:	3201      	adds	r2, #1
 801642c:	601a      	str	r2, [r3, #0]
    return result;
 801642e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016432:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8016436:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016438:	bf00      	nop
 801643a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
        ch_0_out_1 += out_offset;
 801643e:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8016442:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8016446:	4413      	add	r3, r2
 8016448:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801644c:	f9b7 34c0 	ldrsh.w	r3, [r7, #1216]	; 0x4c0
 8016450:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8016454:	4293      	cmp	r3, r2
 8016456:	bfb8      	it	lt
 8016458:	4613      	movlt	r3, r2
 801645a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801645e:	f9b7 34c4 	ldrsh.w	r3, [r7, #1220]	; 0x4c4
 8016462:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8016466:	4293      	cmp	r3, r2
 8016468:	bfa8      	it	ge
 801646a:	4613      	movge	r3, r2
 801646c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
        *out_1++ = (q7_t)ch_0_out_1;
 8016470:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8016474:	1c5a      	adds	r2, r3, #1
 8016476:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 801647a:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 801647e:	b252      	sxtb	r2, r2
 8016480:	701a      	strb	r2, [r3, #0]
        out_mult++;
 8016482:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8016486:	3304      	adds	r3, #4
 8016488:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
        out_shift++;
 801648c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8016490:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8016494:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8016498:	f5a2 727c 	sub.w	r2, r2, #1008	; 0x3f0
 801649c:	6812      	ldr	r2, [r2, #0]
 801649e:	3204      	adds	r2, #4
 80164a0:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 80164a2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80164a6:	f2a3 33ea 	subw	r3, r3, #1002	; 0x3ea
 80164aa:	881b      	ldrh	r3, [r3, #0]
 80164ac:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 80164b0:	4413      	add	r3, r2
 80164b2:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0

    /* return the new output pointer with offset */
    return out_0;
 80164b6:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	f507 6793 	add.w	r7, r7, #1176	; 0x498
 80164c0:	46bd      	mov	sp, r7
 80164c2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80164c6:	4770      	bx	lr

080164c8 <arm_fully_connected_s8>:
                                           const q7_t *kernel,
                                           const cmsis_nn_dims *bias_dims,
                                           const int32_t *bias,
                                           const cmsis_nn_dims *output_dims,
                                           q7_t *output)
{
 80164c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164ca:	b093      	sub	sp, #76	; 0x4c
 80164cc:	af0a      	add	r7, sp, #40	; 0x28
 80164ce:	6178      	str	r0, [r7, #20]
 80164d0:	6139      	str	r1, [r7, #16]
 80164d2:	60fa      	str	r2, [r7, #12]
 80164d4:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    (void)fc_params->filter_offset;

    int32_t batch_cnt = input_dims->n;
 80164d6:	68bb      	ldr	r3, [r7, #8]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 80164dc:	e034      	b.n	8016548 <arm_fully_connected_s8+0x80>
    {
        arm_nn_vec_mat_mult_t_s8(input,
                                 kernel,
                                 bias,
                                 output,
                                 fc_params->input_offset,
 80164de:	693b      	ldr	r3, [r7, #16]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	607b      	str	r3, [r7, #4]
                                 0,
                                 fc_params->output_offset,
 80164e4:	693a      	ldr	r2, [r7, #16]
 80164e6:	6892      	ldr	r2, [r2, #8]
                                 quant_params->multiplier,
 80164e8:	68f9      	ldr	r1, [r7, #12]
 80164ea:	6809      	ldr	r1, [r1, #0]
                                 quant_params->shift,
 80164ec:	68f8      	ldr	r0, [r7, #12]
 80164ee:	6840      	ldr	r0, [r0, #4]
                                 filter_dims->n, /* col_dim or accum_depth */
 80164f0:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80164f2:	6824      	ldr	r4, [r4, #0]
                                 output_dims->c, /* row_dim or output_depth */
 80164f4:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80164f6:	68ed      	ldr	r5, [r5, #12]
                                 fc_params->activation.min,
 80164f8:	693e      	ldr	r6, [r7, #16]
 80164fa:	68f6      	ldr	r6, [r6, #12]
                                 fc_params->activation.max,
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	691b      	ldr	r3, [r3, #16]
 8016500:	603b      	str	r3, [r7, #0]
        arm_nn_vec_mat_mult_t_s8(input,
 8016502:	2301      	movs	r3, #1
 8016504:	9309      	str	r3, [sp, #36]	; 0x24
 8016506:	683b      	ldr	r3, [r7, #0]
 8016508:	9308      	str	r3, [sp, #32]
 801650a:	9607      	str	r6, [sp, #28]
 801650c:	9506      	str	r5, [sp, #24]
 801650e:	9405      	str	r4, [sp, #20]
 8016510:	9004      	str	r0, [sp, #16]
 8016512:	9103      	str	r1, [sp, #12]
 8016514:	9202      	str	r2, [sp, #8]
 8016516:	2200      	movs	r2, #0
 8016518:	9201      	str	r2, [sp, #4]
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	9300      	str	r3, [sp, #0]
 801651e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016526:	f007 fac1 	bl	801daac <arm_nn_vec_mat_mult_t_s8>
                                 1L);
        input += filter_dims->n;
 801652a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	461a      	mov	r2, r3
 8016530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016532:	4413      	add	r3, r2
 8016534:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 8016536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016538:	68db      	ldr	r3, [r3, #12]
 801653a:	461a      	mov	r2, r3
 801653c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801653e:	4413      	add	r3, r2
 8016540:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 8016542:	69fb      	ldr	r3, [r7, #28]
 8016544:	3b01      	subs	r3, #1
 8016546:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 8016548:	69fb      	ldr	r3, [r7, #28]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d1c7      	bne.n	80164de <arm_fully_connected_s8+0x16>
    }
    return (ARM_CMSIS_NN_SUCCESS);
 801654e:	2300      	movs	r3, #0
}
 8016550:	4618      	mov	r0, r3
 8016552:	3724      	adds	r7, #36	; 0x24
 8016554:	46bd      	mov	sp, r7
 8016556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016558 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 8016558:	b480      	push	{r7}
 801655a:	b083      	sub	sp, #12
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 8016560:	2300      	movs	r3, #0
}
 8016562:	4618      	mov	r0, r3
 8016564:	370c      	adds	r7, #12
 8016566:	46bd      	mov	sp, r7
 8016568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656c:	4770      	bx	lr
	...

08016570 <arm_nn_mat_mult_kernel_s16>:
                                  const int16_t activation_min,
                                  const int16_t activation_max,
                                  const int32_t num_col_a,
                                  const int64_t *const output_bias,
                                  q15_t *out_0)
{
 8016570:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8016574:	f5ad 6dcf 	sub.w	sp, sp, #1656	; 0x678
 8016578:	af00      	add	r7, sp, #0
 801657a:	f507 64cf 	add.w	r4, r7, #1656	; 0x678
 801657e:	f2a4 44cc 	subw	r4, r4, #1228	; 0x4cc
 8016582:	6020      	str	r0, [r4, #0]
 8016584:	f507 60cf 	add.w	r0, r7, #1656	; 0x678
 8016588:	f5a0 609a 	sub.w	r0, r0, #1232	; 0x4d0
 801658c:	6001      	str	r1, [r0, #0]
 801658e:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8016592:	f2a1 41d4 	subw	r1, r1, #1236	; 0x4d4
 8016596:	600a      	str	r2, [r1, #0]
 8016598:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801659c:	f5a2 629b 	sub.w	r2, r2, #1240	; 0x4d8
 80165a0:	6013      	str	r3, [r2, #0]

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    /* set up the second output pointers */
    q15_t *out_1 = out_0 + output_ch;
 80165a2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80165a6:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	005a      	lsls	r2, r3, #1
 80165ae:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
 80165b2:	4413      	add	r3, r2
 80165b4:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
    const int64_t *bias = output_bias;
 80165b8:	f8d7 36a8 	ldr.w	r3, [r7, #1704]	; 0x6a8
 80165bc:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
    uint16_t row_count = output_ch / 2;
 80165c0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80165c4:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80165c8:	681a      	ldr	r2, [r3, #0]
 80165ca:	0fd3      	lsrs	r3, r2, #31
 80165cc:	4413      	add	r3, r2
 80165ce:	105b      	asrs	r3, r3, #1
 80165d0:	f8a7 366e 	strh.w	r3, [r7, #1646]	; 0x66e
    const q7_t *ip_a0 = input_a;
 80165d4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80165d8:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668

    /* this loop over rows in A */
    while (row_count)
 80165e2:	f001 bcb7 	b.w	8017f54 <arm_nn_mat_mult_kernel_s16+0x19e4>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 80165e6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80165ea:	f5a3 6287 	sub.w	r2, r3, #1080	; 0x438
 80165ee:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80165f2:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 80165fa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80165fe:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8016602:	681a      	ldr	r2, [r3, #0]
 8016604:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8016608:	005b      	lsls	r3, r3, #1
 801660a:	441a      	add	r2, r3
 801660c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016610:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8016614:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 8016616:	f8d7 26a4 	ldr.w	r2, [r7, #1700]	; 0x6a4
 801661a:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 801661e:	4413      	add	r3, r2
 8016620:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664

        /* Init accumulator for channel N and N + 1 */
        q31_t ch_0_out_0 = 0;
 8016624:	2300      	movs	r3, #0
 8016626:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
        q31_t ch_0_out_1 = 0;
 801662a:	2300      	movs	r3, #0
 801662c:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
        q31_t ch_1_out_0 = 0;
 8016630:	2300      	movs	r3, #0
 8016632:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
        q31_t ch_1_out_1 = 0;
 8016636:	2300      	movs	r3, #0
 8016638:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654

        uint16_t col_count = num_col_a / 4;
 801663c:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8016640:	2b00      	cmp	r3, #0
 8016642:	da00      	bge.n	8016646 <arm_nn_mat_mult_kernel_s16+0xd6>
 8016644:	3303      	adds	r3, #3
 8016646:	109b      	asrs	r3, r3, #2
 8016648:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
        /* accumulate over the vector */
        while (col_count)
 801664c:	e3f9      	b.n	8016e42 <arm_nn_mat_mult_kernel_s16+0x8d2>
 801664e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016652:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 8016656:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801665a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 801665c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016660:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	461a      	mov	r2, r3
 801666c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016670:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8016674:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8016676:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801667a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	1d1a      	adds	r2, r3, #4
 8016684:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016688:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	601a      	str	r2, [r3, #0]
    return (val);
 8016690:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016694:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8016698:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801669a:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 801669e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80166a2:	f5a3 72da 	sub.w	r2, r3, #436	; 0x1b4
 80166a6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80166aa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80166ac:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80166b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	461a      	mov	r2, r3
 80166bc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80166c0:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80166c4:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80166c6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80166ca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	1d1a      	adds	r2, r3, #4
 80166d4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80166d8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	601a      	str	r2, [r3, #0]
    return (val);
 80166e0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80166e4:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80166e8:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 80166ea:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 80166ee:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80166f2:	f2a3 427c 	subw	r2, r3, #1148	; 0x47c
 80166f6:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80166fa:	6013      	str	r3, [r2, #0]
 80166fc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016700:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8016704:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8016708:	6013      	str	r3, [r2, #0]
 801670a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801670e:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8016712:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8016716:	6013      	str	r3, [r2, #0]
 8016718:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801671c:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8016720:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8016724:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8016726:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801672a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	461a      	mov	r2, r3
 8016736:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801673a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 801673e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8016740:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016744:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	1d1a      	adds	r2, r3, #4
 801674e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016752:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	601a      	str	r2, [r3, #0]
    return (val);
 801675a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801675e:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8016762:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8016764:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016768:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801676c:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 801676e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016772:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8016776:	681a      	ldr	r2, [r3, #0]
 8016778:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801677c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8016780:	601a      	str	r2, [r3, #0]
 8016782:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016786:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 801678a:	2308      	movs	r3, #8
 801678c:	6013      	str	r3, [r2, #0]
 801678e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016792:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8016796:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801679a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	6013      	str	r3, [r2, #0]
 80167a2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80167a6:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 80167aa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80167ae:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80167b6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80167ba:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 80167be:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80167c2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	f003 031f 	and.w	r3, r3, #31
 80167cc:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80167ce:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80167d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d105      	bne.n	80167e8 <arm_nn_mat_mult_kernel_s16+0x278>
    return op1;
 80167dc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80167e0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80167e4:	681a      	ldr	r2, [r3, #0]
 80167e6:	e00a      	b.n	80167fe <arm_nn_mat_mult_kernel_s16+0x28e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80167e8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80167ec:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 80167f0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80167f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80167f8:	6812      	ldr	r2, [r2, #0]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	41da      	rors	r2, r3
 80167fe:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016802:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8016806:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016808:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801680c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	fa2f f283 	sxtb16	r2, r3
 8016816:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801681a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801681e:	601a      	str	r2, [r3, #0]
  return(result);
 8016820:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016824:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8016828:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801682a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801682e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8016832:	601a      	str	r2, [r3, #0]
  return result;
 8016834:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016838:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801683c:	681a      	ldr	r2, [r3, #0]
 801683e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016842:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8016846:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8016848:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801684c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8016850:	681a      	ldr	r2, [r3, #0]
 8016852:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016856:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801685a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801685c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016860:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	fa2f f283 	sxtb16	r2, r3
 801686a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801686e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8016872:	601a      	str	r2, [r3, #0]
  return(result);
 8016874:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016878:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801687c:	681a      	ldr	r2, [r3, #0]
 801687e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016882:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8016886:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8016888:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801688c:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8016890:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016894:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	6013      	str	r3, [r2, #0]
 801689c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80168a0:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 80168a4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80168a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	6013      	str	r3, [r2, #0]
 80168b0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80168b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80168b8:	681a      	ldr	r2, [r3, #0]
 80168ba:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80168be:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 80168c8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80168cc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80168d0:	601a      	str	r2, [r3, #0]
 80168d2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80168d6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	461a      	mov	r2, r3
 80168de:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80168e2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80168ea:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80168ee:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 80168f2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80168f6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	6013      	str	r3, [r2, #0]
 80168fe:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016902:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8016906:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801690a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	6013      	str	r3, [r2, #0]
 8016912:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016916:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801691a:	681a      	ldr	r2, [r3, #0]
 801691c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016920:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801692a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801692e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8016932:	601a      	str	r2, [r3, #0]
 8016934:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016938:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	461a      	mov	r2, r3
 8016940:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016944:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	601a      	str	r2, [r3, #0]
    return source;
 801694c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016950:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8016954:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 8016956:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 801695a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801695e:	f2a3 4284 	subw	r2, r3, #1156	; 0x484
 8016962:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8016966:	6013      	str	r3, [r2, #0]
 8016968:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801696c:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8016970:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8016974:	6013      	str	r3, [r2, #0]
 8016976:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801697a:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 801697e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016982:	6013      	str	r3, [r2, #0]
 8016984:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016988:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 801698c:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8016990:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8016992:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016996:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	461a      	mov	r2, r3
 80169a2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80169a6:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80169aa:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80169ac:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80169b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	1d1a      	adds	r2, r3, #4
 80169ba:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80169be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	601a      	str	r2, [r3, #0]
    return (val);
 80169c6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80169ca:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80169ce:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80169d0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80169d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80169d8:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 80169da:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80169de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80169e2:	681a      	ldr	r2, [r3, #0]
 80169e4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80169e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80169ec:	601a      	str	r2, [r3, #0]
 80169ee:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80169f2:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80169f6:	2308      	movs	r3, #8
 80169f8:	6013      	str	r3, [r2, #0]
 80169fa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80169fe:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8016a02:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	6013      	str	r3, [r2, #0]
 8016a0e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a12:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8016a16:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8016a22:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a26:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8016a2a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	f003 031f 	and.w	r3, r3, #31
 8016a38:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8016a3a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d105      	bne.n	8016a54 <arm_nn_mat_mult_kernel_s16+0x4e4>
    return op1;
 8016a48:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8016a50:	681a      	ldr	r2, [r3, #0]
 8016a52:	e00a      	b.n	8016a6a <arm_nn_mat_mult_kernel_s16+0x4fa>
  return (op1 >> op2) | (op1 << (32U - op2));
 8016a54:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a58:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8016a5c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016a64:	6812      	ldr	r2, [r2, #0]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	41da      	rors	r2, r3
 8016a6a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016a72:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016a74:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	fa2f f283 	sxtb16	r2, r3
 8016a82:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016a8a:	601a      	str	r2, [r3, #0]
  return(result);
 8016a8c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016a94:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8016a96:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016a9a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8016a9e:	601a      	str	r2, [r3, #0]
  return result;
 8016aa0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016aa4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8016aa8:	681a      	ldr	r2, [r3, #0]
 8016aaa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016aae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8016ab2:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8016ab4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016ab8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8016abc:	681a      	ldr	r2, [r3, #0]
 8016abe:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016ac2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8016ac6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016ac8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016acc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	fa2f f283 	sxtb16	r2, r3
 8016ad6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016ada:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016ade:	601a      	str	r2, [r3, #0]
  return(result);
 8016ae0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016ae4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016ae8:	681a      	ldr	r2, [r3, #0]
 8016aea:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016aee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8016af2:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8016af4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016af8:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8016afc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b00:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	6013      	str	r3, [r2, #0]
 8016b08:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b0c:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8016b10:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b14:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	6013      	str	r3, [r2, #0]
 8016b1c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8016b24:	681a      	ldr	r2, [r3, #0]
 8016b26:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b2a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 8016b34:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b38:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8016b3c:	601a      	str	r2, [r3, #0]
 8016b3e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b42:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	461a      	mov	r2, r3
 8016b4a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b4e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8016b56:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b5a:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 8016b5e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	6013      	str	r3, [r2, #0]
 8016b6a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b6e:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8016b72:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b76:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	6013      	str	r3, [r2, #0]
 8016b7e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b82:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8016b86:	681a      	ldr	r2, [r3, #0]
 8016b88:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b8c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8016b96:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016b9a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016b9e:	601a      	str	r2, [r3, #0]
 8016ba0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016ba4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	461a      	mov	r2, r3
 8016bac:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016bb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	601a      	str	r2, [r3, #0]
    return source;
 8016bb8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016bbc:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8016bc0:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 8016bc2:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8016bc6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016bca:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8016bd4:	f8d7 1660 	ldr.w	r1, [r7, #1632]	; 0x660
 8016bd8:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016bdc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016be0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016be4:	601a      	str	r2, [r3, #0]
 8016be6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016bee:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016bf0:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8016bf4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016bf8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016bfc:	681a      	ldr	r2, [r3, #0]
 8016bfe:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	fb21 3202 	smlad	r2, r1, r2, r3
 8016c0c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016c14:	601a      	str	r2, [r3, #0]
  return(result);
 8016c16:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8016c24:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016c28:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	4619      	mov	r1, r3
 8016c30:	f8d7 25f8 	ldr.w	r2, [r7, #1528]	; 0x5f8
 8016c34:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8016c38:	f8c7 158c 	str.w	r1, [r7, #1420]	; 0x58c
 8016c3c:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 8016c40:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016c44:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 8016c48:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 8016c4c:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8016c50:	fb21 3302 	smlad	r3, r1, r2, r3
 8016c54:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  return(result);
 8016c58:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8016c5c:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8016c60:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016c64:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	4619      	mov	r1, r3
 8016c6c:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8016c70:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8016c74:	f8c7 159c 	str.w	r1, [r7, #1436]	; 0x59c
 8016c78:	f8c7 2598 	str.w	r2, [r7, #1432]	; 0x598
 8016c7c:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016c80:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 8016c84:	f8d7 2598 	ldr.w	r2, [r7, #1432]	; 0x598
 8016c88:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8016c8c:	fb21 3302 	smlad	r3, r1, r2, r3
 8016c90:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
  return(result);
 8016c94:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8016c98:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 8016c9c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016ca0:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	4619      	mov	r1, r3
 8016ca8:	f8d7 25f8 	ldr.w	r2, [r7, #1528]	; 0x5f8
 8016cac:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8016cb0:	f8c7 15ac 	str.w	r1, [r7, #1452]	; 0x5ac
 8016cb4:	f8c7 25a8 	str.w	r2, [r7, #1448]	; 0x5a8
 8016cb8:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016cbc:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 8016cc0:	f8d7 25a8 	ldr.w	r2, [r7, #1448]	; 0x5a8
 8016cc4:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8016cc8:	fb21 3302 	smlad	r3, r1, r2, r3
 8016ccc:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
  return(result);
 8016cd0:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8016cd4:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8016cd8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8016cdc:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
    memcpy(&val, *in_q15, 4);
 8016ce0:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	461a      	mov	r2, r3
 8016cea:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016cee:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8016cf2:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8016cf4:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	1d1a      	adds	r2, r3, #4
 8016cfc:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8016d00:	601a      	str	r2, [r3, #0]
    return (val);
 8016d02:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016d06:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8016d0a:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8016d0c:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8016d10:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8016d14:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    memcpy(&val, *in_q15, 4);
 8016d18:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	461a      	mov	r2, r3
 8016d22:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016d26:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8016d2a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8016d2c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	1d1a      	adds	r2, r3, #4
 8016d34:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8016d38:	601a      	str	r2, [r3, #0]
    return (val);
 8016d3a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016d3e:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8016d42:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8016d44:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 8016d48:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016d4c:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	4619      	mov	r1, r3
 8016d54:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8016d58:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8016d5c:	f8c7 15c4 	str.w	r1, [r7, #1476]	; 0x5c4
 8016d60:	f8c7 25c0 	str.w	r2, [r7, #1472]	; 0x5c0
 8016d64:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016d68:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8016d6c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8016d70:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8016d74:	fb21 3302 	smlad	r3, r1, r2, r3
 8016d78:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
  return(result);
 8016d7c:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8016d80:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8016d84:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016d88:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	4619      	mov	r1, r3
 8016d90:	f8d7 25f8 	ldr.w	r2, [r7, #1528]	; 0x5f8
 8016d94:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8016d98:	f8c7 15d4 	str.w	r1, [r7, #1492]	; 0x5d4
 8016d9c:	f8c7 25d0 	str.w	r2, [r7, #1488]	; 0x5d0
 8016da0:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016da4:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 8016da8:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	; 0x5d0
 8016dac:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 8016db0:	fb21 3302 	smlad	r3, r1, r2, r3
 8016db4:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
  return(result);
 8016db8:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 8016dbc:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 8016dc0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016dc4:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	4619      	mov	r1, r3
 8016dcc:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8016dd0:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8016dd4:	f8c7 15e4 	str.w	r1, [r7, #1508]	; 0x5e4
 8016dd8:	f8c7 25e0 	str.w	r2, [r7, #1504]	; 0x5e0
 8016ddc:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016de0:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8016de4:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8016de8:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 8016dec:	fb21 3302 	smlad	r3, r1, r2, r3
 8016df0:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
  return(result);
 8016df4:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 8016df8:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 8016dfc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016e00:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	4619      	mov	r1, r3
 8016e08:	f8d7 25f8 	ldr.w	r2, [r7, #1528]	; 0x5f8
 8016e0c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8016e10:	f8c7 15f4 	str.w	r1, [r7, #1524]	; 0x5f4
 8016e14:	f8c7 25f0 	str.w	r2, [r7, #1520]	; 0x5f0
 8016e18:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016e1c:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	; 0x5f4
 8016e20:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 8016e24:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8016e28:	fb21 3302 	smlad	r3, r1, r2, r3
 8016e2c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
  return(result);
 8016e30:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8016e34:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654

            col_count--;
 8016e38:	f8b7 3652 	ldrh.w	r3, [r7, #1618]	; 0x652
 8016e3c:	3b01      	subs	r3, #1
 8016e3e:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
        while (col_count)
 8016e42:	f8b7 3652 	ldrh.w	r3, [r7, #1618]	; 0x652
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	f47f ac01 	bne.w	801664e <arm_nn_mat_mult_kernel_s16+0xde>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 8016e4c:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8016e50:	b29b      	uxth	r3, r3
 8016e52:	f003 0303 	and.w	r3, r3, #3
 8016e56:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
        while (col_count)
 8016e5a:	e05c      	b.n	8016f16 <arm_nn_mat_mult_kernel_s16+0x9a6>
        {
            q7_t a0 = *ip_a0++;
 8016e5c:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 8016e60:	1c53      	adds	r3, r2, #1
 8016e62:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8016e66:	7813      	ldrb	r3, [r2, #0]
 8016e68:	f887 3607 	strb.w	r3, [r7, #1543]	; 0x607
            q15_t b0 = *ip_b0++;
 8016e6c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016e70:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8016e74:	6819      	ldr	r1, [r3, #0]
 8016e76:	1c8a      	adds	r2, r1, #2
 8016e78:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016e7c:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8016e80:	601a      	str	r2, [r3, #0]
 8016e82:	880b      	ldrh	r3, [r1, #0]
 8016e84:	f8a7 3604 	strh.w	r3, [r7, #1540]	; 0x604
            q7_t a1 = *ip_a1++;
 8016e88:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 8016e8c:	1c53      	adds	r3, r2, #1
 8016e8e:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8016e92:	7813      	ldrb	r3, [r2, #0]
 8016e94:	f887 3603 	strb.w	r3, [r7, #1539]	; 0x603
            q15_t b1 = *ip_b1++;
 8016e98:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016e9c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8016ea0:	6819      	ldr	r1, [r3, #0]
 8016ea2:	1c8a      	adds	r2, r1, #2
 8016ea4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016ea8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8016eac:	601a      	str	r2, [r3, #0]
 8016eae:	880b      	ldrh	r3, [r1, #0]
 8016eb0:	f8a7 3600 	strh.w	r3, [r7, #1536]	; 0x600

            ch_0_out_0 += a0 * b0;
 8016eb4:	f997 2607 	ldrsb.w	r2, [r7, #1543]	; 0x607
 8016eb8:	f9b7 3604 	ldrsh.w	r3, [r7, #1540]	; 0x604
 8016ebc:	fb03 f202 	mul.w	r2, r3, r2
 8016ec0:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8016ec4:	4413      	add	r3, r2
 8016ec6:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
            ch_0_out_1 += a0 * b1;
 8016eca:	f997 2607 	ldrsb.w	r2, [r7, #1543]	; 0x607
 8016ece:	f9b7 3600 	ldrsh.w	r3, [r7, #1536]	; 0x600
 8016ed2:	fb03 f202 	mul.w	r2, r3, r2
 8016ed6:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8016eda:	4413      	add	r3, r2
 8016edc:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
            ch_1_out_0 += a1 * b0;
 8016ee0:	f997 2603 	ldrsb.w	r2, [r7, #1539]	; 0x603
 8016ee4:	f9b7 3604 	ldrsh.w	r3, [r7, #1540]	; 0x604
 8016ee8:	fb03 f202 	mul.w	r2, r3, r2
 8016eec:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8016ef0:	4413      	add	r3, r2
 8016ef2:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
            ch_1_out_1 += a1 * b1;
 8016ef6:	f997 2603 	ldrsb.w	r2, [r7, #1539]	; 0x603
 8016efa:	f9b7 3600 	ldrsh.w	r3, [r7, #1536]	; 0x600
 8016efe:	fb03 f202 	mul.w	r2, r3, r2
 8016f02:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8016f06:	4413      	add	r3, r2
 8016f08:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
            col_count--;
 8016f0c:	f8b7 3652 	ldrh.w	r3, [r7, #1618]	; 0x652
 8016f10:	3b01      	subs	r3, #1
 8016f12:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
        while (col_count)
 8016f16:	f8b7 3652 	ldrh.w	r3, [r7, #1618]	; 0x652
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d19e      	bne.n	8016e5c <arm_nn_mat_mult_kernel_s16+0x8ec>
        } /* while over col_count */
        if (bias)
 8016f1e:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	f000 8164 	beq.w	80171f0 <arm_nn_mat_mult_kernel_s16+0xc80>
        {
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
 8016f28:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8016f2c:	681a      	ldr	r2, [r3, #0]
 8016f2e:	4baf      	ldr	r3, [pc, #700]	; (80171ec <arm_nn_mat_mult_kernel_s16+0xc7c>)
 8016f30:	429a      	cmp	r2, r3
 8016f32:	dc06      	bgt.n	8016f42 <arm_nn_mat_mult_kernel_s16+0x9d2>
 8016f34:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8016f3e:	141b      	asrs	r3, r3, #16
 8016f40:	e001      	b.n	8016f46 <arm_nn_mat_mult_kernel_s16+0x9d6>
 8016f42:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016f46:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            q63_t acc_64 = ch_0_out_0 + *bias;
 8016f4a:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8016f4e:	17da      	asrs	r2, r3, #31
 8016f50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8016f54:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8016f58:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8016f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f60:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8016f64:	4621      	mov	r1, r4
 8016f66:	1889      	adds	r1, r1, r2
 8016f68:	62b9      	str	r1, [r7, #40]	; 0x28
 8016f6a:	4629      	mov	r1, r5
 8016f6c:	eb41 0303 	adc.w	r3, r1, r3
 8016f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016f72:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 8016f76:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8016f7a:	e9c2 3400 	strd	r3, r4, [r2]
            ch_0_out_0 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
 8016f7e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016f82:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	6819      	ldr	r1, [r3, #0]
 8016f8a:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8016f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f92:	f507 6093 	add.w	r0, r7, #1176	; 0x498
 8016f96:	e9c0 2300 	strd	r2, r3, [r0]
 8016f9a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016f9e:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 8016fa2:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8016fa6:	6013      	str	r3, [r2, #0]
 8016fa8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016fac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8016fb0:	6019      	str	r1, [r3, #0]
    const q63_t new_val = val * reduced_multiplier;
 8016fb2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016fb6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	17da      	asrs	r2, r3, #31
 8016fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016fc2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8016fc6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016fca:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8016fce:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8016fd2:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 8016fd6:	6813      	ldr	r3, [r2, #0]
 8016fd8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8016fdc:	4622      	mov	r2, r4
 8016fde:	fb02 f203 	mul.w	r2, r2, r3
 8016fe2:	680b      	ldr	r3, [r1, #0]
 8016fe4:	4628      	mov	r0, r5
 8016fe6:	fb00 f303 	mul.w	r3, r0, r3
 8016fea:	441a      	add	r2, r3
 8016fec:	680b      	ldr	r3, [r1, #0]
 8016fee:	4621      	mov	r1, r4
 8016ff0:	fba3 1301 	umull	r1, r3, r3, r1
 8016ff4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8016ff8:	460b      	mov	r3, r1
 8016ffa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8016ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017002:	18d3      	adds	r3, r2, r3
 8017004:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8017008:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 801700c:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8017010:	e9c2 3400 	strd	r3, r4, [r2]
 8017014:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8017018:	e9c2 3400 	strd	r3, r4, [r2]
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 801701c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017020:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	f1c3 040e 	rsb	r4, r3, #14
 801702a:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 801702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017032:	f1c4 0120 	rsb	r1, r4, #32
 8017036:	f1b4 0020 	subs.w	r0, r4, #32
 801703a:	fa22 f504 	lsr.w	r5, r2, r4
 801703e:	f8c7 5198 	str.w	r5, [r7, #408]	; 0x198
 8017042:	fa03 f101 	lsl.w	r1, r3, r1
 8017046:	f8d7 5198 	ldr.w	r5, [r7, #408]	; 0x198
 801704a:	ea45 0501 	orr.w	r5, r5, r1
 801704e:	f8c7 5198 	str.w	r5, [r7, #408]	; 0x198
 8017052:	d406      	bmi.n	8017062 <arm_nn_mat_mult_kernel_s16+0xaf2>
 8017054:	fa43 f000 	asr.w	r0, r3, r0
 8017058:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 801705c:	4301      	orrs	r1, r0
 801705e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8017062:	4123      	asrs	r3, r4
 8017064:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8017068:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801706c:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8017070:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8017074:	6013      	str	r3, [r2, #0]
    result = (result + 1) >> 1;             // Last shift position and insert round
 8017076:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801707a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	1c59      	adds	r1, r3, #1
 8017082:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017086:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801708a:	104b      	asrs	r3, r1, #1
 801708c:	6013      	str	r3, [r2, #0]
    return result;
 801708e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017092:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
            acc_64 = ch_0_out_1 + *bias++;
 801709c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80170a0:	17da      	asrs	r2, r3, #31
 80170a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80170a6:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80170aa:	f8d7 2670 	ldr.w	r2, [r7, #1648]	; 0x670
 80170ae:	f102 0308 	add.w	r3, r2, #8
 80170b2:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 80170b6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80170ba:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80170be:	4621      	mov	r1, r4
 80170c0:	1889      	adds	r1, r1, r2
 80170c2:	6239      	str	r1, [r7, #32]
 80170c4:	4629      	mov	r1, r5
 80170c6:	eb41 0303 	adc.w	r3, r1, r3
 80170ca:	627b      	str	r3, [r7, #36]	; 0x24
 80170cc:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 80170d0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80170d4:	e9c2 3400 	strd	r3, r4, [r2]
            ch_0_out_1 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
 80170d8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80170dc:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	6819      	ldr	r1, [r3, #0]
 80170e4:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80170e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ec:	f507 6097 	add.w	r0, r7, #1208	; 0x4b8
 80170f0:	e9c0 2300 	strd	r2, r3, [r0]
 80170f4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80170f8:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80170fc:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8017100:	6013      	str	r3, [r2, #0]
 8017102:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017106:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801710a:	6019      	str	r1, [r3, #0]
    const q63_t new_val = val * reduced_multiplier;
 801710c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017110:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	17da      	asrs	r2, r3, #31
 8017118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801711c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8017120:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017124:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8017128:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801712c:	f5a3 71e0 	sub.w	r1, r3, #448	; 0x1c0
 8017130:	6813      	ldr	r3, [r2, #0]
 8017132:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8017136:	4622      	mov	r2, r4
 8017138:	fb02 f203 	mul.w	r2, r2, r3
 801713c:	680b      	ldr	r3, [r1, #0]
 801713e:	4628      	mov	r0, r5
 8017140:	fb00 f303 	mul.w	r3, r0, r3
 8017144:	441a      	add	r2, r3
 8017146:	680b      	ldr	r3, [r1, #0]
 8017148:	4621      	mov	r1, r4
 801714a:	fba3 1301 	umull	r1, r3, r3, r1
 801714e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8017152:	460b      	mov	r3, r1
 8017154:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8017158:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801715c:	18d3      	adds	r3, r2, r3
 801715e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8017162:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8017166:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 801716a:	e9c2 3400 	strd	r3, r4, [r2]
 801716e:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8017172:	e9c2 3400 	strd	r3, r4, [r2]
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 8017176:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801717a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	f1c3 040e 	rsb	r4, r3, #14
 8017184:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8017188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801718c:	f1c4 0120 	rsb	r1, r4, #32
 8017190:	f1b4 0020 	subs.w	r0, r4, #32
 8017194:	fa22 f804 	lsr.w	r8, r2, r4
 8017198:	fa03 f101 	lsl.w	r1, r3, r1
 801719c:	ea48 0801 	orr.w	r8, r8, r1
 80171a0:	d403      	bmi.n	80171aa <arm_nn_mat_mult_kernel_s16+0xc3a>
 80171a2:	fa43 f000 	asr.w	r0, r3, r0
 80171a6:	ea48 0800 	orr.w	r8, r8, r0
 80171aa:	fa43 f904 	asr.w	r9, r3, r4
 80171ae:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80171b2:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 80171b6:	4643      	mov	r3, r8
 80171b8:	6013      	str	r3, [r2, #0]
    result = (result + 1) >> 1;             // Last shift position and insert round
 80171ba:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80171be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	1c59      	adds	r1, r3, #1
 80171c6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80171ca:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 80171ce:	104b      	asrs	r3, r1, #1
 80171d0:	6013      	str	r3, [r2, #0]
    return result;
 80171d2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80171d6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
            out_mult++;
 80171e0:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 80171e4:	3304      	adds	r3, #4
 80171e6:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
 80171ea:	e264      	b.n	80176b6 <arm_nn_mat_mult_kernel_s16+0x1146>
 80171ec:	7ffeffff 	.word	0x7ffeffff
        }
        else
        {
            ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 80171f0:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 80171f4:	6818      	ldr	r0, [r3, #0]
 80171f6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80171fa:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	6819      	ldr	r1, [r3, #0]
 8017202:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017206:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 801720a:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 801720e:	6013      	str	r3, [r2, #0]
 8017210:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017214:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8017218:	6018      	str	r0, [r3, #0]
 801721a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801721e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8017222:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017224:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017228:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8017232:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017236:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	fa03 f202 	lsl.w	r2, r3, r2
 8017240:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017244:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8017248:	601a      	str	r2, [r3, #0]
 801724a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801724e:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8017252:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017256:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801725e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017262:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 8017266:	2300      	movs	r3, #0
 8017268:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801726a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801726e:	461a      	mov	r2, r3
 8017270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017274:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8017278:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801727c:	461a      	mov	r2, r3
 801727e:	2300      	movs	r3, #0
 8017280:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8017284:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017288:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801728c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017290:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	17da      	asrs	r2, r3, #31
 8017298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801729c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80172a0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80172a4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	17da      	asrs	r2, r3, #31
 80172ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80172b0:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80172b4:	e9d7 562a 	ldrd	r5, r6, [r7, #168]	; 0xa8
 80172b8:	4633      	mov	r3, r6
 80172ba:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80172be:	fb02 f203 	mul.w	r2, r2, r3
 80172c2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80172c6:	462c      	mov	r4, r5
 80172c8:	fb04 f303 	mul.w	r3, r4, r3
 80172cc:	4413      	add	r3, r2
 80172ce:	462a      	mov	r2, r5
 80172d0:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 80172d4:	fba2 4204 	umull	r4, r2, r2, r4
 80172d8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80172dc:	4622      	mov	r2, r4
 80172de:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 80172e2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80172e6:	4413      	add	r3, r2
 80172e8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80172ec:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80172f0:	4623      	mov	r3, r4
 80172f2:	18c3      	adds	r3, r0, r3
 80172f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80172f8:	462b      	mov	r3, r5
 80172fa:	eb41 0303 	adc.w	r3, r1, r3
 80172fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8017302:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017306:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801730a:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801730e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017312:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017316:	f04f 0000 	mov.w	r0, #0
 801731a:	f04f 0100 	mov.w	r1, #0
 801731e:	0fd0      	lsrs	r0, r2, #31
 8017320:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017324:	17d9      	asrs	r1, r3, #31
 8017326:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801732a:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 801732e:	4603      	mov	r3, r0
 8017330:	6013      	str	r3, [r2, #0]
    return result;
 8017332:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017336:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801733a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801733c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017340:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	2b00      	cmp	r3, #0
 8017348:	dc06      	bgt.n	8017358 <arm_nn_mat_mult_kernel_s16+0xde8>
 801734a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801734e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	425a      	negs	r2, r3
 8017356:	e000      	b.n	801735a <arm_nn_mat_mult_kernel_s16+0xdea>
 8017358:	2200      	movs	r2, #0
 801735a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801735e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8017362:	6019      	str	r1, [r3, #0]
 8017364:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017368:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801736c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801736e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017372:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8017376:	2300      	movs	r3, #0
 8017378:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801737a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801737e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8017382:	2201      	movs	r2, #1
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	fa02 f103 	lsl.w	r1, r2, r3
 801738a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801738e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8017392:	1e4b      	subs	r3, r1, #1
 8017394:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8017396:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801739a:	f5a3 7114 	sub.w	r1, r3, #592	; 0x250
 801739e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80173a2:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 80173a6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80173aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80173ae:	6812      	ldr	r2, [r2, #0]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	4013      	ands	r3, r2
 80173b4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80173b6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80173ba:	f5a3 7112 	sub.w	r1, r3, #584	; 0x248
 80173be:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80173c2:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 80173c6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80173ca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80173ce:	6812      	ldr	r2, [r2, #0]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	fa42 f303 	asr.w	r3, r2, r3
 80173d6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80173d8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80173dc:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 80173e0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80173e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	105b      	asrs	r3, r3, #1
 80173ec:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80173ee:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80173f2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	da0a      	bge.n	8017412 <arm_nn_mat_mult_kernel_s16+0xea2>
        threshold++;
 80173fc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017400:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8017404:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017408:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	3301      	adds	r3, #1
 8017410:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8017412:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017416:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801741a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801741e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8017422:	6812      	ldr	r2, [r2, #0]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	429a      	cmp	r2, r3
 8017428:	dd0a      	ble.n	8017440 <arm_nn_mat_mult_kernel_s16+0xed0>
        result++;
 801742a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801742e:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8017432:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017436:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	3301      	adds	r3, #1
 801743e:	6013      	str	r3, [r2, #0]
    return result;
 8017440:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017444:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8017448:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801744a:	bf00      	nop
 801744c:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
            ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8017450:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8017454:	6818      	ldr	r0, [r3, #0]
 8017456:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801745a:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	6819      	ldr	r1, [r3, #0]
 8017462:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017466:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 801746a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 801746e:	6013      	str	r3, [r2, #0]
 8017470:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8017478:	6018      	str	r0, [r3, #0]
 801747a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801747e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8017482:	6019      	str	r1, [r3, #0]
 8017484:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017488:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8017492:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017496:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	fa03 f202 	lsl.w	r2, r3, r2
 80174a0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80174a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80174a8:	601a      	str	r2, [r3, #0]
 80174aa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80174ae:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 80174b2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80174b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80174be:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80174c2:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 80174c6:	2300      	movs	r3, #0
 80174c8:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80174ca:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80174ce:	461a      	mov	r2, r3
 80174d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80174d4:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80174d6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80174da:	461a      	mov	r2, r3
 80174dc:	2300      	movs	r3, #0
 80174de:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80174e0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80174e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80174e8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80174ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	17da      	asrs	r2, r3, #31
 80174f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80174f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80174fc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017500:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	17da      	asrs	r2, r3, #31
 8017508:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 801750c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8017510:	e9d7 562e 	ldrd	r5, r6, [r7, #184]	; 0xb8
 8017514:	4633      	mov	r3, r6
 8017516:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 801751a:	fb02 f203 	mul.w	r2, r2, r3
 801751e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8017522:	462c      	mov	r4, r5
 8017524:	fb04 f303 	mul.w	r3, r4, r3
 8017528:	4413      	add	r3, r2
 801752a:	462a      	mov	r2, r5
 801752c:	f8d7 4178 	ldr.w	r4, [r7, #376]	; 0x178
 8017530:	fba2 4204 	umull	r4, r2, r2, r4
 8017534:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8017538:	4622      	mov	r2, r4
 801753a:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 801753e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8017542:	4413      	add	r3, r2
 8017544:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8017548:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 801754c:	4623      	mov	r3, r4
 801754e:	18c3      	adds	r3, r0, r3
 8017550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017554:	462b      	mov	r3, r5
 8017556:	eb41 0303 	adc.w	r3, r1, r3
 801755a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801755e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8017562:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8017566:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801756a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017572:	f04f 0000 	mov.w	r0, #0
 8017576:	f04f 0100 	mov.w	r1, #0
 801757a:	0fd0      	lsrs	r0, r2, #31
 801757c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017580:	17d9      	asrs	r1, r3, #31
 8017582:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017586:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 801758a:	4603      	mov	r3, r0
 801758c:	6013      	str	r3, [r2, #0]
    return result;
 801758e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017592:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017596:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017598:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801759c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	dc06      	bgt.n	80175b4 <arm_nn_mat_mult_kernel_s16+0x1044>
 80175a6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80175aa:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	425a      	negs	r2, r3
 80175b2:	e000      	b.n	80175b6 <arm_nn_mat_mult_kernel_s16+0x1046>
 80175b4:	2200      	movs	r2, #0
 80175b6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80175ba:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80175be:	6019      	str	r1, [r3, #0]
 80175c0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80175c4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80175c8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80175ca:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80175ce:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80175d2:	2300      	movs	r3, #0
 80175d4:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80175d6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80175da:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80175de:	2201      	movs	r2, #1
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	fa02 f103 	lsl.w	r1, r2, r3
 80175e6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80175ea:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 80175ee:	1e4b      	subs	r3, r1, #1
 80175f0:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80175f2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80175f6:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 80175fa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80175fe:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8017602:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017606:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801760a:	6812      	ldr	r2, [r2, #0]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	4013      	ands	r3, r2
 8017610:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8017612:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017616:	f5a3 7106 	sub.w	r1, r3, #536	; 0x218
 801761a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801761e:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8017622:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017626:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801762a:	6812      	ldr	r2, [r2, #0]
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	fa42 f303 	asr.w	r3, r2, r3
 8017632:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8017634:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017638:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 801763c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017640:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	105b      	asrs	r3, r3, #1
 8017648:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801764a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801764e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	2b00      	cmp	r3, #0
 8017656:	da0a      	bge.n	801766e <arm_nn_mat_mult_kernel_s16+0x10fe>
        threshold++;
 8017658:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801765c:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8017660:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017664:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	3301      	adds	r3, #1
 801766c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801766e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017672:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8017676:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801767a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801767e:	6812      	ldr	r2, [r2, #0]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	429a      	cmp	r2, r3
 8017684:	dd0a      	ble.n	801769c <arm_nn_mat_mult_kernel_s16+0x112c>
        result++;
 8017686:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801768a:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 801768e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017692:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	3301      	adds	r3, #1
 801769a:	6013      	str	r3, [r2, #0]
    return result;
 801769c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80176a0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80176a4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80176a6:	bf00      	nop
 80176a8:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
            out_mult++;
 80176ac:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 80176b0:	3304      	adds	r3, #4
 80176b2:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
        }
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80176b6:	f9b7 269c 	ldrsh.w	r2, [r7, #1692]	; 0x69c
 80176ba:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 80176be:	4293      	cmp	r3, r2
 80176c0:	bfb8      	it	lt
 80176c2:	4613      	movlt	r3, r2
 80176c4:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80176c8:	f9b7 26a0 	ldrsh.w	r2, [r7, #1696]	; 0x6a0
 80176cc:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 80176d0:	4293      	cmp	r3, r2
 80176d2:	bfa8      	it	ge
 80176d4:	4613      	movge	r3, r2
 80176d6:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
        *out_0++ = (q15_t)ch_0_out_0;
 80176da:	f8d7 26ac 	ldr.w	r2, [r7, #1708]	; 0x6ac
 80176de:	1c93      	adds	r3, r2, #2
 80176e0:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 80176e4:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 80176e8:	b21b      	sxth	r3, r3
 80176ea:	8013      	strh	r3, [r2, #0]

        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80176ec:	f9b7 269c 	ldrsh.w	r2, [r7, #1692]	; 0x69c
 80176f0:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80176f4:	4293      	cmp	r3, r2
 80176f6:	bfb8      	it	lt
 80176f8:	4613      	movlt	r3, r2
 80176fa:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80176fe:	f9b7 26a0 	ldrsh.w	r2, [r7, #1696]	; 0x6a0
 8017702:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8017706:	4293      	cmp	r3, r2
 8017708:	bfa8      	it	ge
 801770a:	4613      	movge	r3, r2
 801770c:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
        *out_1++ = (q15_t)ch_0_out_1;
 8017710:	f8d7 2674 	ldr.w	r2, [r7, #1652]	; 0x674
 8017714:	1c93      	adds	r3, r2, #2
 8017716:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 801771a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 801771e:	b21b      	sxth	r3, r3
 8017720:	8013      	strh	r3, [r2, #0]
        out_shift++;
 8017722:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017726:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 801772a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801772e:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	3304      	adds	r3, #4
 8017736:	6013      	str	r3, [r2, #0]

        if (bias)
 8017738:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 801773c:	2b00      	cmp	r3, #0
 801773e:	f000 815d 	beq.w	80179fc <arm_nn_mat_mult_kernel_s16+0x148c>
        {
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
 8017742:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8017746:	681a      	ldr	r2, [r3, #0]
 8017748:	4bab      	ldr	r3, [pc, #684]	; (80179f8 <arm_nn_mat_mult_kernel_s16+0x1488>)
 801774a:	429a      	cmp	r2, r3
 801774c:	dc06      	bgt.n	801775c <arm_nn_mat_mult_kernel_s16+0x11ec>
 801774e:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8017758:	141b      	asrs	r3, r3, #16
 801775a:	e001      	b.n	8017760 <arm_nn_mat_mult_kernel_s16+0x11f0>
 801775c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017760:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
            q63_t acc_64 = ch_1_out_0 + *bias;
 8017764:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8017768:	17da      	asrs	r2, r3, #31
 801776a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801776e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8017772:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8017776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801777a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801777e:	4621      	mov	r1, r4
 8017780:	1889      	adds	r1, r1, r2
 8017782:	61b9      	str	r1, [r7, #24]
 8017784:	4629      	mov	r1, r5
 8017786:	eb41 0303 	adc.w	r3, r1, r3
 801778a:	61fb      	str	r3, [r7, #28]
 801778c:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 8017790:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8017794:	e9c2 3400 	strd	r3, r4, [r2]
            ch_1_out_0 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
 8017798:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801779c:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	6819      	ldr	r1, [r3, #0]
 80177a4:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80177a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ac:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
 80177b0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80177b4:	f5a3 7221 	sub.w	r2, r3, #644	; 0x284
 80177b8:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 80177bc:	6013      	str	r3, [r2, #0]
 80177be:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80177c2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80177c6:	6019      	str	r1, [r3, #0]
    const q63_t new_val = val * reduced_multiplier;
 80177c8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80177cc:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	17da      	asrs	r2, r3, #31
 80177d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80177d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80177dc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80177e0:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 80177e4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80177e8:	f5a3 7120 	sub.w	r1, r3, #640	; 0x280
 80177ec:	6813      	ldr	r3, [r2, #0]
 80177ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80177f2:	4622      	mov	r2, r4
 80177f4:	fb02 f203 	mul.w	r2, r2, r3
 80177f8:	680b      	ldr	r3, [r1, #0]
 80177fa:	4628      	mov	r0, r5
 80177fc:	fb00 f303 	mul.w	r3, r0, r3
 8017800:	441a      	add	r2, r3
 8017802:	680b      	ldr	r3, [r1, #0]
 8017804:	4621      	mov	r1, r4
 8017806:	fba3 1301 	umull	r1, r3, r3, r1
 801780a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801780e:	460b      	mov	r3, r1
 8017810:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8017814:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017818:	18d3      	adds	r3, r2, r3
 801781a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801781e:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8017822:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	; 0x3e8
 8017826:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	; 0x3e8
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 801782a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801782e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	f1c3 040e 	rsb	r4, r3, #14
 8017838:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 801783c:	f1c4 0120 	rsb	r1, r4, #32
 8017840:	f1b4 0020 	subs.w	r0, r4, #32
 8017844:	fa22 f504 	lsr.w	r5, r2, r4
 8017848:	f8c7 5190 	str.w	r5, [r7, #400]	; 0x190
 801784c:	fa03 f101 	lsl.w	r1, r3, r1
 8017850:	f8d7 5190 	ldr.w	r5, [r7, #400]	; 0x190
 8017854:	ea45 0501 	orr.w	r5, r5, r1
 8017858:	f8c7 5190 	str.w	r5, [r7, #400]	; 0x190
 801785c:	d406      	bmi.n	801786c <arm_nn_mat_mult_kernel_s16+0x12fc>
 801785e:	fa43 f000 	asr.w	r0, r3, r0
 8017862:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 8017866:	4301      	orrs	r1, r0
 8017868:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 801786c:	4123      	asrs	r3, r4
 801786e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8017872:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017876:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801787a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801787e:	6013      	str	r3, [r2, #0]
    result = (result + 1) >> 1;             // Last shift position and insert round
 8017880:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017884:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	1c59      	adds	r1, r3, #1
 801788c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017890:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017894:	104b      	asrs	r3, r1, #1
 8017896:	6013      	str	r3, [r2, #0]
    return result;
 8017898:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801789c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
            acc_64 = ch_1_out_1 + *bias++;
 80178a6:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80178aa:	17da      	asrs	r2, r3, #31
 80178ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80178b0:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80178b4:	f8d7 2670 	ldr.w	r2, [r7, #1648]	; 0x670
 80178b8:	f102 0308 	add.w	r3, r2, #8
 80178bc:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 80178c0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80178c4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80178c8:	4621      	mov	r1, r4
 80178ca:	1889      	adds	r1, r1, r2
 80178cc:	6139      	str	r1, [r7, #16]
 80178ce:	4629      	mov	r1, r5
 80178d0:	eb41 0303 	adc.w	r3, r1, r3
 80178d4:	617b      	str	r3, [r7, #20]
 80178d6:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 80178da:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80178de:	e9c2 3400 	strd	r3, r4, [r2]
            ch_1_out_1 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
 80178e2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80178e6:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	6819      	ldr	r1, [r3, #0]
 80178ee:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80178f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f6:	f507 6083 	add.w	r0, r7, #1048	; 0x418
 80178fa:	e9c0 2300 	strd	r2, r3, [r0]
 80178fe:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017902:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8017906:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801790a:	6013      	str	r3, [r2, #0]
 801790c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017910:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8017914:	6019      	str	r1, [r3, #0]
    const q63_t new_val = val * reduced_multiplier;
 8017916:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801791a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	17da      	asrs	r2, r3, #31
 8017922:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017926:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801792a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801792e:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8017932:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017936:	f5a3 7118 	sub.w	r1, r3, #608	; 0x260
 801793a:	6813      	ldr	r3, [r2, #0]
 801793c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8017940:	4622      	mov	r2, r4
 8017942:	fb02 f203 	mul.w	r2, r2, r3
 8017946:	680b      	ldr	r3, [r1, #0]
 8017948:	4628      	mov	r0, r5
 801794a:	fb00 f303 	mul.w	r3, r0, r3
 801794e:	441a      	add	r2, r3
 8017950:	680b      	ldr	r3, [r1, #0]
 8017952:	4621      	mov	r1, r4
 8017954:	fba3 1301 	umull	r1, r3, r3, r1
 8017958:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801795c:	460b      	mov	r3, r1
 801795e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8017962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8017966:	18d3      	adds	r3, r2, r3
 8017968:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801796c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8017970:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8017974:	e9c2 3400 	strd	r3, r4, [r2]
 8017978:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 801797c:	e9c2 3400 	strd	r3, r4, [r2]
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 8017980:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017984:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	f1c3 040e 	rsb	r4, r3, #14
 801798e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8017992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017996:	f1c4 0120 	rsb	r1, r4, #32
 801799a:	f1b4 0020 	subs.w	r0, r4, #32
 801799e:	fa22 fa04 	lsr.w	sl, r2, r4
 80179a2:	fa03 f101 	lsl.w	r1, r3, r1
 80179a6:	ea4a 0a01 	orr.w	sl, sl, r1
 80179aa:	d403      	bmi.n	80179b4 <arm_nn_mat_mult_kernel_s16+0x1444>
 80179ac:	fa43 f000 	asr.w	r0, r3, r0
 80179b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80179b4:	fa43 fb04 	asr.w	fp, r3, r4
 80179b8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80179bc:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 80179c0:	4653      	mov	r3, sl
 80179c2:	6013      	str	r3, [r2, #0]
    result = (result + 1) >> 1;             // Last shift position and insert round
 80179c4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80179c8:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	1c59      	adds	r1, r3, #1
 80179d0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80179d4:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 80179d8:	104b      	asrs	r3, r1, #1
 80179da:	6013      	str	r3, [r2, #0]
    return result;
 80179dc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80179e0:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
            out_mult++;
 80179ea:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 80179ee:	3304      	adds	r3, #4
 80179f0:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
 80179f4:	e261      	b.n	8017eba <arm_nn_mat_mult_kernel_s16+0x194a>
 80179f6:	bf00      	nop
 80179f8:	7ffeffff 	.word	0x7ffeffff
        }
        else
        {
            ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 80179fc:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8017a00:	6818      	ldr	r0, [r3, #0]
 8017a02:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017a06:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	6819      	ldr	r1, [r3, #0]
 8017a0e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017a12:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8017a16:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8017a1a:	6013      	str	r3, [r2, #0]
 8017a1c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017a20:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8017a24:	6018      	str	r0, [r3, #0]
 8017a26:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017a2a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8017a2e:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017a30:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017a34:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8017a3e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017a42:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	fa03 f202 	lsl.w	r2, r3, r2
 8017a4c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017a50:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8017a54:	601a      	str	r2, [r3, #0]
 8017a56:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017a5a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017a5e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017a62:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017a6a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017a6e:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 8017a72:	2300      	movs	r3, #0
 8017a74:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8017a76:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8017a7a:	461a      	mov	r2, r3
 8017a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017a80:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8017a84:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8017a88:	461a      	mov	r2, r3
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8017a90:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8017a94:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017a98:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017a9c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	17da      	asrs	r2, r3, #31
 8017aa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8017aa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8017aa8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017aac:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	17da      	asrs	r2, r3, #31
 8017ab4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8017ab8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8017abc:	e9d7 561e 	ldrd	r5, r6, [r7, #120]	; 0x78
 8017ac0:	4633      	mov	r3, r6
 8017ac2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8017ac6:	fb02 f203 	mul.w	r2, r2, r3
 8017aca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017ace:	462c      	mov	r4, r5
 8017ad0:	fb04 f303 	mul.w	r3, r4, r3
 8017ad4:	4413      	add	r3, r2
 8017ad6:	462a      	mov	r2, r5
 8017ad8:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8017adc:	fba2 4204 	umull	r4, r2, r2, r4
 8017ae0:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8017ae4:	4622      	mov	r2, r4
 8017ae6:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8017aea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8017aee:	4413      	add	r3, r2
 8017af0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8017af4:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8017af8:	4623      	mov	r3, r4
 8017afa:	18c3      	adds	r3, r0, r3
 8017afc:	673b      	str	r3, [r7, #112]	; 0x70
 8017afe:	462b      	mov	r3, r5
 8017b00:	eb41 0303 	adc.w	r3, r1, r3
 8017b04:	677b      	str	r3, [r7, #116]	; 0x74
 8017b06:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8017b0a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8017b0e:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8017b12:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8017b16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017b1a:	f04f 0000 	mov.w	r0, #0
 8017b1e:	f04f 0100 	mov.w	r1, #0
 8017b22:	0fd0      	lsrs	r0, r2, #31
 8017b24:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017b28:	17d9      	asrs	r1, r3, #31
 8017b2a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017b2e:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 8017b32:	4603      	mov	r3, r0
 8017b34:	6013      	str	r3, [r2, #0]
    return result;
 8017b36:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017b3a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8017b3e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017b40:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017b44:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	dc06      	bgt.n	8017b5c <arm_nn_mat_mult_kernel_s16+0x15ec>
 8017b4e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017b52:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	425a      	negs	r2, r3
 8017b5a:	e000      	b.n	8017b5e <arm_nn_mat_mult_kernel_s16+0x15ee>
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017b62:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8017b66:	6019      	str	r1, [r3, #0]
 8017b68:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017b6c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8017b70:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8017b72:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017b76:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8017b7e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017b82:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8017b86:	2201      	movs	r2, #1
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	fa02 f103 	lsl.w	r1, r2, r3
 8017b8e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017b92:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8017b96:	1e4b      	subs	r3, r1, #1
 8017b98:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8017b9a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017b9e:	f5a3 713c 	sub.w	r1, r3, #752	; 0x2f0
 8017ba2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017ba6:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8017baa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017bae:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017bb2:	6812      	ldr	r2, [r2, #0]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	4013      	ands	r3, r2
 8017bb8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8017bba:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017bbe:	f5a3 713a 	sub.w	r1, r3, #744	; 0x2e8
 8017bc2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017bc6:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8017bca:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017bce:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8017bd2:	6812      	ldr	r2, [r2, #0]
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	fa42 f303 	asr.w	r3, r2, r3
 8017bda:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8017bdc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017be0:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8017be4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017be8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	105b      	asrs	r3, r3, #1
 8017bf0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8017bf2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017bf6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	da0a      	bge.n	8017c16 <arm_nn_mat_mult_kernel_s16+0x16a6>
        threshold++;
 8017c00:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c04:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8017c08:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c0c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	3301      	adds	r3, #1
 8017c14:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8017c16:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c1a:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8017c1e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c22:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8017c26:	6812      	ldr	r2, [r2, #0]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	dd0a      	ble.n	8017c44 <arm_nn_mat_mult_kernel_s16+0x16d4>
        result++;
 8017c2e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c32:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8017c36:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c3a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	3301      	adds	r3, #1
 8017c42:	6013      	str	r3, [r2, #0]
    return result;
 8017c44:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c48:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017c4c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017c4e:	bf00      	nop
 8017c50:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
            ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 8017c54:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8017c58:	6818      	ldr	r0, [r3, #0]
 8017c5a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c5e:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	6819      	ldr	r1, [r3, #0]
 8017c66:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c6a:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8017c6e:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8017c72:	6013      	str	r3, [r2, #0]
 8017c74:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c78:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017c7c:	6018      	str	r0, [r3, #0]
 8017c7e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c82:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017c86:	6019      	str	r1, [r3, #0]
 8017c88:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c8c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8017c96:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017c9a:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	fa03 f202 	lsl.w	r2, r3, r2
 8017ca4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017ca8:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8017cac:	601a      	str	r2, [r3, #0]
 8017cae:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017cb2:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8017cb6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017cba:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017cc2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017cc6:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8017cca:	2300      	movs	r3, #0
 8017ccc:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8017cce:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017cd2:	461a      	mov	r2, r3
 8017cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017cd8:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8017cda:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017cde:	461a      	mov	r2, r3
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8017ce4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017ce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017cec:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017cf0:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	17da      	asrs	r2, r3, #31
 8017cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017cfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8017d00:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017d04:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	17da      	asrs	r2, r3, #31
 8017d0c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8017d10:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8017d14:	e9d7 5622 	ldrd	r5, r6, [r7, #136]	; 0x88
 8017d18:	4633      	mov	r3, r6
 8017d1a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8017d1e:	fb02 f203 	mul.w	r2, r2, r3
 8017d22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017d26:	462c      	mov	r4, r5
 8017d28:	fb04 f303 	mul.w	r3, r4, r3
 8017d2c:	4413      	add	r3, r2
 8017d2e:	462a      	mov	r2, r5
 8017d30:	f8d7 4158 	ldr.w	r4, [r7, #344]	; 0x158
 8017d34:	fba2 4204 	umull	r4, r2, r2, r4
 8017d38:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8017d3c:	4622      	mov	r2, r4
 8017d3e:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8017d42:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8017d46:	4413      	add	r3, r2
 8017d48:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8017d4c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8017d50:	4623      	mov	r3, r4
 8017d52:	18c3      	adds	r3, r0, r3
 8017d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017d58:	462b      	mov	r3, r5
 8017d5a:	eb41 0303 	adc.w	r3, r1, r3
 8017d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017d62:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017d66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8017d6a:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8017d6e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d76:	f04f 0000 	mov.w	r0, #0
 8017d7a:	f04f 0100 	mov.w	r1, #0
 8017d7e:	0fd0      	lsrs	r0, r2, #31
 8017d80:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017d84:	17d9      	asrs	r1, r3, #31
 8017d86:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017d8a:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8017d8e:	4603      	mov	r3, r0
 8017d90:	6013      	str	r3, [r2, #0]
    return result;
 8017d92:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017d96:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8017d9a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017d9c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017da0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	dc06      	bgt.n	8017db8 <arm_nn_mat_mult_kernel_s16+0x1848>
 8017daa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017dae:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	425a      	negs	r2, r3
 8017db6:	e000      	b.n	8017dba <arm_nn_mat_mult_kernel_s16+0x184a>
 8017db8:	2200      	movs	r2, #0
 8017dba:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017dbe:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8017dc2:	6019      	str	r1, [r3, #0]
 8017dc4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017dc8:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8017dcc:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8017dce:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017dd2:	f5a3 722e 	sub.w	r2, r3, #696	; 0x2b8
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8017dda:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017dde:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8017de2:	2201      	movs	r2, #1
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	fa02 f103 	lsl.w	r1, r2, r3
 8017dea:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017dee:	f5a3 722f 	sub.w	r2, r3, #700	; 0x2bc
 8017df2:	1e4b      	subs	r3, r1, #1
 8017df4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8017df6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017dfa:	f5a3 7130 	sub.w	r1, r3, #704	; 0x2c0
 8017dfe:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e02:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8017e06:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e0a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017e0e:	6812      	ldr	r2, [r2, #0]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	4013      	ands	r3, r2
 8017e14:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8017e16:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e1a:	f5a3 712e 	sub.w	r1, r3, #696	; 0x2b8
 8017e1e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e22:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8017e26:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e2a:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8017e2e:	6812      	ldr	r2, [r2, #0]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	fa42 f303 	asr.w	r3, r2, r3
 8017e36:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8017e38:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e3c:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8017e40:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e44:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	105b      	asrs	r3, r3, #1
 8017e4c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8017e4e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e52:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	da0a      	bge.n	8017e72 <arm_nn_mat_mult_kernel_s16+0x1902>
        threshold++;
 8017e5c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e60:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8017e64:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e68:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	3301      	adds	r3, #1
 8017e70:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8017e72:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e76:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8017e7a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e7e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8017e82:	6812      	ldr	r2, [r2, #0]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	429a      	cmp	r2, r3
 8017e88:	dd0a      	ble.n	8017ea0 <arm_nn_mat_mult_kernel_s16+0x1930>
        result++;
 8017e8a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e8e:	f5a3 722e 	sub.w	r2, r3, #696	; 0x2b8
 8017e92:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017e96:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	3301      	adds	r3, #1
 8017e9e:	6013      	str	r3, [r2, #0]
    return result;
 8017ea0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017ea4:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8017ea8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017eaa:	bf00      	nop
 8017eac:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
            out_mult++;
 8017eb0:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8017eb4:	3304      	adds	r3, #4
 8017eb6:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
        }
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8017eba:	f9b7 269c 	ldrsh.w	r2, [r7, #1692]	; 0x69c
 8017ebe:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8017ec2:	4293      	cmp	r3, r2
 8017ec4:	bfb8      	it	lt
 8017ec6:	4613      	movlt	r3, r2
 8017ec8:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8017ecc:	f9b7 26a0 	ldrsh.w	r2, [r7, #1696]	; 0x6a0
 8017ed0:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8017ed4:	4293      	cmp	r3, r2
 8017ed6:	bfa8      	it	ge
 8017ed8:	4613      	movge	r3, r2
 8017eda:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
        *out_0++ = (q15_t)ch_1_out_0;
 8017ede:	f8d7 26ac 	ldr.w	r2, [r7, #1708]	; 0x6ac
 8017ee2:	1c93      	adds	r3, r2, #2
 8017ee4:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 8017ee8:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8017eec:	b21b      	sxth	r3, r3
 8017eee:	8013      	strh	r3, [r2, #0]

        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8017ef0:	f9b7 269c 	ldrsh.w	r2, [r7, #1692]	; 0x69c
 8017ef4:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8017ef8:	4293      	cmp	r3, r2
 8017efa:	bfb8      	it	lt
 8017efc:	4613      	movlt	r3, r2
 8017efe:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8017f02:	f9b7 26a0 	ldrsh.w	r2, [r7, #1696]	; 0x6a0
 8017f06:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8017f0a:	4293      	cmp	r3, r2
 8017f0c:	bfa8      	it	ge
 8017f0e:	4613      	movge	r3, r2
 8017f10:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
        *out_1++ = (q15_t)ch_1_out_1;
 8017f14:	f8d7 2674 	ldr.w	r2, [r7, #1652]	; 0x674
 8017f18:	1c93      	adds	r3, r2, #2
 8017f1a:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8017f1e:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8017f22:	b21b      	sxth	r3, r3
 8017f24:	8013      	strh	r3, [r2, #0]
        out_shift++;
 8017f26:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017f2a:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 8017f2e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017f32:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	3304      	adds	r3, #4
 8017f3a:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 8017f3c:	f8d7 26a4 	ldr.w	r2, [r7, #1700]	; 0x6a4
 8017f40:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8017f44:	4413      	add	r3, r2
 8017f46:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
        row_count--;
 8017f4a:	f8b7 366e 	ldrh.w	r3, [r7, #1646]	; 0x66e
 8017f4e:	3b01      	subs	r3, #1
 8017f50:	f8a7 366e 	strh.w	r3, [r7, #1646]	; 0x66e
    while (row_count)
 8017f54:	f8b7 366e 	ldrh.w	r3, [r7, #1646]	; 0x66e
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	f47e ab44 	bne.w	80165e6 <arm_nn_mat_mult_kernel_s16+0x76>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 8017f5e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017f62:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	f003 0301 	and.w	r3, r3, #1
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	f000 8716 	beq.w	8018d9e <arm_nn_mat_mult_kernel_s16+0x282e>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 8017f72:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017f76:	f2a3 4294 	subw	r2, r3, #1172	; 0x494
 8017f7a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017f7e:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8017f86:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017f8a:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8017f8e:	681a      	ldr	r2, [r3, #0]
 8017f90:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8017f94:	005b      	lsls	r3, r3, #1
 8017f96:	441a      	add	r2, r3
 8017f98:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017f9c:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8017fa0:	601a      	str	r2, [r3, #0]

        q31_t ch_0_out_0 = 0;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
        q31_t ch_0_out_1 = 0;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648

        uint16_t col_count = num_col_a >> 2;
 8017fae:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8017fb2:	109b      	asrs	r3, r3, #2
 8017fb4:	f8a7 3646 	strh.w	r3, [r7, #1606]	; 0x646
        while (col_count)
 8017fb8:	e2b2      	b.n	8018520 <arm_nn_mat_mult_kernel_s16+0x1fb0>
 8017fba:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017fbe:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 8017fc2:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8017fc6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8017fc8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017fcc:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	461a      	mov	r2, r3
 8017fd8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017fdc:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8017fe0:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8017fe2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017fe6:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	1d1a      	adds	r2, r3, #4
 8017ff0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017ff4:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	601a      	str	r2, [r3, #0]
    return (val);
 8017ffc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018000:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8018004:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8018006:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 801800a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801800e:	f5a3 7265 	sub.w	r2, r3, #916	; 0x394
 8018012:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8018016:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8018018:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801801c:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	461a      	mov	r2, r3
 8018028:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801802c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8018030:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018032:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018036:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	1d1a      	adds	r2, r3, #4
 8018040:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018044:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	601a      	str	r2, [r3, #0]
    return (val);
 801804c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018050:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8018054:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8018056:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 801805a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801805e:	f2a3 42bc 	subw	r2, r3, #1212	; 0x4bc
 8018062:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8018066:	6013      	str	r3, [r2, #0]
 8018068:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801806c:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8018070:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8018074:	6013      	str	r3, [r2, #0]
 8018076:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801807a:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 801807e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8018082:	6013      	str	r3, [r2, #0]
 8018084:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018088:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 801808c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8018090:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8018092:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018096:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	461a      	mov	r2, r3
 80180a2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80180a6:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80180aa:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80180ac:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80180b0:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	1d1a      	adds	r2, r3, #4
 80180ba:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80180be:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	601a      	str	r2, [r3, #0]
    return (val);
 80180c6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80180ca:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80180ce:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80180d0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80180d4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80180d8:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 80180da:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80180de:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80180e2:	681a      	ldr	r2, [r3, #0]
 80180e4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80180e8:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80180ec:	601a      	str	r2, [r3, #0]
 80180ee:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80180f2:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 80180f6:	2308      	movs	r3, #8
 80180f8:	6013      	str	r3, [r2, #0]
 80180fa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80180fe:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 8018102:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018106:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	6013      	str	r3, [r2, #0]
 801810e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018112:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8018116:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801811a:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8018122:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018126:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 801812a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801812e:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	f003 031f 	and.w	r3, r3, #31
 8018138:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801813a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801813e:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d105      	bne.n	8018154 <arm_nn_mat_mult_kernel_s16+0x1be4>
    return op1;
 8018148:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801814c:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8018150:	681a      	ldr	r2, [r3, #0]
 8018152:	e00a      	b.n	801816a <arm_nn_mat_mult_kernel_s16+0x1bfa>
  return (op1 >> op2) | (op1 << (32U - op2));
 8018154:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018158:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 801815c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018160:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8018164:	6812      	ldr	r2, [r2, #0]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	41da      	rors	r2, r3
 801816a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801816e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8018172:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018174:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018178:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	fa2f f283 	sxtb16	r2, r3
 8018182:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018186:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 801818a:	601a      	str	r2, [r3, #0]
  return(result);
 801818c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018190:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8018194:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8018196:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801819a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 801819e:	601a      	str	r2, [r3, #0]
  return result;
 80181a0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80181a4:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80181a8:	681a      	ldr	r2, [r3, #0]
 80181aa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80181ae:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80181b2:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 80181b4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80181b8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80181bc:	681a      	ldr	r2, [r3, #0]
 80181be:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80181c2:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 80181c6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80181c8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80181cc:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	fa2f f283 	sxtb16	r2, r3
 80181d6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80181da:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 80181de:	601a      	str	r2, [r3, #0]
  return(result);
 80181e0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80181e4:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 80181e8:	681a      	ldr	r2, [r3, #0]
 80181ea:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80181ee:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80181f2:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80181f4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80181f8:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 80181fc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018200:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	6013      	str	r3, [r2, #0]
 8018208:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801820c:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8018210:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018214:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	6013      	str	r3, [r2, #0]
 801821c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018220:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8018224:	681a      	ldr	r2, [r3, #0]
 8018226:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801822a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 8018234:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018238:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801823c:	601a      	str	r2, [r3, #0]
 801823e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018242:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	461a      	mov	r2, r3
 801824a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801824e:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8018256:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801825a:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 801825e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018262:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	6013      	str	r3, [r2, #0]
 801826a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801826e:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8018272:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018276:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	6013      	str	r3, [r2, #0]
 801827e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018282:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8018286:	681a      	ldr	r2, [r3, #0]
 8018288:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801828c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8018296:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801829a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 801829e:	601a      	str	r2, [r3, #0]
 80182a0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80182a4:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	461a      	mov	r2, r3
 80182ac:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80182b0:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	601a      	str	r2, [r3, #0]
    return source;
 80182b8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80182bc:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 80182c0:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 80182c2:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 80182c6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80182ca:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	4618      	mov	r0, r3
 80182d2:	f8d7 262c 	ldr.w	r2, [r7, #1580]	; 0x62c
 80182d6:	f8d7 164c 	ldr.w	r1, [r7, #1612]	; 0x64c
 80182da:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80182de:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80182e2:	6018      	str	r0, [r3, #0]
 80182e4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80182e8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80182ec:	601a      	str	r2, [r3, #0]
 80182ee:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80182f2:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80182f6:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80182f8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80182fc:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8018300:	6819      	ldr	r1, [r3, #0]
 8018302:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018306:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801830a:	681a      	ldr	r2, [r3, #0]
 801830c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018310:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	fb21 3202 	smlad	r2, r1, r2, r3
 801831a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801831e:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8018322:	601a      	str	r2, [r3, #0]
  return(result);
 8018324:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018328:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8018332:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018336:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	4618      	mov	r0, r3
 801833e:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8018342:	f8d7 1648 	ldr.w	r1, [r7, #1608]	; 0x648
 8018346:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801834a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801834e:	6018      	str	r0, [r3, #0]
 8018350:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018354:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8018358:	601a      	str	r2, [r3, #0]
 801835a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801835e:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8018362:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018364:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018368:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801836c:	6819      	ldr	r1, [r3, #0]
 801836e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018372:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8018376:	681a      	ldr	r2, [r3, #0]
 8018378:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801837c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	fb21 3202 	smlad	r2, r1, r2, r3
 8018386:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801838a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801838e:	601a      	str	r2, [r3, #0]
  return(result);
 8018390:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018394:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 801839e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80183a2:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 80183a6:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80183aa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80183ac:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80183b0:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	461a      	mov	r2, r3
 80183bc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80183c0:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80183c4:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80183c6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80183ca:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	1d1a      	adds	r2, r3, #4
 80183d4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80183d8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	601a      	str	r2, [r3, #0]
    return (val);
 80183e0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80183e4:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80183e8:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 80183ea:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 80183ee:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80183f2:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 80183f6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80183fa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80183fc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018400:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	461a      	mov	r2, r3
 801840c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018410:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8018414:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018416:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801841a:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	1d1a      	adds	r2, r3, #4
 8018424:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018428:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	601a      	str	r2, [r3, #0]
    return (val);
 8018430:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018434:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8018438:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801843a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801843e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018442:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	4618      	mov	r0, r3
 801844a:	f8d7 262c 	ldr.w	r2, [r7, #1580]	; 0x62c
 801844e:	f8d7 164c 	ldr.w	r1, [r7, #1612]	; 0x64c
 8018452:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018456:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 801845a:	6018      	str	r0, [r3, #0]
 801845c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018460:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8018464:	601a      	str	r2, [r3, #0]
 8018466:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801846a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801846e:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018470:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018474:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8018478:	6819      	ldr	r1, [r3, #0]
 801847a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801847e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8018482:	681a      	ldr	r2, [r3, #0]
 8018484:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018488:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	fb21 3202 	smlad	r2, r1, r2, r3
 8018492:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018496:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801849a:	601a      	str	r2, [r3, #0]
  return(result);
 801849c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80184a0:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 80184aa:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80184ae:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	4618      	mov	r0, r3
 80184b6:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 80184ba:	f8d7 1648 	ldr.w	r1, [r7, #1608]	; 0x648
 80184be:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80184c2:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80184c6:	6018      	str	r0, [r3, #0]
 80184c8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80184cc:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80184d0:	601a      	str	r2, [r3, #0]
 80184d2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80184d6:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80184da:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80184dc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80184e0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80184e4:	6819      	ldr	r1, [r3, #0]
 80184e6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80184ea:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80184ee:	681a      	ldr	r2, [r3, #0]
 80184f0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80184f4:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	fb21 3202 	smlad	r2, r1, r2, r3
 80184fe:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018502:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8018506:	601a      	str	r2, [r3, #0]
  return(result);
 8018508:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801850c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648

            col_count--;
 8018516:	f8b7 3646 	ldrh.w	r3, [r7, #1606]	; 0x646
 801851a:	3b01      	subs	r3, #1
 801851c:	f8a7 3646 	strh.w	r3, [r7, #1606]	; 0x646
        while (col_count)
 8018520:	f8b7 3646 	ldrh.w	r3, [r7, #1606]	; 0x646
 8018524:	2b00      	cmp	r3, #0
 8018526:	f47f ad48 	bne.w	8017fba <arm_nn_mat_mult_kernel_s16+0x1a4a>
        }
        col_count = num_col_a & 0x3;
 801852a:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 801852e:	b29b      	uxth	r3, r3
 8018530:	f003 0303 	and.w	r3, r3, #3
 8018534:	f8a7 3646 	strh.w	r3, [r7, #1606]	; 0x646
        while (col_count)
 8018538:	e03e      	b.n	80185b8 <arm_nn_mat_mult_kernel_s16+0x2048>
        {
            q7_t a0 = *ip_a0++;
 801853a:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 801853e:	1c53      	adds	r3, r2, #1
 8018540:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8018544:	7813      	ldrb	r3, [r2, #0]
 8018546:	f887 3637 	strb.w	r3, [r7, #1591]	; 0x637
            q15_t b0 = *ip_b0++;
 801854a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801854e:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8018552:	6819      	ldr	r1, [r3, #0]
 8018554:	1c8a      	adds	r2, r1, #2
 8018556:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801855a:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 801855e:	601a      	str	r2, [r3, #0]
 8018560:	880b      	ldrh	r3, [r1, #0]
 8018562:	f8a7 3634 	strh.w	r3, [r7, #1588]	; 0x634
            q15_t b1 = *ip_b1++;
 8018566:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801856a:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 801856e:	6819      	ldr	r1, [r3, #0]
 8018570:	1c8a      	adds	r2, r1, #2
 8018572:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018576:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 801857a:	601a      	str	r2, [r3, #0]
 801857c:	880b      	ldrh	r3, [r1, #0]
 801857e:	f8a7 3632 	strh.w	r3, [r7, #1586]	; 0x632

            ch_0_out_0 += a0 * b0;
 8018582:	f997 2637 	ldrsb.w	r2, [r7, #1591]	; 0x637
 8018586:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	; 0x634
 801858a:	fb03 f202 	mul.w	r2, r3, r2
 801858e:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8018592:	4413      	add	r3, r2
 8018594:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
            ch_0_out_1 += a0 * b1;
 8018598:	f997 2637 	ldrsb.w	r2, [r7, #1591]	; 0x637
 801859c:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	; 0x632
 80185a0:	fb03 f202 	mul.w	r2, r3, r2
 80185a4:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 80185a8:	4413      	add	r3, r2
 80185aa:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
            col_count--;
 80185ae:	f8b7 3646 	ldrh.w	r3, [r7, #1606]	; 0x646
 80185b2:	3b01      	subs	r3, #1
 80185b4:	f8a7 3646 	strh.w	r3, [r7, #1606]	; 0x646
        while (col_count)
 80185b8:	f8b7 3646 	ldrh.w	r3, [r7, #1606]	; 0x646
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d1bc      	bne.n	801853a <arm_nn_mat_mult_kernel_s16+0x1fca>
        }
        if (bias)
 80185c0:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	f000 8157 	beq.w	8018878 <arm_nn_mat_mult_kernel_s16+0x2308>
        {
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
 80185ca:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 80185ce:	681a      	ldr	r2, [r3, #0]
 80185d0:	4ba8      	ldr	r3, [pc, #672]	; (8018874 <arm_nn_mat_mult_kernel_s16+0x2304>)
 80185d2:	429a      	cmp	r2, r3
 80185d4:	dc06      	bgt.n	80185e4 <arm_nn_mat_mult_kernel_s16+0x2074>
 80185d6:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80185e0:	141b      	asrs	r3, r3, #16
 80185e2:	e001      	b.n	80185e8 <arm_nn_mat_mult_kernel_s16+0x2078>
 80185e4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80185e8:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
            q63_t acc_64 = ch_0_out_0 + *bias;
 80185ec:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 80185f0:	17da      	asrs	r2, r3, #31
 80185f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80185f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80185fa:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 80185fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018602:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8018606:	4621      	mov	r1, r4
 8018608:	1889      	adds	r1, r1, r2
 801860a:	60b9      	str	r1, [r7, #8]
 801860c:	4629      	mov	r1, r5
 801860e:	eb43 0101 	adc.w	r1, r3, r1
 8018612:	60f9      	str	r1, [r7, #12]
 8018614:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 8018618:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801861c:	e9c2 3400 	strd	r3, r4, [r2]
            ch_0_out_0 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
 8018620:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018624:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	6819      	ldr	r1, [r3, #0]
 801862c:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8018630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018634:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
 8018638:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801863c:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8018640:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 8018644:	6013      	str	r3, [r2, #0]
 8018646:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801864a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801864e:	6019      	str	r1, [r3, #0]
    const q63_t new_val = val * reduced_multiplier;
 8018650:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018654:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	17da      	asrs	r2, r3, #31
 801865c:	663b      	str	r3, [r7, #96]	; 0x60
 801865e:	667a      	str	r2, [r7, #100]	; 0x64
 8018660:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018664:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 8018668:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801866c:	f5a3 7170 	sub.w	r1, r3, #960	; 0x3c0
 8018670:	6813      	ldr	r3, [r2, #0]
 8018672:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8018676:	4622      	mov	r2, r4
 8018678:	fb02 f203 	mul.w	r2, r2, r3
 801867c:	680b      	ldr	r3, [r1, #0]
 801867e:	4628      	mov	r0, r5
 8018680:	fb00 f303 	mul.w	r3, r0, r3
 8018684:	441a      	add	r2, r3
 8018686:	680b      	ldr	r3, [r1, #0]
 8018688:	4621      	mov	r1, r4
 801868a:	fba3 1301 	umull	r1, r3, r3, r1
 801868e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8018692:	460b      	mov	r3, r1
 8018694:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8018698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801869c:	18d3      	adds	r3, r2, r3
 801869e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80186a2:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80186a6:	e9c7 34aa 	strd	r3, r4, [r7, #680]	; 0x2a8
 80186aa:	e9c7 34aa 	strd	r3, r4, [r7, #680]	; 0x2a8
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 80186ae:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80186b2:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	f1c3 040e 	rsb	r4, r3, #14
 80186bc:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80186c0:	f1c4 0120 	rsb	r1, r4, #32
 80186c4:	f1b4 0020 	subs.w	r0, r4, #32
 80186c8:	fa22 f504 	lsr.w	r5, r2, r4
 80186cc:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
 80186d0:	fa03 f101 	lsl.w	r1, r3, r1
 80186d4:	f8d7 5180 	ldr.w	r5, [r7, #384]	; 0x180
 80186d8:	ea45 0501 	orr.w	r5, r5, r1
 80186dc:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
 80186e0:	d406      	bmi.n	80186f0 <arm_nn_mat_mult_kernel_s16+0x2180>
 80186e2:	fa43 f000 	asr.w	r0, r3, r0
 80186e6:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 80186ea:	4301      	orrs	r1, r0
 80186ec:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 80186f0:	4123      	asrs	r3, r4
 80186f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80186f6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80186fa:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80186fe:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8018702:	601a      	str	r2, [r3, #0]
    result = (result + 1) >> 1;             // Last shift position and insert round
 8018704:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018708:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	1c5a      	adds	r2, r3, #1
 8018710:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018714:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8018718:	1052      	asrs	r2, r2, #1
 801871a:	601a      	str	r2, [r3, #0]
    return result;
 801871c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018720:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
            acc_64 = ch_0_out_1 + *bias++;
 801872a:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 801872e:	17da      	asrs	r2, r3, #31
 8018730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8018734:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8018738:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 801873c:	f103 0208 	add.w	r2, r3, #8
 8018740:	f8c7 2670 	str.w	r2, [r7, #1648]	; 0x670
 8018744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018748:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 801874c:	4621      	mov	r1, r4
 801874e:	1889      	adds	r1, r1, r2
 8018750:	6039      	str	r1, [r7, #0]
 8018752:	4629      	mov	r1, r5
 8018754:	eb43 0101 	adc.w	r1, r3, r1
 8018758:	6079      	str	r1, [r7, #4]
 801875a:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 801875e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8018762:	e9c2 3400 	strd	r3, r4, [r2]
            ch_0_out_1 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
 8018766:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801876a:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	6819      	ldr	r1, [r3, #0]
 8018772:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8018776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801877a:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
 801877e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018782:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8018786:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 801878a:	601a      	str	r2, [r3, #0]
 801878c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018790:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8018794:	6019      	str	r1, [r3, #0]
    const q63_t new_val = val * reduced_multiplier;
 8018796:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801879a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	17da      	asrs	r2, r3, #31
 80187a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80187a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80187a6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80187aa:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 80187ae:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80187b2:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80187b6:	6812      	ldr	r2, [r2, #0]
 80187b8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80187bc:	4621      	mov	r1, r4
 80187be:	fb01 f102 	mul.w	r1, r1, r2
 80187c2:	681a      	ldr	r2, [r3, #0]
 80187c4:	4628      	mov	r0, r5
 80187c6:	fb00 f202 	mul.w	r2, r0, r2
 80187ca:	440a      	add	r2, r1
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	4621      	mov	r1, r4
 80187d0:	fba3 1301 	umull	r1, r3, r3, r1
 80187d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80187d8:	460b      	mov	r3, r1
 80187da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80187de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80187e2:	18d3      	adds	r3, r2, r3
 80187e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80187e8:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80187ec:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
 80187f0:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 80187f4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80187f8:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	f1c3 010e 	rsb	r1, r3, #14
 8018802:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8018806:	f1c1 0420 	rsb	r4, r1, #32
 801880a:	f1b1 0020 	subs.w	r0, r1, #32
 801880e:	fa22 f501 	lsr.w	r5, r2, r1
 8018812:	f8c7 5188 	str.w	r5, [r7, #392]	; 0x188
 8018816:	fa03 f404 	lsl.w	r4, r3, r4
 801881a:	f8d7 5188 	ldr.w	r5, [r7, #392]	; 0x188
 801881e:	ea45 0504 	orr.w	r5, r5, r4
 8018822:	f8c7 5188 	str.w	r5, [r7, #392]	; 0x188
 8018826:	d406      	bmi.n	8018836 <arm_nn_mat_mult_kernel_s16+0x22c6>
 8018828:	fa43 f000 	asr.w	r0, r3, r0
 801882c:	f8d7 4188 	ldr.w	r4, [r7, #392]	; 0x188
 8018830:	4304      	orrs	r4, r0
 8018832:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 8018836:	410b      	asrs	r3, r1
 8018838:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 801883c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018840:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8018844:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8018848:	601a      	str	r2, [r3, #0]
    result = (result + 1) >> 1;             // Last shift position and insert round
 801884a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801884e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	1c5a      	adds	r2, r3, #1
 8018856:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801885a:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 801885e:	1052      	asrs	r2, r2, #1
 8018860:	601a      	str	r2, [r3, #0]
    return result;
 8018862:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018866:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8018870:	e24f      	b.n	8018d12 <arm_nn_mat_mult_kernel_s16+0x27a2>
 8018872:	bf00      	nop
 8018874:	7ffeffff 	.word	0x7ffeffff
        }
        else
        {
            ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8018878:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 801887c:	6818      	ldr	r0, [r3, #0]
 801887e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018882:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	6819      	ldr	r1, [r3, #0]
 801888a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801888e:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 8018892:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8018896:	6013      	str	r3, [r2, #0]
 8018898:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801889c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80188a0:	6018      	str	r0, [r3, #0]
 80188a2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80188a6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80188aa:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80188ac:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80188b0:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80188ba:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80188be:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	fa03 f202 	lsl.w	r2, r3, r2
 80188c8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80188cc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80188d0:	601a      	str	r2, [r3, #0]
 80188d2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80188d6:	f5a3 6283 	sub.w	r2, r3, #1048	; 0x418
 80188da:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80188de:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80188e6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80188ea:	f2a3 421c 	subw	r2, r3, #1052	; 0x41c
 80188ee:	2300      	movs	r3, #0
 80188f0:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80188f2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80188f6:	461a      	mov	r2, r3
 80188f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80188fc:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80188fe:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8018902:	461a      	mov	r2, r3
 8018904:	2300      	movs	r3, #0
 8018906:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8018908:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801890c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018910:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018914:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	17da      	asrs	r2, r3, #31
 801891c:	643b      	str	r3, [r7, #64]	; 0x40
 801891e:	647a      	str	r2, [r7, #68]	; 0x44
 8018920:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018924:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	17da      	asrs	r2, r3, #31
 801892c:	63bb      	str	r3, [r7, #56]	; 0x38
 801892e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8018930:	e9d7 5610 	ldrd	r5, r6, [r7, #64]	; 0x40
 8018934:	4633      	mov	r3, r6
 8018936:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 801893a:	4642      	mov	r2, r8
 801893c:	fb02 f203 	mul.w	r2, r2, r3
 8018940:	464b      	mov	r3, r9
 8018942:	462c      	mov	r4, r5
 8018944:	fb04 f303 	mul.w	r3, r4, r3
 8018948:	4413      	add	r3, r2
 801894a:	462a      	mov	r2, r5
 801894c:	4644      	mov	r4, r8
 801894e:	fba2 4204 	umull	r4, r2, r2, r4
 8018952:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8018956:	4622      	mov	r2, r4
 8018958:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 801895c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8018960:	4413      	add	r3, r2
 8018962:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8018966:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 801896a:	4623      	mov	r3, r4
 801896c:	18c3      	adds	r3, r0, r3
 801896e:	633b      	str	r3, [r7, #48]	; 0x30
 8018970:	462b      	mov	r3, r5
 8018972:	eb41 0303 	adc.w	r3, r1, r3
 8018976:	637b      	str	r3, [r7, #52]	; 0x34
 8018978:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801897c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8018980:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8018984:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8018988:	e9d3 0100 	ldrd	r0, r1, [r3]
 801898c:	f04f 0200 	mov.w	r2, #0
 8018990:	f04f 0300 	mov.w	r3, #0
 8018994:	0fc2      	lsrs	r2, r0, #31
 8018996:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801899a:	17cb      	asrs	r3, r1, #31
 801899c:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 80189a0:	f2a1 411c 	subw	r1, r1, #1052	; 0x41c
 80189a4:	4613      	mov	r3, r2
 80189a6:	600b      	str	r3, [r1, #0]
    return result;
 80189a8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80189ac:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80189b0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80189b2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80189b6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	dc06      	bgt.n	80189ce <arm_nn_mat_mult_kernel_s16+0x245e>
 80189c0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80189c4:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	425b      	negs	r3, r3
 80189cc:	e000      	b.n	80189d0 <arm_nn_mat_mult_kernel_s16+0x2460>
 80189ce:	2300      	movs	r3, #0
 80189d0:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 80189d4:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 80189d8:	6011      	str	r1, [r2, #0]
 80189da:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 80189de:	f2a2 4224 	subw	r2, r2, #1060	; 0x424
 80189e2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80189e4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80189e8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80189ec:	2200      	movs	r2, #0
 80189ee:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80189f0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80189f4:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80189f8:	2201      	movs	r2, #1
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	409a      	lsls	r2, r3
 80189fe:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018a02:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8018a06:	3a01      	subs	r2, #1
 8018a08:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8018a0a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018a0e:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8018a12:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018a16:	f5a2 6184 	sub.w	r1, r2, #1056	; 0x420
 8018a1a:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018a1e:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8018a22:	6809      	ldr	r1, [r1, #0]
 8018a24:	6812      	ldr	r2, [r2, #0]
 8018a26:	400a      	ands	r2, r1
 8018a28:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8018a2a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018a2e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8018a32:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018a36:	f5a2 6184 	sub.w	r1, r2, #1056	; 0x420
 8018a3a:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018a3e:	f2a2 4224 	subw	r2, r2, #1060	; 0x424
 8018a42:	6809      	ldr	r1, [r1, #0]
 8018a44:	6812      	ldr	r2, [r2, #0]
 8018a46:	fa41 f202 	asr.w	r2, r1, r2
 8018a4a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8018a4c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018a50:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8018a54:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018a58:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8018a5c:	6812      	ldr	r2, [r2, #0]
 8018a5e:	1052      	asrs	r2, r2, #1
 8018a60:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8018a62:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018a66:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	da0a      	bge.n	8018a86 <arm_nn_mat_mult_kernel_s16+0x2516>
        threshold++;
 8018a70:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018a74:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8018a78:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018a7c:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 8018a80:	6812      	ldr	r2, [r2, #0]
 8018a82:	3201      	adds	r2, #1
 8018a84:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8018a86:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018a8a:	f5a3 6286 	sub.w	r2, r3, #1072	; 0x430
 8018a8e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018a92:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8018a96:	6812      	ldr	r2, [r2, #0]
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	dd0a      	ble.n	8018ab4 <arm_nn_mat_mult_kernel_s16+0x2544>
        result++;
 8018a9e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018aa2:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8018aa6:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018aaa:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8018aae:	6812      	ldr	r2, [r2, #0]
 8018ab0:	3201      	adds	r2, #1
 8018ab2:	601a      	str	r2, [r3, #0]
    return result;
 8018ab4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018ab8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8018abc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018abe:	bf00      	nop
 8018ac0:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
            ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8018ac4:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8018ac8:	6819      	ldr	r1, [r3, #0]
 8018aca:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018ace:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	681a      	ldr	r2, [r3, #0]
 8018ad6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018ada:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8018ade:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 8018ae2:	6018      	str	r0, [r3, #0]
 8018ae4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018ae8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8018aec:	6019      	str	r1, [r3, #0]
 8018aee:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018af2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8018af6:	601a      	str	r2, [r3, #0]
 8018af8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018afc:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b06:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018b0a:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8018b0e:	6812      	ldr	r2, [r2, #0]
 8018b10:	409a      	lsls	r2, r3
 8018b12:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018b16:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8018b1a:	601a      	str	r2, [r3, #0]
 8018b1c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018b20:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8018b24:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018b28:	f5a2 7277 	sub.w	r2, r2, #988	; 0x3dc
 8018b2c:	6812      	ldr	r2, [r2, #0]
 8018b2e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8018b30:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018b34:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8018b38:	2200      	movs	r2, #0
 8018b3a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8018b3c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8018b40:	461a      	mov	r2, r3
 8018b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018b46:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8018b4a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8018b4e:	461a      	mov	r2, r3
 8018b50:	2300      	movs	r3, #0
 8018b52:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8018b56:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8018b5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018b5e:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8018b62:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8018b66:	6809      	ldr	r1, [r1, #0]
 8018b68:	17c8      	asrs	r0, r1, #31
 8018b6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8018b6c:	65f8      	str	r0, [r7, #92]	; 0x5c
 8018b6e:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8018b72:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8018b76:	6809      	ldr	r1, [r1, #0]
 8018b78:	17c8      	asrs	r0, r1, #31
 8018b7a:	6539      	str	r1, [r7, #80]	; 0x50
 8018b7c:	6578      	str	r0, [r7, #84]	; 0x54
 8018b7e:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8018b82:	4631      	mov	r1, r6
 8018b84:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8018b88:	4640      	mov	r0, r8
 8018b8a:	fb00 f001 	mul.w	r0, r0, r1
 8018b8e:	4649      	mov	r1, r9
 8018b90:	462c      	mov	r4, r5
 8018b92:	fb04 f101 	mul.w	r1, r4, r1
 8018b96:	4401      	add	r1, r0
 8018b98:	4628      	mov	r0, r5
 8018b9a:	4644      	mov	r4, r8
 8018b9c:	fba0 4004 	umull	r4, r0, r0, r4
 8018ba0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8018ba4:	4620      	mov	r0, r4
 8018ba6:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
 8018baa:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8018bae:	4401      	add	r1, r0
 8018bb0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 8018bb4:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8018bb8:	4621      	mov	r1, r4
 8018bba:	1851      	adds	r1, r2, r1
 8018bbc:	64b9      	str	r1, [r7, #72]	; 0x48
 8018bbe:	4629      	mov	r1, r5
 8018bc0:	eb43 0101 	adc.w	r1, r3, r1
 8018bc4:	64f9      	str	r1, [r7, #76]	; 0x4c
 8018bc6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8018bca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8018bce:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8018bd2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8018bd6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8018bda:	f04f 0200 	mov.w	r2, #0
 8018bde:	f04f 0300 	mov.w	r3, #0
 8018be2:	0fc2      	lsrs	r2, r0, #31
 8018be4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8018be8:	17cb      	asrs	r3, r1, #31
 8018bea:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8018bee:	f5a1 717b 	sub.w	r1, r1, #1004	; 0x3ec
 8018bf2:	4613      	mov	r3, r2
 8018bf4:	600b      	str	r3, [r1, #0]
    return result;
 8018bf6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018bfa:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8018bfe:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018c00:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018c04:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	dc06      	bgt.n	8018c1c <arm_nn_mat_mult_kernel_s16+0x26ac>
 8018c0e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018c12:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	425b      	negs	r3, r3
 8018c1a:	e000      	b.n	8018c1e <arm_nn_mat_mult_kernel_s16+0x26ae>
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018c22:	f5a2 727c 	sub.w	r2, r2, #1008	; 0x3f0
 8018c26:	6011      	str	r1, [r2, #0]
 8018c28:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018c2c:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 8018c30:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018c32:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018c36:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018c3e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018c42:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8018c46:	2201      	movs	r2, #1
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	409a      	lsls	r2, r3
 8018c4c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018c50:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8018c54:	3a01      	subs	r2, #1
 8018c56:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8018c58:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018c5c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8018c60:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018c64:	f5a2 717c 	sub.w	r1, r2, #1008	; 0x3f0
 8018c68:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018c6c:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8018c70:	6809      	ldr	r1, [r1, #0]
 8018c72:	6812      	ldr	r2, [r2, #0]
 8018c74:	400a      	ands	r2, r1
 8018c76:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8018c78:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018c7c:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8018c80:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018c84:	f5a2 717c 	sub.w	r1, r2, #1008	; 0x3f0
 8018c88:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018c8c:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 8018c90:	6809      	ldr	r1, [r1, #0]
 8018c92:	6812      	ldr	r2, [r2, #0]
 8018c94:	fa41 f202 	asr.w	r2, r1, r2
 8018c98:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8018c9a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018c9e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8018ca2:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018ca6:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8018caa:	6812      	ldr	r2, [r2, #0]
 8018cac:	1052      	asrs	r2, r2, #1
 8018cae:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8018cb0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018cb4:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	da0a      	bge.n	8018cd4 <arm_nn_mat_mult_kernel_s16+0x2764>
        threshold++;
 8018cbe:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018cc2:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8018cc6:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018cca:	f2a2 4204 	subw	r2, r2, #1028	; 0x404
 8018cce:	6812      	ldr	r2, [r2, #0]
 8018cd0:	3201      	adds	r2, #1
 8018cd2:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8018cd4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018cd8:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
 8018cdc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018ce0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8018ce4:	6812      	ldr	r2, [r2, #0]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	429a      	cmp	r2, r3
 8018cea:	dd0a      	ble.n	8018d02 <arm_nn_mat_mult_kernel_s16+0x2792>
        result++;
 8018cec:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018cf0:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8018cf4:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018cf8:	f5a2 727e 	sub.w	r2, r2, #1016	; 0x3f8
 8018cfc:	6812      	ldr	r2, [r2, #0]
 8018cfe:	3201      	adds	r2, #1
 8018d00:	601a      	str	r2, [r3, #0]
    return result;
 8018d02:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018d06:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8018d0a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018d0c:	bf00      	nop
 8018d0e:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
        }
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8018d12:	f9b7 369c 	ldrsh.w	r3, [r7, #1692]	; 0x69c
 8018d16:	f8d7 264c 	ldr.w	r2, [r7, #1612]	; 0x64c
 8018d1a:	4293      	cmp	r3, r2
 8018d1c:	bfb8      	it	lt
 8018d1e:	4613      	movlt	r3, r2
 8018d20:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8018d24:	f9b7 36a0 	ldrsh.w	r3, [r7, #1696]	; 0x6a0
 8018d28:	f8d7 264c 	ldr.w	r2, [r7, #1612]	; 0x64c
 8018d2c:	4293      	cmp	r3, r2
 8018d2e:	bfa8      	it	ge
 8018d30:	4613      	movge	r3, r2
 8018d32:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
        *out_0++ = (q15_t)ch_0_out_0;
 8018d36:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
 8018d3a:	1c9a      	adds	r2, r3, #2
 8018d3c:	f8c7 26ac 	str.w	r2, [r7, #1708]	; 0x6ac
 8018d40:	f8d7 264c 	ldr.w	r2, [r7, #1612]	; 0x64c
 8018d44:	b212      	sxth	r2, r2
 8018d46:	801a      	strh	r2, [r3, #0]

        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8018d48:	f9b7 369c 	ldrsh.w	r3, [r7, #1692]	; 0x69c
 8018d4c:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8018d50:	4293      	cmp	r3, r2
 8018d52:	bfb8      	it	lt
 8018d54:	4613      	movlt	r3, r2
 8018d56:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8018d5a:	f9b7 36a0 	ldrsh.w	r3, [r7, #1696]	; 0x6a0
 8018d5e:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8018d62:	4293      	cmp	r3, r2
 8018d64:	bfa8      	it	ge
 8018d66:	4613      	movge	r3, r2
 8018d68:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
        *out_1++ = (q15_t)ch_0_out_1;
 8018d6c:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 8018d70:	1c9a      	adds	r2, r3, #2
 8018d72:	f8c7 2674 	str.w	r2, [r7, #1652]	; 0x674
 8018d76:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8018d7a:	b212      	sxth	r2, r2
 8018d7c:	801a      	strh	r2, [r3, #0]
        out_mult++;
 8018d7e:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8018d82:	3304      	adds	r3, #4
 8018d84:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
        out_shift++;
 8018d88:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018d8c:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8018d90:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018d94:	f5a2 629b 	sub.w	r2, r2, #1240	; 0x4d8
 8018d98:	6812      	ldr	r2, [r2, #0]
 8018d9a:	3204      	adds	r2, #4
 8018d9c:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 8018d9e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018da2:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	005b      	lsls	r3, r3, #1
 8018daa:	f8d7 26ac 	ldr.w	r2, [r7, #1708]	; 0x6ac
 8018dae:	4413      	add	r3, r2
 8018db0:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac

    /* return the new output pointer with offset */
    return out_0;
 8018db4:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 8018db8:	4618      	mov	r0, r3
 8018dba:	f507 67cf 	add.w	r7, r7, #1656	; 0x678
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8018dc4:	4770      	bx	lr
 8018dc6:	bf00      	nop

08018dc8 <arm_nn_mat_mult_nt_t_s8>:
                                            const int32_t rhs_cols,
                                            const int32_t lhs_offset,
                                            const int32_t dst_offset,
                                            const int32_t activation_min,
                                            const int32_t activation_max)
{
 8018dc8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8018dcc:	f6ad 2dd8 	subw	sp, sp, #2776	; 0xad8
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	f607 24d8 	addw	r4, r7, #2776	; 0xad8
 8018dd6:	f6a4 2404 	subw	r4, r4, #2564	; 0xa04
 8018dda:	6020      	str	r0, [r4, #0]
 8018ddc:	f607 20d8 	addw	r0, r7, #2776	; 0xad8
 8018de0:	f6a0 2008 	subw	r0, r0, #2568	; 0xa08
 8018de4:	6001      	str	r1, [r0, #0]
 8018de6:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8018dea:	f6a1 210c 	subw	r1, r1, #2572	; 0xa0c
 8018dee:	600a      	str	r2, [r1, #0]
 8018df0:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 8018df4:	f5a2 6221 	sub.w	r2, r2, #2576	; 0xa10
 8018df8:	6013      	str	r3, [r2, #0]
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 8018dfa:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8018dfe:	3b04      	subs	r3, #4
 8018e00:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8018e04:	2300      	movs	r3, #0
 8018e06:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 8018e0a:	f004 bc7b 	b.w	801d704 <arm_nn_mat_mult_nt_t_s8+0x493c>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8018e0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018e12:	f6a3 1248 	subw	r2, r3, #2376	; 0x948
 8018e16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018e1a:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	6013      	str	r3, [r2, #0]
        q7_t *dst_ptr = &dst[0];
 8018e22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018e26:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0

        q31_t lhs_offset_contribution0 = 0;
 8018e30:	2300      	movs	r3, #0
 8018e32:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
        q31_t lhs_offset_contribution1 = 0;
 8018e36:	2300      	movs	r3, #0
 8018e38:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8

        for (int32_t x = 0; x < rhs_cols; ++x)
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 8018e42:	e028      	b.n	8018e96 <arm_nn_mat_mult_nt_t_s8+0xce>
        {
            lhs_offset_contribution0 += rhs[x];
 8018e44:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 8018e48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018e4c:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	4413      	add	r3, r2
 8018e54:	f993 3000 	ldrsb.w	r3, [r3]
 8018e58:	461a      	mov	r2, r3
 8018e5a:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8018e5e:	4413      	add	r3, r2
 8018e60:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 8018e64:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 8018e68:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8018e6c:	4413      	add	r3, r2
 8018e6e:	461a      	mov	r2, r3
 8018e70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018e74:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	4413      	add	r3, r2
 8018e7c:	f993 3000 	ldrsb.w	r3, [r3]
 8018e80:	461a      	mov	r2, r3
 8018e82:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8018e86:	4413      	add	r3, r2
 8018e88:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        for (int32_t x = 0; x < rhs_cols; ++x)
 8018e8c:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8018e90:	3301      	adds	r3, #1
 8018e92:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 8018e96:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 8018e9a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	dbd0      	blt.n	8018e44 <arm_nn_mat_mult_nt_t_s8+0x7c>
        }

        lhs_offset_contribution0 *= lhs_offset;
 8018ea2:	f8d7 2acc 	ldr.w	r2, [r7, #2764]	; 0xacc
 8018ea6:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8018eaa:	fb02 f303 	mul.w	r3, r2, r3
 8018eae:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
        lhs_offset_contribution1 *= lhs_offset;
 8018eb2:	f8d7 2ac8 	ldr.w	r2, [r7, #2760]	; 0xac8
 8018eb6:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8018eba:	fb02 f303 	mul.w	r3, r2, r3
 8018ebe:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        if (bias)
 8018ec2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018ec6:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d01e      	beq.n	8018f0e <arm_nn_mat_mult_nt_t_s8+0x146>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 8018ed0:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8018ed4:	009a      	lsls	r2, r3, #2
 8018ed6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018eda:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	4413      	add	r3, r2
 8018ee2:	681a      	ldr	r2, [r3, #0]
 8018ee4:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8018ee8:	4413      	add	r3, r2
 8018eea:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 8018eee:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8018ef2:	3301      	adds	r3, #1
 8018ef4:	009a      	lsls	r2, r3, #2
 8018ef6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018efa:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	4413      	add	r3, r2
 8018f02:	681a      	ldr	r2, [r3, #0]
 8018f04:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8018f08:	4413      	add	r3, r2
 8018f0a:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 8018f0e:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8018f12:	105b      	asrs	r3, r3, #1
 8018f14:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0

        while (lhs_rows_idx)
 8018f18:	f002 bdd2 	b.w	801bac0 <arm_nn_mat_mult_nt_t_s8+0x2cf8>
        {
            const q7_t *rhs_ptr = &rhs[0];
 8018f1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018f20:	f6a3 124c 	subw	r2, r3, #2380	; 0x94c
 8018f24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018f28:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 8018f30:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8018f34:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            q31_t res01 = lhs_offset_contribution1;
 8018f38:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8018f3c:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            q31_t res10 = lhs_offset_contribution0;
 8018f40:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8018f44:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            q31_t res11 = lhs_offset_contribution1;
 8018f48:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8018f4c:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            int32_t rhs_cols_idx = 0;
 8018f50:	2300      	movs	r3, #0
 8018f52:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac

            q31_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8018f56:	f001 bfee 	b.w	801af36 <arm_nn_mat_mult_nt_t_s8+0x216e>
 8018f5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018f5e:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 8018f62:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8018f66:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8018f68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018f6c:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	461a      	mov	r2, r3
 8018f78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018f7c:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8018f80:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8018f82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018f86:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	1d1a      	adds	r2, r3, #4
 8018f90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018f94:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	601a      	str	r2, [r3, #0]
    return (val);
 8018f9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018fa0:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8018fa4:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8018fa6:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val2 = __SXTB16(val1);
 8018faa:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8018fae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018fb2:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8018fb6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018fb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018fbc:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	fa2f f283 	sxtb16	r2, r3
 8018fc6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018fca:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8018fce:	601a      	str	r2, [r3, #0]
  return(result);
 8018fd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018fd4:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 8018fde:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018fe2:	f5a3 62a1 	sub.w	r2, r3, #1288	; 0x508
 8018fe6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8018fea:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8018fec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8018ff0:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	461a      	mov	r2, r3
 8018ffc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019000:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8019004:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8019006:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801900a:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	1d1a      	adds	r2, r3, #4
 8019014:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019018:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	601a      	str	r2, [r3, #0]
    return (val);
 8019020:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019024:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8019028:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801902a:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801902e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019032:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019036:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 801903a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801903c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019040:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	fa2f f283 	sxtb16	r2, r3
 801904a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801904e:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8019052:	601a      	str	r2, [r3, #0]
  return(result);
 8019054:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019058:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8019062:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019066:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801906a:	681a      	ldr	r2, [r3, #0]
 801906c:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8019070:	441a      	add	r2, r3
 8019072:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019076:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 801907a:	601a      	str	r2, [r3, #0]
 801907c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019080:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801908a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801908e:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 8019092:	601a      	str	r2, [r3, #0]
    return (val);
 8019094:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019098:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val1 = __SXTB16_RORn(val1, 8);
 80190a2:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 80190a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80190aa:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80190ae:	601a      	str	r2, [r3, #0]
 80190b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80190b4:	f2a3 42e4 	subw	r2, r3, #1252	; 0x4e4
 80190b8:	2308      	movs	r3, #8
 80190ba:	6013      	str	r3, [r2, #0]
 80190bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80190c0:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 80190c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80190c8:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	6013      	str	r3, [r2, #0]
 80190d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80190d4:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 80190d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80190dc:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80190e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80190e8:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 80190ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80190f0:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	f003 031f 	and.w	r3, r3, #31
 80190fa:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80190fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019100:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d105      	bne.n	8019116 <arm_nn_mat_mult_nt_t_s8+0x34e>
    return op1;
 801910a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801910e:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8019112:	681a      	ldr	r2, [r3, #0]
 8019114:	e00a      	b.n	801912c <arm_nn_mat_mult_nt_t_s8+0x364>
  return (op1 >> op2) | (op1 << (32U - op2));
 8019116:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801911a:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 801911e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019122:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8019126:	6812      	ldr	r2, [r2, #0]
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	41da      	rors	r2, r3
 801912c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019130:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8019134:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019136:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801913a:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	fa2f f283 	sxtb16	r2, r3
 8019144:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019148:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 801914c:	601a      	str	r2, [r3, #0]
  return(result);
 801914e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019152:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8019156:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8019158:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801915c:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8019160:	601a      	str	r2, [r3, #0]
  return result;
 8019162:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019166:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 8019170:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019174:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019178:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801917c:	601a      	str	r2, [r3, #0]
 801917e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019182:	f5a3 6299 	sub.w	r2, r3, #1224	; 0x4c8
 8019186:	2308      	movs	r3, #8
 8019188:	6013      	str	r3, [r2, #0]
 801918a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801918e:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 8019192:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019196:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	6013      	str	r3, [r2, #0]
 801919e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191a2:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 80191a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191aa:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80191b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191b6:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 80191ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191be:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	f003 031f 	and.w	r3, r3, #31
 80191c8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80191ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191ce:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d105      	bne.n	80191e4 <arm_nn_mat_mult_nt_t_s8+0x41c>
    return op1;
 80191d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191dc:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80191e0:	681a      	ldr	r2, [r3, #0]
 80191e2:	e00a      	b.n	80191fa <arm_nn_mat_mult_nt_t_s8+0x432>
  return (op1 >> op2) | (op1 << (32U - op2));
 80191e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191e8:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 80191ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191f0:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80191f4:	6812      	ldr	r2, [r2, #0]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	41da      	rors	r2, r3
 80191fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191fe:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8019202:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019204:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019208:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	fa2f f283 	sxtb16	r2, r3
 8019212:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019216:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801921a:	601a      	str	r2, [r3, #0]
  return(result);
 801921c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019220:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8019224:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8019226:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801922a:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 801922e:	601a      	str	r2, [r3, #0]
  return result;
 8019230:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019234:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801923e:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8019242:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 8019246:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801924a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801924e:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8019252:	601a      	str	r2, [r3, #0]
 8019254:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019258:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801925c:	6019      	str	r1, [r3, #0]
 801925e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019262:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8019266:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019268:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801926c:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8019270:	6819      	ldr	r1, [r3, #0]
 8019272:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019276:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801927a:	681a      	ldr	r2, [r3, #0]
 801927c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019280:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	fb21 3202 	smlad	r2, r1, r2, r3
 801928a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801928e:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8019292:	601a      	str	r2, [r3, #0]
  return(result);
 8019294:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019298:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 80192a2:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 80192a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80192aa:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80192ae:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80192b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80192b4:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	fa2f f283 	sxtb16	r2, r3
 80192be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80192c2:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80192c6:	601a      	str	r2, [r3, #0]
  return(result);
 80192c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80192cc:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 80192d6:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80192da:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 80192de:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 80192e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80192e6:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80192ea:	601a      	str	r2, [r3, #0]
 80192ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80192f0:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 80192f4:	6019      	str	r1, [r3, #0]
 80192f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80192fa:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 80192fe:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019300:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019304:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8019308:	6819      	ldr	r1, [r3, #0]
 801930a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801930e:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8019312:	681a      	ldr	r2, [r3, #0]
 8019314:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019318:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	fb21 3202 	smlad	r2, r1, r2, r3
 8019322:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019326:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 801932a:	601a      	str	r2, [r3, #0]
  return(result);
 801932c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019330:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 801933a:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801933e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019342:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8019346:	601a      	str	r2, [r3, #0]
 8019348:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801934c:	f2a3 4284 	subw	r2, r3, #1156	; 0x484
 8019350:	2308      	movs	r3, #8
 8019352:	6013      	str	r3, [r2, #0]
 8019354:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019358:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 801935c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019360:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	6013      	str	r3, [r2, #0]
 8019368:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801936c:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 8019370:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019374:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801937c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019380:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 8019384:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019388:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	f003 031f 	and.w	r3, r3, #31
 8019392:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8019394:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019398:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d105      	bne.n	80193ae <arm_nn_mat_mult_nt_t_s8+0x5e6>
    return op1;
 80193a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193a6:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80193aa:	681a      	ldr	r2, [r3, #0]
 80193ac:	e00a      	b.n	80193c4 <arm_nn_mat_mult_nt_t_s8+0x5fc>
  return (op1 >> op2) | (op1 << (32U - op2));
 80193ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193b2:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 80193b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193ba:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80193be:	6812      	ldr	r2, [r2, #0]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	41da      	rors	r2, r3
 80193c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193c8:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80193cc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80193ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193d2:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	fa2f f283 	sxtb16	r2, r3
 80193dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193e0:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80193e4:	601a      	str	r2, [r3, #0]
  return(result);
 80193e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193ea:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80193ee:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80193f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193f4:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 80193f8:	601a      	str	r2, [r3, #0]
  return result;
 80193fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193fe:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 8019408:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801940c:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8019410:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8019414:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019418:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 801941c:	601a      	str	r2, [r3, #0]
 801941e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019422:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8019426:	6019      	str	r1, [r3, #0]
 8019428:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801942c:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8019430:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019432:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019436:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 801943a:	6819      	ldr	r1, [r3, #0]
 801943c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019440:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8019444:	681a      	ldr	r2, [r3, #0]
 8019446:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801944a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	fb21 3202 	smlad	r2, r1, r2, r3
 8019454:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019458:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 801945c:	601a      	str	r2, [r3, #0]
  return(result);
 801945e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019462:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 801946c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019470:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8019474:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8019478:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801947c:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8019480:	601a      	str	r2, [r3, #0]
 8019482:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019486:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 801948a:	6019      	str	r1, [r3, #0]
 801948c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019490:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8019494:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019496:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801949a:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 801949e:	6819      	ldr	r1, [r3, #0]
 80194a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194a4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80194a8:	681a      	ldr	r2, [r3, #0]
 80194aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194ae:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	fb21 3202 	smlad	r2, r1, r2, r3
 80194b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194bc:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80194c0:	601a      	str	r2, [r3, #0]
  return(result);
 80194c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194c6:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 80194d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194d4:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 80194d8:	681a      	ldr	r2, [r3, #0]
 80194da:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 80194de:	441a      	add	r2, r3
 80194e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194e4:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80194e8:	601a      	str	r2, [r3, #0]
 80194ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194ee:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80194f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194fc:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8019500:	601a      	str	r2, [r3, #0]
    return (val);
 8019502:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019506:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8019510:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019514:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019518:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 801951c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801951e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019522:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	fa2f f283 	sxtb16	r2, r3
 801952c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019530:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8019534:	601a      	str	r2, [r3, #0]
  return(result);
 8019536:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801953a:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 8019544:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019548:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801954c:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8019550:	601a      	str	r2, [r3, #0]
 8019552:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019556:	f2a3 423c 	subw	r2, r3, #1084	; 0x43c
 801955a:	2308      	movs	r3, #8
 801955c:	6013      	str	r3, [r2, #0]
 801955e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019562:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8019566:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801956a:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	6013      	str	r3, [r2, #0]
 8019572:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019576:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 801957a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801957e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8019586:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801958a:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 801958e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019592:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	f003 031f 	and.w	r3, r3, #31
 801959c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801959e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195a2:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d105      	bne.n	80195b8 <arm_nn_mat_mult_nt_t_s8+0x7f0>
    return op1;
 80195ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195b0:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80195b4:	681a      	ldr	r2, [r3, #0]
 80195b6:	e00a      	b.n	80195ce <arm_nn_mat_mult_nt_t_s8+0x806>
  return (op1 >> op2) | (op1 << (32U - op2));
 80195b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195bc:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80195c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195c4:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80195c8:	6812      	ldr	r2, [r2, #0]
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	41da      	rors	r2, r3
 80195ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195d2:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80195d6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80195d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195dc:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	fa2f f283 	sxtb16	r2, r3
 80195e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195ea:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80195ee:	601a      	str	r2, [r3, #0]
  return(result);
 80195f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195f4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80195f8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80195fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195fe:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8019602:	601a      	str	r2, [r3, #0]
  return result;
 8019604:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019608:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 8019612:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8019616:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801961a:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801961e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019622:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8019626:	601a      	str	r2, [r3, #0]
 8019628:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801962c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8019630:	6019      	str	r1, [r3, #0]
 8019632:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019636:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 801963a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801963c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019640:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8019644:	6819      	ldr	r1, [r3, #0]
 8019646:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801964a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 801964e:	681a      	ldr	r2, [r3, #0]
 8019650:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019654:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	fb21 3202 	smlad	r2, r1, r2, r3
 801965e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019662:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8019666:	601a      	str	r2, [r3, #0]
  return(result);
 8019668:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801966c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 8019676:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801967a:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801967e:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8019682:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019686:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 801968a:	601a      	str	r2, [r3, #0]
 801968c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019690:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8019694:	6019      	str	r1, [r3, #0]
 8019696:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801969a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 801969e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80196a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196a4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80196a8:	6819      	ldr	r1, [r3, #0]
 80196aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196ae:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80196b2:	681a      	ldr	r2, [r3, #0]
 80196b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196b8:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	fb21 3202 	smlad	r2, r1, r2, r3
 80196c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196c6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80196ca:	601a      	str	r2, [r3, #0]
  return(result);
 80196cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196d0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 80196da:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80196de:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 80196e2:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 80196e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196ea:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80196ee:	601a      	str	r2, [r3, #0]
 80196f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196f4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80196f8:	6019      	str	r1, [r3, #0]
 80196fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196fe:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8019702:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019704:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019708:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 801970c:	6819      	ldr	r1, [r3, #0]
 801970e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019712:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8019716:	681a      	ldr	r2, [r3, #0]
 8019718:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801971c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	fb21 3202 	smlad	r2, r1, r2, r3
 8019726:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801972a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 801972e:	601a      	str	r2, [r3, #0]
  return(result);
 8019730:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019734:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 801973e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019742:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 8019746:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801974a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801974c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019750:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	461a      	mov	r2, r3
 801975c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019760:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8019764:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8019766:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801976a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	1d1a      	adds	r2, r3, #4
 8019774:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019778:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	601a      	str	r2, [r3, #0]
    return (val);
 8019780:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019784:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8019788:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801978a:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 801978e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019792:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8019796:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801979a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801979e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80197a2:	601a      	str	r2, [r3, #0]
 80197a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197a8:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80197ac:	6019      	str	r1, [r3, #0]
 80197ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197b2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80197b6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80197b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197bc:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80197c0:	6819      	ldr	r1, [r3, #0]
 80197c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197c6:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80197ca:	681a      	ldr	r2, [r3, #0]
 80197cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197d0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	fb21 3202 	smlad	r2, r1, r2, r3
 80197da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197de:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80197e2:	601a      	str	r2, [r3, #0]
  return(result);
 80197e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80197f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197f6:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 80197fa:	681a      	ldr	r2, [r3, #0]
 80197fc:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8019800:	441a      	add	r2, r3
 8019802:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019806:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 801980a:	601a      	str	r2, [r3, #0]
 801980c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019810:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801981a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801981e:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8019822:	601a      	str	r2, [r3, #0]
    return (val);
 8019824:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019828:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 8019832:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8019836:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801983a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801983e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019840:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019844:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	fa2f f283 	sxtb16	r2, r3
 801984e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019852:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8019856:	601a      	str	r2, [r3, #0]
  return(result);
 8019858:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801985c:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 8019866:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801986a:	f5a3 7279 	sub.w	r2, r3, #996	; 0x3e4
 801986e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8019872:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8019874:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019878:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	461a      	mov	r2, r3
 8019884:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019888:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 801988c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801988e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019892:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	1d1a      	adds	r2, r3, #4
 801989c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198a0:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	601a      	str	r2, [r3, #0]
    return (val);
 80198a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198ac:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 80198b0:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80198b2:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 80198b6:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80198ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198be:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80198c2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80198c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198c8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	fa2f f283 	sxtb16	r2, r3
 80198d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198d6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80198da:	601a      	str	r2, [r3, #0]
  return(result);
 80198dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198e0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 80198ea:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 80198ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198f2:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80198f6:	601a      	str	r2, [r3, #0]
 80198f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198fc:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8019900:	2308      	movs	r3, #8
 8019902:	6013      	str	r3, [r2, #0]
 8019904:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019908:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 801990c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019910:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	6013      	str	r3, [r2, #0]
 8019918:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801991c:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 8019920:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019924:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801992c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019930:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 8019934:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019938:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	f003 031f 	and.w	r3, r3, #31
 8019942:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8019944:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019948:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d105      	bne.n	801995e <arm_nn_mat_mult_nt_t_s8+0xb96>
    return op1;
 8019952:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019956:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801995a:	681a      	ldr	r2, [r3, #0]
 801995c:	e00a      	b.n	8019974 <arm_nn_mat_mult_nt_t_s8+0xbac>
  return (op1 >> op2) | (op1 << (32U - op2));
 801995e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019962:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 8019966:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801996a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801996e:	6812      	ldr	r2, [r2, #0]
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	41da      	rors	r2, r3
 8019974:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019978:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 801997c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801997e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019982:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	fa2f f283 	sxtb16	r2, r3
 801998c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019990:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8019994:	601a      	str	r2, [r3, #0]
  return(result);
 8019996:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801999a:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 801999e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80199a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199a4:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80199a8:	601a      	str	r2, [r3, #0]
  return result;
 80199aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199ae:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 80199b8:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80199bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199c0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80199c4:	601a      	str	r2, [r3, #0]
 80199c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199ca:	f5a3 726a 	sub.w	r2, r3, #936	; 0x3a8
 80199ce:	2308      	movs	r3, #8
 80199d0:	6013      	str	r3, [r2, #0]
 80199d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199d6:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 80199da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199de:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	6013      	str	r3, [r2, #0]
 80199e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199ea:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 80199ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199f2:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80199fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199fe:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8019a02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a06:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	f003 031f 	and.w	r3, r3, #31
 8019a10:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8019a12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a16:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d105      	bne.n	8019a2c <arm_nn_mat_mult_nt_t_s8+0xc64>
    return op1;
 8019a20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a24:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8019a28:	681a      	ldr	r2, [r3, #0]
 8019a2a:	e00a      	b.n	8019a42 <arm_nn_mat_mult_nt_t_s8+0xc7a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8019a2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a30:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8019a34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a38:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8019a3c:	6812      	ldr	r2, [r2, #0]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	41da      	rors	r2, r3
 8019a42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a46:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8019a4a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019a4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a50:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	fa2f f283 	sxtb16	r2, r3
 8019a5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a5e:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8019a62:	601a      	str	r2, [r3, #0]
  return(result);
 8019a64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a68:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8019a6c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8019a6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a72:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8019a76:	601a      	str	r2, [r3, #0]
  return result;
 8019a78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a7c:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 8019a86:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8019a8a:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 8019a8e:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8019a92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a96:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8019a9a:	601a      	str	r2, [r3, #0]
 8019a9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019aa0:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8019aa4:	6019      	str	r1, [r3, #0]
 8019aa6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019aaa:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8019aae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019ab0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ab4:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8019ab8:	6819      	ldr	r1, [r3, #0]
 8019aba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019abe:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8019ac2:	681a      	ldr	r2, [r3, #0]
 8019ac4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ac8:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	fb21 3202 	smlad	r2, r1, r2, r3
 8019ad2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ad6:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8019ada:	601a      	str	r2, [r3, #0]
  return(result);
 8019adc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ae0:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 8019aea:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8019aee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019af2:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8019af6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019af8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019afc:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	fa2f f283 	sxtb16	r2, r3
 8019b06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b0a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8019b0e:	601a      	str	r2, [r3, #0]
  return(result);
 8019b10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b14:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 8019b1e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019b22:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8019b26:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8019b2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b2e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8019b32:	601a      	str	r2, [r3, #0]
 8019b34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b38:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8019b3c:	6019      	str	r1, [r3, #0]
 8019b3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b42:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8019b46:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019b48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b4c:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8019b50:	6819      	ldr	r1, [r3, #0]
 8019b52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b56:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8019b5a:	681a      	ldr	r2, [r3, #0]
 8019b5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b60:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	fb21 3202 	smlad	r2, r1, r2, r3
 8019b6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b6e:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8019b72:	601a      	str	r2, [r3, #0]
  return(result);
 8019b74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b78:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 8019b82:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8019b86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b8a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8019b8e:	601a      	str	r2, [r3, #0]
 8019b90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b94:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 8019b98:	2308      	movs	r3, #8
 8019b9a:	6013      	str	r3, [r2, #0]
 8019b9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ba0:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8019ba4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ba8:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	6013      	str	r3, [r2, #0]
 8019bb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bb4:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8019bb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bbc:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8019bc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bc8:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8019bcc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bd0:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	f003 031f 	and.w	r3, r3, #31
 8019bda:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8019bdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019be0:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d105      	bne.n	8019bf6 <arm_nn_mat_mult_nt_t_s8+0xe2e>
    return op1;
 8019bea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bee:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8019bf2:	681a      	ldr	r2, [r3, #0]
 8019bf4:	e00a      	b.n	8019c0c <arm_nn_mat_mult_nt_t_s8+0xe44>
  return (op1 >> op2) | (op1 << (32U - op2));
 8019bf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bfa:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8019bfe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c02:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8019c06:	6812      	ldr	r2, [r2, #0]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	41da      	rors	r2, r3
 8019c0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c10:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8019c14:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019c16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c1a:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	fa2f f283 	sxtb16	r2, r3
 8019c24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c28:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8019c2c:	601a      	str	r2, [r3, #0]
  return(result);
 8019c2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c32:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8019c36:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8019c38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c3c:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8019c40:	601a      	str	r2, [r3, #0]
  return result;
 8019c42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c46:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 8019c50:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8019c54:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8019c58:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8019c5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c60:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8019c64:	601a      	str	r2, [r3, #0]
 8019c66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c6a:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8019c6e:	6019      	str	r1, [r3, #0]
 8019c70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c74:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8019c78:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019c7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c7e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8019c82:	6819      	ldr	r1, [r3, #0]
 8019c84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c88:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8019c8c:	681a      	ldr	r2, [r3, #0]
 8019c8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c92:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	fb21 3202 	smlad	r2, r1, r2, r3
 8019c9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ca0:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8019ca4:	601a      	str	r2, [r3, #0]
  return(result);
 8019ca6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019caa:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 8019cb4:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019cb8:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8019cbc:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 8019cc0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019cc4:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8019cc8:	601a      	str	r2, [r3, #0]
 8019cca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019cce:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8019cd2:	6019      	str	r1, [r3, #0]
 8019cd4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019cd8:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8019cdc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019cde:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ce2:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8019ce6:	6819      	ldr	r1, [r3, #0]
 8019ce8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019cec:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8019cf0:	681a      	ldr	r2, [r3, #0]
 8019cf2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019cf6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	fb21 3202 	smlad	r2, r1, r2, r3
 8019d00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d04:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8019d08:	601a      	str	r2, [r3, #0]
  return(result);
 8019d0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d0e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8019d18:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d1c:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8019d20:	681a      	ldr	r2, [r3, #0]
 8019d22:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8019d26:	441a      	add	r2, r3
 8019d28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d2c:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8019d30:	601a      	str	r2, [r3, #0]
 8019d32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d36:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019d40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d44:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8019d48:	601a      	str	r2, [r3, #0]
    return (val);
 8019d4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d4e:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8019d58:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019d5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d60:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8019d64:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019d66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d6a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	fa2f f283 	sxtb16	r2, r3
 8019d74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d78:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8019d7c:	601a      	str	r2, [r3, #0]
  return(result);
 8019d7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d82:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 8019d8c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019d90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d94:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8019d98:	601a      	str	r2, [r3, #0]
 8019d9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d9e:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8019da2:	2308      	movs	r3, #8
 8019da4:	6013      	str	r3, [r2, #0]
 8019da6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019daa:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8019dae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019db2:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	6013      	str	r3, [r2, #0]
 8019dba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019dbe:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8019dc2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019dc6:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8019dce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019dd2:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8019dd6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019dda:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	f003 031f 	and.w	r3, r3, #31
 8019de4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8019de6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019dea:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d105      	bne.n	8019e00 <arm_nn_mat_mult_nt_t_s8+0x1038>
    return op1;
 8019df4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019df8:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8019dfc:	681a      	ldr	r2, [r3, #0]
 8019dfe:	e00a      	b.n	8019e16 <arm_nn_mat_mult_nt_t_s8+0x104e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8019e00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e04:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8019e08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e0c:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8019e10:	6812      	ldr	r2, [r2, #0]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	41da      	rors	r2, r3
 8019e16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e1a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8019e1e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019e20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e24:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	fa2f f283 	sxtb16	r2, r3
 8019e2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e32:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8019e36:	601a      	str	r2, [r3, #0]
  return(result);
 8019e38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e3c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8019e40:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8019e42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e46:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8019e4a:	601a      	str	r2, [r3, #0]
  return result;
 8019e4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e50:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 8019e5a:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8019e5e:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 8019e62:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 8019e66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e6a:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8019e6e:	601a      	str	r2, [r3, #0]
 8019e70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e74:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8019e78:	6019      	str	r1, [r3, #0]
 8019e7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e7e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8019e82:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019e84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e88:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8019e8c:	6819      	ldr	r1, [r3, #0]
 8019e8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e92:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8019e96:	681a      	ldr	r2, [r3, #0]
 8019e98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e9c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	fb21 3202 	smlad	r2, r1, r2, r3
 8019ea6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019eaa:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8019eae:	601a      	str	r2, [r3, #0]
  return(result);
 8019eb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019eb4:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 8019ebe:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8019ec2:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8019ec6:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8019eca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ece:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8019ed2:	601a      	str	r2, [r3, #0]
 8019ed4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ed8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8019edc:	6019      	str	r1, [r3, #0]
 8019ede:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ee2:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8019ee6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019ee8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019eec:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8019ef0:	6819      	ldr	r1, [r3, #0]
 8019ef2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ef6:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8019efa:	681a      	ldr	r2, [r3, #0]
 8019efc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f00:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	fb21 3202 	smlad	r2, r1, r2, r3
 8019f0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f0e:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8019f12:	601a      	str	r2, [r3, #0]
  return(result);
 8019f14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f18:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 8019f22:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019f26:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8019f2a:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 8019f2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f32:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8019f36:	601a      	str	r2, [r3, #0]
 8019f38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f3c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8019f40:	6019      	str	r1, [r3, #0]
 8019f42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f46:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8019f4a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019f4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f50:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8019f54:	6819      	ldr	r1, [r3, #0]
 8019f56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f5a:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8019f5e:	681a      	ldr	r2, [r3, #0]
 8019f60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f64:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	fb21 3202 	smlad	r2, r1, r2, r3
 8019f6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f72:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8019f76:	601a      	str	r2, [r3, #0]
  return(result);
 8019f78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f7c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 8019f86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f8a:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8019f8e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8019f92:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8019f94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f98:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	461a      	mov	r2, r3
 8019fa4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fa8:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8019fac:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8019fae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fb2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	1d1a      	adds	r2, r3, #4
 8019fbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fc0:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	601a      	str	r2, [r3, #0]
    return (val);
 8019fc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fcc:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8019fd0:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8019fd2:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 8019fd6:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019fda:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8019fde:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8019fe2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fe6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8019fea:	601a      	str	r2, [r3, #0]
 8019fec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ff0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019ff4:	6019      	str	r1, [r3, #0]
 8019ff6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ffa:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8019ffe:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a000:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a004:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801a008:	6819      	ldr	r1, [r3, #0]
 801a00a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a00e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801a012:	681a      	ldr	r2, [r3, #0]
 801a014:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a018:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	fb21 3202 	smlad	r2, r1, r2, r3
 801a022:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a026:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801a02a:	601a      	str	r2, [r3, #0]
  return(result);
 801a02c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a030:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801a03a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a03e:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801a042:	681a      	ldr	r2, [r3, #0]
 801a044:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801a048:	441a      	add	r2, r3
 801a04a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a04e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801a052:	601a      	str	r2, [r3, #0]
 801a054:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a058:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a062:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a066:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 801a06a:	601a      	str	r2, [r3, #0]
    return (val);
 801a06c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a070:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 801a07a:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801a07e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a082:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801a086:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a088:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a08c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	fa2f f283 	sxtb16	r2, r3
 801a096:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a09a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801a09e:	601a      	str	r2, [r3, #0]
  return(result);
 801a0a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0a4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 801a0ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0b2:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 801a0b6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801a0ba:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a0bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0c0:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	461a      	mov	r2, r3
 801a0cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0d0:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 801a0d4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a0d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0da:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	1d1a      	adds	r2, r3, #4
 801a0e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0e8:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	601a      	str	r2, [r3, #0]
    return (val);
 801a0f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0f4:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 801a0f8:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801a0fa:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801a0fe:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a102:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a106:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801a10a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a10c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a110:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	fa2f f283 	sxtb16	r2, r3
 801a11a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a11e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801a122:	601a      	str	r2, [r3, #0]
  return(result);
 801a124:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a128:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 801a132:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801a136:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a13a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801a13e:	601a      	str	r2, [r3, #0]
 801a140:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a144:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801a148:	2308      	movs	r3, #8
 801a14a:	6013      	str	r3, [r2, #0]
 801a14c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a150:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 801a154:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a158:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	6013      	str	r3, [r2, #0]
 801a160:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a164:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801a168:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a16c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a174:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a178:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801a17c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a180:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	f003 031f 	and.w	r3, r3, #31
 801a18a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a18c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a190:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	2b00      	cmp	r3, #0
 801a198:	d105      	bne.n	801a1a6 <arm_nn_mat_mult_nt_t_s8+0x13de>
    return op1;
 801a19a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a19e:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801a1a2:	681a      	ldr	r2, [r3, #0]
 801a1a4:	e00a      	b.n	801a1bc <arm_nn_mat_mult_nt_t_s8+0x13f4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a1a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1aa:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 801a1ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1b2:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801a1b6:	6812      	ldr	r2, [r2, #0]
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	41da      	rors	r2, r3
 801a1bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1c0:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801a1c4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a1c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1ca:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	fa2f f283 	sxtb16	r2, r3
 801a1d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1d8:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801a1dc:	601a      	str	r2, [r3, #0]
  return(result);
 801a1de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1e2:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801a1e6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a1e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1ec:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 801a1f0:	601a      	str	r2, [r3, #0]
  return result;
 801a1f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1f6:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 801a200:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a204:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a208:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801a20c:	601a      	str	r2, [r3, #0]
 801a20e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a212:	f5a3 7222 	sub.w	r2, r3, #648	; 0x288
 801a216:	2308      	movs	r3, #8
 801a218:	6013      	str	r3, [r2, #0]
 801a21a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a21e:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 801a222:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a226:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	6013      	str	r3, [r2, #0]
 801a22e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a232:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 801a236:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a23a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a242:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a246:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 801a24a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a24e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	f003 031f 	and.w	r3, r3, #31
 801a258:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a25a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a25e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	2b00      	cmp	r3, #0
 801a266:	d105      	bne.n	801a274 <arm_nn_mat_mult_nt_t_s8+0x14ac>
    return op1;
 801a268:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a26c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801a270:	681a      	ldr	r2, [r3, #0]
 801a272:	e00a      	b.n	801a28a <arm_nn_mat_mult_nt_t_s8+0x14c2>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a274:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a278:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 801a27c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a280:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801a284:	6812      	ldr	r2, [r2, #0]
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	41da      	rors	r2, r3
 801a28a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a28e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801a292:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a294:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a298:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	fa2f f283 	sxtb16	r2, r3
 801a2a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2a6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801a2aa:	601a      	str	r2, [r3, #0]
  return(result);
 801a2ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2b0:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801a2b4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a2b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2ba:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801a2be:	601a      	str	r2, [r3, #0]
  return result;
 801a2c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2c4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801a2ce:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a2d2:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801a2d6:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801a2da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2de:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801a2e2:	601a      	str	r2, [r3, #0]
 801a2e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2e8:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801a2ec:	6019      	str	r1, [r3, #0]
 801a2ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2f2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801a2f6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a2f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2fc:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801a300:	6819      	ldr	r1, [r3, #0]
 801a302:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a306:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801a30a:	681a      	ldr	r2, [r3, #0]
 801a30c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a310:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	fb21 3202 	smlad	r2, r1, r2, r3
 801a31a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a31e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801a322:	601a      	str	r2, [r3, #0]
  return(result);
 801a324:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a328:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 801a332:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801a336:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a33a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801a33e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a340:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a344:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	fa2f f283 	sxtb16	r2, r3
 801a34e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a352:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801a356:	601a      	str	r2, [r3, #0]
  return(result);
 801a358:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a35c:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 801a366:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a36a:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801a36e:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801a372:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a376:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801a37a:	601a      	str	r2, [r3, #0]
 801a37c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a380:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801a384:	6019      	str	r1, [r3, #0]
 801a386:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a38a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801a38e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a390:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a394:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801a398:	6819      	ldr	r1, [r3, #0]
 801a39a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a39e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801a3a2:	681a      	ldr	r2, [r3, #0]
 801a3a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3a8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	fb21 3202 	smlad	r2, r1, r2, r3
 801a3b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3b6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801a3ba:	601a      	str	r2, [r3, #0]
  return(result);
 801a3bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3c0:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 801a3ca:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801a3ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3d2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801a3d6:	601a      	str	r2, [r3, #0]
 801a3d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3dc:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801a3e0:	2308      	movs	r3, #8
 801a3e2:	6013      	str	r3, [r2, #0]
 801a3e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3e8:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801a3ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3f0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	6013      	str	r3, [r2, #0]
 801a3f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3fc:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801a400:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a404:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a40c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a410:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801a414:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a418:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	f003 031f 	and.w	r3, r3, #31
 801a422:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a424:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d105      	bne.n	801a43e <arm_nn_mat_mult_nt_t_s8+0x1676>
    return op1;
 801a432:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a436:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801a43a:	681a      	ldr	r2, [r3, #0]
 801a43c:	e00a      	b.n	801a454 <arm_nn_mat_mult_nt_t_s8+0x168c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a43e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a442:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801a446:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a44a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801a44e:	6812      	ldr	r2, [r2, #0]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	41da      	rors	r2, r3
 801a454:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a458:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801a45c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a45e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a462:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	fa2f f283 	sxtb16	r2, r3
 801a46c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a470:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801a474:	601a      	str	r2, [r3, #0]
  return(result);
 801a476:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a47a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801a47e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a480:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a484:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801a488:	601a      	str	r2, [r3, #0]
  return result;
 801a48a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a48e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 801a498:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a49c:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801a4a0:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801a4a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4a8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801a4ac:	601a      	str	r2, [r3, #0]
 801a4ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4b2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801a4b6:	6019      	str	r1, [r3, #0]
 801a4b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4bc:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801a4c0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a4c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4c6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801a4ca:	6819      	ldr	r1, [r3, #0]
 801a4cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4d0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801a4d4:	681a      	ldr	r2, [r3, #0]
 801a4d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4da:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	fb21 3202 	smlad	r2, r1, r2, r3
 801a4e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4e8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801a4ec:	601a      	str	r2, [r3, #0]
  return(result);
 801a4ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4f2:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 801a4fc:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a500:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801a504:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801a508:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a50c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801a510:	601a      	str	r2, [r3, #0]
 801a512:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a516:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801a51a:	6019      	str	r1, [r3, #0]
 801a51c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a520:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801a524:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a526:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a52a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801a52e:	6819      	ldr	r1, [r3, #0]
 801a530:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a534:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801a538:	681a      	ldr	r2, [r3, #0]
 801a53a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a53e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	fb21 3202 	smlad	r2, r1, r2, r3
 801a548:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a54c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801a550:	601a      	str	r2, [r3, #0]
  return(result);
 801a552:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a556:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801a560:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a564:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801a568:	681a      	ldr	r2, [r3, #0]
 801a56a:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801a56e:	441a      	add	r2, r3
 801a570:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a574:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801a578:	601a      	str	r2, [r3, #0]
 801a57a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a57e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a588:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a58c:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 801a590:	601a      	str	r2, [r3, #0]
    return (val);
 801a592:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a596:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801a5a0:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a5a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5a8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801a5ac:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a5ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5b2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	fa2f f283 	sxtb16	r2, r3
 801a5bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5c0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801a5c4:	601a      	str	r2, [r3, #0]
  return(result);
 801a5c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5ca:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 801a5d4:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a5d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801a5e0:	601a      	str	r2, [r3, #0]
 801a5e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5e6:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801a5ea:	2308      	movs	r3, #8
 801a5ec:	6013      	str	r3, [r2, #0]
 801a5ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5f2:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 801a5f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	6013      	str	r3, [r2, #0]
 801a602:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a606:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 801a60a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a60e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a616:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a61a:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 801a61e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a622:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	f003 031f 	and.w	r3, r3, #31
 801a62c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a62e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a632:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	2b00      	cmp	r3, #0
 801a63a:	d105      	bne.n	801a648 <arm_nn_mat_mult_nt_t_s8+0x1880>
    return op1;
 801a63c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a640:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801a644:	681a      	ldr	r2, [r3, #0]
 801a646:	e00a      	b.n	801a65e <arm_nn_mat_mult_nt_t_s8+0x1896>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a648:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a64c:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 801a650:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a654:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801a658:	6812      	ldr	r2, [r2, #0]
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	41da      	rors	r2, r3
 801a65e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a662:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801a666:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a668:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a66c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	fa2f f283 	sxtb16	r2, r3
 801a676:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a67a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801a67e:	601a      	str	r2, [r3, #0]
  return(result);
 801a680:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a684:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801a688:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a68a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a68e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801a692:	601a      	str	r2, [r3, #0]
  return result;
 801a694:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a698:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 801a6a2:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a6a6:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801a6aa:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801a6ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6b2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801a6b6:	601a      	str	r2, [r3, #0]
 801a6b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6bc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801a6c0:	6019      	str	r1, [r3, #0]
 801a6c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6c6:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801a6ca:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a6cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6d0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801a6d4:	6819      	ldr	r1, [r3, #0]
 801a6d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801a6de:	681a      	ldr	r2, [r3, #0]
 801a6e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6e4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	fb21 3202 	smlad	r2, r1, r2, r3
 801a6ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6f2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801a6f6:	601a      	str	r2, [r3, #0]
  return(result);
 801a6f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6fc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 801a706:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a70a:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801a70e:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801a712:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a716:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801a71a:	601a      	str	r2, [r3, #0]
 801a71c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a720:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801a724:	6019      	str	r1, [r3, #0]
 801a726:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a72a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801a72e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a730:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a734:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801a738:	6819      	ldr	r1, [r3, #0]
 801a73a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a73e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801a742:	681a      	ldr	r2, [r3, #0]
 801a744:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a748:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	fb21 3202 	smlad	r2, r1, r2, r3
 801a752:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a756:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801a75a:	601a      	str	r2, [r3, #0]
  return(result);
 801a75c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a760:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 801a76a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a76e:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801a772:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801a776:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a77a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801a77e:	601a      	str	r2, [r3, #0]
 801a780:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a784:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801a788:	6019      	str	r1, [r3, #0]
 801a78a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a78e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801a792:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a794:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a798:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801a79c:	6819      	ldr	r1, [r3, #0]
 801a79e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7a2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801a7a6:	681a      	ldr	r2, [r3, #0]
 801a7a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7ac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	fb21 3202 	smlad	r2, r1, r2, r3
 801a7b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7ba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801a7be:	601a      	str	r2, [r3, #0]
  return(result);
 801a7c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7c4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 801a7ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7d2:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801a7d6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801a7da:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a7dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7e0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	461a      	mov	r2, r3
 801a7ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7f0:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 801a7f4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a7f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	1d1a      	adds	r2, r3, #4
 801a804:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a808:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	601a      	str	r2, [r3, #0]
    return (val);
 801a810:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a814:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 801a818:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801a81a:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 801a81e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a822:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801a826:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801a82a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a82e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801a832:	601a      	str	r2, [r3, #0]
 801a834:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a838:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801a83c:	6019      	str	r1, [r3, #0]
 801a83e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a842:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801a846:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a848:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a84c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801a850:	6819      	ldr	r1, [r3, #0]
 801a852:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a856:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801a85a:	681a      	ldr	r2, [r3, #0]
 801a85c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a860:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	fb21 3202 	smlad	r2, r1, r2, r3
 801a86a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a86e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801a872:	601a      	str	r2, [r3, #0]
  return(result);
 801a874:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a878:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801a882:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a886:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801a88a:	681a      	ldr	r2, [r3, #0]
 801a88c:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801a890:	441a      	add	r2, r3
 801a892:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a896:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801a89a:	601a      	str	r2, [r3, #0]
 801a89c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8a0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a8aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8ae:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 801a8b2:	601a      	str	r2, [r3, #0]
    return (val);
 801a8b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8b8:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 801a8c2:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801a8c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8ca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801a8ce:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a8d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8d4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	fa2f f283 	sxtb16	r2, r3
 801a8de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801a8e6:	601a      	str	r2, [r3, #0]
  return(result);
 801a8e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 801a8f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8fa:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801a8fe:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801a902:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a904:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a908:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	461a      	mov	r2, r3
 801a914:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a918:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 801a91c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a91e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a922:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	1d1a      	adds	r2, r3, #4
 801a92c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a930:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	601a      	str	r2, [r3, #0]
    return (val);
 801a938:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a93c:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 801a940:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801a942:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801a946:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a94a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a94e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801a952:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a954:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a958:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	fa2f f283 	sxtb16	r2, r3
 801a962:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a966:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801a96a:	601a      	str	r2, [r3, #0]
  return(result);
 801a96c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a970:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 801a97a:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801a97e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a982:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801a986:	601a      	str	r2, [r3, #0]
 801a988:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a98c:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 801a990:	2308      	movs	r3, #8
 801a992:	6013      	str	r3, [r2, #0]
 801a994:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a998:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 801a99c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9a0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	6013      	str	r3, [r2, #0]
 801a9a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9ac:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801a9b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a9bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9c0:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801a9c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	f003 031f 	and.w	r3, r3, #31
 801a9d2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a9d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d105      	bne.n	801a9ee <arm_nn_mat_mult_nt_t_s8+0x1c26>
    return op1;
 801a9e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801a9ea:	681a      	ldr	r2, [r3, #0]
 801a9ec:	e00a      	b.n	801aa04 <arm_nn_mat_mult_nt_t_s8+0x1c3c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a9ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9f2:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 801a9f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801a9fe:	6812      	ldr	r2, [r2, #0]
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	41da      	rors	r2, r3
 801aa04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801aa0c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801aa0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa12:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	fa2f f283 	sxtb16	r2, r3
 801aa1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa20:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801aa24:	601a      	str	r2, [r3, #0]
  return(result);
 801aa26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa2a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801aa2e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801aa30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa34:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801aa38:	601a      	str	r2, [r3, #0]
  return result;
 801aa3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa3e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 801aa48:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801aa4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa50:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801aa54:	601a      	str	r2, [r3, #0]
 801aa56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa5a:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 801aa5e:	2308      	movs	r3, #8
 801aa60:	6013      	str	r3, [r2, #0]
 801aa62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa66:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 801aa6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa6e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	6013      	str	r3, [r2, #0]
 801aa76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa7a:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 801aa7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa82:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801aa8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa8e:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 801aa92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	f003 031f 	and.w	r3, r3, #31
 801aaa0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801aaa2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aaa6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d105      	bne.n	801aabc <arm_nn_mat_mult_nt_t_s8+0x1cf4>
    return op1;
 801aab0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aab4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801aab8:	681a      	ldr	r2, [r3, #0]
 801aaba:	e00a      	b.n	801aad2 <arm_nn_mat_mult_nt_t_s8+0x1d0a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801aabc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aac0:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 801aac4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aac8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801aacc:	6812      	ldr	r2, [r2, #0]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	41da      	rors	r2, r3
 801aad2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aad6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801aada:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801aadc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aae0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	fa2f f283 	sxtb16	r2, r3
 801aaea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aaee:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801aaf2:	601a      	str	r2, [r3, #0]
  return(result);
 801aaf4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aaf8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801aafc:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801aafe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab02:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801ab06:	601a      	str	r2, [r3, #0]
  return result;
 801ab08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab0c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801ab16:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801ab1a:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801ab1e:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801ab22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab26:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801ab2a:	601a      	str	r2, [r3, #0]
 801ab2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab30:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801ab34:	6019      	str	r1, [r3, #0]
 801ab36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab3a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801ab3e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ab40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab44:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801ab48:	6819      	ldr	r1, [r3, #0]
 801ab4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab4e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801ab52:	681a      	ldr	r2, [r3, #0]
 801ab54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab58:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	fb21 3202 	smlad	r2, r1, r2, r3
 801ab62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab66:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801ab6a:	601a      	str	r2, [r3, #0]
  return(result);
 801ab6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab70:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 801ab7a:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801ab7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab82:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801ab86:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ab88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab8c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	fa2f f283 	sxtb16	r2, r3
 801ab96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab9a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801ab9e:	601a      	str	r2, [r3, #0]
  return(result);
 801aba0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aba4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 801abae:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801abb2:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801abb6:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801abba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abbe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801abc2:	601a      	str	r2, [r3, #0]
 801abc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abc8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801abcc:	6019      	str	r1, [r3, #0]
 801abce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abd2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801abd6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801abd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abdc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801abe0:	6819      	ldr	r1, [r3, #0]
 801abe2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abe6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801abea:	681a      	ldr	r2, [r3, #0]
 801abec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abf0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	fb21 3202 	smlad	r2, r1, r2, r3
 801abfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abfe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801ac02:	601a      	str	r2, [r3, #0]
  return(result);
 801ac04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 801ac12:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801ac16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ac1e:	601a      	str	r2, [r3, #0]
 801ac20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac24:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 801ac28:	2308      	movs	r3, #8
 801ac2a:	6013      	str	r3, [r2, #0]
 801ac2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac30:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 801ac34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac38:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	6013      	str	r3, [r2, #0]
 801ac40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac44:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 801ac48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ac54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac58:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 801ac5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	f003 031f 	and.w	r3, r3, #31
 801ac6a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ac6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d105      	bne.n	801ac86 <arm_nn_mat_mult_nt_t_s8+0x1ebe>
    return op1;
 801ac7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac7e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801ac82:	681a      	ldr	r2, [r3, #0]
 801ac84:	e00a      	b.n	801ac9c <arm_nn_mat_mult_nt_t_s8+0x1ed4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ac86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac8a:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 801ac8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ac96:	6812      	ldr	r2, [r2, #0]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	41da      	rors	r2, r3
 801ac9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801aca4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801aca6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	fa2f f283 	sxtb16	r2, r3
 801acb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acb8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801acbc:	601a      	str	r2, [r3, #0]
  return(result);
 801acbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acc2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801acc6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801acc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801accc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801acd0:	601a      	str	r2, [r3, #0]
  return result;
 801acd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acd6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 801ace0:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801ace4:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801ace8:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801acec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acf0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801acf4:	601a      	str	r2, [r3, #0]
 801acf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801acfe:	6019      	str	r1, [r3, #0]
 801ad00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801ad08:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ad0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad0e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801ad12:	6819      	ldr	r1, [r3, #0]
 801ad14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad18:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801ad1c:	681a      	ldr	r2, [r3, #0]
 801ad1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad22:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	fb21 3202 	smlad	r2, r1, r2, r3
 801ad2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801ad34:	601a      	str	r2, [r3, #0]
  return(result);
 801ad36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 801ad44:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801ad48:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801ad4c:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801ad50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801ad58:	601a      	str	r2, [r3, #0]
 801ad5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801ad62:	6019      	str	r1, [r3, #0]
 801ad64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801ad6c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ad6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad72:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801ad76:	6819      	ldr	r1, [r3, #0]
 801ad78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801ad80:	681a      	ldr	r2, [r3, #0]
 801ad82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	fb21 3202 	smlad	r2, r1, r2, r3
 801ad90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801ad98:	601a      	str	r2, [r3, #0]
  return(result);
 801ad9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801ada8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adac:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801adb0:	681a      	ldr	r2, [r3, #0]
 801adb2:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801adb6:	4413      	add	r3, r2
 801adb8:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
 801adbc:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801adc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adc8:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 801adcc:	601a      	str	r2, [r3, #0]
    return (val);
 801adce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801add2:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801addc:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 801ade0:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ade4:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 801ade8:	fa2f f383 	sxtb16	r3, r3
 801adec:	f8c7 39e0 	str.w	r3, [r7, #2528]	; 0x9e0
  return(result);
 801adf0:	f8d7 39e0 	ldr.w	r3, [r7, #2528]	; 0x9e0
 801adf4:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 801adf8:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 801adfc:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
 801ae00:	2308      	movs	r3, #8
 801ae02:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 801ae06:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 801ae0a:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
 801ae0e:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 801ae12:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
  op2 %= 32U;
 801ae16:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 801ae1a:	f003 031f 	and.w	r3, r3, #31
 801ae1e:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
  if (op2 == 0U)
 801ae22:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d102      	bne.n	801ae30 <arm_nn_mat_mult_nt_t_s8+0x2068>
    return op1;
 801ae2a:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 801ae2e:	e005      	b.n	801ae3c <arm_nn_mat_mult_nt_t_s8+0x2074>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ae30:	f8d7 29f8 	ldr.w	r2, [r7, #2552]	; 0x9f8
 801ae34:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 801ae38:	fa62 f303 	ror.w	r3, r2, r3
 801ae3c:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ae40:	f8d7 39f0 	ldr.w	r3, [r7, #2544]	; 0x9f0
 801ae44:	fa2f f383 	sxtb16	r3, r3
 801ae48:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec
  return(result);
 801ae4c:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ae50:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
  return result;
 801ae54:	f8d7 39e8 	ldr.w	r3, [r7, #2536]	; 0x9e8
 801ae58:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 801ae5c:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	; 0xa4c
 801ae60:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	; 0xa54
 801ae64:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801ae68:	f8c7 1a10 	str.w	r1, [r7, #2576]	; 0xa10
 801ae6c:	f8c7 2a0c 	str.w	r2, [r7, #2572]	; 0xa0c
 801ae70:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ae74:	f8d7 1a10 	ldr.w	r1, [r7, #2576]	; 0xa10
 801ae78:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 801ae7c:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 801ae80:	fb21 3302 	smlad	r3, r1, r2, r3
 801ae84:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
  return(result);
 801ae88:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 801ae8c:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 801ae90:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	; 0xa4c
 801ae94:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	; 0xa44
 801ae98:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801ae9c:	f8c7 1a20 	str.w	r1, [r7, #2592]	; 0xa20
 801aea0:	f8c7 2a1c 	str.w	r2, [r7, #2588]	; 0xa1c
 801aea4:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801aea8:	f8d7 1a20 	ldr.w	r1, [r7, #2592]	; 0xa20
 801aeac:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801aeb0:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801aeb4:	fb21 3302 	smlad	r3, r1, r2, r3
 801aeb8:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
  return(result);
 801aebc:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801aec0:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 801aec4:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 801aec8:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801aecc:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801aed0:	f8c7 1a30 	str.w	r1, [r7, #2608]	; 0xa30
 801aed4:	f8c7 2a2c 	str.w	r2, [r7, #2604]	; 0xa2c
 801aed8:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801aedc:	f8d7 1a30 	ldr.w	r1, [r7, #2608]	; 0xa30
 801aee0:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801aee4:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 801aee8:	fb21 3302 	smlad	r3, r1, r2, r3
 801aeec:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
  return(result);
 801aef0:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801aef4:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val0, val4, res11);
 801aef8:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 801aefc:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801af00:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801af04:	f8c7 1a40 	str.w	r1, [r7, #2624]	; 0xa40
 801af08:	f8c7 2a3c 	str.w	r2, [r7, #2620]	; 0xa3c
 801af0c:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801af10:	f8d7 1a40 	ldr.w	r1, [r7, #2624]	; 0xa40
 801af14:	f8d7 2a3c 	ldr.w	r2, [r7, #2620]	; 0xa3c
 801af18:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801af1c:	fb21 3302 	smlad	r3, r1, r2, r3
 801af20:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
  return(result);
 801af24:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801af28:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801af2c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 801af30:	3310      	adds	r3, #16
 801af32:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 801af36:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801af3a:	f1a3 020f 	sub.w	r2, r3, #15
 801af3e:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 801af42:	4293      	cmp	r3, r2
 801af44:	f6fe a809 	blt.w	8018f5a <arm_nn_mat_mult_nt_t_s8+0x192>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801af48:	e06c      	b.n	801b024 <arm_nn_mat_mult_nt_t_s8+0x225c>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801af4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af4e:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	781b      	ldrb	r3, [r3, #0]
 801af56:	f887 3a5f 	strb.w	r3, [r7, #2655]	; 0xa5f
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801af5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af5e:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801af62:	681a      	ldr	r2, [r3, #0]
 801af64:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801af68:	4413      	add	r3, r2
 801af6a:	781b      	ldrb	r3, [r3, #0]
 801af6c:	f887 3a5e 	strb.w	r3, [r7, #2654]	; 0xa5e
                q7_t lhs_value = lhs_ptr[0];
 801af70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af74:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	781b      	ldrb	r3, [r3, #0]
 801af7c:	f887 3a5d 	strb.w	r3, [r7, #2653]	; 0xa5d

                res00 += lhs_value * rhs_value0;
 801af80:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801af84:	f997 3a5f 	ldrsb.w	r3, [r7, #2655]	; 0xa5f
 801af88:	fb03 f202 	mul.w	r2, r3, r2
 801af8c:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 801af90:	4413      	add	r3, r2
 801af92:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                res01 += lhs_value * rhs_value1;
 801af96:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801af9a:	f997 3a5e 	ldrsb.w	r3, [r7, #2654]	; 0xa5e
 801af9e:	fb03 f202 	mul.w	r2, r3, r2
 801afa2:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 801afa6:	4413      	add	r3, r2
 801afa8:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                lhs_value = lhs_ptr[rhs_cols];
 801afac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afb0:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801afb4:	681a      	ldr	r2, [r3, #0]
 801afb6:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801afba:	4413      	add	r3, r2
 801afbc:	781b      	ldrb	r3, [r3, #0]
 801afbe:	f887 3a5d 	strb.w	r3, [r7, #2653]	; 0xa5d
                res10 += lhs_value * rhs_value0;
 801afc2:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801afc6:	f997 3a5f 	ldrsb.w	r3, [r7, #2655]	; 0xa5f
 801afca:	fb03 f202 	mul.w	r2, r3, r2
 801afce:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801afd2:	4413      	add	r3, r2
 801afd4:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 += lhs_value * rhs_value1;
 801afd8:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801afdc:	f997 3a5e 	ldrsb.w	r3, [r7, #2654]	; 0xa5e
 801afe0:	fb03 f202 	mul.w	r2, r3, r2
 801afe4:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801afe8:	4413      	add	r3, r2
 801afea:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                ++rhs_ptr;
 801afee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aff2:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	1c5a      	adds	r2, r3, #1
 801affa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801affe:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801b002:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801b004:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b008:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	1c5a      	adds	r2, r3, #1
 801b010:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b014:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801b018:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801b01a:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 801b01e:	3301      	adds	r3, #1
 801b020:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 801b024:	f8d7 2aac 	ldr.w	r2, [r7, #2732]	; 0xaac
 801b028:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801b02c:	429a      	cmp	r2, r3
 801b02e:	db8c      	blt.n	801af4a <arm_nn_mat_mult_nt_t_s8+0x2182>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801b030:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b034:	009a      	lsls	r2, r3, #2
 801b036:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801b03a:	4413      	add	r3, r2
 801b03c:	6818      	ldr	r0, [r3, #0]
 801b03e:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b042:	009a      	lsls	r2, r3, #2
 801b044:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801b048:	4413      	add	r3, r2
 801b04a:	6819      	ldr	r1, [r3, #0]
 801b04c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b050:	f5a3 62b5 	sub.w	r2, r3, #1448	; 0x5a8
 801b054:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 801b058:	6013      	str	r3, [r2, #0]
 801b05a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b05e:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801b062:	6018      	str	r0, [r3, #0]
 801b064:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b068:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801b06c:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b06e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b072:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801b07c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b080:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	fa03 f202 	lsl.w	r2, r3, r2
 801b08a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b08e:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 801b092:	601a      	str	r2, [r3, #0]
 801b094:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b098:	f5a3 62b7 	sub.w	r2, r3, #1464	; 0x5b8
 801b09c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0a0:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b0a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0ac:	f2a3 52bc 	subw	r2, r3, #1468	; 0x5bc
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801b0b4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b0b8:	461a      	mov	r2, r3
 801b0ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b0be:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801b0c2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b0c6:	461a      	mov	r2, r3
 801b0c8:	2300      	movs	r3, #0
 801b0ca:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b0ce:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b0d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801b0d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0da:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	17da      	asrs	r2, r3, #31
 801b0e2:	673b      	str	r3, [r7, #112]	; 0x70
 801b0e4:	677a      	str	r2, [r7, #116]	; 0x74
 801b0e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0ea:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	17da      	asrs	r2, r3, #31
 801b0f2:	66bb      	str	r3, [r7, #104]	; 0x68
 801b0f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b0f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b0fa:	fb02 f203 	mul.w	r2, r2, r3
 801b0fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b100:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 801b102:	fb04 f303 	mul.w	r3, r4, r3
 801b106:	4413      	add	r3, r2
 801b108:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b10a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801b10c:	fba2 4204 	umull	r4, r2, r2, r4
 801b110:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801b114:	4622      	mov	r2, r4
 801b116:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 801b11a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801b11e:	4413      	add	r3, r2
 801b120:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801b124:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b128:	18c3      	adds	r3, r0, r3
 801b12a:	62bb      	str	r3, [r7, #40]	; 0x28
 801b12c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801b130:	eb41 0303 	adc.w	r3, r1, r3
 801b134:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b136:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b13a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801b13e:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801b142:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b146:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b14a:	f04f 0000 	mov.w	r0, #0
 801b14e:	f04f 0100 	mov.w	r1, #0
 801b152:	0fd0      	lsrs	r0, r2, #31
 801b154:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b158:	17d9      	asrs	r1, r3, #31
 801b15a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b15e:	f2a3 52bc 	subw	r2, r3, #1468	; 0x5bc
 801b162:	4603      	mov	r3, r0
 801b164:	6013      	str	r3, [r2, #0]
    return result;
 801b166:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b16a:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 801b16e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b170:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b174:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	dc06      	bgt.n	801b18c <arm_nn_mat_mult_nt_t_s8+0x23c4>
 801b17e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b182:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	425a      	negs	r2, r3
 801b18a:	e000      	b.n	801b18e <arm_nn_mat_mult_nt_t_s8+0x23c6>
 801b18c:	2200      	movs	r2, #0
 801b18e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b192:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 801b196:	6019      	str	r1, [r3, #0]
 801b198:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b19c:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801b1a0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b1a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1a6:	f5a3 62b9 	sub.w	r2, r3, #1480	; 0x5c8
 801b1aa:	2300      	movs	r3, #0
 801b1ac:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b1ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1b2:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801b1b6:	2201      	movs	r2, #1
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	fa02 f103 	lsl.w	r1, r2, r3
 801b1be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1c2:	f2a3 52cc 	subw	r2, r3, #1484	; 0x5cc
 801b1c6:	1e4b      	subs	r3, r1, #1
 801b1c8:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801b1ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1ce:	f5a3 61ba 	sub.w	r1, r3, #1488	; 0x5d0
 801b1d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1d6:	f5a3 62b8 	sub.w	r2, r3, #1472	; 0x5c0
 801b1da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1de:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 801b1e2:	6812      	ldr	r2, [r2, #0]
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	4013      	ands	r3, r2
 801b1e8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801b1ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1ee:	f5a3 61b9 	sub.w	r1, r3, #1480	; 0x5c8
 801b1f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1f6:	f5a3 62b8 	sub.w	r2, r3, #1472	; 0x5c0
 801b1fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1fe:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801b202:	6812      	ldr	r2, [r2, #0]
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	fa42 f303 	asr.w	r3, r2, r3
 801b20a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801b20c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b210:	f2a3 52d4 	subw	r2, r3, #1492	; 0x5d4
 801b214:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b218:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	105b      	asrs	r3, r3, #1
 801b220:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801b222:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b226:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	da0a      	bge.n	801b246 <arm_nn_mat_mult_nt_t_s8+0x247e>
        threshold++;
 801b230:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b234:	f2a3 52d4 	subw	r2, r3, #1492	; 0x5d4
 801b238:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b23c:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	3301      	adds	r3, #1
 801b244:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801b246:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b24a:	f5a3 62ba 	sub.w	r2, r3, #1488	; 0x5d0
 801b24e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b252:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 801b256:	6812      	ldr	r2, [r2, #0]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	429a      	cmp	r2, r3
 801b25c:	dd0a      	ble.n	801b274 <arm_nn_mat_mult_nt_t_s8+0x24ac>
        result++;
 801b25e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b262:	f5a3 62b9 	sub.w	r2, r3, #1480	; 0x5c8
 801b266:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b26a:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	3301      	adds	r3, #1
 801b272:	6013      	str	r3, [r2, #0]
    return result;
 801b274:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b278:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801b27c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b27e:	bf00      	nop
 801b280:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801b284:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b288:	3301      	adds	r3, #1
 801b28a:	009a      	lsls	r2, r3, #2
 801b28c:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801b290:	4413      	add	r3, r2
 801b292:	6818      	ldr	r0, [r3, #0]
 801b294:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b298:	3301      	adds	r3, #1
 801b29a:	009a      	lsls	r2, r3, #2
 801b29c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801b2a0:	4413      	add	r3, r2
 801b2a2:	6819      	ldr	r1, [r3, #0]
 801b2a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2a8:	f5a3 62af 	sub.w	r2, r3, #1400	; 0x578
 801b2ac:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 801b2b0:	6013      	str	r3, [r2, #0]
 801b2b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2b6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801b2ba:	6018      	str	r0, [r3, #0]
 801b2bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2c0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801b2c4:	6019      	str	r1, [r3, #0]
 801b2c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2ca:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801b2d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2d8:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	fa03 f202 	lsl.w	r2, r3, r2
 801b2e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2e6:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801b2ea:	601a      	str	r2, [r3, #0]
 801b2ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2f0:	f5a3 62b1 	sub.w	r2, r3, #1416	; 0x588
 801b2f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2f8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b300:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b304:	f2a3 528c 	subw	r2, r3, #1420	; 0x58c
 801b308:	2300      	movs	r3, #0
 801b30a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801b30c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b310:	461a      	mov	r2, r3
 801b312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b316:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801b318:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b31c:	461a      	mov	r2, r3
 801b31e:	2300      	movs	r3, #0
 801b320:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b322:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b326:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b32a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b32e:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	17da      	asrs	r2, r3, #31
 801b336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801b33a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801b33e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b342:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	17da      	asrs	r2, r3, #31
 801b34a:	67bb      	str	r3, [r7, #120]	; 0x78
 801b34c:	67fa      	str	r2, [r7, #124]	; 0x7c
 801b34e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b352:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b354:	fb02 f203 	mul.w	r2, r2, r3
 801b358:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b35a:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 801b35e:	fb04 f303 	mul.w	r3, r4, r3
 801b362:	4413      	add	r3, r2
 801b364:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b368:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 801b36a:	fba2 4204 	umull	r4, r2, r2, r4
 801b36e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801b372:	4622      	mov	r2, r4
 801b374:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 801b378:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b37c:	4413      	add	r3, r2
 801b37e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801b382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b386:	18c3      	adds	r3, r0, r3
 801b388:	633b      	str	r3, [r7, #48]	; 0x30
 801b38a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b38e:	eb41 0303 	adc.w	r3, r1, r3
 801b392:	637b      	str	r3, [r7, #52]	; 0x34
 801b394:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b398:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801b39c:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801b3a0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3a8:	f04f 0000 	mov.w	r0, #0
 801b3ac:	f04f 0100 	mov.w	r1, #0
 801b3b0:	0fd0      	lsrs	r0, r2, #31
 801b3b2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b3b6:	17d9      	asrs	r1, r3, #31
 801b3b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3bc:	f2a3 528c 	subw	r2, r3, #1420	; 0x58c
 801b3c0:	4603      	mov	r3, r0
 801b3c2:	6013      	str	r3, [r2, #0]
    return result;
 801b3c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3c8:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 801b3cc:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b3ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3d2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	dc06      	bgt.n	801b3ea <arm_nn_mat_mult_nt_t_s8+0x2622>
 801b3dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3e0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	425a      	negs	r2, r3
 801b3e8:	e000      	b.n	801b3ec <arm_nn_mat_mult_nt_t_s8+0x2624>
 801b3ea:	2200      	movs	r2, #0
 801b3ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3f0:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 801b3f4:	6019      	str	r1, [r3, #0]
 801b3f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3fa:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801b3fe:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b400:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b404:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 801b408:	2300      	movs	r3, #0
 801b40a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b40c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b410:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801b414:	2201      	movs	r2, #1
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	fa02 f103 	lsl.w	r1, r2, r3
 801b41c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b420:	f2a3 529c 	subw	r2, r3, #1436	; 0x59c
 801b424:	1e4b      	subs	r3, r1, #1
 801b426:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801b428:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b42c:	f5a3 61b4 	sub.w	r1, r3, #1440	; 0x5a0
 801b430:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b434:	f5a3 62b2 	sub.w	r2, r3, #1424	; 0x590
 801b438:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b43c:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801b440:	6812      	ldr	r2, [r2, #0]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	4013      	ands	r3, r2
 801b446:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801b448:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b44c:	f5a3 61b3 	sub.w	r1, r3, #1432	; 0x598
 801b450:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b454:	f5a3 62b2 	sub.w	r2, r3, #1424	; 0x590
 801b458:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b45c:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801b460:	6812      	ldr	r2, [r2, #0]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	fa42 f303 	asr.w	r3, r2, r3
 801b468:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801b46a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b46e:	f2a3 52a4 	subw	r2, r3, #1444	; 0x5a4
 801b472:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b476:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	105b      	asrs	r3, r3, #1
 801b47e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801b480:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b484:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	da0a      	bge.n	801b4a4 <arm_nn_mat_mult_nt_t_s8+0x26dc>
        threshold++;
 801b48e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b492:	f2a3 52a4 	subw	r2, r3, #1444	; 0x5a4
 801b496:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b49a:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	3301      	adds	r3, #1
 801b4a2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801b4a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4a8:	f5a3 62b4 	sub.w	r2, r3, #1440	; 0x5a0
 801b4ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4b0:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801b4b4:	6812      	ldr	r2, [r2, #0]
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	429a      	cmp	r2, r3
 801b4ba:	dd0a      	ble.n	801b4d2 <arm_nn_mat_mult_nt_t_s8+0x270a>
        result++;
 801b4bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4c0:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 801b4c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4c8:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	3301      	adds	r3, #1
 801b4d0:	6013      	str	r3, [r2, #0]
    return result;
 801b4d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4d6:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801b4da:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b4dc:	bf00      	nop
 801b4de:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801b4e2:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b4e6:	009a      	lsls	r2, r3, #2
 801b4e8:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801b4ec:	4413      	add	r3, r2
 801b4ee:	6818      	ldr	r0, [r3, #0]
 801b4f0:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b4f4:	009a      	lsls	r2, r3, #2
 801b4f6:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801b4fa:	4413      	add	r3, r2
 801b4fc:	6819      	ldr	r1, [r3, #0]
 801b4fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b502:	f5a3 62a9 	sub.w	r2, r3, #1352	; 0x548
 801b506:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801b50a:	6013      	str	r3, [r2, #0]
 801b50c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b510:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 801b514:	6018      	str	r0, [r3, #0]
 801b516:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b51a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801b51e:	6019      	str	r1, [r3, #0]
 801b520:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b524:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801b52e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b532:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	fa03 f202 	lsl.w	r2, r3, r2
 801b53c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b540:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 801b544:	601a      	str	r2, [r3, #0]
 801b546:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b54a:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 801b54e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b552:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b55a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b55e:	f2a3 525c 	subw	r2, r3, #1372	; 0x55c
 801b562:	2300      	movs	r3, #0
 801b564:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801b566:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b56a:	461a      	mov	r2, r3
 801b56c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b570:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801b574:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b578:	461a      	mov	r2, r3
 801b57a:	2300      	movs	r3, #0
 801b57c:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b580:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b584:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801b588:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b58c:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 801b590:	681b      	ldr	r3, [r3, #0]
 801b592:	17da      	asrs	r2, r3, #31
 801b594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801b598:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801b59c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5a0:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	17da      	asrs	r2, r3, #31
 801b5a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801b5ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801b5b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b5b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801b5b8:	fb02 f203 	mul.w	r2, r2, r3
 801b5bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b5c0:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 801b5c4:	fb04 f303 	mul.w	r3, r4, r3
 801b5c8:	4413      	add	r3, r2
 801b5ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801b5ce:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 801b5d2:	fba2 5604 	umull	r5, r6, r2, r4
 801b5d6:	4433      	add	r3, r6
 801b5d8:	461e      	mov	r6, r3
 801b5da:	1943      	adds	r3, r0, r5
 801b5dc:	63bb      	str	r3, [r7, #56]	; 0x38
 801b5de:	eb41 0306 	adc.w	r3, r1, r6
 801b5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b5e4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b5e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801b5ec:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801b5f0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b5f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b5f8:	f04f 0000 	mov.w	r0, #0
 801b5fc:	f04f 0100 	mov.w	r1, #0
 801b600:	0fd0      	lsrs	r0, r2, #31
 801b602:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b606:	17d9      	asrs	r1, r3, #31
 801b608:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b60c:	f2a3 525c 	subw	r2, r3, #1372	; 0x55c
 801b610:	4603      	mov	r3, r0
 801b612:	6013      	str	r3, [r2, #0]
    return result;
 801b614:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b618:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 801b61c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b61e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b622:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	dc06      	bgt.n	801b63a <arm_nn_mat_mult_nt_t_s8+0x2872>
 801b62c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b630:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	425a      	negs	r2, r3
 801b638:	e000      	b.n	801b63c <arm_nn_mat_mult_nt_t_s8+0x2874>
 801b63a:	2200      	movs	r2, #0
 801b63c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b640:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 801b644:	6019      	str	r1, [r3, #0]
 801b646:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b64a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801b64e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b650:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b654:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 801b658:	2300      	movs	r3, #0
 801b65a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b65c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b660:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801b664:	2201      	movs	r2, #1
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	fa02 f103 	lsl.w	r1, r2, r3
 801b66c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b670:	f2a3 526c 	subw	r2, r3, #1388	; 0x56c
 801b674:	1e4b      	subs	r3, r1, #1
 801b676:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801b678:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b67c:	f5a3 61ae 	sub.w	r1, r3, #1392	; 0x570
 801b680:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b684:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 801b688:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b68c:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 801b690:	6812      	ldr	r2, [r2, #0]
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	4013      	ands	r3, r2
 801b696:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801b698:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b69c:	f5a3 61ad 	sub.w	r1, r3, #1384	; 0x568
 801b6a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6a4:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 801b6a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6ac:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801b6b0:	6812      	ldr	r2, [r2, #0]
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	fa42 f303 	asr.w	r3, r2, r3
 801b6b8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801b6ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6be:	f2a3 5274 	subw	r2, r3, #1396	; 0x574
 801b6c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6c6:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	105b      	asrs	r3, r3, #1
 801b6ce:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801b6d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6d4:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	da0a      	bge.n	801b6f4 <arm_nn_mat_mult_nt_t_s8+0x292c>
        threshold++;
 801b6de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6e2:	f2a3 5274 	subw	r2, r3, #1396	; 0x574
 801b6e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6ea:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	3301      	adds	r3, #1
 801b6f2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801b6f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6f8:	f5a3 62ae 	sub.w	r2, r3, #1392	; 0x570
 801b6fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b700:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 801b704:	6812      	ldr	r2, [r2, #0]
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	429a      	cmp	r2, r3
 801b70a:	dd0a      	ble.n	801b722 <arm_nn_mat_mult_nt_t_s8+0x295a>
        result++;
 801b70c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b710:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 801b714:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b718:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	3301      	adds	r3, #1
 801b720:	6013      	str	r3, [r2, #0]
    return result;
 801b722:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b726:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801b72a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b72c:	bf00      	nop
 801b72e:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801b732:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b736:	3301      	adds	r3, #1
 801b738:	009a      	lsls	r2, r3, #2
 801b73a:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801b73e:	4413      	add	r3, r2
 801b740:	6818      	ldr	r0, [r3, #0]
 801b742:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b746:	3301      	adds	r3, #1
 801b748:	009a      	lsls	r2, r3, #2
 801b74a:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801b74e:	4413      	add	r3, r2
 801b750:	6819      	ldr	r1, [r3, #0]
 801b752:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b756:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 801b75a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801b75e:	6013      	str	r3, [r2, #0]
 801b760:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b764:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801b768:	6018      	str	r0, [r3, #0]
 801b76a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b76e:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801b772:	6019      	str	r1, [r3, #0]
 801b774:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b778:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801b782:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b786:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	fa03 f202 	lsl.w	r2, r3, r2
 801b790:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b794:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 801b798:	601a      	str	r2, [r3, #0]
 801b79a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b79e:	f5a3 62a5 	sub.w	r2, r3, #1320	; 0x528
 801b7a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7a6:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b7ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7b2:	f2a3 522c 	subw	r2, r3, #1324	; 0x52c
 801b7b6:	2300      	movs	r3, #0
 801b7b8:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801b7ba:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801b7be:	461a      	mov	r2, r3
 801b7c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b7c4:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801b7c6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801b7ca:	461a      	mov	r2, r3
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b7d0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801b7d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b7d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7dc:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	17da      	asrs	r2, r3, #31
 801b7e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801b7e8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801b7ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7f0:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	17da      	asrs	r2, r3, #31
 801b7f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801b7fc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801b800:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b804:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801b808:	fb02 f203 	mul.w	r2, r2, r3
 801b80c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b810:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 801b814:	fb04 f303 	mul.w	r3, r4, r3
 801b818:	4413      	add	r3, r2
 801b81a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801b81e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 801b822:	fba2 ab04 	umull	sl, fp, r2, r4
 801b826:	445b      	add	r3, fp
 801b828:	469b      	mov	fp, r3
 801b82a:	eb10 030a 	adds.w	r3, r0, sl
 801b82e:	643b      	str	r3, [r7, #64]	; 0x40
 801b830:	eb41 030b 	adc.w	r3, r1, fp
 801b834:	647b      	str	r3, [r7, #68]	; 0x44
 801b836:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801b83a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801b83e:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801b842:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b84a:	f04f 0000 	mov.w	r0, #0
 801b84e:	f04f 0100 	mov.w	r1, #0
 801b852:	0fd0      	lsrs	r0, r2, #31
 801b854:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b858:	17d9      	asrs	r1, r3, #31
 801b85a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b85e:	f2a3 522c 	subw	r2, r3, #1324	; 0x52c
 801b862:	4603      	mov	r3, r0
 801b864:	6013      	str	r3, [r2, #0]
    return result;
 801b866:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b86a:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801b86e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b870:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b874:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	dc06      	bgt.n	801b88c <arm_nn_mat_mult_nt_t_s8+0x2ac4>
 801b87e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b882:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	425a      	negs	r2, r3
 801b88a:	e000      	b.n	801b88e <arm_nn_mat_mult_nt_t_s8+0x2ac6>
 801b88c:	2200      	movs	r2, #0
 801b88e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b892:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 801b896:	6019      	str	r1, [r3, #0]
 801b898:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b89c:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 801b8a0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b8a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8a6:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 801b8aa:	2300      	movs	r3, #0
 801b8ac:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b8ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8b2:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 801b8b6:	2201      	movs	r2, #1
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	fa02 f103 	lsl.w	r1, r2, r3
 801b8be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8c2:	f2a3 523c 	subw	r2, r3, #1340	; 0x53c
 801b8c6:	1e4b      	subs	r3, r1, #1
 801b8c8:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801b8ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8ce:	f5a3 61a8 	sub.w	r1, r3, #1344	; 0x540
 801b8d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8d6:	f5a3 62a6 	sub.w	r2, r3, #1328	; 0x530
 801b8da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8de:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 801b8e2:	6812      	ldr	r2, [r2, #0]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	4013      	ands	r3, r2
 801b8e8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801b8ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8ee:	f5a3 61a7 	sub.w	r1, r3, #1336	; 0x538
 801b8f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8f6:	f5a3 62a6 	sub.w	r2, r3, #1328	; 0x530
 801b8fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8fe:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 801b902:	6812      	ldr	r2, [r2, #0]
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	fa42 f303 	asr.w	r3, r2, r3
 801b90a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801b90c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b910:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 801b914:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b918:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	105b      	asrs	r3, r3, #1
 801b920:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801b922:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b926:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	da0a      	bge.n	801b946 <arm_nn_mat_mult_nt_t_s8+0x2b7e>
        threshold++;
 801b930:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b934:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 801b938:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b93c:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	3301      	adds	r3, #1
 801b944:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801b946:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b94a:	f5a3 62a8 	sub.w	r2, r3, #1344	; 0x540
 801b94e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b952:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 801b956:	6812      	ldr	r2, [r2, #0]
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	429a      	cmp	r2, r3
 801b95c:	dd0a      	ble.n	801b974 <arm_nn_mat_mult_nt_t_s8+0x2bac>
        result++;
 801b95e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b962:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 801b966:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b96a:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	3301      	adds	r3, #1
 801b972:	6013      	str	r3, [r2, #0]
    return result;
 801b974:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b978:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801b97c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b97e:	bf00      	nop
 801b980:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            // Add offset
            res00 += dst_offset;
 801b984:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 801b988:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801b98c:	4413      	add	r3, r2
 801b98e:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 += dst_offset;
 801b992:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 801b996:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801b99a:	4413      	add	r3, r2
 801b99c:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 += dst_offset;
 801b9a0:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 801b9a4:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801b9a8:	4413      	add	r3, r2
 801b9aa:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 += dst_offset;
 801b9ae:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 801b9b2:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801b9b6:	4413      	add	r3, r2
 801b9b8:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801b9bc:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 801b9c0:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801b9c4:	4293      	cmp	r3, r2
 801b9c6:	bfb8      	it	lt
 801b9c8:	4613      	movlt	r3, r2
 801b9ca:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res00 = MIN(res00, activation_max);
 801b9ce:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 801b9d2:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801b9d6:	4293      	cmp	r3, r2
 801b9d8:	bfa8      	it	ge
 801b9da:	4613      	movge	r3, r2
 801b9dc:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 = MAX(res01, activation_min);
 801b9e0:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 801b9e4:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801b9e8:	4293      	cmp	r3, r2
 801b9ea:	bfb8      	it	lt
 801b9ec:	4613      	movlt	r3, r2
 801b9ee:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res01 = MIN(res01, activation_max);
 801b9f2:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 801b9f6:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801b9fa:	4293      	cmp	r3, r2
 801b9fc:	bfa8      	it	ge
 801b9fe:	4613      	movge	r3, r2
 801ba00:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 = MAX(res10, activation_min);
 801ba04:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 801ba08:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801ba0c:	4293      	cmp	r3, r2
 801ba0e:	bfb8      	it	lt
 801ba10:	4613      	movlt	r3, r2
 801ba12:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res10 = MIN(res10, activation_max);
 801ba16:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 801ba1a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801ba1e:	4293      	cmp	r3, r2
 801ba20:	bfa8      	it	ge
 801ba22:	4613      	movge	r3, r2
 801ba24:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 = MAX(res11, activation_min);
 801ba28:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 801ba2c:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801ba30:	4293      	cmp	r3, r2
 801ba32:	bfb8      	it	lt
 801ba34:	4613      	movlt	r3, r2
 801ba36:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
            res11 = MIN(res11, activation_max);
 801ba3a:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 801ba3e:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801ba42:	4293      	cmp	r3, r2
 801ba44:	bfa8      	it	ge
 801ba46:	4613      	movge	r3, r2
 801ba48:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            dst_ptr[0] = (q7_t)res00;
 801ba4c:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 801ba50:	b25b      	sxtb	r3, r3
 801ba52:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 801ba56:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 801ba58:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801ba5c:	1c5a      	adds	r2, r3, #1
 801ba5e:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 801ba62:	b25b      	sxtb	r3, r3
 801ba64:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801ba66:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	; 0xb04
 801ba6a:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801ba6e:	4413      	add	r3, r2
 801ba70:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0
            dst_ptr[0] = (q7_t)res10;
 801ba74:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801ba78:	b25b      	sxtb	r3, r3
 801ba7a:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 801ba7e:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res11;
 801ba80:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801ba84:	1c5a      	adds	r2, r3, #1
 801ba86:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801ba8a:	b25b      	sxtb	r3, r3
 801ba8c:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801ba8e:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	; 0xb04
 801ba92:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801ba96:	4413      	add	r3, r2
 801ba98:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0

            lhs_ptr += rhs_cols;
 801ba9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801baa0:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801baa4:	681a      	ldr	r2, [r3, #0]
 801baa6:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801baaa:	441a      	add	r2, r3
 801baac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bab0:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801bab4:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 801bab6:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 801baba:	3b01      	subs	r3, #1
 801babc:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0
        while (lhs_rows_idx)
 801bac0:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	f47d aa29 	bne.w	8018f1c <arm_nn_mat_mult_nt_t_s8+0x154>
        }

        // Left-over rows
        if (lhs_rows % 2)
 801baca:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 801bace:	f003 0301 	and.w	r3, r3, #1
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	f001 85f7 	beq.w	801d6c6 <arm_nn_mat_mult_nt_t_s8+0x48fe>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801bad8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801badc:	f6a3 12b4 	subw	r2, r3, #2484	; 0x9b4
 801bae0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bae4:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801baec:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 801baf0:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            q31_t res01 = lhs_offset_contribution1;
 801baf4:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 801baf8:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            int32_t rhs_cols_idx = 0;
 801bafc:	2300      	movs	r3, #0
 801bafe:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0

            q31_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801bb02:	f001 baf1 	b.w	801d0e8 <arm_nn_mat_mult_nt_t_s8+0x4320>
 801bb06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb0a:	f6a3 02b4 	subw	r2, r3, #2228	; 0x8b4
 801bb0e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801bb12:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801bb14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb18:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	461a      	mov	r2, r3
 801bb24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb28:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 801bb2c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801bb2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb32:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	1d1a      	adds	r2, r3, #4
 801bb3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb40:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	601a      	str	r2, [r3, #0]
    return (val);
 801bb48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb4c:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 801bb50:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801bb52:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801bb56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb5a:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801bb5e:	681a      	ldr	r2, [r3, #0]
 801bb60:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801bb64:	441a      	add	r2, r3
 801bb66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb6a:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 801bb6e:	601a      	str	r2, [r3, #0]
 801bb70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb74:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801bb7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb82:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 801bb86:	601a      	str	r2, [r3, #0]
    return (val);
 801bb88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb8c:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801bb96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb9a:	f6a3 02ac 	subw	r2, r3, #2220	; 0x8ac
 801bb9e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801bba2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801bba4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bba8:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	461a      	mov	r2, r3
 801bbb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbb8:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 801bbbc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801bbbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbc2:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	681b      	ldr	r3, [r3, #0]
 801bbca:	1d1a      	adds	r2, r3, #4
 801bbcc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbd0:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	601a      	str	r2, [r3, #0]
    return (val);
 801bbd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbdc:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 801bbe0:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801bbe2:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801bbe6:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801bbea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbee:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 801bbf2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bbf4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbf8:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	fa2f f283 	sxtb16	r2, r3
 801bc02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc06:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 801bc0a:	601a      	str	r2, [r3, #0]
  return(result);
 801bc0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc10:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801bc1a:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801bc1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc22:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 801bc26:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bc28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc2c:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	fa2f f283 	sxtb16	r2, r3
 801bc36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc3a:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 801bc3e:	601a      	str	r2, [r3, #0]
  return(result);
 801bc40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc44:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801bc4e:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801bc52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc56:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 801bc5a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bc5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc60:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	fa2f f283 	sxtb16	r2, r3
 801bc6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc6e:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 801bc72:	601a      	str	r2, [r3, #0]
  return(result);
 801bc74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc78:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801bc82:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801bc86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc8a:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 801bc8e:	601a      	str	r2, [r3, #0]
 801bc90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc94:	f6a3 027c 	subw	r2, r3, #2172	; 0x87c
 801bc98:	2308      	movs	r3, #8
 801bc9a:	6013      	str	r3, [r2, #0]
 801bc9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bca0:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 801bca4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bca8:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	6013      	str	r3, [r2, #0]
 801bcb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcb4:	f6a3 0284 	subw	r2, r3, #2180	; 0x884
 801bcb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcbc:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801bcc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcc8:	f6a3 0284 	subw	r2, r3, #2180	; 0x884
 801bccc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcd0:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	f003 031f 	and.w	r3, r3, #31
 801bcda:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801bcdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bce0:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d105      	bne.n	801bcf6 <arm_nn_mat_mult_nt_t_s8+0x2f2e>
    return op1;
 801bcea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcee:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 801bcf2:	681a      	ldr	r2, [r3, #0]
 801bcf4:	e00a      	b.n	801bd0c <arm_nn_mat_mult_nt_t_s8+0x2f44>
  return (op1 >> op2) | (op1 << (32U - op2));
 801bcf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcfa:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 801bcfe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd02:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 801bd06:	6812      	ldr	r2, [r2, #0]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	41da      	rors	r2, r3
 801bd0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd10:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 801bd14:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bd16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd1a:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	fa2f f283 	sxtb16	r2, r3
 801bd24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd28:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 801bd2c:	601a      	str	r2, [r3, #0]
  return(result);
 801bd2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd32:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 801bd36:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801bd38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd3c:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 801bd40:	601a      	str	r2, [r3, #0]
  return result;
 801bd42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd46:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801bd50:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801bd54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd58:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 801bd5c:	601a      	str	r2, [r3, #0]
 801bd5e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd62:	f5a3 6206 	sub.w	r2, r3, #2144	; 0x860
 801bd66:	2308      	movs	r3, #8
 801bd68:	6013      	str	r3, [r2, #0]
 801bd6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd6e:	f6a3 0264 	subw	r2, r3, #2148	; 0x864
 801bd72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd76:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	6013      	str	r3, [r2, #0]
 801bd7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd82:	f6a3 0268 	subw	r2, r3, #2152	; 0x868
 801bd86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd8a:	f5a3 6306 	sub.w	r3, r3, #2144	; 0x860
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801bd92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd96:	f6a3 0268 	subw	r2, r3, #2152	; 0x868
 801bd9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd9e:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	f003 031f 	and.w	r3, r3, #31
 801bda8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801bdaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdae:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d105      	bne.n	801bdc4 <arm_nn_mat_mult_nt_t_s8+0x2ffc>
    return op1;
 801bdb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdbc:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 801bdc0:	681a      	ldr	r2, [r3, #0]
 801bdc2:	e00a      	b.n	801bdda <arm_nn_mat_mult_nt_t_s8+0x3012>
  return (op1 >> op2) | (op1 << (32U - op2));
 801bdc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdc8:	f6a3 0264 	subw	r2, r3, #2148	; 0x864
 801bdcc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdd0:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 801bdd4:	6812      	ldr	r2, [r2, #0]
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	41da      	rors	r2, r3
 801bdda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdde:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 801bde2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bde4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bde8:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	fa2f f283 	sxtb16	r2, r3
 801bdf2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdf6:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 801bdfa:	601a      	str	r2, [r3, #0]
  return(result);
 801bdfc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be00:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 801be04:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801be06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be0a:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 801be0e:	601a      	str	r2, [r3, #0]
  return result;
 801be10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be14:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801be1e:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801be22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be26:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 801be2a:	601a      	str	r2, [r3, #0]
 801be2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be30:	f6a3 0244 	subw	r2, r3, #2116	; 0x844
 801be34:	2308      	movs	r3, #8
 801be36:	6013      	str	r3, [r2, #0]
 801be38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be3c:	f6a3 0248 	subw	r2, r3, #2120	; 0x848
 801be40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be44:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	6013      	str	r3, [r2, #0]
 801be4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be50:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 801be54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be58:	f6a3 0344 	subw	r3, r3, #2116	; 0x844
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801be60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be64:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 801be68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be6c:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	f003 031f 	and.w	r3, r3, #31
 801be76:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801be78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be7c:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	2b00      	cmp	r3, #0
 801be84:	d105      	bne.n	801be92 <arm_nn_mat_mult_nt_t_s8+0x30ca>
    return op1;
 801be86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be8a:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 801be8e:	681a      	ldr	r2, [r3, #0]
 801be90:	e00a      	b.n	801bea8 <arm_nn_mat_mult_nt_t_s8+0x30e0>
  return (op1 >> op2) | (op1 << (32U - op2));
 801be92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be96:	f6a3 0248 	subw	r2, r3, #2120	; 0x848
 801be9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be9e:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 801bea2:	6812      	ldr	r2, [r2, #0]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	41da      	rors	r2, r3
 801bea8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801beac:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 801beb0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801beb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801beb6:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	fa2f f283 	sxtb16	r2, r3
 801bec0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bec4:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 801bec8:	601a      	str	r2, [r3, #0]
  return(result);
 801beca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bece:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 801bed2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801bed4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bed8:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 801bedc:	601a      	str	r2, [r3, #0]
  return result;
 801bede:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bee2:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801beec:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801bef0:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801bef4:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801bef8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801befc:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 801bf00:	601a      	str	r2, [r3, #0]
 801bf02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf06:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 801bf0a:	6019      	str	r1, [r3, #0]
 801bf0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf10:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 801bf14:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801bf16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf1a:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 801bf1e:	6819      	ldr	r1, [r3, #0]
 801bf20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf24:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 801bf28:	681a      	ldr	r2, [r3, #0]
 801bf2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf2e:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	fb21 3202 	smlad	r2, r1, r2, r3
 801bf38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf3c:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 801bf40:	601a      	str	r2, [r3, #0]
  return(result);
 801bf42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf46:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801bf50:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801bf54:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801bf58:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801bf5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf60:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 801bf64:	601a      	str	r2, [r3, #0]
 801bf66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf6a:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 801bf6e:	6019      	str	r1, [r3, #0]
 801bf70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf74:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 801bf78:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801bf7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf7e:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 801bf82:	6819      	ldr	r1, [r3, #0]
 801bf84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf88:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 801bf8c:	681a      	ldr	r2, [r3, #0]
 801bf8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf92:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 801bf96:	681b      	ldr	r3, [r3, #0]
 801bf98:	fb21 3202 	smlad	r2, r1, r2, r3
 801bf9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfa0:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 801bfa4:	601a      	str	r2, [r3, #0]
  return(result);
 801bfa6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfaa:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801bfb4:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801bfb8:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801bfbc:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801bfc0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfc4:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 801bfc8:	601a      	str	r2, [r3, #0]
 801bfca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfce:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 801bfd2:	6019      	str	r1, [r3, #0]
 801bfd4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfd8:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 801bfdc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801bfde:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfe2:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 801bfe6:	6819      	ldr	r1, [r3, #0]
 801bfe8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfec:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 801bff0:	681a      	ldr	r2, [r3, #0]
 801bff2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bff6:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	fb21 3202 	smlad	r2, r1, r2, r3
 801c000:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c004:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 801c008:	601a      	str	r2, [r3, #0]
  return(result);
 801c00a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c00e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801c018:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c01c:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801c020:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801c024:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c028:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801c02c:	601a      	str	r2, [r3, #0]
 801c02e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c032:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 801c036:	6019      	str	r1, [r3, #0]
 801c038:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c03c:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 801c040:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c042:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c046:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801c04a:	6819      	ldr	r1, [r3, #0]
 801c04c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c050:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 801c054:	681a      	ldr	r2, [r3, #0]
 801c056:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c05a:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	fb21 3202 	smlad	r2, r1, r2, r3
 801c064:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c068:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 801c06c:	601a      	str	r2, [r3, #0]
  return(result);
 801c06e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c072:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 801c07c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c080:	f2a3 72fc 	subw	r2, r3, #2044	; 0x7fc
 801c084:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801c088:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c08a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c08e:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	681b      	ldr	r3, [r3, #0]
 801c096:	681b      	ldr	r3, [r3, #0]
 801c098:	461a      	mov	r2, r3
 801c09a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c09e:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 801c0a2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c0a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0a8:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	1d1a      	adds	r2, r3, #4
 801c0b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0b6:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	601a      	str	r2, [r3, #0]
    return (val);
 801c0be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0c2:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 801c0c6:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801c0c8:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801c0cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0d0:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801c0d4:	681a      	ldr	r2, [r3, #0]
 801c0d6:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801c0da:	441a      	add	r2, r3
 801c0dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0e0:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 801c0e4:	601a      	str	r2, [r3, #0]
 801c0e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0ea:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	681b      	ldr	r3, [r3, #0]
 801c0f2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801c0f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0f8:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 801c0fc:	601a      	str	r2, [r3, #0]
    return (val);
 801c0fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c102:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801c10c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c110:	f2a3 72f4 	subw	r2, r3, #2036	; 0x7f4
 801c114:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801c118:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c11a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c11e:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	461a      	mov	r2, r3
 801c12a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c12e:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 801c132:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c134:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c138:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 801c13c:	681b      	ldr	r3, [r3, #0]
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	1d1a      	adds	r2, r3, #4
 801c142:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c146:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	601a      	str	r2, [r3, #0]
    return (val);
 801c14e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c152:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 801c156:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801c158:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801c15c:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801c160:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c164:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 801c168:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c16a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c16e:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	fa2f f283 	sxtb16	r2, r3
 801c178:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c17c:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 801c180:	601a      	str	r2, [r3, #0]
  return(result);
 801c182:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c186:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801c190:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c194:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c198:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 801c19c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c19e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1a2:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	fa2f f283 	sxtb16	r2, r3
 801c1ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1b0:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 801c1b4:	601a      	str	r2, [r3, #0]
  return(result);
 801c1b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1ba:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801c1c4:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801c1c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1cc:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 801c1d0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c1d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1d6:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 801c1da:	681b      	ldr	r3, [r3, #0]
 801c1dc:	fa2f f283 	sxtb16	r2, r3
 801c1e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1e4:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 801c1e8:	601a      	str	r2, [r3, #0]
  return(result);
 801c1ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1ee:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 801c1f2:	681b      	ldr	r3, [r3, #0]
 801c1f4:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801c1f8:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801c1fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c200:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 801c204:	601a      	str	r2, [r3, #0]
 801c206:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c20a:	f2a3 72c4 	subw	r2, r3, #1988	; 0x7c4
 801c20e:	2308      	movs	r3, #8
 801c210:	6013      	str	r3, [r2, #0]
 801c212:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c216:	f5a3 62f9 	sub.w	r2, r3, #1992	; 0x7c8
 801c21a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c21e:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	6013      	str	r3, [r2, #0]
 801c226:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c22a:	f2a3 72cc 	subw	r2, r3, #1996	; 0x7cc
 801c22e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c232:	f2a3 73c4 	subw	r3, r3, #1988	; 0x7c4
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c23a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c23e:	f2a3 72cc 	subw	r2, r3, #1996	; 0x7cc
 801c242:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c246:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	f003 031f 	and.w	r3, r3, #31
 801c250:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c252:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c256:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d105      	bne.n	801c26c <arm_nn_mat_mult_nt_t_s8+0x34a4>
    return op1;
 801c260:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c264:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 801c268:	681a      	ldr	r2, [r3, #0]
 801c26a:	e00a      	b.n	801c282 <arm_nn_mat_mult_nt_t_s8+0x34ba>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c26c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c270:	f5a3 62f9 	sub.w	r2, r3, #1992	; 0x7c8
 801c274:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c278:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 801c27c:	6812      	ldr	r2, [r2, #0]
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	41da      	rors	r2, r3
 801c282:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c286:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 801c28a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c28c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c290:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	fa2f f283 	sxtb16	r2, r3
 801c29a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c29e:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 801c2a2:	601a      	str	r2, [r3, #0]
  return(result);
 801c2a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2a8:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 801c2ac:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c2ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2b2:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 801c2b6:	601a      	str	r2, [r3, #0]
  return result;
 801c2b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2bc:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801c2c6:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c2ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2ce:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 801c2d2:	601a      	str	r2, [r3, #0]
 801c2d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2d8:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 801c2dc:	2308      	movs	r3, #8
 801c2de:	6013      	str	r3, [r2, #0]
 801c2e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2e4:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 801c2e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2ec:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	6013      	str	r3, [r2, #0]
 801c2f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2f8:	f5a3 62f6 	sub.w	r2, r3, #1968	; 0x7b0
 801c2fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c300:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c308:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c30c:	f5a3 62f6 	sub.w	r2, r3, #1968	; 0x7b0
 801c310:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c314:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	f003 031f 	and.w	r3, r3, #31
 801c31e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c320:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c324:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d105      	bne.n	801c33a <arm_nn_mat_mult_nt_t_s8+0x3572>
    return op1;
 801c32e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c332:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 801c336:	681a      	ldr	r2, [r3, #0]
 801c338:	e00a      	b.n	801c350 <arm_nn_mat_mult_nt_t_s8+0x3588>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c33a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c33e:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 801c342:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c346:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 801c34a:	6812      	ldr	r2, [r2, #0]
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	41da      	rors	r2, r3
 801c350:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c354:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 801c358:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c35a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c35e:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	fa2f f283 	sxtb16	r2, r3
 801c368:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c36c:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 801c370:	601a      	str	r2, [r3, #0]
  return(result);
 801c372:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c376:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 801c37a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c37c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c380:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 801c384:	601a      	str	r2, [r3, #0]
  return result;
 801c386:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c38a:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801c394:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801c398:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c39c:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 801c3a0:	601a      	str	r2, [r3, #0]
 801c3a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3a6:	f2a3 728c 	subw	r2, r3, #1932	; 0x78c
 801c3aa:	2308      	movs	r3, #8
 801c3ac:	6013      	str	r3, [r2, #0]
 801c3ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3b2:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 801c3b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3ba:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	6013      	str	r3, [r2, #0]
 801c3c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3c6:	f2a3 7294 	subw	r2, r3, #1940	; 0x794
 801c3ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3ce:	f2a3 738c 	subw	r3, r3, #1932	; 0x78c
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c3d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3da:	f2a3 7294 	subw	r2, r3, #1940	; 0x794
 801c3de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3e2:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	f003 031f 	and.w	r3, r3, #31
 801c3ec:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c3ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3f2:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d105      	bne.n	801c408 <arm_nn_mat_mult_nt_t_s8+0x3640>
    return op1;
 801c3fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c400:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 801c404:	681a      	ldr	r2, [r3, #0]
 801c406:	e00a      	b.n	801c41e <arm_nn_mat_mult_nt_t_s8+0x3656>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c408:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c40c:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 801c410:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c414:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 801c418:	6812      	ldr	r2, [r2, #0]
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	41da      	rors	r2, r3
 801c41e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c422:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 801c426:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c428:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c42c:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	fa2f f283 	sxtb16	r2, r3
 801c436:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c43a:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 801c43e:	601a      	str	r2, [r3, #0]
  return(result);
 801c440:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c444:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 801c448:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c44a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c44e:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 801c452:	601a      	str	r2, [r3, #0]
  return result;
 801c454:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c458:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801c462:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801c466:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801c46a:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801c46e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c472:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 801c476:	601a      	str	r2, [r3, #0]
 801c478:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c47c:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 801c480:	6019      	str	r1, [r3, #0]
 801c482:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c486:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801c48a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c48c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c490:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 801c494:	6819      	ldr	r1, [r3, #0]
 801c496:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c49a:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 801c49e:	681a      	ldr	r2, [r3, #0]
 801c4a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4a4:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	fb21 3202 	smlad	r2, r1, r2, r3
 801c4ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4b2:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 801c4b6:	601a      	str	r2, [r3, #0]
  return(result);
 801c4b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4bc:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801c4c6:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c4ca:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801c4ce:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801c4d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4d6:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 801c4da:	601a      	str	r2, [r3, #0]
 801c4dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4e0:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 801c4e4:	6019      	str	r1, [r3, #0]
 801c4e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4ea:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 801c4ee:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c4f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4f4:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 801c4f8:	6819      	ldr	r1, [r3, #0]
 801c4fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4fe:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 801c502:	681a      	ldr	r2, [r3, #0]
 801c504:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c508:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	fb21 3202 	smlad	r2, r1, r2, r3
 801c512:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c516:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 801c51a:	601a      	str	r2, [r3, #0]
  return(result);
 801c51c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c520:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801c52a:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801c52e:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801c532:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801c536:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c53a:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 801c53e:	601a      	str	r2, [r3, #0]
 801c540:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c544:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 801c548:	6019      	str	r1, [r3, #0]
 801c54a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c54e:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 801c552:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c554:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c558:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 801c55c:	6819      	ldr	r1, [r3, #0]
 801c55e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c562:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 801c566:	681a      	ldr	r2, [r3, #0]
 801c568:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c56c:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	fb21 3202 	smlad	r2, r1, r2, r3
 801c576:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c57a:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 801c57e:	601a      	str	r2, [r3, #0]
  return(result);
 801c580:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c584:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801c58e:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c592:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801c596:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801c59a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c59e:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 801c5a2:	601a      	str	r2, [r3, #0]
 801c5a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5a8:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 801c5ac:	6019      	str	r1, [r3, #0]
 801c5ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5b2:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 801c5b6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c5b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5bc:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 801c5c0:	6819      	ldr	r1, [r3, #0]
 801c5c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5c6:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 801c5ca:	681a      	ldr	r2, [r3, #0]
 801c5cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5d0:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	fb21 3202 	smlad	r2, r1, r2, r3
 801c5da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5de:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 801c5e2:	601a      	str	r2, [r3, #0]
  return(result);
 801c5e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5e8:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 801c5f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5f6:	f2a3 7244 	subw	r2, r3, #1860	; 0x744
 801c5fa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801c5fe:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c600:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c604:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	461a      	mov	r2, r3
 801c610:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c614:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 801c618:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c61a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c61e:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	1d1a      	adds	r2, r3, #4
 801c628:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c62c:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 801c630:	681b      	ldr	r3, [r3, #0]
 801c632:	601a      	str	r2, [r3, #0]
    return (val);
 801c634:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c638:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 801c63c:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801c63e:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801c642:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c646:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801c64a:	681a      	ldr	r2, [r3, #0]
 801c64c:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801c650:	441a      	add	r2, r3
 801c652:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c656:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 801c65a:	601a      	str	r2, [r3, #0]
 801c65c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c660:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 801c664:	681b      	ldr	r3, [r3, #0]
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801c66a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c66e:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 801c672:	601a      	str	r2, [r3, #0]
    return (val);
 801c674:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c678:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801c682:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c686:	f2a3 723c 	subw	r2, r3, #1852	; 0x73c
 801c68a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801c68e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c690:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c694:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	461a      	mov	r2, r3
 801c6a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6a4:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 801c6a8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c6aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6ae:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	1d1a      	adds	r2, r3, #4
 801c6b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6bc:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	601a      	str	r2, [r3, #0]
    return (val);
 801c6c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6c8:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 801c6cc:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801c6ce:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801c6d2:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801c6d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6da:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 801c6de:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c6e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6e4:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	fa2f f283 	sxtb16	r2, r3
 801c6ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6f2:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 801c6f6:	601a      	str	r2, [r3, #0]
  return(result);
 801c6f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6fc:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 801c700:	681b      	ldr	r3, [r3, #0]
 801c702:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801c706:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c70a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c70e:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 801c712:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c714:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c718:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	fa2f f283 	sxtb16	r2, r3
 801c722:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c726:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 801c72a:	601a      	str	r2, [r3, #0]
  return(result);
 801c72c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c730:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801c73a:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801c73e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c742:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 801c746:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c748:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c74c:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	fa2f f283 	sxtb16	r2, r3
 801c756:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c75a:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 801c75e:	601a      	str	r2, [r3, #0]
  return(result);
 801c760:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c764:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801c76e:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801c772:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c776:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 801c77a:	601a      	str	r2, [r3, #0]
 801c77c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c780:	f2a3 720c 	subw	r2, r3, #1804	; 0x70c
 801c784:	2308      	movs	r3, #8
 801c786:	6013      	str	r3, [r2, #0]
 801c788:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c78c:	f5a3 62e2 	sub.w	r2, r3, #1808	; 0x710
 801c790:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c794:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	6013      	str	r3, [r2, #0]
 801c79c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7a0:	f2a3 7214 	subw	r2, r3, #1812	; 0x714
 801c7a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7a8:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c7b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7b4:	f2a3 7214 	subw	r2, r3, #1812	; 0x714
 801c7b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7bc:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	f003 031f 	and.w	r3, r3, #31
 801c7c6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c7c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7cc:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d105      	bne.n	801c7e2 <arm_nn_mat_mult_nt_t_s8+0x3a1a>
    return op1;
 801c7d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7da:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 801c7de:	681a      	ldr	r2, [r3, #0]
 801c7e0:	e00a      	b.n	801c7f8 <arm_nn_mat_mult_nt_t_s8+0x3a30>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c7e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7e6:	f5a3 62e2 	sub.w	r2, r3, #1808	; 0x710
 801c7ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7ee:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 801c7f2:	6812      	ldr	r2, [r2, #0]
 801c7f4:	681b      	ldr	r3, [r3, #0]
 801c7f6:	41da      	rors	r2, r3
 801c7f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7fc:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 801c800:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c802:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c806:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	fa2f f283 	sxtb16	r2, r3
 801c810:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c814:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 801c818:	601a      	str	r2, [r3, #0]
  return(result);
 801c81a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c81e:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 801c822:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c824:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c828:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 801c82c:	601a      	str	r2, [r3, #0]
  return result;
 801c82e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c832:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801c83c:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c840:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c844:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 801c848:	601a      	str	r2, [r3, #0]
 801c84a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c84e:	f5a3 62de 	sub.w	r2, r3, #1776	; 0x6f0
 801c852:	2308      	movs	r3, #8
 801c854:	6013      	str	r3, [r2, #0]
 801c856:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c85a:	f2a3 62f4 	subw	r2, r3, #1780	; 0x6f4
 801c85e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c862:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	6013      	str	r3, [r2, #0]
 801c86a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c86e:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 801c872:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c876:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c87e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c882:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 801c886:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c88a:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	f003 031f 	and.w	r3, r3, #31
 801c894:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c896:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c89a:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d105      	bne.n	801c8b0 <arm_nn_mat_mult_nt_t_s8+0x3ae8>
    return op1;
 801c8a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8a8:	f2a3 63f4 	subw	r3, r3, #1780	; 0x6f4
 801c8ac:	681a      	ldr	r2, [r3, #0]
 801c8ae:	e00a      	b.n	801c8c6 <arm_nn_mat_mult_nt_t_s8+0x3afe>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c8b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8b4:	f2a3 62f4 	subw	r2, r3, #1780	; 0x6f4
 801c8b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8bc:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 801c8c0:	6812      	ldr	r2, [r2, #0]
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	41da      	rors	r2, r3
 801c8c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8ca:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 801c8ce:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c8d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8d4:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 801c8d8:	681b      	ldr	r3, [r3, #0]
 801c8da:	fa2f f283 	sxtb16	r2, r3
 801c8de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8e2:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 801c8e6:	601a      	str	r2, [r3, #0]
  return(result);
 801c8e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8ec:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 801c8f0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c8f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8f6:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 801c8fa:	601a      	str	r2, [r3, #0]
  return result;
 801c8fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c900:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801c90a:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801c90e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c912:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 801c916:	601a      	str	r2, [r3, #0]
 801c918:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c91c:	f2a3 62d4 	subw	r2, r3, #1748	; 0x6d4
 801c920:	2308      	movs	r3, #8
 801c922:	6013      	str	r3, [r2, #0]
 801c924:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c928:	f5a3 62db 	sub.w	r2, r3, #1752	; 0x6d8
 801c92c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c930:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	6013      	str	r3, [r2, #0]
 801c938:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c93c:	f2a3 62dc 	subw	r2, r3, #1756	; 0x6dc
 801c940:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c944:	f2a3 63d4 	subw	r3, r3, #1748	; 0x6d4
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c94c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c950:	f2a3 62dc 	subw	r2, r3, #1756	; 0x6dc
 801c954:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c958:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	f003 031f 	and.w	r3, r3, #31
 801c962:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c964:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c968:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d105      	bne.n	801c97e <arm_nn_mat_mult_nt_t_s8+0x3bb6>
    return op1;
 801c972:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c976:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 801c97a:	681a      	ldr	r2, [r3, #0]
 801c97c:	e00a      	b.n	801c994 <arm_nn_mat_mult_nt_t_s8+0x3bcc>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c97e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c982:	f5a3 62db 	sub.w	r2, r3, #1752	; 0x6d8
 801c986:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c98a:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 801c98e:	6812      	ldr	r2, [r2, #0]
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	41da      	rors	r2, r3
 801c994:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c998:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 801c99c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c99e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9a2:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	fa2f f283 	sxtb16	r2, r3
 801c9ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9b0:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 801c9b4:	601a      	str	r2, [r3, #0]
  return(result);
 801c9b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9ba:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 801c9be:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c9c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9c4:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 801c9c8:	601a      	str	r2, [r3, #0]
  return result;
 801c9ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9ce:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801c9d8:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801c9dc:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801c9e0:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801c9e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9e8:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 801c9ec:	601a      	str	r2, [r3, #0]
 801c9ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9f2:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 801c9f6:	6019      	str	r1, [r3, #0]
 801c9f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9fc:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 801ca00:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ca02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca06:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 801ca0a:	6819      	ldr	r1, [r3, #0]
 801ca0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca10:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 801ca14:	681a      	ldr	r2, [r3, #0]
 801ca16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca1a:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	fb21 3202 	smlad	r2, r1, r2, r3
 801ca24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca28:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 801ca2c:	601a      	str	r2, [r3, #0]
  return(result);
 801ca2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca32:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801ca3c:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801ca40:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801ca44:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801ca48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca4c:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 801ca50:	601a      	str	r2, [r3, #0]
 801ca52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca56:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 801ca5a:	6019      	str	r1, [r3, #0]
 801ca5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca60:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 801ca64:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ca66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca6a:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 801ca6e:	6819      	ldr	r1, [r3, #0]
 801ca70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca74:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 801ca78:	681a      	ldr	r2, [r3, #0]
 801ca7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca7e:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 801ca82:	681b      	ldr	r3, [r3, #0]
 801ca84:	fb21 3202 	smlad	r2, r1, r2, r3
 801ca88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca8c:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 801ca90:	601a      	str	r2, [r3, #0]
  return(result);
 801ca92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca96:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801caa0:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801caa4:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801caa8:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801caac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cab0:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 801cab4:	601a      	str	r2, [r3, #0]
 801cab6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801caba:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 801cabe:	6019      	str	r1, [r3, #0]
 801cac0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cac4:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 801cac8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801caca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cace:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 801cad2:	6819      	ldr	r1, [r3, #0]
 801cad4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cad8:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 801cadc:	681a      	ldr	r2, [r3, #0]
 801cade:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cae2:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 801cae6:	681b      	ldr	r3, [r3, #0]
 801cae8:	fb21 3202 	smlad	r2, r1, r2, r3
 801caec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801caf0:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 801caf4:	601a      	str	r2, [r3, #0]
  return(result);
 801caf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cafa:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801cb04:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801cb08:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801cb0c:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801cb10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb14:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 801cb18:	601a      	str	r2, [r3, #0]
 801cb1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb1e:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 801cb22:	6019      	str	r1, [r3, #0]
 801cb24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb28:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 801cb2c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cb2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb32:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 801cb36:	6819      	ldr	r1, [r3, #0]
 801cb38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb3c:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 801cb40:	681a      	ldr	r2, [r3, #0]
 801cb42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb46:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	fb21 3202 	smlad	r2, r1, r2, r3
 801cb50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb54:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 801cb58:	601a      	str	r2, [r3, #0]
  return(result);
 801cb5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb5e:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 801cb68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb6c:	f2a3 628c 	subw	r2, r3, #1676	; 0x68c
 801cb70:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801cb74:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801cb76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb7a:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	461a      	mov	r2, r3
 801cb86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb8a:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 801cb8e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801cb90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb94:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 801cb98:	681b      	ldr	r3, [r3, #0]
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	1d1a      	adds	r2, r3, #4
 801cb9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cba2:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	601a      	str	r2, [r3, #0]
    return (val);
 801cbaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbae:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 801cbb2:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801cbb4:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801cbb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbbc:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801cbc0:	681a      	ldr	r2, [r3, #0]
 801cbc2:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801cbc6:	441a      	add	r2, r3
 801cbc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbcc:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 801cbd0:	601a      	str	r2, [r3, #0]
 801cbd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbd6:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801cbe0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbe4:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 801cbe8:	601a      	str	r2, [r3, #0]
    return (val);
 801cbea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbee:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801cbf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbfc:	f2a3 6284 	subw	r2, r3, #1668	; 0x684
 801cc00:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801cc04:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801cc06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc0a:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	681b      	ldr	r3, [r3, #0]
 801cc14:	461a      	mov	r2, r3
 801cc16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc1a:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 801cc1e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801cc20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc24:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	681b      	ldr	r3, [r3, #0]
 801cc2c:	1d1a      	adds	r2, r3, #4
 801cc2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc32:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 801cc36:	681b      	ldr	r3, [r3, #0]
 801cc38:	601a      	str	r2, [r3, #0]
    return (val);
 801cc3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc3e:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 801cc42:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801cc44:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801cc48:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801cc4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc50:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 801cc54:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cc56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc5a:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	fa2f f283 	sxtb16	r2, r3
 801cc64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc68:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 801cc6c:	601a      	str	r2, [r3, #0]
  return(result);
 801cc6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc72:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801cc7c:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801cc80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc84:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 801cc88:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cc8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc8e:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	fa2f f283 	sxtb16	r2, r3
 801cc98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc9c:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801cca0:	601a      	str	r2, [r3, #0]
  return(result);
 801cca2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cca6:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801ccb0:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801ccb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccb8:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 801ccbc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ccbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccc2:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	fa2f f283 	sxtb16	r2, r3
 801cccc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccd0:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 801ccd4:	601a      	str	r2, [r3, #0]
  return(result);
 801ccd6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccda:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801cce4:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801cce8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccec:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 801ccf0:	601a      	str	r2, [r3, #0]
 801ccf2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccf6:	f2a3 6254 	subw	r2, r3, #1620	; 0x654
 801ccfa:	2308      	movs	r3, #8
 801ccfc:	6013      	str	r3, [r2, #0]
 801ccfe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd02:	f5a3 62cb 	sub.w	r2, r3, #1624	; 0x658
 801cd06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd0a:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 801cd0e:	681b      	ldr	r3, [r3, #0]
 801cd10:	6013      	str	r3, [r2, #0]
 801cd12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd16:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 801cd1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd1e:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cd26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd2a:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 801cd2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd32:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 801cd36:	681b      	ldr	r3, [r3, #0]
 801cd38:	f003 031f 	and.w	r3, r3, #31
 801cd3c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801cd3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd42:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 801cd46:	681b      	ldr	r3, [r3, #0]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d105      	bne.n	801cd58 <arm_nn_mat_mult_nt_t_s8+0x3f90>
    return op1;
 801cd4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd50:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 801cd54:	681a      	ldr	r2, [r3, #0]
 801cd56:	e00a      	b.n	801cd6e <arm_nn_mat_mult_nt_t_s8+0x3fa6>
  return (op1 >> op2) | (op1 << (32U - op2));
 801cd58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd5c:	f5a3 62cb 	sub.w	r2, r3, #1624	; 0x658
 801cd60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd64:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 801cd68:	6812      	ldr	r2, [r2, #0]
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	41da      	rors	r2, r3
 801cd6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd72:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801cd76:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cd78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd7c:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	fa2f f283 	sxtb16	r2, r3
 801cd86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd8a:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 801cd8e:	601a      	str	r2, [r3, #0]
  return(result);
 801cd90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd94:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 801cd98:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801cd9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd9e:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 801cda2:	601a      	str	r2, [r3, #0]
  return result;
 801cda4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cda8:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 801cdac:	681b      	ldr	r3, [r3, #0]
 801cdae:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801cdb2:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801cdb6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdba:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 801cdbe:	601a      	str	r2, [r3, #0]
 801cdc0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdc4:	f5a3 62c7 	sub.w	r2, r3, #1592	; 0x638
 801cdc8:	2308      	movs	r3, #8
 801cdca:	6013      	str	r3, [r2, #0]
 801cdcc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdd0:	f2a3 623c 	subw	r2, r3, #1596	; 0x63c
 801cdd4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdd8:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	6013      	str	r3, [r2, #0]
 801cde0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cde4:	f5a3 62c8 	sub.w	r2, r3, #1600	; 0x640
 801cde8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdec:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 801cdf0:	681b      	ldr	r3, [r3, #0]
 801cdf2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cdf4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdf8:	f5a3 62c8 	sub.w	r2, r3, #1600	; 0x640
 801cdfc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce00:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	f003 031f 	and.w	r3, r3, #31
 801ce0a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ce0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce10:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 801ce14:	681b      	ldr	r3, [r3, #0]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d105      	bne.n	801ce26 <arm_nn_mat_mult_nt_t_s8+0x405e>
    return op1;
 801ce1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce1e:	f2a3 633c 	subw	r3, r3, #1596	; 0x63c
 801ce22:	681a      	ldr	r2, [r3, #0]
 801ce24:	e00a      	b.n	801ce3c <arm_nn_mat_mult_nt_t_s8+0x4074>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ce26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce2a:	f2a3 623c 	subw	r2, r3, #1596	; 0x63c
 801ce2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce32:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 801ce36:	6812      	ldr	r2, [r2, #0]
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	41da      	rors	r2, r3
 801ce3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce40:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801ce44:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ce46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce4a:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	fa2f f283 	sxtb16	r2, r3
 801ce54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce58:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 801ce5c:	601a      	str	r2, [r3, #0]
  return(result);
 801ce5e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce62:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 801ce66:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ce68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce6c:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 801ce70:	601a      	str	r2, [r3, #0]
  return result;
 801ce72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce76:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801ce80:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801ce84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce88:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 801ce8c:	601a      	str	r2, [r3, #0]
 801ce8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce92:	f2a3 621c 	subw	r2, r3, #1564	; 0x61c
 801ce96:	2308      	movs	r3, #8
 801ce98:	6013      	str	r3, [r2, #0]
 801ce9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce9e:	f5a3 62c4 	sub.w	r2, r3, #1568	; 0x620
 801cea2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cea6:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	6013      	str	r3, [r2, #0]
 801ceae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ceb2:	f2a3 6224 	subw	r2, r3, #1572	; 0x624
 801ceb6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ceba:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cec2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cec6:	f2a3 6224 	subw	r2, r3, #1572	; 0x624
 801ceca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cece:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	f003 031f 	and.w	r3, r3, #31
 801ced8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ceda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cede:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d105      	bne.n	801cef4 <arm_nn_mat_mult_nt_t_s8+0x412c>
    return op1;
 801cee8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ceec:	f5a3 63c4 	sub.w	r3, r3, #1568	; 0x620
 801cef0:	681a      	ldr	r2, [r3, #0]
 801cef2:	e00a      	b.n	801cf0a <arm_nn_mat_mult_nt_t_s8+0x4142>
  return (op1 >> op2) | (op1 << (32U - op2));
 801cef4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cef8:	f5a3 62c4 	sub.w	r2, r3, #1568	; 0x620
 801cefc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf00:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 801cf04:	6812      	ldr	r2, [r2, #0]
 801cf06:	681b      	ldr	r3, [r3, #0]
 801cf08:	41da      	rors	r2, r3
 801cf0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf0e:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 801cf12:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cf14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf18:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	fa2f f283 	sxtb16	r2, r3
 801cf22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf26:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 801cf2a:	601a      	str	r2, [r3, #0]
  return(result);
 801cf2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf30:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 801cf34:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801cf36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf3a:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 801cf3e:	601a      	str	r2, [r3, #0]
  return result;
 801cf40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf44:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801cf4e:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801cf52:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801cf56:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801cf5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf5e:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 801cf62:	601a      	str	r2, [r3, #0]
 801cf64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf68:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 801cf6c:	6019      	str	r1, [r3, #0]
 801cf6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf72:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 801cf76:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cf78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf7c:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 801cf80:	6819      	ldr	r1, [r3, #0]
 801cf82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf86:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 801cf8a:	681a      	ldr	r2, [r3, #0]
 801cf8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf90:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	fb21 3202 	smlad	r2, r1, r2, r3
 801cf9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf9e:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 801cfa2:	601a      	str	r2, [r3, #0]
  return(result);
 801cfa4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfa8:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801cfb2:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801cfb6:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801cfba:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801cfbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfc2:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 801cfc6:	601a      	str	r2, [r3, #0]
 801cfc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfcc:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 801cfd0:	6019      	str	r1, [r3, #0]
 801cfd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfd6:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 801cfda:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cfdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfe0:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 801cfe4:	6819      	ldr	r1, [r3, #0]
 801cfe6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfea:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 801cfee:	681a      	ldr	r2, [r3, #0]
 801cff0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cff4:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 801cff8:	681b      	ldr	r3, [r3, #0]
 801cffa:	fb21 3202 	smlad	r2, r1, r2, r3
 801cffe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d002:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 801d006:	601a      	str	r2, [r3, #0]
  return(result);
 801d008:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d00c:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801d016:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801d01a:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801d01e:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801d022:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d026:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801d02a:	601a      	str	r2, [r3, #0]
 801d02c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d030:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 801d034:	6019      	str	r1, [r3, #0]
 801d036:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d03a:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 801d03e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d040:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d044:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801d048:	6819      	ldr	r1, [r3, #0]
 801d04a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d04e:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 801d052:	681a      	ldr	r2, [r3, #0]
 801d054:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d058:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	fb21 3202 	smlad	r2, r1, r2, r3
 801d062:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d066:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801d06a:	601a      	str	r2, [r3, #0]
  return(result);
 801d06c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d070:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801d074:	681b      	ldr	r3, [r3, #0]
 801d076:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801d07a:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d07e:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801d082:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801d086:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d08a:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 801d08e:	601a      	str	r2, [r3, #0]
 801d090:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d094:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 801d098:	6019      	str	r1, [r3, #0]
 801d09a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d09e:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 801d0a2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d0a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0a8:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 801d0ac:	6819      	ldr	r1, [r3, #0]
 801d0ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0b2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 801d0b6:	681a      	ldr	r2, [r3, #0]
 801d0b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0bc:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	fb21 3202 	smlad	r2, r1, r2, r3
 801d0c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0ca:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801d0ce:	601a      	str	r2, [r3, #0]
  return(result);
 801d0d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0d4:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801d0de:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 801d0e2:	3310      	adds	r3, #16
 801d0e4:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 801d0e8:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801d0ec:	f1a3 020f 	sub.w	r2, r3, #15
 801d0f0:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 801d0f4:	4293      	cmp	r3, r2
 801d0f6:	f6fe ad06 	blt.w	801bb06 <arm_nn_mat_mult_nt_t_s8+0x2d3e>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801d0fa:	e04b      	b.n	801d194 <arm_nn_mat_mult_nt_t_s8+0x43cc>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801d0fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d100:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	781b      	ldrb	r3, [r3, #0]
 801d108:	f887 3a7b 	strb.w	r3, [r7, #2683]	; 0xa7b
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801d10c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d110:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801d114:	681a      	ldr	r2, [r3, #0]
 801d116:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801d11a:	4413      	add	r3, r2
 801d11c:	781b      	ldrb	r3, [r3, #0]
 801d11e:	f887 3a7a 	strb.w	r3, [r7, #2682]	; 0xa7a
                q7_t lhs_value = lhs_ptr[0];
 801d122:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d126:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	781b      	ldrb	r3, [r3, #0]
 801d12e:	f887 3a79 	strb.w	r3, [r7, #2681]	; 0xa79

                res00 += lhs_value * rhs_value0;
 801d132:	f997 2a79 	ldrsb.w	r2, [r7, #2681]	; 0xa79
 801d136:	f997 3a7b 	ldrsb.w	r3, [r7, #2683]	; 0xa7b
 801d13a:	fb03 f202 	mul.w	r2, r3, r2
 801d13e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801d142:	4413      	add	r3, r2
 801d144:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 += lhs_value * rhs_value1;
 801d148:	f997 2a79 	ldrsb.w	r2, [r7, #2681]	; 0xa79
 801d14c:	f997 3a7a 	ldrsb.w	r3, [r7, #2682]	; 0xa7a
 801d150:	fb03 f202 	mul.w	r2, r3, r2
 801d154:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 801d158:	4413      	add	r3, r2
 801d15a:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

                ++rhs_ptr;
 801d15e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d162:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	1c5a      	adds	r2, r3, #1
 801d16a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d16e:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801d172:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801d174:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d178:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	1c5a      	adds	r2, r3, #1
 801d180:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d184:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801d188:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801d18a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 801d18e:	3301      	adds	r3, #1
 801d190:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 801d194:	f8d7 2aa0 	ldr.w	r2, [r7, #2720]	; 0xaa0
 801d198:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801d19c:	429a      	cmp	r2, r3
 801d19e:	dbad      	blt.n	801d0fc <arm_nn_mat_mult_nt_t_s8+0x4334>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801d1a0:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801d1a4:	009a      	lsls	r2, r3, #2
 801d1a6:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801d1aa:	4413      	add	r3, r2
 801d1ac:	6818      	ldr	r0, [r3, #0]
 801d1ae:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801d1b2:	009a      	lsls	r2, r3, #2
 801d1b4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801d1b8:	4413      	add	r3, r2
 801d1ba:	6819      	ldr	r1, [r3, #0]
 801d1bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1c0:	f6a3 02e8 	subw	r2, r3, #2280	; 0x8e8
 801d1c4:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801d1c8:	6013      	str	r3, [r2, #0]
 801d1ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1ce:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 801d1d2:	6018      	str	r0, [r3, #0]
 801d1d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1d8:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801d1dc:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d1de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1e2:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d1ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1f0:	f6a3 03e8 	subw	r3, r3, #2280	; 0x8e8
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	fa03 f202 	lsl.w	r2, r3, r2
 801d1fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1fe:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 801d202:	601a      	str	r2, [r3, #0]
 801d204:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d208:	f6a3 02f8 	subw	r2, r3, #2296	; 0x8f8
 801d20c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d210:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d218:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d21c:	f6a3 02fc 	subw	r2, r3, #2300	; 0x8fc
 801d220:	2300      	movs	r3, #0
 801d222:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801d224:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d228:	461a      	mov	r2, r3
 801d22a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d22e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801d230:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d234:	461a      	mov	r2, r3
 801d236:	2300      	movs	r3, #0
 801d238:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d23a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d23e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d242:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d246:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	17da      	asrs	r2, r3, #31
 801d24e:	653b      	str	r3, [r7, #80]	; 0x50
 801d250:	657a      	str	r2, [r7, #84]	; 0x54
 801d252:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d256:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 801d25a:	681b      	ldr	r3, [r3, #0]
 801d25c:	17da      	asrs	r2, r3, #31
 801d25e:	64bb      	str	r3, [r7, #72]	; 0x48
 801d260:	64fa      	str	r2, [r7, #76]	; 0x4c
 801d262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d266:	fb02 f203 	mul.w	r2, r2, r3
 801d26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d26c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801d26e:	fb04 f303 	mul.w	r3, r4, r3
 801d272:	4413      	add	r3, r2
 801d274:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d276:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801d278:	fba2 4204 	umull	r4, r2, r2, r4
 801d27c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801d280:	4622      	mov	r2, r4
 801d282:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801d286:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d28a:	4413      	add	r3, r2
 801d28c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d290:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d294:	18c3      	adds	r3, r0, r3
 801d296:	61bb      	str	r3, [r7, #24]
 801d298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d29c:	eb41 0303 	adc.w	r3, r1, r3
 801d2a0:	61fb      	str	r3, [r7, #28]
 801d2a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d2a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801d2aa:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801d2ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2b6:	f04f 0000 	mov.w	r0, #0
 801d2ba:	f04f 0100 	mov.w	r1, #0
 801d2be:	0fd0      	lsrs	r0, r2, #31
 801d2c0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d2c4:	17d9      	asrs	r1, r3, #31
 801d2c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2ca:	f6a3 02fc 	subw	r2, r3, #2300	; 0x8fc
 801d2ce:	4603      	mov	r3, r0
 801d2d0:	6013      	str	r3, [r2, #0]
    return result;
 801d2d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2d6:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 801d2da:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d2dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2e0:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801d2e4:	681b      	ldr	r3, [r3, #0]
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	dc06      	bgt.n	801d2f8 <arm_nn_mat_mult_nt_t_s8+0x4530>
 801d2ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2ee:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	425a      	negs	r2, r3
 801d2f6:	e000      	b.n	801d2fa <arm_nn_mat_mult_nt_t_s8+0x4532>
 801d2f8:	2200      	movs	r2, #0
 801d2fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2fe:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 801d302:	6019      	str	r1, [r3, #0]
 801d304:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d308:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 801d30c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d30e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d312:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 801d316:	2300      	movs	r3, #0
 801d318:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d31a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d31e:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 801d322:	2201      	movs	r2, #1
 801d324:	681b      	ldr	r3, [r3, #0]
 801d326:	fa02 f103 	lsl.w	r1, r2, r3
 801d32a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d32e:	f6a3 120c 	subw	r2, r3, #2316	; 0x90c
 801d332:	1e4b      	subs	r3, r1, #1
 801d334:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d336:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d33a:	f5a3 6111 	sub.w	r1, r3, #2320	; 0x910
 801d33e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d342:	f5a3 6210 	sub.w	r2, r3, #2304	; 0x900
 801d346:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d34a:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 801d34e:	6812      	ldr	r2, [r2, #0]
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	4013      	ands	r3, r2
 801d354:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d356:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d35a:	f6a3 1108 	subw	r1, r3, #2312	; 0x908
 801d35e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d362:	f5a3 6210 	sub.w	r2, r3, #2304	; 0x900
 801d366:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d36a:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 801d36e:	6812      	ldr	r2, [r2, #0]
 801d370:	681b      	ldr	r3, [r3, #0]
 801d372:	fa42 f303 	asr.w	r3, r2, r3
 801d376:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d378:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d37c:	f6a3 1214 	subw	r2, r3, #2324	; 0x914
 801d380:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d384:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	105b      	asrs	r3, r3, #1
 801d38c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d38e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d392:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	2b00      	cmp	r3, #0
 801d39a:	da0a      	bge.n	801d3b2 <arm_nn_mat_mult_nt_t_s8+0x45ea>
        threshold++;
 801d39c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3a0:	f6a3 1214 	subw	r2, r3, #2324	; 0x914
 801d3a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3a8:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 801d3ac:	681b      	ldr	r3, [r3, #0]
 801d3ae:	3301      	adds	r3, #1
 801d3b0:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d3b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3b6:	f5a3 6211 	sub.w	r2, r3, #2320	; 0x910
 801d3ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3be:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 801d3c2:	6812      	ldr	r2, [r2, #0]
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	429a      	cmp	r2, r3
 801d3c8:	dd0a      	ble.n	801d3e0 <arm_nn_mat_mult_nt_t_s8+0x4618>
        result++;
 801d3ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3ce:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 801d3d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3d6:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	3301      	adds	r3, #1
 801d3de:	6013      	str	r3, [r2, #0]
    return result;
 801d3e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3e4:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 801d3e8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d3ea:	bf00      	nop
 801d3ec:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801d3f0:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801d3f4:	3301      	adds	r3, #1
 801d3f6:	009a      	lsls	r2, r3, #2
 801d3f8:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801d3fc:	4413      	add	r3, r2
 801d3fe:	6818      	ldr	r0, [r3, #0]
 801d400:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801d404:	3301      	adds	r3, #1
 801d406:	009a      	lsls	r2, r3, #2
 801d408:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801d40c:	4413      	add	r3, r2
 801d40e:	6819      	ldr	r1, [r3, #0]
 801d410:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d414:	f6a3 02b8 	subw	r2, r3, #2232	; 0x8b8
 801d418:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 801d41c:	6013      	str	r3, [r2, #0]
 801d41e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d422:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 801d426:	6018      	str	r0, [r3, #0]
 801d428:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d42c:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801d430:	6019      	str	r1, [r3, #0]
 801d432:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d436:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d440:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d444:	f6a3 03b8 	subw	r3, r3, #2232	; 0x8b8
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	fa03 f202 	lsl.w	r2, r3, r2
 801d44e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d452:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 801d456:	601a      	str	r2, [r3, #0]
 801d458:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d45c:	f6a3 02c8 	subw	r2, r3, #2248	; 0x8c8
 801d460:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d464:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d46c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d470:	f6a3 02cc 	subw	r2, r3, #2252	; 0x8cc
 801d474:	2300      	movs	r3, #0
 801d476:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801d478:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d47c:	461a      	mov	r2, r3
 801d47e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d482:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801d486:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d48a:	461a      	mov	r2, r3
 801d48c:	2300      	movs	r3, #0
 801d48e:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d492:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d496:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801d49a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d49e:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	17da      	asrs	r2, r3, #31
 801d4a6:	663b      	str	r3, [r7, #96]	; 0x60
 801d4a8:	667a      	str	r2, [r7, #100]	; 0x64
 801d4aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4ae:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	17da      	asrs	r2, r3, #31
 801d4b6:	65bb      	str	r3, [r7, #88]	; 0x58
 801d4b8:	65fa      	str	r2, [r7, #92]	; 0x5c
 801d4ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d4bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d4be:	fb02 f203 	mul.w	r2, r2, r3
 801d4c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d4c4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801d4c6:	fb04 f303 	mul.w	r3, r4, r3
 801d4ca:	4413      	add	r3, r2
 801d4cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d4ce:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801d4d0:	fba2 4204 	umull	r4, r2, r2, r4
 801d4d4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801d4d8:	4622      	mov	r2, r4
 801d4da:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 801d4de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801d4e2:	4413      	add	r3, r2
 801d4e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801d4e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801d4ec:	18c3      	adds	r3, r0, r3
 801d4ee:	623b      	str	r3, [r7, #32]
 801d4f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d4f4:	eb41 0303 	adc.w	r3, r1, r3
 801d4f8:	627b      	str	r3, [r7, #36]	; 0x24
 801d4fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d4fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801d502:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801d506:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d50a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d50e:	f04f 0000 	mov.w	r0, #0
 801d512:	f04f 0100 	mov.w	r1, #0
 801d516:	0fd0      	lsrs	r0, r2, #31
 801d518:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d51c:	17d9      	asrs	r1, r3, #31
 801d51e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d522:	f6a3 02cc 	subw	r2, r3, #2252	; 0x8cc
 801d526:	4603      	mov	r3, r0
 801d528:	6013      	str	r3, [r2, #0]
    return result;
 801d52a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d52e:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 801d532:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d534:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d538:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801d53c:	681b      	ldr	r3, [r3, #0]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	dc06      	bgt.n	801d550 <arm_nn_mat_mult_nt_t_s8+0x4788>
 801d542:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d546:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801d54a:	681b      	ldr	r3, [r3, #0]
 801d54c:	425a      	negs	r2, r3
 801d54e:	e000      	b.n	801d552 <arm_nn_mat_mult_nt_t_s8+0x478a>
 801d550:	2200      	movs	r2, #0
 801d552:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d556:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 801d55a:	6019      	str	r1, [r3, #0]
 801d55c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d560:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 801d564:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d566:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d56a:	f6a3 02d8 	subw	r2, r3, #2264	; 0x8d8
 801d56e:	2300      	movs	r3, #0
 801d570:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d572:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d576:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 801d57a:	2201      	movs	r2, #1
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	fa02 f103 	lsl.w	r1, r2, r3
 801d582:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d586:	f6a3 02dc 	subw	r2, r3, #2268	; 0x8dc
 801d58a:	1e4b      	subs	r3, r1, #1
 801d58c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d58e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d592:	f5a3 610e 	sub.w	r1, r3, #2272	; 0x8e0
 801d596:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d59a:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 801d59e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5a2:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 801d5a6:	6812      	ldr	r2, [r2, #0]
 801d5a8:	681b      	ldr	r3, [r3, #0]
 801d5aa:	4013      	ands	r3, r2
 801d5ac:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d5ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5b2:	f6a3 01d8 	subw	r1, r3, #2264	; 0x8d8
 801d5b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5ba:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 801d5be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5c2:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 801d5c6:	6812      	ldr	r2, [r2, #0]
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	fa42 f303 	asr.w	r3, r2, r3
 801d5ce:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d5d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5d4:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 801d5d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5dc:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	105b      	asrs	r3, r3, #1
 801d5e4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d5e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5ea:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	da0a      	bge.n	801d60a <arm_nn_mat_mult_nt_t_s8+0x4842>
        threshold++;
 801d5f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5f8:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 801d5fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d600:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	3301      	adds	r3, #1
 801d608:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d60a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d60e:	f5a3 620e 	sub.w	r2, r3, #2272	; 0x8e0
 801d612:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d616:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 801d61a:	6812      	ldr	r2, [r2, #0]
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	429a      	cmp	r2, r3
 801d620:	dd0a      	ble.n	801d638 <arm_nn_mat_mult_nt_t_s8+0x4870>
        result++;
 801d622:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d626:	f6a3 02d8 	subw	r2, r3, #2264	; 0x8d8
 801d62a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d62e:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 801d632:	681b      	ldr	r3, [r3, #0]
 801d634:	3301      	adds	r3, #1
 801d636:	6013      	str	r3, [r2, #0]
    return result;
 801d638:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d63c:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 801d640:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d642:	bf00      	nop
 801d644:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            // Add offset
            res00 += dst_offset;
 801d648:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 801d64c:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801d650:	4413      	add	r3, r2
 801d652:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 += dst_offset;
 801d656:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 801d65a:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801d65e:	4413      	add	r3, r2
 801d660:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801d664:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 801d668:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801d66c:	4293      	cmp	r3, r2
 801d66e:	bfb8      	it	lt
 801d670:	4613      	movlt	r3, r2
 801d672:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res00 = MIN(res00, activation_max);
 801d676:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 801d67a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801d67e:	4293      	cmp	r3, r2
 801d680:	bfa8      	it	ge
 801d682:	4613      	movge	r3, r2
 801d684:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 = MAX(res01, activation_min);
 801d688:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 801d68c:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801d690:	4293      	cmp	r3, r2
 801d692:	bfb8      	it	lt
 801d694:	4613      	movlt	r3, r2
 801d696:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
            res01 = MIN(res01, activation_max);
 801d69a:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 801d69e:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801d6a2:	4293      	cmp	r3, r2
 801d6a4:	bfa8      	it	ge
 801d6a6:	4613      	movge	r3, r2
 801d6a8:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            dst_ptr[0] = (q7_t)res00;
 801d6ac:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801d6b0:	b25b      	sxtb	r3, r3
 801d6b2:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 801d6b6:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 801d6b8:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801d6bc:	1c5a      	adds	r2, r3, #1
 801d6be:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 801d6c2:	b25b      	sxtb	r3, r3
 801d6c4:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 801d6c6:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801d6ca:	005b      	lsls	r3, r3, #1
 801d6cc:	4619      	mov	r1, r3
 801d6ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6d2:	f6a3 2208 	subw	r2, r3, #2568	; 0xa08
 801d6d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6da:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	440b      	add	r3, r1
 801d6e2:	6013      	str	r3, [r2, #0]
        dst += 2;
 801d6e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6e8:	f5a3 6221 	sub.w	r2, r3, #2576	; 0xa10
 801d6ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6f0:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	3302      	adds	r3, #2
 801d6f8:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801d6fa:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801d6fe:	3302      	adds	r3, #2
 801d700:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 801d704:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801d708:	1e5a      	subs	r2, r3, #1
 801d70a:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801d70e:	4293      	cmp	r3, r2
 801d710:	f6fb ab7d 	blt.w	8018e0e <arm_nn_mat_mult_nt_t_s8+0x46>
    }

    if (rhs_rows % 2)
 801d714:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801d718:	f003 0301 	and.w	r3, r3, #1
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	f000 81bd 	beq.w	801da9c <arm_nn_mat_mult_nt_t_s8+0x4cd4>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801d722:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d726:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
        q7_t *dst_ptr = &dst[0];
 801d730:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d734:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 801d73e:	2300      	movs	r3, #0
 801d740:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 801d744:	e1a3      	b.n	801da8e <arm_nn_mat_mult_nt_t_s8+0x4cc6>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801d746:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d74a:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
            q31_t res00 = 0;
 801d754:	2300      	movs	r3, #0
 801d756:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            if (bias)
 801d75a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d75e:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 801d762:	681b      	ldr	r3, [r3, #0]
 801d764:	2b00      	cmp	r3, #0
 801d766:	d00e      	beq.n	801d786 <arm_nn_mat_mult_nt_t_s8+0x49be>
            {
                res00 = bias[rhs_rows - 1];
 801d768:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801d76c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d770:	3b01      	subs	r3, #1
 801d772:	009b      	lsls	r3, r3, #2
 801d774:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801d778:	f6a2 220c 	subw	r2, r2, #2572	; 0xa0c
 801d77c:	6812      	ldr	r2, [r2, #0]
 801d77e:	4413      	add	r3, r2
 801d780:	681b      	ldr	r3, [r3, #0]
 801d782:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801d786:	2300      	movs	r3, #0
 801d788:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 801d78c:	e029      	b.n	801d7e2 <arm_nn_mat_mult_nt_t_s8+0x4a1a>
            {
                q31_t rhs_value = rhs_ptr[0];
 801d78e:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 801d792:	f993 3000 	ldrsb.w	r3, [r3]
 801d796:	f8c7 3a80 	str.w	r3, [r7, #2688]	; 0xa80
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 801d79a:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 801d79e:	f993 3000 	ldrsb.w	r3, [r3]
 801d7a2:	461a      	mov	r2, r3
 801d7a4:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 801d7a8:	4413      	add	r3, r2
 801d7aa:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c

                res00 += lhs_value * rhs_value;
 801d7ae:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801d7b2:	f8d7 2a80 	ldr.w	r2, [r7, #2688]	; 0xa80
 801d7b6:	fb02 f303 	mul.w	r3, r2, r3
 801d7ba:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801d7be:	4413      	add	r3, r2
 801d7c0:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

                ++rhs_ptr;
 801d7c4:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 801d7c8:	3301      	adds	r3, #1
 801d7ca:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
                ++lhs_ptr;
 801d7ce:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 801d7d2:	3301      	adds	r3, #1
 801d7d4:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801d7d8:	f8d7 3a88 	ldr.w	r3, [r7, #2696]	; 0xa88
 801d7dc:	3301      	adds	r3, #1
 801d7de:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 801d7e2:	f8d7 2a88 	ldr.w	r2, [r7, #2696]	; 0xa88
 801d7e6:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801d7ea:	429a      	cmp	r2, r3
 801d7ec:	dbcf      	blt.n	801d78e <arm_nn_mat_mult_nt_t_s8+0x49c6>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 801d7ee:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801d7f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d7f6:	3b01      	subs	r3, #1
 801d7f8:	009b      	lsls	r3, r3, #2
 801d7fa:	f8d7 2af8 	ldr.w	r2, [r7, #2808]	; 0xaf8
 801d7fe:	4413      	add	r3, r2
 801d800:	6819      	ldr	r1, [r3, #0]
 801d802:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801d806:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d80a:	3b01      	subs	r3, #1
 801d80c:	009b      	lsls	r3, r3, #2
 801d80e:	f8d7 2afc 	ldr.w	r2, [r7, #2812]	; 0xafc
 801d812:	4413      	add	r3, r2
 801d814:	681a      	ldr	r2, [r3, #0]
 801d816:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d81a:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 801d81e:	f8d7 0a8c 	ldr.w	r0, [r7, #2700]	; 0xa8c
 801d822:	6018      	str	r0, [r3, #0]
 801d824:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d828:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 801d82c:	6019      	str	r1, [r3, #0]
 801d82e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d832:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801d836:	601a      	str	r2, [r3, #0]
 801d838:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d83c:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d846:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801d84a:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 801d84e:	6812      	ldr	r2, [r2, #0]
 801d850:	409a      	lsls	r2, r3
 801d852:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d856:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 801d85a:	601a      	str	r2, [r3, #0]
 801d85c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d860:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 801d864:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801d868:	f6a2 121c 	subw	r2, r2, #2332	; 0x91c
 801d86c:	6812      	ldr	r2, [r2, #0]
 801d86e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d870:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d874:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 801d878:	2200      	movs	r2, #0
 801d87a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d87c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d880:	461a      	mov	r2, r3
 801d882:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d886:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801d888:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d88c:	461a      	mov	r2, r3
 801d88e:	2300      	movs	r3, #0
 801d890:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d892:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d89a:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801d89e:	f6a1 1124 	subw	r1, r1, #2340	; 0x924
 801d8a2:	6809      	ldr	r1, [r1, #0]
 801d8a4:	17c8      	asrs	r0, r1, #31
 801d8a6:	6139      	str	r1, [r7, #16]
 801d8a8:	6178      	str	r0, [r7, #20]
 801d8aa:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801d8ae:	f6a1 1128 	subw	r1, r1, #2344	; 0x928
 801d8b2:	6809      	ldr	r1, [r1, #0]
 801d8b4:	17c8      	asrs	r0, r1, #31
 801d8b6:	60b9      	str	r1, [r7, #8]
 801d8b8:	60f8      	str	r0, [r7, #12]
 801d8ba:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 801d8be:	4631      	mov	r1, r6
 801d8c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801d8c4:	4650      	mov	r0, sl
 801d8c6:	fb00 f001 	mul.w	r0, r0, r1
 801d8ca:	4659      	mov	r1, fp
 801d8cc:	462c      	mov	r4, r5
 801d8ce:	fb04 f101 	mul.w	r1, r4, r1
 801d8d2:	4401      	add	r1, r0
 801d8d4:	4628      	mov	r0, r5
 801d8d6:	4654      	mov	r4, sl
 801d8d8:	fba0 8904 	umull	r8, r9, r0, r4
 801d8dc:	4449      	add	r1, r9
 801d8de:	4689      	mov	r9, r1
 801d8e0:	eb12 0108 	adds.w	r1, r2, r8
 801d8e4:	6039      	str	r1, [r7, #0]
 801d8e6:	eb43 0309 	adc.w	r3, r3, r9
 801d8ea:	607b      	str	r3, [r7, #4]
 801d8ec:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d8f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 801d8f4:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801d8f8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d8fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d900:	f04f 0200 	mov.w	r2, #0
 801d904:	f04f 0300 	mov.w	r3, #0
 801d908:	0fc2      	lsrs	r2, r0, #31
 801d90a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801d90e:	17cb      	asrs	r3, r1, #31
 801d910:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801d914:	f6a1 112c 	subw	r1, r1, #2348	; 0x92c
 801d918:	4613      	mov	r3, r2
 801d91a:	600b      	str	r3, [r1, #0]
    return result;
 801d91c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d920:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 801d924:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d926:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d92a:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	2b00      	cmp	r3, #0
 801d932:	dc06      	bgt.n	801d942 <arm_nn_mat_mult_nt_t_s8+0x4b7a>
 801d934:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d938:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801d93c:	681b      	ldr	r3, [r3, #0]
 801d93e:	425b      	negs	r3, r3
 801d940:	e000      	b.n	801d944 <arm_nn_mat_mult_nt_t_s8+0x4b7c>
 801d942:	2300      	movs	r3, #0
 801d944:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801d948:	f5a2 6213 	sub.w	r2, r2, #2352	; 0x930
 801d94c:	6011      	str	r1, [r2, #0]
 801d94e:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801d952:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 801d956:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d958:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d95c:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801d960:	2200      	movs	r2, #0
 801d962:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d964:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d968:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 801d96c:	2201      	movs	r2, #1
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	409a      	lsls	r2, r3
 801d972:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d976:	f6a3 133c 	subw	r3, r3, #2364	; 0x93c
 801d97a:	3a01      	subs	r2, #1
 801d97c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801d97e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d982:	f5a3 6314 	sub.w	r3, r3, #2368	; 0x940
 801d986:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801d98a:	f5a2 6113 	sub.w	r1, r2, #2352	; 0x930
 801d98e:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801d992:	f6a2 123c 	subw	r2, r2, #2364	; 0x93c
 801d996:	6809      	ldr	r1, [r1, #0]
 801d998:	6812      	ldr	r2, [r2, #0]
 801d99a:	400a      	ands	r2, r1
 801d99c:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801d99e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9a2:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801d9a6:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801d9aa:	f5a2 6113 	sub.w	r1, r2, #2352	; 0x930
 801d9ae:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801d9b2:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 801d9b6:	6809      	ldr	r1, [r1, #0]
 801d9b8:	6812      	ldr	r2, [r2, #0]
 801d9ba:	fa41 f202 	asr.w	r2, r1, r2
 801d9be:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801d9c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9c4:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 801d9c8:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801d9cc:	f6a2 123c 	subw	r2, r2, #2364	; 0x93c
 801d9d0:	6812      	ldr	r2, [r2, #0]
 801d9d2:	1052      	asrs	r2, r2, #1
 801d9d4:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801d9d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9da:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801d9de:	681b      	ldr	r3, [r3, #0]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	da0a      	bge.n	801d9fa <arm_nn_mat_mult_nt_t_s8+0x4c32>
        threshold++;
 801d9e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9e8:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 801d9ec:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801d9f0:	f6a2 1244 	subw	r2, r2, #2372	; 0x944
 801d9f4:	6812      	ldr	r2, [r2, #0]
 801d9f6:	3201      	adds	r2, #1
 801d9f8:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801d9fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9fe:	f5a3 6214 	sub.w	r2, r3, #2368	; 0x940
 801da02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da06:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 801da0a:	6812      	ldr	r2, [r2, #0]
 801da0c:	681b      	ldr	r3, [r3, #0]
 801da0e:	429a      	cmp	r2, r3
 801da10:	dd0a      	ble.n	801da28 <arm_nn_mat_mult_nt_t_s8+0x4c60>
        result++;
 801da12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da16:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801da1a:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801da1e:	f6a2 1238 	subw	r2, r2, #2360	; 0x938
 801da22:	6812      	ldr	r2, [r2, #0]
 801da24:	3201      	adds	r2, #1
 801da26:	601a      	str	r2, [r3, #0]
    return result;
 801da28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da2c:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801da30:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801da32:	bf00      	nop
 801da34:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            // Add offset
            res00 += dst_offset;
 801da38:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801da3c:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801da40:	4413      	add	r3, r2
 801da42:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801da46:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801da4a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801da4e:	4293      	cmp	r3, r2
 801da50:	bfb8      	it	lt
 801da52:	4613      	movlt	r3, r2
 801da54:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            res00 = MIN(res00, activation_max);
 801da58:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801da5c:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801da60:	4293      	cmp	r3, r2
 801da62:	bfa8      	it	ge
 801da64:	4613      	movge	r3, r2
 801da66:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            dst_ptr[0] = (q7_t)res00;
 801da6a:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 801da6e:	b25a      	sxtb	r2, r3
 801da70:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 801da74:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 801da76:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801da7a:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	; 0xa98
 801da7e:	4413      	add	r3, r2
 801da80:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 801da84:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 801da88:	3301      	adds	r3, #1
 801da8a:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 801da8e:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 801da92:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 801da96:	429a      	cmp	r2, r3
 801da98:	f6ff ae55 	blt.w	801d746 <arm_nn_mat_mult_nt_t_s8+0x497e>
            dst_ptr[0] = (q7_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
 801da9c:	2300      	movs	r3, #0
}
 801da9e:	4618      	mov	r0, r3
 801daa0:	f607 27d8 	addw	r7, r7, #2776	; 0xad8
 801daa4:	46bd      	mov	sp, r7
 801daa6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801daaa:	4770      	bx	lr

0801daac <arm_nn_vec_mat_mult_t_s8>:
                                             const int32_t rhs_cols,
                                             const int32_t rhs_rows,
                                             const int32_t activation_min,
                                             const int32_t activation_max,
                                             const int32_t address_offset)
{
 801daac:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801dab0:	f5ad 7d36 	sub.w	sp, sp, #728	; 0x2d8
 801dab4:	af00      	add	r7, sp, #0
 801dab6:	f507 7436 	add.w	r4, r7, #728	; 0x2d8
 801daba:	f5a4 7421 	sub.w	r4, r4, #644	; 0x284
 801dabe:	6020      	str	r0, [r4, #0]
 801dac0:	f507 7036 	add.w	r0, r7, #728	; 0x2d8
 801dac4:	f5a0 7022 	sub.w	r0, r0, #648	; 0x288
 801dac8:	6001      	str	r1, [r0, #0]
 801daca:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 801dace:	f5a1 7123 	sub.w	r1, r1, #652	; 0x28c
 801dad2:	600a      	str	r2, [r1, #0]
 801dad4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801dad8:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 801dadc:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst += address_offset;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t row_loop_cnt = rhs_rows / 2;
 801dade:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 801dae2:	0fd3      	lsrs	r3, r2, #31
 801dae4:	4413      	add	r3, r2
 801dae6:	105b      	asrs	r3, r3, #1
 801dae8:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
    const int16_t lhs_offset_s16 = (int16_t)lhs_offset;
 801daec:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 801daf0:	f8a7 32b2 	strh.w	r3, [r7, #690]	; 0x2b2
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 801daf4:	f9b7 32b2 	ldrsh.w	r3, [r7, #690]	; 0x2b2
 801daf8:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 801dafc:	f9b7 32b2 	ldrsh.w	r3, [r7, #690]	; 0x2b2
 801db00:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 801db04:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 801db08:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801db0c:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 801db10:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 801db14:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801db18:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0

    for (int32_t i = 0; i < row_loop_cnt; i++)
 801db1c:	2300      	movs	r3, #0
 801db1e:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 801db22:	f000 bd30 	b.w	801e586 <arm_nn_vec_mat_mult_t_s8+0xada>
    {
        int32_t acc_0 = 0;
 801db26:	2300      	movs	r3, #0
 801db28:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
        int32_t acc_1 = 0;
 801db2c:	2300      	movs	r3, #0
 801db2e:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        if (bias)
 801db32:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801db36:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801db3a:	681b      	ldr	r3, [r3, #0]
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	d01b      	beq.n	801db78 <arm_nn_vec_mat_mult_t_s8+0xcc>
        {
            acc_0 = *bias++;
 801db40:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801db44:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801db48:	6819      	ldr	r1, [r3, #0]
 801db4a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801db4e:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 801db52:	1d0b      	adds	r3, r1, #4
 801db54:	6013      	str	r3, [r2, #0]
 801db56:	680b      	ldr	r3, [r1, #0]
 801db58:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
            acc_1 = *bias++;
 801db5c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801db60:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801db64:	6819      	ldr	r1, [r3, #0]
 801db66:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801db6a:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 801db6e:	1d0b      	adds	r3, r1, #4
 801db70:	6013      	str	r3, [r2, #0]
 801db72:	680b      	ldr	r3, [r1, #0]
 801db74:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        }

        const int32_t col_loop_cnt = rhs_cols / 4;
 801db78:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	da00      	bge.n	801db82 <arm_nn_vec_mat_mult_t_s8+0xd6>
 801db80:	3303      	adds	r3, #3
 801db82:	109b      	asrs	r3, r3, #2
 801db84:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

        const int8_t *lhs_vec = lhs;
 801db88:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801db8c:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 801db90:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801db94:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	6013      	str	r3, [r2, #0]
        const int8_t *rhs_0 = rhs;
 801db9c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dba0:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 801dba4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dba8:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	6013      	str	r3, [r2, #0]
        const int8_t *rhs_1 = rhs + rhs_cols;
 801dbb0:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 801dbb4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dbb8:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801dbbc:	681b      	ldr	r3, [r3, #0]
 801dbbe:	441a      	add	r2, r3
 801dbc0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dbc4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801dbc8:	601a      	str	r2, [r3, #0]
        rhs += 2 * rhs_cols;
 801dbca:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801dbce:	005b      	lsls	r3, r3, #1
 801dbd0:	4619      	mov	r1, r3
 801dbd2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dbd6:	f5a3 7222 	sub.w	r2, r3, #648	; 0x288
 801dbda:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dbde:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801dbe2:	681b      	ldr	r3, [r3, #0]
 801dbe4:	440b      	add	r3, r1
 801dbe6:	6013      	str	r3, [r2, #0]

        for (int j = col_loop_cnt; j != 0; j--)
 801dbe8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801dbec:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 801dbf0:	e1ea      	b.n	801dfc8 <arm_nn_vec_mat_mult_t_s8+0x51c>
 801dbf2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dbf6:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 801dbfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801dbfe:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801dc00:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dc08:	681b      	ldr	r3, [r3, #0]
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	461a      	mov	r2, r3
 801dc10:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc14:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801dc18:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801dc1a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	1d1a      	adds	r2, r3, #4
 801dc28:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dc30:	681b      	ldr	r3, [r3, #0]
 801dc32:	601a      	str	r2, [r3, #0]
    return (val);
 801dc34:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc38:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801dc3c:	681b      	ldr	r3, [r3, #0]
        {
            int32_t vec_0 = arm_nn_read_q7x4_ia(&lhs_vec);
 801dc3e:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
            int32_t vec_1 = __SXTAB16_RORn(lhs_offset_s16x2, (uint32_t)vec_0, 8);
 801dc42:	f8d7 127c 	ldr.w	r1, [r7, #636]	; 0x27c
 801dc46:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc4a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 801dc4e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801dc52:	6013      	str	r3, [r2, #0]
 801dc54:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801dc5c:	6019      	str	r1, [r3, #0]
 801dc5e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc62:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 801dc66:	2308      	movs	r3, #8
 801dc68:	6013      	str	r3, [r2, #0]
 801dc6a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc6e:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 801dc72:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801dc7a:	681b      	ldr	r3, [r3, #0]
 801dc7c:	6013      	str	r3, [r2, #0]
 801dc7e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc82:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 801dc86:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc8a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801dc92:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc96:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 801dc9a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dc9e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	f003 031f 	and.w	r3, r3, #31
 801dca8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801dcaa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dcae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d105      	bne.n	801dcc4 <arm_nn_vec_mat_mult_t_s8+0x218>
    return op1;
 801dcb8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dcbc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801dcc0:	6819      	ldr	r1, [r3, #0]
 801dcc2:	e00b      	b.n	801dcdc <arm_nn_vec_mat_mult_t_s8+0x230>
  return (op1 >> op2) | (op1 << (32U - op2));
 801dcc4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dcc8:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 801dccc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dcd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801dcd4:	6812      	ldr	r2, [r2, #0]
 801dcd6:	681b      	ldr	r3, [r3, #0]
 801dcd8:	fa62 f103 	ror.w	r1, r2, r3
 801dcdc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dce0:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801dce4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	6013      	str	r3, [r2, #0]
 801dcf0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dcf4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801dcf8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801dcfa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dcfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801dd02:	681a      	ldr	r2, [r3, #0]
 801dd04:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dd08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	fa22 f283 	sxtab16	r2, r2, r3
 801dd12:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dd16:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801dd1a:	601a      	str	r2, [r3, #0]
  return(result);
 801dd1c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dd20:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801dd24:	681a      	ldr	r2, [r3, #0]
    result = __SXTAB16(op1, __ROR(op2, rotate));
 801dd26:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dd2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801dd2e:	601a      	str	r2, [r3, #0]
  return result;
 801dd30:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dd34:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801dd38:	681b      	ldr	r3, [r3, #0]
 801dd3a:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

            vec_0 = __SXTAB16(lhs_offset_s16x2, vec_0);
 801dd3e:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 801dd42:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801dd46:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 801dd4a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dd4e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801dd52:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801dd54:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801dd58:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dd5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	fa22 f283 	sxtab16	r2, r2, r3
 801dd66:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dd6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801dd6e:	601a      	str	r2, [r3, #0]
  return(result);
 801dd70:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dd74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 801dd7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801dd82:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    memcpy(&val, *in_q7, 4);
 801dd86:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	681b      	ldr	r3, [r3, #0]
 801dd8e:	461a      	mov	r2, r3
 801dd90:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dd94:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801dd98:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801dd9a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	1d1a      	adds	r2, r3, #4
 801dda2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801dda6:	601a      	str	r2, [r3, #0]
    return (val);
 801dda8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ddac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801ddb0:	681b      	ldr	r3, [r3, #0]

            int32_t ker_0 = arm_nn_read_q7x4_ia(&rhs_0);
 801ddb2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
            int32_t ker_1 = __SXTB16_RORn((uint32_t)ker_0, 8);
 801ddb6:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801ddba:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801ddbe:	2308      	movs	r3, #8
 801ddc0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801ddc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801ddc8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801ddcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801ddd0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  op2 %= 32U;
 801ddd4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ddd8:	f003 031f 	and.w	r3, r3, #31
 801dddc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  if (op2 == 0U)
 801dde0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801dde4:	2b00      	cmp	r3, #0
 801dde6:	d102      	bne.n	801ddee <arm_nn_vec_mat_mult_t_s8+0x342>
    return op1;
 801dde8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801ddec:	e005      	b.n	801ddfa <arm_nn_vec_mat_mult_t_s8+0x34e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ddee:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801ddf2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ddf6:	fa62 f303 	ror.w	r3, r2, r3
 801ddfa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ddfe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801de02:	fa2f f383 	sxtb16	r3, r3
 801de06:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  return(result);
 801de0a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
    result = __SXTB16(__ROR(op1, rotate)) ;
 801de0e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  return result;
 801de12:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801de16:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
            ker_0 = __SXTB16(ker_0);
 801de1a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801de1e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801de22:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801de26:	fa2f f383 	sxtb16	r3, r3
 801de2a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
  return(result);
 801de2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801de32:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274

            acc_0 = __SMLAD(ker_1, vec_1, acc_0);
 801de36:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 801de3a:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 801de3e:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 801de42:	f8c7 1214 	str.w	r1, [r7, #532]	; 0x214
 801de46:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 801de4a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801de4e:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 801de52:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801de56:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801de5a:	fb21 3302 	smlad	r3, r1, r2, r3
 801de5e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  return(result);
 801de62:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801de66:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
            acc_0 = __SMLAD(ker_0, vec_0, acc_0);
 801de6a:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 801de6e:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 801de72:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 801de76:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 801de7a:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 801de7e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801de82:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 801de86:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801de8a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801de8e:	fb21 3302 	smlad	r3, r1, r2, r3
 801de92:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  return(result);
 801de96:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801de9a:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 801de9e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801dea2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    memcpy(&val, *in_q7, 4);
 801dea6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801deaa:	681b      	ldr	r3, [r3, #0]
 801deac:	681b      	ldr	r3, [r3, #0]
 801deae:	461a      	mov	r2, r3
 801deb0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801deb4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801deb8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801deba:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801debe:	681b      	ldr	r3, [r3, #0]
 801dec0:	1d1a      	adds	r2, r3, #4
 801dec2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801dec6:	601a      	str	r2, [r3, #0]
    return (val);
 801dec8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801decc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801ded0:	681b      	ldr	r3, [r3, #0]

            ker_0 = arm_nn_read_q7x4_ia(&rhs_1);
 801ded2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
            ker_1 = __SXTB16_RORn((uint32_t)ker_0, 8);
 801ded6:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801deda:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 801dede:	2308      	movs	r3, #8
 801dee0:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 801dee4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801dee8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 801deec:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801def0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  op2 %= 32U;
 801def4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801def8:	f003 031f 	and.w	r3, r3, #31
 801defc:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  if (op2 == 0U)
 801df00:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801df04:	2b00      	cmp	r3, #0
 801df06:	d102      	bne.n	801df0e <arm_nn_vec_mat_mult_t_s8+0x462>
    return op1;
 801df08:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801df0c:	e005      	b.n	801df1a <arm_nn_vec_mat_mult_t_s8+0x46e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801df0e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801df12:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801df16:	fa62 f303 	ror.w	r3, r2, r3
 801df1a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801df1e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801df22:	fa2f f383 	sxtb16	r3, r3
 801df26:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
  return(result);
 801df2a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
    result = __SXTB16(__ROR(op1, rotate)) ;
 801df2e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
  return result;
 801df32:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801df36:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
            ker_0 = __SXTB16(ker_0);
 801df3a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801df3e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801df42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801df46:	fa2f f383 	sxtb16	r3, r3
 801df4a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  return(result);
 801df4e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801df52:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274

            acc_1 = __SMLAD(ker_1, vec_1, acc_1);
 801df56:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 801df5a:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 801df5e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801df62:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 801df66:	f8c7 2258 	str.w	r2, [r7, #600]	; 0x258
 801df6a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801df6e:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 801df72:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801df76:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801df7a:	fb21 3302 	smlad	r3, r1, r2, r3
 801df7e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
  return(result);
 801df82:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801df86:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
            acc_1 = __SMLAD(ker_0, vec_0, acc_1);
 801df8a:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 801df8e:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 801df92:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801df96:	f8c7 126c 	str.w	r1, [r7, #620]	; 0x26c
 801df9a:	f8c7 2268 	str.w	r2, [r7, #616]	; 0x268
 801df9e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801dfa2:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 801dfa6:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801dfaa:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801dfae:	fb21 3302 	smlad	r3, r1, r2, r3
 801dfb2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
  return(result);
 801dfb6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801dfba:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        for (int j = col_loop_cnt; j != 0; j--)
 801dfbe:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801dfc2:	3b01      	subs	r3, #1
 801dfc4:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 801dfc8:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	f47f ae10 	bne.w	801dbf2 <arm_nn_vec_mat_mult_t_s8+0x146>
        }

        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 801dfd2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801dfd6:	009b      	lsls	r3, r3, #2
 801dfd8:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 801dfdc:	e054      	b.n	801e088 <arm_nn_vec_mat_mult_t_s8+0x5dc>
        {
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 801dfde:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dfe2:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	f993 3000 	ldrsb.w	r3, [r3]
 801dfec:	461a      	mov	r2, r3
 801dfee:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 801dff2:	4413      	add	r3, r2
 801dff4:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
            lhs_vec++;
 801dff8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801dffc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801e000:	681b      	ldr	r3, [r3, #0]
 801e002:	1c5a      	adds	r2, r3, #1
 801e004:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e008:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801e00c:	601a      	str	r2, [r3, #0]
            acc_0 += lhs_temp * (*rhs_0);
 801e00e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e012:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801e016:	681b      	ldr	r3, [r3, #0]
 801e018:	f993 3000 	ldrsb.w	r3, [r3]
 801e01c:	461a      	mov	r2, r3
 801e01e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801e022:	fb03 f202 	mul.w	r2, r3, r2
 801e026:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 801e02a:	4413      	add	r3, r2
 801e02c:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
            rhs_0++;
 801e030:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e034:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801e038:	681b      	ldr	r3, [r3, #0]
 801e03a:	1c5a      	adds	r2, r3, #1
 801e03c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e040:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801e044:	601a      	str	r2, [r3, #0]
            acc_1 += lhs_temp * (*rhs_1);
 801e046:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e04a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	f993 3000 	ldrsb.w	r3, [r3]
 801e054:	461a      	mov	r2, r3
 801e056:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801e05a:	fb03 f202 	mul.w	r2, r3, r2
 801e05e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801e062:	4413      	add	r3, r2
 801e064:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
            rhs_1++;
 801e068:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e06c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801e070:	681b      	ldr	r3, [r3, #0]
 801e072:	1c5a      	adds	r2, r3, #1
 801e074:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e078:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801e07c:	601a      	str	r2, [r3, #0]
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 801e07e:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 801e082:	3301      	adds	r3, #1
 801e084:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 801e088:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 801e08c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801e090:	429a      	cmp	r2, r3
 801e092:	dba4      	blt.n	801dfde <arm_nn_vec_mat_mult_t_s8+0x532>
 801e094:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e098:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 801e09c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 801e0a0:	6013      	str	r3, [r2, #0]
 801e0a2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e0a6:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 801e0aa:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801e0ae:	6013      	str	r3, [r2, #0]
 801e0b0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e0b4:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 801e0b8:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801e0bc:	6013      	str	r3, [r2, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e0be:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e0c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801e0cc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e0d0:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801e0d4:	681b      	ldr	r3, [r3, #0]
 801e0d6:	fa03 f202 	lsl.w	r2, r3, r2
 801e0da:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e0de:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801e0e2:	601a      	str	r2, [r3, #0]
 801e0e4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e0e8:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 801e0ec:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e0f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801e0f4:	681b      	ldr	r3, [r3, #0]
 801e0f6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801e0f8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e0fc:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 801e100:	2300      	movs	r3, #0
 801e102:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801e104:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e108:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801e10c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e110:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801e112:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e116:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801e11a:	2300      	movs	r3, #0
 801e11c:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801e11e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801e122:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e126:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	17da      	asrs	r2, r3, #31
 801e12e:	633b      	str	r3, [r7, #48]	; 0x30
 801e130:	637a      	str	r2, [r7, #52]	; 0x34
 801e132:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e136:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	17da      	asrs	r2, r3, #31
 801e13e:	62bb      	str	r3, [r7, #40]	; 0x28
 801e140:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e146:	fb02 f203 	mul.w	r2, r2, r3
 801e14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e14c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801e14e:	fb04 f303 	mul.w	r3, r4, r3
 801e152:	4413      	add	r3, r2
 801e154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e156:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801e158:	fba2 5604 	umull	r5, r6, r2, r4
 801e15c:	4433      	add	r3, r6
 801e15e:	461e      	mov	r6, r3
 801e160:	1943      	adds	r3, r0, r5
 801e162:	61bb      	str	r3, [r7, #24]
 801e164:	eb41 0306 	adc.w	r3, r1, r6
 801e168:	61fb      	str	r3, [r7, #28]
 801e16a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801e16e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
    result = (int32_t)(mult.long_long >> 31);
 801e172:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801e176:	f04f 0000 	mov.w	r0, #0
 801e17a:	f04f 0100 	mov.w	r1, #0
 801e17e:	0fd0      	lsrs	r0, r2, #31
 801e180:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801e184:	17d9      	asrs	r1, r3, #31
 801e186:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e18a:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 801e18e:	4603      	mov	r3, r0
 801e190:	6013      	str	r3, [r2, #0]
    return result;
 801e192:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e196:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801e19a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e19c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e1a0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801e1a4:	681b      	ldr	r3, [r3, #0]
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	dc06      	bgt.n	801e1b8 <arm_nn_vec_mat_mult_t_s8+0x70c>
 801e1aa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e1ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	425a      	negs	r2, r3
 801e1b6:	e000      	b.n	801e1ba <arm_nn_vec_mat_mult_t_s8+0x70e>
 801e1b8:	2200      	movs	r2, #0
 801e1ba:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e1be:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801e1c2:	6019      	str	r1, [r3, #0]
 801e1c4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e1c8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801e1cc:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801e1ce:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e1d2:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 801e1d6:	2300      	movs	r3, #0
 801e1d8:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801e1da:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e1de:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801e1e2:	2201      	movs	r2, #1
 801e1e4:	681b      	ldr	r3, [r3, #0]
 801e1e6:	fa02 f103 	lsl.w	r1, r2, r3
 801e1ea:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e1ee:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 801e1f2:	1e4b      	subs	r3, r1, #1
 801e1f4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801e1f6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e1fa:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 801e1fe:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e202:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 801e206:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e20a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801e20e:	6812      	ldr	r2, [r2, #0]
 801e210:	681b      	ldr	r3, [r3, #0]
 801e212:	4013      	ands	r3, r2
 801e214:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801e216:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e21a:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 801e21e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e222:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 801e226:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e22a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801e22e:	6812      	ldr	r2, [r2, #0]
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	fa42 f303 	asr.w	r3, r2, r3
 801e236:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801e238:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e23c:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801e240:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e244:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	105b      	asrs	r3, r3, #1
 801e24c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801e24e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e252:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	2b00      	cmp	r3, #0
 801e25a:	da0a      	bge.n	801e272 <arm_nn_vec_mat_mult_t_s8+0x7c6>
        threshold++;
 801e25c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e260:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801e264:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e268:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	3301      	adds	r3, #1
 801e270:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801e272:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e276:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 801e27a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e27e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801e282:	6812      	ldr	r2, [r2, #0]
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	429a      	cmp	r2, r3
 801e288:	dd0a      	ble.n	801e2a0 <arm_nn_vec_mat_mult_t_s8+0x7f4>
        result++;
 801e28a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e28e:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 801e292:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e296:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801e29a:	681b      	ldr	r3, [r3, #0]
 801e29c:	3301      	adds	r3, #1
 801e29e:	6013      	str	r3, [r2, #0]
    return result;
 801e2a0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e2a4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801e2a8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e2aa:	bf00      	nop
        }

        acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);
 801e2ac:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 801e2b0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e2b4:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 801e2b8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801e2bc:	6013      	str	r3, [r2, #0]
 801e2be:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e2c2:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 801e2c6:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801e2ca:	6013      	str	r3, [r2, #0]
 801e2cc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e2d0:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 801e2d4:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801e2d8:	6013      	str	r3, [r2, #0]
 801e2da:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e2de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801e2e2:	681b      	ldr	r3, [r3, #0]
 801e2e4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801e2e8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e2ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801e2f0:	681b      	ldr	r3, [r3, #0]
 801e2f2:	fa03 f202 	lsl.w	r2, r3, r2
 801e2f6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e2fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801e2fe:	601a      	str	r2, [r3, #0]
 801e300:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e304:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 801e308:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e30c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801e310:	681b      	ldr	r3, [r3, #0]
 801e312:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801e314:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e318:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 801e31c:	2300      	movs	r3, #0
 801e31e:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801e320:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e324:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801e328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e32c:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801e32e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e332:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801e336:	2300      	movs	r3, #0
 801e338:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801e33a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801e33e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e342:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	17da      	asrs	r2, r3, #31
 801e34a:	643b      	str	r3, [r7, #64]	; 0x40
 801e34c:	647a      	str	r2, [r7, #68]	; 0x44
 801e34e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e352:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801e356:	681b      	ldr	r3, [r3, #0]
 801e358:	17da      	asrs	r2, r3, #31
 801e35a:	63bb      	str	r3, [r7, #56]	; 0x38
 801e35c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801e35e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e362:	fb02 f203 	mul.w	r2, r2, r3
 801e366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e368:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801e36a:	fb04 f303 	mul.w	r3, r4, r3
 801e36e:	4413      	add	r3, r2
 801e370:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e372:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 801e374:	fba2 ab04 	umull	sl, fp, r2, r4
 801e378:	445b      	add	r3, fp
 801e37a:	469b      	mov	fp, r3
 801e37c:	eb10 030a 	adds.w	r3, r0, sl
 801e380:	623b      	str	r3, [r7, #32]
 801e382:	eb41 030b 	adc.w	r3, r1, fp
 801e386:	627b      	str	r3, [r7, #36]	; 0x24
 801e388:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801e38c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    result = (int32_t)(mult.long_long >> 31);
 801e390:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801e394:	f04f 0000 	mov.w	r0, #0
 801e398:	f04f 0100 	mov.w	r1, #0
 801e39c:	0fd0      	lsrs	r0, r2, #31
 801e39e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801e3a2:	17d9      	asrs	r1, r3, #31
 801e3a4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e3a8:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 801e3ac:	4603      	mov	r3, r0
 801e3ae:	6013      	str	r3, [r2, #0]
    return result;
 801e3b0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e3b4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801e3b8:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e3ba:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e3be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	dc06      	bgt.n	801e3d6 <arm_nn_vec_mat_mult_t_s8+0x92a>
 801e3c8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e3cc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801e3d0:	681b      	ldr	r3, [r3, #0]
 801e3d2:	425a      	negs	r2, r3
 801e3d4:	e000      	b.n	801e3d8 <arm_nn_vec_mat_mult_t_s8+0x92c>
 801e3d6:	2200      	movs	r2, #0
 801e3d8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e3dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801e3e0:	6019      	str	r1, [r3, #0]
 801e3e2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e3e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801e3ea:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801e3ec:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e3f0:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801e3f8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e3fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801e400:	2201      	movs	r2, #1
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	fa02 f103 	lsl.w	r1, r2, r3
 801e408:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e40c:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 801e410:	1e4b      	subs	r3, r1, #1
 801e412:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801e414:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e418:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 801e41c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e420:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 801e424:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e428:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801e42c:	6812      	ldr	r2, [r2, #0]
 801e42e:	681b      	ldr	r3, [r3, #0]
 801e430:	4013      	ands	r3, r2
 801e432:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801e434:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e438:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 801e43c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e440:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 801e444:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e448:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801e44c:	6812      	ldr	r2, [r2, #0]
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	fa42 f303 	asr.w	r3, r2, r3
 801e454:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801e456:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e45a:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801e45e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e462:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801e466:	681b      	ldr	r3, [r3, #0]
 801e468:	105b      	asrs	r3, r3, #1
 801e46a:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801e46c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e470:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801e474:	681b      	ldr	r3, [r3, #0]
 801e476:	2b00      	cmp	r3, #0
 801e478:	da0a      	bge.n	801e490 <arm_nn_vec_mat_mult_t_s8+0x9e4>
        threshold++;
 801e47a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e47e:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801e482:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e486:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	3301      	adds	r3, #1
 801e48e:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801e490:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e494:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 801e498:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e49c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801e4a0:	6812      	ldr	r2, [r2, #0]
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	429a      	cmp	r2, r3
 801e4a6:	dd0a      	ble.n	801e4be <arm_nn_vec_mat_mult_t_s8+0xa12>
        result++;
 801e4a8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e4ac:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 801e4b0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e4b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	3301      	adds	r3, #1
 801e4bc:	6013      	str	r3, [r2, #0]
    return result;
 801e4be:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e4c2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801e4c6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e4c8:	bf00      	nop
        acc_1 = arm_nn_requantize(acc_1, dst_multiplier, dst_shift);
 801e4ca:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc

        // Add offset
        acc_0 += dst_offset;
 801e4ce:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 801e4d2:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801e4d6:	4413      	add	r3, r2
 801e4d8:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
        acc_1 += dst_offset;
 801e4dc:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 801e4e0:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801e4e4:	4413      	add	r3, r2
 801e4e6:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        // Clamp the result
        acc_0 = MAX(acc_0, activation_min);
 801e4ea:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 801e4ee:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801e4f2:	4293      	cmp	r3, r2
 801e4f4:	bfb8      	it	lt
 801e4f6:	4613      	movlt	r3, r2
 801e4f8:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
        acc_0 = MIN(acc_0, activation_max);
 801e4fc:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 801e500:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 801e504:	4293      	cmp	r3, r2
 801e506:	bfa8      	it	ge
 801e508:	4613      	movge	r3, r2
 801e50a:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
        acc_1 = MAX(acc_1, activation_min);
 801e50e:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 801e512:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801e516:	4293      	cmp	r3, r2
 801e518:	bfb8      	it	lt
 801e51a:	4613      	movlt	r3, r2
 801e51c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        acc_1 = MIN(acc_1, activation_max);
 801e520:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 801e524:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 801e528:	4293      	cmp	r3, r2
 801e52a:	bfa8      	it	ge
 801e52c:	4613      	movge	r3, r2
 801e52e:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        *dst = (int8_t)acc_0;
 801e532:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 801e536:	b259      	sxtb	r1, r3
 801e538:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e53c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801e540:	681a      	ldr	r2, [r3, #0]
 801e542:	460b      	mov	r3, r1
 801e544:	7013      	strb	r3, [r2, #0]
        *(dst + address_offset) = (int8_t)acc_1;
 801e546:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801e54a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e54e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801e552:	681b      	ldr	r3, [r3, #0]
 801e554:	441a      	add	r2, r3
 801e556:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801e55a:	b25b      	sxtb	r3, r3
 801e55c:	7013      	strb	r3, [r2, #0]
        dst += 2 * address_offset;
 801e55e:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 801e562:	005b      	lsls	r3, r3, #1
 801e564:	4619      	mov	r1, r3
 801e566:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e56a:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 801e56e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e572:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	440b      	add	r3, r1
 801e57a:	6013      	str	r3, [r2, #0]
    for (int32_t i = 0; i < row_loop_cnt; i++)
 801e57c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 801e580:	3301      	adds	r3, #1
 801e582:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 801e586:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 801e58a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801e58e:	429a      	cmp	r2, r3
 801e590:	f6ff aac9 	blt.w	801db26 <arm_nn_vec_mat_mult_t_s8+0x7a>
    }

    if (rhs_rows & 0x1)
 801e594:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801e598:	f003 0301 	and.w	r3, r3, #1
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	f000 83a2 	beq.w	801ece6 <arm_nn_vec_mat_mult_t_s8+0x123a>
    {
        int32_t acc_0 = 0;
 801e5a2:	2300      	movs	r3, #0
 801e5a4:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        if (bias)
 801e5a8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e5ac:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801e5b0:	681b      	ldr	r3, [r3, #0]
 801e5b2:	2b00      	cmp	r3, #0
 801e5b4:	d00d      	beq.n	801e5d2 <arm_nn_vec_mat_mult_t_s8+0xb26>
        {
            acc_0 = *bias++;
 801e5b6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e5ba:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e5c4:	f5a2 7223 	sub.w	r2, r2, #652	; 0x28c
 801e5c8:	1d19      	adds	r1, r3, #4
 801e5ca:	6011      	str	r1, [r2, #0]
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        }
        const int32_t col_loop_cnt = rhs_cols / 4;
 801e5d2:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801e5d6:	2b00      	cmp	r3, #0
 801e5d8:	da00      	bge.n	801e5dc <arm_nn_vec_mat_mult_t_s8+0xb30>
 801e5da:	3303      	adds	r3, #3
 801e5dc:	109b      	asrs	r3, r3, #2
 801e5de:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

        const int8_t *lhs_vec = lhs;
 801e5e2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e5e6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801e5ea:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e5ee:	f5a2 7221 	sub.w	r2, r2, #644	; 0x284
 801e5f2:	6812      	ldr	r2, [r2, #0]
 801e5f4:	601a      	str	r2, [r3, #0]
        const int8_t *rhs_0 = rhs;
 801e5f6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e5fa:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801e5fe:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e602:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 801e606:	6812      	ldr	r2, [r2, #0]
 801e608:	601a      	str	r2, [r3, #0]

        for (int i = col_loop_cnt; i != 0; i--)
 801e60a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801e60e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 801e612:	e1de      	b.n	801e9d2 <arm_nn_vec_mat_mult_t_s8+0xf26>
 801e614:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e618:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801e61c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801e620:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801e622:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e626:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	681b      	ldr	r3, [r3, #0]
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	461a      	mov	r2, r3
 801e632:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e636:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801e63a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e63c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e640:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	681b      	ldr	r3, [r3, #0]
 801e648:	1d1a      	adds	r2, r3, #4
 801e64a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e64e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	601a      	str	r2, [r3, #0]
    return (val);
 801e656:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e65a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801e65e:	681b      	ldr	r3, [r3, #0]
        {
            int32_t vec_0 = arm_nn_read_q7x4_ia(&lhs_vec);
 801e660:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
            int32_t vec_1 = __SXTAB16_RORn(lhs_offset_s16x2, (uint32_t)vec_0, 8);
 801e664:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 801e668:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e66c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801e670:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 801e674:	6019      	str	r1, [r3, #0]
 801e676:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e67a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801e67e:	601a      	str	r2, [r3, #0]
 801e680:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e684:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801e688:	2208      	movs	r2, #8
 801e68a:	601a      	str	r2, [r3, #0]
 801e68c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e690:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801e694:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e698:	f5a2 72f4 	sub.w	r2, r2, #488	; 0x1e8
 801e69c:	6812      	ldr	r2, [r2, #0]
 801e69e:	601a      	str	r2, [r3, #0]
 801e6a0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e6a4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801e6a8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e6ac:	f5a2 72f6 	sub.w	r2, r2, #492	; 0x1ec
 801e6b0:	6812      	ldr	r2, [r2, #0]
 801e6b2:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801e6b4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e6b8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801e6bc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e6c0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 801e6c4:	6812      	ldr	r2, [r2, #0]
 801e6c6:	f002 021f 	and.w	r2, r2, #31
 801e6ca:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801e6cc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e6d0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801e6d4:	681b      	ldr	r3, [r3, #0]
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d105      	bne.n	801e6e6 <arm_nn_vec_mat_mult_t_s8+0xc3a>
    return op1;
 801e6da:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e6de:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801e6e2:	681b      	ldr	r3, [r3, #0]
 801e6e4:	e00b      	b.n	801e6fe <arm_nn_vec_mat_mult_t_s8+0xc52>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e6e6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e6ea:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 801e6ee:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e6f2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801e6f6:	6812      	ldr	r2, [r2, #0]
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	fa62 f303 	ror.w	r3, r2, r3
 801e6fe:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e702:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 801e706:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 801e70a:	f5a1 71f2 	sub.w	r1, r1, #484	; 0x1e4
 801e70e:	6809      	ldr	r1, [r1, #0]
 801e710:	6011      	str	r1, [r2, #0]
 801e712:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e716:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 801e71a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e71c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e720:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e72a:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 801e72e:	6812      	ldr	r2, [r2, #0]
 801e730:	fa23 f282 	sxtab16	r2, r3, r2
 801e734:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e738:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801e73c:	601a      	str	r2, [r3, #0]
  return(result);
 801e73e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e742:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801e746:	681a      	ldr	r2, [r3, #0]
    result = __SXTAB16(op1, __ROR(op2, rotate));
 801e748:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e74c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801e750:	601a      	str	r2, [r3, #0]
  return result;
 801e752:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e756:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801e75a:	681b      	ldr	r3, [r3, #0]
 801e75c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
            vec_0 = __SXTAB16(lhs_offset_s16x2, vec_0);
 801e760:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 801e764:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e768:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801e76c:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 801e770:	6019      	str	r1, [r3, #0]
 801e772:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e776:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801e77a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e77c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e780:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801e784:	681b      	ldr	r3, [r3, #0]
 801e786:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e78a:	f5a2 72ee 	sub.w	r2, r2, #476	; 0x1dc
 801e78e:	6812      	ldr	r2, [r2, #0]
 801e790:	fa23 f282 	sxtab16	r2, r3, r2
 801e794:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e798:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801e79c:	601a      	str	r2, [r3, #0]
  return(result);
 801e79e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e7a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801e7ac:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e7b0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801e7b4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801e7b8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801e7ba:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e7be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801e7c2:	681b      	ldr	r3, [r3, #0]
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	681b      	ldr	r3, [r3, #0]
 801e7c8:	461a      	mov	r2, r3
 801e7ca:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e7ce:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801e7d2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e7d4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e7d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	681b      	ldr	r3, [r3, #0]
 801e7e0:	1d1a      	adds	r2, r3, #4
 801e7e2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e7e6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801e7ea:	681b      	ldr	r3, [r3, #0]
 801e7ec:	601a      	str	r2, [r3, #0]
    return (val);
 801e7ee:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e7f2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801e7f6:	681b      	ldr	r3, [r3, #0]

            int32_t ker_0 = arm_nn_read_q7x4_ia(&rhs_0);
 801e7f8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            int32_t ker_1 = __SXTB16_RORn((uint32_t)ker_0, 8);
 801e7fc:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801e800:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e804:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801e808:	601a      	str	r2, [r3, #0]
 801e80a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e80e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801e812:	2208      	movs	r2, #8
 801e814:	601a      	str	r2, [r3, #0]
 801e816:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e81a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801e81e:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e822:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 801e826:	6812      	ldr	r2, [r2, #0]
 801e828:	601a      	str	r2, [r3, #0]
 801e82a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e82e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801e832:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e836:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 801e83a:	6812      	ldr	r2, [r2, #0]
 801e83c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801e83e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e842:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801e846:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e84a:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 801e84e:	6812      	ldr	r2, [r2, #0]
 801e850:	f002 021f 	and.w	r2, r2, #31
 801e854:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801e856:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e85a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	2b00      	cmp	r3, #0
 801e862:	d105      	bne.n	801e870 <arm_nn_vec_mat_mult_t_s8+0xdc4>
    return op1;
 801e864:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e868:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801e86c:	681b      	ldr	r3, [r3, #0]
 801e86e:	e00b      	b.n	801e888 <arm_nn_vec_mat_mult_t_s8+0xddc>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e870:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e874:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 801e878:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e87c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801e880:	6812      	ldr	r2, [r2, #0]
 801e882:	681b      	ldr	r3, [r3, #0]
 801e884:	fa62 f303 	ror.w	r3, r2, r3
 801e888:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e88c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 801e890:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e892:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e896:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801e89a:	681b      	ldr	r3, [r3, #0]
 801e89c:	fa2f f283 	sxtb16	r2, r3
 801e8a0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e8a4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801e8a8:	601a      	str	r2, [r3, #0]
  return(result);
 801e8aa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e8ae:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801e8b2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e8b4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e8b8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801e8bc:	601a      	str	r2, [r3, #0]
  return result;
 801e8be:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e8c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
            ker_0 = __SXTB16(ker_0);
 801e8cc:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801e8d0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e8d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801e8d8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e8da:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e8de:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	fa2f f283 	sxtb16	r2, r3
 801e8e8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e8ec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801e8f0:	601a      	str	r2, [r3, #0]
  return(result);
 801e8f2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e8f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c

            acc_0 = __SMLAD(ker_1, vec_1, acc_0);
 801e900:	f8d7 0288 	ldr.w	r0, [r7, #648]	; 0x288
 801e904:	f8d7 1290 	ldr.w	r1, [r7, #656]	; 0x290
 801e908:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 801e90c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e910:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801e914:	6018      	str	r0, [r3, #0]
 801e916:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e91a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801e91e:	6019      	str	r1, [r3, #0]
 801e920:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e924:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801e928:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e92a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e92e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e938:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 801e93c:	6812      	ldr	r2, [r2, #0]
 801e93e:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 801e942:	f5a1 71d4 	sub.w	r1, r1, #424	; 0x1a8
 801e946:	6809      	ldr	r1, [r1, #0]
 801e948:	fb23 1202 	smlad	r2, r3, r2, r1
 801e94c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e950:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801e954:	601a      	str	r2, [r3, #0]
  return(result);
 801e956:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e95a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
            acc_0 = __SMLAD(ker_0, vec_0, acc_0);
 801e964:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 801e968:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 801e96c:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 801e970:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e974:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801e978:	6018      	str	r0, [r3, #0]
 801e97a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e97e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801e982:	6019      	str	r1, [r3, #0]
 801e984:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e988:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801e98c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e98e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e992:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801e996:	681b      	ldr	r3, [r3, #0]
 801e998:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801e99c:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 801e9a0:	6812      	ldr	r2, [r2, #0]
 801e9a2:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 801e9a6:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 801e9aa:	6809      	ldr	r1, [r1, #0]
 801e9ac:	fb23 1202 	smlad	r2, r3, r2, r1
 801e9b0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e9b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801e9b8:	601a      	str	r2, [r3, #0]
  return(result);
 801e9ba:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e9be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        for (int i = col_loop_cnt; i != 0; i--)
 801e9c8:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 801e9cc:	3b01      	subs	r3, #1
 801e9ce:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 801e9d2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	f47f ae1c 	bne.w	801e614 <arm_nn_vec_mat_mult_t_s8+0xb68>
        }

        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 801e9dc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801e9e0:	009b      	lsls	r3, r3, #2
 801e9e2:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 801e9e6:	e038      	b.n	801ea5a <arm_nn_vec_mat_mult_t_s8+0xfae>
        {
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 801e9e8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e9ec:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801e9f0:	681b      	ldr	r3, [r3, #0]
 801e9f2:	f993 3000 	ldrsb.w	r3, [r3]
 801e9f6:	461a      	mov	r2, r3
 801e9f8:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 801e9fc:	4413      	add	r3, r2
 801e9fe:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
            lhs_vec++;
 801ea02:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ea06:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801ea0a:	681b      	ldr	r3, [r3, #0]
 801ea0c:	1c5a      	adds	r2, r3, #1
 801ea0e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ea12:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801ea16:	601a      	str	r2, [r3, #0]
            acc_0 += lhs_temp * (*rhs_0);
 801ea18:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ea1c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801ea20:	681b      	ldr	r3, [r3, #0]
 801ea22:	f993 3000 	ldrsb.w	r3, [r3]
 801ea26:	461a      	mov	r2, r3
 801ea28:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ea2c:	fb02 f303 	mul.w	r3, r2, r3
 801ea30:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 801ea34:	4413      	add	r3, r2
 801ea36:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
            rhs_0++;
 801ea3a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ea3e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801ea42:	681b      	ldr	r3, [r3, #0]
 801ea44:	1c5a      	adds	r2, r3, #1
 801ea46:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ea4a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801ea4e:	601a      	str	r2, [r3, #0]
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 801ea50:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 801ea54:	3301      	adds	r3, #1
 801ea56:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 801ea5a:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 801ea5e:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801ea62:	429a      	cmp	r2, r3
 801ea64:	dbc0      	blt.n	801e9e8 <arm_nn_vec_mat_mult_t_s8+0xf3c>
 801ea66:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ea6a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801ea6e:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 801ea72:	601a      	str	r2, [r3, #0]
 801ea74:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ea78:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801ea7c:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 801ea80:	601a      	str	r2, [r3, #0]
 801ea82:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ea86:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801ea8a:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 801ea8e:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ea90:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ea94:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea9e:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801eaa2:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 801eaa6:	6812      	ldr	r2, [r2, #0]
 801eaa8:	409a      	lsls	r2, r3
 801eaaa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801eaae:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801eab2:	601a      	str	r2, [r3, #0]
 801eab4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801eab8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801eabc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801eac0:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 801eac4:	6812      	ldr	r2, [r2, #0]
 801eac6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801eac8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801eacc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801ead0:	2200      	movs	r2, #0
 801ead2:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801ead4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ead8:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801eadc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801eae0:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801eae2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801eae6:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801eaea:	2200      	movs	r2, #0
 801eaec:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801eaee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801eaf2:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 801eaf6:	f5a1 7106 	sub.w	r1, r1, #536	; 0x218
 801eafa:	6809      	ldr	r1, [r1, #0]
 801eafc:	17c8      	asrs	r0, r1, #31
 801eafe:	6139      	str	r1, [r7, #16]
 801eb00:	6178      	str	r0, [r7, #20]
 801eb02:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 801eb06:	f5a1 7107 	sub.w	r1, r1, #540	; 0x21c
 801eb0a:	6809      	ldr	r1, [r1, #0]
 801eb0c:	17c8      	asrs	r0, r1, #31
 801eb0e:	60b9      	str	r1, [r7, #8]
 801eb10:	60f8      	str	r0, [r7, #12]
 801eb12:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 801eb16:	4631      	mov	r1, r6
 801eb18:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801eb1c:	4650      	mov	r0, sl
 801eb1e:	fb00 f001 	mul.w	r0, r0, r1
 801eb22:	4659      	mov	r1, fp
 801eb24:	462c      	mov	r4, r5
 801eb26:	fb04 f101 	mul.w	r1, r4, r1
 801eb2a:	4401      	add	r1, r0
 801eb2c:	4628      	mov	r0, r5
 801eb2e:	4654      	mov	r4, sl
 801eb30:	fba0 8904 	umull	r8, r9, r0, r4
 801eb34:	4449      	add	r1, r9
 801eb36:	4689      	mov	r9, r1
 801eb38:	eb12 0108 	adds.w	r1, r2, r8
 801eb3c:	6039      	str	r1, [r7, #0]
 801eb3e:	eb43 0309 	adc.w	r3, r3, r9
 801eb42:	607b      	str	r3, [r7, #4]
 801eb44:	e9d7 3400 	ldrd	r3, r4, [r7]
 801eb48:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801eb4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801eb50:	f04f 0200 	mov.w	r2, #0
 801eb54:	f04f 0300 	mov.w	r3, #0
 801eb58:	0fc2      	lsrs	r2, r0, #31
 801eb5a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801eb5e:	17cb      	asrs	r3, r1, #31
 801eb60:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 801eb64:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 801eb68:	4613      	mov	r3, r2
 801eb6a:	600b      	str	r3, [r1, #0]
    return result;
 801eb6c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801eb70:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801eb74:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801eb76:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801eb7a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801eb7e:	681b      	ldr	r3, [r3, #0]
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	dc06      	bgt.n	801eb92 <arm_nn_vec_mat_mult_t_s8+0x10e6>
 801eb84:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801eb88:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801eb8c:	681b      	ldr	r3, [r3, #0]
 801eb8e:	425b      	negs	r3, r3
 801eb90:	e000      	b.n	801eb94 <arm_nn_vec_mat_mult_t_s8+0x10e8>
 801eb92:	2300      	movs	r3, #0
 801eb94:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801eb98:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 801eb9c:	6011      	str	r1, [r2, #0]
 801eb9e:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801eba2:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 801eba6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801eba8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ebac:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801ebb0:	2200      	movs	r2, #0
 801ebb2:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ebb4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ebb8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801ebbc:	2201      	movs	r2, #1
 801ebbe:	681b      	ldr	r3, [r3, #0]
 801ebc0:	409a      	lsls	r2, r3
 801ebc2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ebc6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801ebca:	3a01      	subs	r2, #1
 801ebcc:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801ebce:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ebd2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801ebd6:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801ebda:	f5a2 7109 	sub.w	r1, r2, #548	; 0x224
 801ebde:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801ebe2:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 801ebe6:	6809      	ldr	r1, [r1, #0]
 801ebe8:	6812      	ldr	r2, [r2, #0]
 801ebea:	400a      	ands	r2, r1
 801ebec:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801ebee:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ebf2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801ebf6:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801ebfa:	f5a2 7109 	sub.w	r1, r2, #548	; 0x224
 801ebfe:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801ec02:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 801ec06:	6809      	ldr	r1, [r1, #0]
 801ec08:	6812      	ldr	r2, [r2, #0]
 801ec0a:	fa41 f202 	asr.w	r2, r1, r2
 801ec0e:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801ec10:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ec14:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801ec18:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801ec1c:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 801ec20:	6812      	ldr	r2, [r2, #0]
 801ec22:	1052      	asrs	r2, r2, #1
 801ec24:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801ec26:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ec2a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801ec2e:	681b      	ldr	r3, [r3, #0]
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	da0a      	bge.n	801ec4a <arm_nn_vec_mat_mult_t_s8+0x119e>
        threshold++;
 801ec34:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ec38:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801ec3c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801ec40:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 801ec44:	6812      	ldr	r2, [r2, #0]
 801ec46:	3201      	adds	r2, #1
 801ec48:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801ec4a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ec4e:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 801ec52:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ec56:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801ec5a:	6812      	ldr	r2, [r2, #0]
 801ec5c:	681b      	ldr	r3, [r3, #0]
 801ec5e:	429a      	cmp	r2, r3
 801ec60:	dd0a      	ble.n	801ec78 <arm_nn_vec_mat_mult_t_s8+0x11cc>
        result++;
 801ec62:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ec66:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801ec6a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801ec6e:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 801ec72:	6812      	ldr	r2, [r2, #0]
 801ec74:	3201      	adds	r2, #1
 801ec76:	601a      	str	r2, [r3, #0]
    return result;
 801ec78:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ec7c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801ec80:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ec82:	bf00      	nop
        }

        acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);
 801ec84:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

        // Add offset
        acc_0 += dst_offset;
 801ec88:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 801ec8c:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801ec90:	4413      	add	r3, r2
 801ec92:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        // Clamp the result
        acc_0 = MAX(acc_0, activation_min);
 801ec96:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 801ec9a:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801ec9e:	4293      	cmp	r3, r2
 801eca0:	bfb8      	it	lt
 801eca2:	4613      	movlt	r3, r2
 801eca4:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        acc_0 = MIN(acc_0, activation_max);
 801eca8:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 801ecac:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 801ecb0:	4293      	cmp	r3, r2
 801ecb2:	bfa8      	it	ge
 801ecb4:	4613      	movge	r3, r2
 801ecb6:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        *dst = (int8_t)acc_0;
 801ecba:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 801ecbe:	b25a      	sxtb	r2, r3
 801ecc0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ecc4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801ecc8:	681b      	ldr	r3, [r3, #0]
 801ecca:	701a      	strb	r2, [r3, #0]
        dst += address_offset;
 801eccc:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801ecd0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801ecd4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801ecd8:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 801ecdc:	f5a1 7124 	sub.w	r1, r1, #656	; 0x290
 801ece0:	6809      	ldr	r1, [r1, #0]
 801ece2:	440a      	add	r2, r1
 801ece4:	601a      	str	r2, [r3, #0]
        *dst = (int8_t)res00;
        dst += address_offset;
        rhs += rhs_cols;
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
 801ece6:	2300      	movs	r3, #0
}
 801ece8:	4618      	mov	r0, r3
 801ecea:	f507 7736 	add.w	r7, r7, #728	; 0x2d8
 801ecee:	46bd      	mov	sp, r7
 801ecf0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801ecf4:	4770      	bx	lr

0801ecf6 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 801ecf6:	b480      	push	{r7}
 801ecf8:	b0a5      	sub	sp, #148	; 0x94
 801ecfa:	af00      	add	r7, sp, #0
 801ecfc:	60f8      	str	r0, [r7, #12]
 801ecfe:	60b9      	str	r1, [r7, #8]
 801ed00:	607a      	str	r2, [r7, #4]
 801ed02:	807b      	strh	r3, [r7, #2]
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 801ed04:	687b      	ldr	r3, [r7, #4]
 801ed06:	089b      	lsrs	r3, r3, #2
 801ed08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 801ed0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ed10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ed14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ed18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801ed1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ed20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801ed24:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801ed28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801ed2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ed30:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (block_cnt > 0)
 801ed32:	e070      	b.n	801ee16 <arm_q7_to_q15_with_offset+0x120>
 801ed34:	f107 030c 	add.w	r3, r7, #12
 801ed38:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 801ed3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed3c:	681b      	ldr	r3, [r3, #0]
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 801ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed44:	681b      	ldr	r3, [r3, #0]
 801ed46:	1d1a      	adds	r2, r3, #4
 801ed48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed4a:	601a      	str	r2, [r3, #0]
    return (val);
 801ed4c:	693b      	ldr	r3, [r7, #16]
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in_q7x4 = arm_nn_read_q7x4_ia(&src);
 801ed4e:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
 801ed50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ed52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ed54:	637b      	str	r3, [r7, #52]	; 0x34
 801ed56:	2308      	movs	r3, #8
 801ed58:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 801ed5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed5c:	f003 031f 	and.w	r3, r3, #31
 801ed60:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 801ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	d101      	bne.n	801ed6c <arm_q7_to_q15_with_offset+0x76>
    return op1;
 801ed68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ed6a:	e003      	b.n	801ed74 <arm_q7_to_q15_with_offset+0x7e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ed6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed70:	fa61 f303 	ror.w	r3, r1, r3
 801ed74:	643a      	str	r2, [r7, #64]	; 0x40
 801ed76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ed78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ed7c:	fa23 f382 	sxtab16	r3, r3, r2
 801ed80:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 801ed82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ed84:	677b      	str	r3, [r7, #116]	; 0x74
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);
 801ed86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ed88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ed8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801ed8c:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ed8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ed92:	fa23 f382 	sxtab16	r3, r3, r2
 801ed96:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 801ed98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ed9a:	673b      	str	r3, [r7, #112]	; 0x70

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 801ed9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ed9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801eda0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801eda2:	66bb      	str	r3, [r7, #104]	; 0x68
 801eda4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eda6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eda8:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 801edac:	667b      	str	r3, [r7, #100]	; 0x64
 801edae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801edb0:	663b      	str	r3, [r7, #96]	; 0x60
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 801edb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801edb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 801edb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801edb8:	65bb      	str	r3, [r7, #88]	; 0x58
 801edba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801edbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801edbe:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801edc2:	657b      	str	r3, [r7, #84]	; 0x54
 801edc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801edc6:	653b      	str	r3, [r7, #80]	; 0x50
 801edc8:	f107 0308 	add.w	r3, r7, #8
 801edcc:	623b      	str	r3, [r7, #32]
 801edce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801edd0:	61fb      	str	r3, [r7, #28]
  @param[in]     dest_q15  Pointer to pointer that holds address of destination.
  @param[in]     src_q31   Input value to be written.
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 801edd2:	69fb      	ldr	r3, [r7, #28]
 801edd4:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 801edd6:	6a3b      	ldr	r3, [r7, #32]
 801edd8:	681b      	ldr	r3, [r3, #0]
 801edda:	69ba      	ldr	r2, [r7, #24]
 801eddc:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 801edde:	6a3b      	ldr	r3, [r7, #32]
 801ede0:	681b      	ldr	r3, [r3, #0]
 801ede2:	1d1a      	adds	r2, r3, #4
 801ede4:	6a3b      	ldr	r3, [r7, #32]
 801ede6:	601a      	str	r2, [r3, #0]
}
 801ede8:	bf00      	nop
 801edea:	f107 0308 	add.w	r3, r7, #8
 801edee:	62bb      	str	r3, [r7, #40]	; 0x28
 801edf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801edf2:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t val = src_q31;
 801edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edf6:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 801edf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801edfa:	681b      	ldr	r3, [r3, #0]
 801edfc:	697a      	ldr	r2, [r7, #20]
 801edfe:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 801ee00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee02:	681b      	ldr	r3, [r3, #0]
 801ee04:	1d1a      	adds	r2, r3, #4
 801ee06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee08:	601a      	str	r2, [r3, #0]
}
 801ee0a:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, out_q15x2_1);
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
 801ee0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ee10:	3b01      	subs	r3, #1
 801ee12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 801ee16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ee1a:	2b00      	cmp	r3, #0
 801ee1c:	dc8a      	bgt.n	801ed34 <arm_q7_to_q15_with_offset+0x3e>
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 801ee1e:	687b      	ldr	r3, [r7, #4]
 801ee20:	f003 0303 	and.w	r3, r3, #3
 801ee24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 801ee28:	e012      	b.n	801ee50 <arm_q7_to_q15_with_offset+0x15a>
    {
        *dst++ = (q15_t)*src++ + offset;
 801ee2a:	68fb      	ldr	r3, [r7, #12]
 801ee2c:	1c5a      	adds	r2, r3, #1
 801ee2e:	60fa      	str	r2, [r7, #12]
 801ee30:	f993 3000 	ldrsb.w	r3, [r3]
 801ee34:	b29a      	uxth	r2, r3
 801ee36:	887b      	ldrh	r3, [r7, #2]
 801ee38:	4413      	add	r3, r2
 801ee3a:	b299      	uxth	r1, r3
 801ee3c:	68bb      	ldr	r3, [r7, #8]
 801ee3e:	1c9a      	adds	r2, r3, #2
 801ee40:	60ba      	str	r2, [r7, #8]
 801ee42:	b20a      	sxth	r2, r1
 801ee44:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        block_cnt--;
 801ee46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ee4a:	3b01      	subs	r3, #1
 801ee4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 801ee50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	dce8      	bgt.n	801ee2a <arm_q7_to_q15_with_offset+0x134>
    }
}
 801ee58:	bf00      	nop
 801ee5a:	bf00      	nop
 801ee5c:	3794      	adds	r7, #148	; 0x94
 801ee5e:	46bd      	mov	sp, r7
 801ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee64:	4770      	bx	lr

0801ee66 <compare_and_replace_if_larger>:

#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnfunctions.h"
#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger(int16_t *base, const int16_t *target, int32_t length)
{
 801ee66:	b480      	push	{r7}
 801ee68:	b091      	sub	sp, #68	; 0x44
 801ee6a:	af00      	add	r7, sp, #0
 801ee6c:	60f8      	str	r0, [r7, #12]
 801ee6e:	60b9      	str	r1, [r7, #8]
 801ee70:	607a      	str	r2, [r7, #4]
        base += 8;
        target += 8;
        length -= 8;
    }
#else
    q15_t *dst = base;
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	62bb      	str	r3, [r7, #40]	; 0x28
    const q15_t *src = target;
 801ee76:	68bb      	ldr	r3, [r7, #8]
 801ee78:	627b      	str	r3, [r7, #36]	; 0x24
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 1;
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	105b      	asrs	r3, r3, #1
 801ee7e:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 801ee80:	e03a      	b.n	801eef8 <compare_and_replace_if_larger+0x92>
    {
        ref_max.word = arm_nn_read_q15x2(dst);
 801ee82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee84:	637b      	str	r3, [r7, #52]	; 0x34
 801ee86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ee88:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q15, 4);
 801ee8a:	617b      	str	r3, [r7, #20]
    return (val);
 801ee8c:	697b      	ldr	r3, [r7, #20]
 801ee8e:	623b      	str	r3, [r7, #32]
 801ee90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ee94:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q15, 4);
 801ee96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	681b      	ldr	r3, [r3, #0]
 801ee9c:	613b      	str	r3, [r7, #16]
    *in_q15 += 2;
 801ee9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eea0:	681b      	ldr	r3, [r3, #0]
 801eea2:	1d1a      	adds	r2, r3, #4
 801eea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eea6:	601a      	str	r2, [r3, #0]
    return (val);
 801eea8:	693b      	ldr	r3, [r7, #16]
        comp_max.word = arm_nn_read_q15x2_ia(&src);
 801eeaa:	61fb      	str	r3, [r7, #28]

        if (comp_max.half_words[0] > ref_max.half_words[0])
 801eeac:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 801eeb0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801eeb4:	429a      	cmp	r2, r3
 801eeb6:	dd02      	ble.n	801eebe <compare_and_replace_if_larger+0x58>
        {
            ref_max.half_words[0] = comp_max.half_words[0];
 801eeb8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801eebc:	843b      	strh	r3, [r7, #32]
        }
        if (comp_max.half_words[1] > ref_max.half_words[1])
 801eebe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801eec2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801eec6:	429a      	cmp	r2, r3
 801eec8:	dd02      	ble.n	801eed0 <compare_and_replace_if_larger+0x6a>
        {
            ref_max.half_words[1] = comp_max.half_words[1];
 801eeca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801eece:	847b      	strh	r3, [r7, #34]	; 0x22
        }

        arm_nn_write_q15x2_ia(&dst, ref_max.word);
 801eed0:	6a3b      	ldr	r3, [r7, #32]
 801eed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801eed6:	633a      	str	r2, [r7, #48]	; 0x30
 801eed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    q31_t val = src_q31;
 801eeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eedc:	61bb      	str	r3, [r7, #24]
    memcpy(*dest_q15, &val, 4);
 801eede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eee0:	681b      	ldr	r3, [r3, #0]
 801eee2:	69ba      	ldr	r2, [r7, #24]
 801eee4:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 801eee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	1d1a      	adds	r2, r3, #4
 801eeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eeee:	601a      	str	r2, [r3, #0]
}
 801eef0:	bf00      	nop

        cnt--;
 801eef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eef4:	3b01      	subs	r3, #1
 801eef6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 801eef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eefa:	2b00      	cmp	r3, #0
 801eefc:	dcc1      	bgt.n	801ee82 <compare_and_replace_if_larger+0x1c>
    }

    if (length & 0x1)
 801eefe:	687b      	ldr	r3, [r7, #4]
 801ef00:	f003 0301 	and.w	r3, r3, #1
 801ef04:	2b00      	cmp	r3, #0
 801ef06:	d00c      	beq.n	801ef22 <compare_and_replace_if_larger+0xbc>
    {
        if (*src > *dst)
 801ef08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ef0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef10:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ef14:	429a      	cmp	r2, r3
 801ef16:	dd04      	ble.n	801ef22 <compare_and_replace_if_larger+0xbc>
        {
            *dst = *src;
 801ef18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ef1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801ef20:	801a      	strh	r2, [r3, #0]
        }
    }
#endif
}
 801ef22:	bf00      	nop
 801ef24:	3744      	adds	r7, #68	; 0x44
 801ef26:	46bd      	mov	sp, r7
 801ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef2c:	4770      	bx	lr

0801ef2e <clamp_output>:

static void clamp_output(int16_t *source, int32_t length, const int16_t act_min, const int16_t act_max)
{
 801ef2e:	b480      	push	{r7}
 801ef30:	b08d      	sub	sp, #52	; 0x34
 801ef32:	af00      	add	r7, sp, #0
 801ef34:	60f8      	str	r0, [r7, #12]
 801ef36:	60b9      	str	r1, [r7, #8]
 801ef38:	4611      	mov	r1, r2
 801ef3a:	461a      	mov	r2, r3
 801ef3c:	460b      	mov	r3, r1
 801ef3e:	80fb      	strh	r3, [r7, #6]
 801ef40:	4613      	mov	r3, r2
 801ef42:	80bb      	strh	r3, [r7, #4]
        vstrhq_p_s16(source, res, p);
        source += 8;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 1;
 801ef44:	68bb      	ldr	r3, [r7, #8]
 801ef46:	105b      	asrs	r3, r3, #1
 801ef48:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 801ef4a:	e03e      	b.n	801efca <clamp_output+0x9c>
    {
        in.word = arm_nn_read_q15x2(source);
 801ef4c:	68fb      	ldr	r3, [r7, #12]
 801ef4e:	61fb      	str	r3, [r7, #28]
 801ef50:	69fb      	ldr	r3, [r7, #28]
 801ef52:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q15, 4);
 801ef54:	617b      	str	r3, [r7, #20]
    return (val);
 801ef56:	697b      	ldr	r3, [r7, #20]
 801ef58:	61bb      	str	r3, [r7, #24]

        in.half_words[0] = MAX(in.half_words[0], act_min);
 801ef5a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801ef5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801ef62:	4293      	cmp	r3, r2
 801ef64:	bfb8      	it	lt
 801ef66:	4613      	movlt	r3, r2
 801ef68:	b21b      	sxth	r3, r3
 801ef6a:	833b      	strh	r3, [r7, #24]
        in.half_words[0] = MIN(in.half_words[0], act_max);
 801ef6c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801ef70:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801ef74:	4293      	cmp	r3, r2
 801ef76:	bfa8      	it	ge
 801ef78:	4613      	movge	r3, r2
 801ef7a:	b21b      	sxth	r3, r3
 801ef7c:	833b      	strh	r3, [r7, #24]
        in.half_words[1] = MAX(in.half_words[1], act_min);
 801ef7e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801ef82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801ef86:	4293      	cmp	r3, r2
 801ef88:	bfb8      	it	lt
 801ef8a:	4613      	movlt	r3, r2
 801ef8c:	b21b      	sxth	r3, r3
 801ef8e:	837b      	strh	r3, [r7, #26]
        in.half_words[1] = MIN(in.half_words[1], act_max);
 801ef90:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801ef94:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801ef98:	4293      	cmp	r3, r2
 801ef9a:	bfa8      	it	ge
 801ef9c:	4613      	movge	r3, r2
 801ef9e:	b21b      	sxth	r3, r3
 801efa0:	837b      	strh	r3, [r7, #26]

        arm_nn_write_q15x2_ia(&source, in.word);
 801efa2:	69bb      	ldr	r3, [r7, #24]
 801efa4:	f107 020c 	add.w	r2, r7, #12
 801efa8:	627a      	str	r2, [r7, #36]	; 0x24
 801efaa:	623b      	str	r3, [r7, #32]
    q31_t val = src_q31;
 801efac:	6a3b      	ldr	r3, [r7, #32]
 801efae:	613b      	str	r3, [r7, #16]
    memcpy(*dest_q15, &val, 4);
 801efb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	693a      	ldr	r2, [r7, #16]
 801efb6:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 801efb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efba:	681b      	ldr	r3, [r3, #0]
 801efbc:	1d1a      	adds	r2, r3, #4
 801efbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efc0:	601a      	str	r2, [r3, #0]
}
 801efc2:	bf00      	nop
        cnt--;
 801efc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801efc6:	3b01      	subs	r3, #1
 801efc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 801efca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801efcc:	2b00      	cmp	r3, #0
 801efce:	dcbd      	bgt.n	801ef4c <clamp_output+0x1e>
    }

    if (length & 0x1)
 801efd0:	68bb      	ldr	r3, [r7, #8]
 801efd2:	f003 0301 	and.w	r3, r3, #1
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d015      	beq.n	801f006 <clamp_output+0xd8>
    {
        int16_t comp = *source;
 801efda:	68fb      	ldr	r3, [r7, #12]
 801efdc:	881b      	ldrh	r3, [r3, #0]
 801efde:	857b      	strh	r3, [r7, #42]	; 0x2a
        comp = MAX(comp, act_min);
 801efe0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801efe4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801efe8:	4293      	cmp	r3, r2
 801efea:	bfb8      	it	lt
 801efec:	4613      	movlt	r3, r2
 801efee:	857b      	strh	r3, [r7, #42]	; 0x2a
        comp = MIN(comp, act_max);
 801eff0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801eff4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801eff8:	4293      	cmp	r3, r2
 801effa:	bfa8      	it	ge
 801effc:	4613      	movge	r3, r2
 801effe:	857b      	strh	r3, [r7, #42]	; 0x2a
        *source = comp;
 801f000:	68fb      	ldr	r3, [r7, #12]
 801f002:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801f004:	801a      	strh	r2, [r3, #0]
    }
#endif
}
 801f006:	bf00      	nop
 801f008:	3734      	adds	r7, #52	; 0x34
 801f00a:	46bd      	mov	sp, r7
 801f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f010:	4770      	bx	lr

0801f012 <arm_max_pool_s16>:
                                     const cmsis_nn_dims *input_dims,
                                     const int16_t *src,
                                     const cmsis_nn_dims *filter_dims,
                                     const cmsis_nn_dims *output_dims,
                                     int16_t *dst)
{
 801f012:	b580      	push	{r7, lr}
 801f014:	b09e      	sub	sp, #120	; 0x78
 801f016:	af00      	add	r7, sp, #0
 801f018:	60f8      	str	r0, [r7, #12]
 801f01a:	60b9      	str	r1, [r7, #8]
 801f01c:	607a      	str	r2, [r7, #4]
 801f01e:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	685b      	ldr	r3, [r3, #4]
 801f024:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	689b      	ldr	r3, [r3, #8]
 801f02a:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 801f02c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801f030:	685b      	ldr	r3, [r3, #4]
 801f032:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 801f034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801f038:	689b      	ldr	r3, [r3, #8]
 801f03a:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 801f03c:	68bb      	ldr	r3, [r7, #8]
 801f03e:	685b      	ldr	r3, [r3, #4]
 801f040:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 801f042:	68bb      	ldr	r3, [r7, #8]
 801f044:	681b      	ldr	r3, [r3, #0]
 801f046:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 801f048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801f04c:	685b      	ldr	r3, [r3, #4]
 801f04e:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 801f050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801f054:	689b      	ldr	r3, [r3, #8]
 801f056:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 801f058:	68bb      	ldr	r3, [r7, #8]
 801f05a:	68db      	ldr	r3, [r3, #12]
 801f05c:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 801f05e:	68bb      	ldr	r3, [r7, #8]
 801f060:	689b      	ldr	r3, [r3, #8]
 801f062:	637b      	str	r3, [r7, #52]	; 0x34
    const int16_t act_min = pool_params->activation.min;
 801f064:	68bb      	ldr	r3, [r7, #8]
 801f066:	691b      	ldr	r3, [r3, #16]
 801f068:	867b      	strh	r3, [r7, #50]	; 0x32
    const int16_t act_max = pool_params->activation.max;
 801f06a:	68bb      	ldr	r3, [r7, #8]
 801f06c:	695b      	ldr	r3, [r3, #20]
 801f06e:	863b      	strh	r3, [r7, #48]	; 0x30
    const int32_t channel_in = input_dims->c;
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	68db      	ldr	r3, [r3, #12]
 801f074:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)ctx;
    int16_t *dst_base = dst;
 801f076:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801f07a:	62bb      	str	r3, [r7, #40]	; 0x28

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 801f07c:	2300      	movs	r3, #0
 801f07e:	677b      	str	r3, [r7, #116]	; 0x74
 801f080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f082:	425b      	negs	r3, r3
 801f084:	673b      	str	r3, [r7, #112]	; 0x70
 801f086:	e07a      	b.n	801f17e <arm_max_pool_s16+0x16c>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 801f088:	2300      	movs	r3, #0
 801f08a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801f08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f08e:	425b      	negs	r3, r3
 801f090:	66bb      	str	r3, [r7, #104]	; 0x68
 801f092:	e069      	b.n	801f168 <arm_max_pool_s16+0x156>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 801f094:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f096:	2b00      	cmp	r3, #0
 801f098:	dc02      	bgt.n	801f0a0 <arm_max_pool_s16+0x8e>
 801f09a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f09c:	425b      	negs	r3, r3
 801f09e:	e000      	b.n	801f0a2 <arm_max_pool_s16+0x90>
 801f0a0:	2300      	movs	r3, #0
 801f0a2:	627b      	str	r3, [r7, #36]	; 0x24
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 801f0a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	dc02      	bgt.n	801f0b0 <arm_max_pool_s16+0x9e>
 801f0aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f0ac:	425b      	negs	r3, r3
 801f0ae:	e000      	b.n	801f0b2 <arm_max_pool_s16+0xa0>
 801f0b0:	2300      	movs	r3, #0
 801f0b2:	623b      	str	r3, [r7, #32]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 801f0b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f0b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f0b8:	1ad3      	subs	r3, r2, r3
 801f0ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f0bc:	4293      	cmp	r3, r2
 801f0be:	bfa8      	it	ge
 801f0c0:	4613      	movge	r3, r2
 801f0c2:	61fb      	str	r3, [r7, #28]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 801f0c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f0c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f0c8:	1ad3      	subs	r3, r2, r3
 801f0ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f0cc:	4293      	cmp	r3, r2
 801f0ce:	bfa8      	it	ge
 801f0d0:	4613      	movge	r3, r2
 801f0d2:	61bb      	str	r3, [r7, #24]

            int count = 0;
 801f0d4:	2300      	movs	r3, #0
 801f0d6:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 801f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0da:	663b      	str	r3, [r7, #96]	; 0x60
 801f0dc:	e032      	b.n	801f144 <arm_max_pool_s16+0x132>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 801f0de:	6a3b      	ldr	r3, [r7, #32]
 801f0e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f0e2:	e028      	b.n	801f136 <arm_max_pool_s16+0x124>
                {
                    const int16_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 801f0e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f0e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f0e8:	441a      	add	r2, r3
 801f0ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801f0ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f0ee:	440b      	add	r3, r1
 801f0f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f0f2:	fb01 f303 	mul.w	r3, r1, r3
 801f0f6:	4413      	add	r3, r2
 801f0f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f0fa:	fb02 f303 	mul.w	r3, r2, r3
 801f0fe:	005b      	lsls	r3, r3, #1
 801f100:	683a      	ldr	r2, [r7, #0]
 801f102:	4413      	add	r3, r2
 801f104:	617b      	str	r3, [r7, #20]

                    if (count == 0)
 801f106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f108:	2b00      	cmp	r3, #0
 801f10a:	d10b      	bne.n	801f124 <arm_max_pool_s16+0x112>
                    {
                        memcpy(dst, start, channel_in * sizeof(int16_t));
 801f10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f10e:	005b      	lsls	r3, r3, #1
 801f110:	461a      	mov	r2, r3
 801f112:	6979      	ldr	r1, [r7, #20]
 801f114:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801f118:	f00f fbe7 	bl	802e8ea <memcpy>
                        count++;
 801f11c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f11e:	3301      	adds	r3, #1
 801f120:	667b      	str	r3, [r7, #100]	; 0x64
 801f122:	e005      	b.n	801f130 <arm_max_pool_s16+0x11e>
                    }
                    else
                    {
                        compare_and_replace_if_larger(dst, start, channel_in);
 801f124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f126:	6979      	ldr	r1, [r7, #20]
 801f128:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801f12c:	f7ff fe9b 	bl	801ee66 <compare_and_replace_if_larger>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 801f130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f132:	3301      	adds	r3, #1
 801f134:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f136:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f138:	69bb      	ldr	r3, [r7, #24]
 801f13a:	429a      	cmp	r2, r3
 801f13c:	dbd2      	blt.n	801f0e4 <arm_max_pool_s16+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 801f13e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801f140:	3301      	adds	r3, #1
 801f142:	663b      	str	r3, [r7, #96]	; 0x60
 801f144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801f146:	69fb      	ldr	r3, [r7, #28]
 801f148:	429a      	cmp	r2, r3
 801f14a:	dbc8      	blt.n	801f0de <arm_max_pool_s16+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 801f14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f14e:	005b      	lsls	r3, r3, #1
 801f150:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801f154:	4413      	add	r3, r2
 801f156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 801f15a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f15e:	4413      	add	r3, r2
 801f160:	66bb      	str	r3, [r7, #104]	; 0x68
 801f162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f164:	3301      	adds	r3, #1
 801f166:	66fb      	str	r3, [r7, #108]	; 0x6c
 801f168:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801f16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f16c:	429a      	cmp	r2, r3
 801f16e:	db91      	blt.n	801f094 <arm_max_pool_s16+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 801f170:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801f172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f174:	4413      	add	r3, r2
 801f176:	673b      	str	r3, [r7, #112]	; 0x70
 801f178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801f17a:	3301      	adds	r3, #1
 801f17c:	677b      	str	r3, [r7, #116]	; 0x74
 801f17e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801f180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f182:	429a      	cmp	r2, r3
 801f184:	db80      	blt.n	801f088 <arm_max_pool_s16+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 801f186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f188:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f18a:	fb02 f303 	mul.w	r3, r2, r3
 801f18e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f190:	fb02 f103 	mul.w	r1, r2, r3
 801f194:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801f198:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801f19c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f19e:	f7ff fec6 	bl	801ef2e <clamp_output>

    return ARM_CMSIS_NN_SUCCESS;
 801f1a2:	2300      	movs	r3, #0
}
 801f1a4:	4618      	mov	r0, r3
 801f1a6:	3778      	adds	r7, #120	; 0x78
 801f1a8:	46bd      	mov	sp, r7
 801f1aa:	bd80      	pop	{r7, pc}

0801f1ac <compare_and_replace_if_larger_q7>:

#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnfunctions.h"
#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
{
 801f1ac:	b480      	push	{r7}
 801f1ae:	b091      	sub	sp, #68	; 0x44
 801f1b0:	af00      	add	r7, sp, #0
 801f1b2:	60f8      	str	r0, [r7, #12]
 801f1b4:	60b9      	str	r1, [r7, #8]
 801f1b6:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    q7_t *dst = base;
 801f1b8:	68fb      	ldr	r3, [r7, #12]
 801f1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const q7_t *src = target;
 801f1bc:	68bb      	ldr	r3, [r7, #8]
 801f1be:	62bb      	str	r3, [r7, #40]	; 0x28
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	109b      	asrs	r3, r3, #2
 801f1c4:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 801f1c6:	e04e      	b.n	801f266 <compare_and_replace_if_larger_q7+0xba>
    {
        ref_max.word = arm_nn_read_q7x4(dst);
 801f1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f1ca:	637b      	str	r3, [r7, #52]	; 0x34
 801f1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f1ce:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 801f1d0:	61bb      	str	r3, [r7, #24]
    return (val);
 801f1d2:	69bb      	ldr	r3, [r7, #24]
 801f1d4:	627b      	str	r3, [r7, #36]	; 0x24
 801f1d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f1da:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 801f1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1de:	681b      	ldr	r3, [r3, #0]
 801f1e0:	681b      	ldr	r3, [r3, #0]
 801f1e2:	617b      	str	r3, [r7, #20]
    *in_q7 += 4;
 801f1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1e6:	681b      	ldr	r3, [r3, #0]
 801f1e8:	1d1a      	adds	r2, r3, #4
 801f1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1ec:	601a      	str	r2, [r3, #0]
    return (val);
 801f1ee:	697b      	ldr	r3, [r7, #20]
        comp_max.word = arm_nn_read_q7x4_ia(&src);
 801f1f0:	623b      	str	r3, [r7, #32]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 801f1f2:	f997 2020 	ldrsb.w	r2, [r7, #32]
 801f1f6:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 801f1fa:	429a      	cmp	r2, r3
 801f1fc:	dd03      	ble.n	801f206 <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 801f1fe:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801f202:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 801f206:	f997 2021 	ldrsb.w	r2, [r7, #33]	; 0x21
 801f20a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801f20e:	429a      	cmp	r2, r3
 801f210:	dd03      	ble.n	801f21a <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 801f212:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 801f216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 801f21a:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 801f21e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 801f222:	429a      	cmp	r2, r3
 801f224:	dd03      	ble.n	801f22e <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 801f226:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 801f22a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 801f22e:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 801f232:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801f236:	429a      	cmp	r2, r3
 801f238:	dd03      	ble.n	801f242 <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 801f23a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801f23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        arm_nn_write_q7x4_ia(&dst, ref_max.word);
 801f242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f244:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801f248:	633a      	str	r2, [r7, #48]	; 0x30
 801f24a:	61fb      	str	r3, [r7, #28]
    memcpy(*in, &value, 4);
 801f24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	69fa      	ldr	r2, [r7, #28]
 801f252:	601a      	str	r2, [r3, #0]
    *in += 4;
 801f254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	1d1a      	adds	r2, r3, #4
 801f25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f25c:	601a      	str	r2, [r3, #0]
}
 801f25e:	bf00      	nop

        cnt--;
 801f260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f262:	3b01      	subs	r3, #1
 801f264:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 801f266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f268:	2b00      	cmp	r3, #0
 801f26a:	dcad      	bgt.n	801f1c8 <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	f003 0303 	and.w	r3, r3, #3
 801f272:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 801f274:	e015      	b.n	801f2a2 <compare_and_replace_if_larger_q7+0xf6>
    {
        if (*src > *dst)
 801f276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f278:	f993 2000 	ldrsb.w	r2, [r3]
 801f27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f27e:	f993 3000 	ldrsb.w	r3, [r3]
 801f282:	429a      	cmp	r2, r3
 801f284:	dd04      	ble.n	801f290 <compare_and_replace_if_larger_q7+0xe4>
        {
            *dst = *src;
 801f286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f28a:	f992 2000 	ldrsb.w	r2, [r2]
 801f28e:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 801f290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f292:	3301      	adds	r3, #1
 801f294:	62fb      	str	r3, [r7, #44]	; 0x2c
        src++;
 801f296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f298:	3301      	adds	r3, #1
 801f29a:	62bb      	str	r3, [r7, #40]	; 0x28
        cnt--;
 801f29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f29e:	3b01      	subs	r3, #1
 801f2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 801f2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	dce6      	bgt.n	801f276 <compare_and_replace_if_larger_q7+0xca>
    }
#endif
}
 801f2a8:	bf00      	nop
 801f2aa:	bf00      	nop
 801f2ac:	3744      	adds	r7, #68	; 0x44
 801f2ae:	46bd      	mov	sp, r7
 801f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2b4:	4770      	bx	lr

0801f2b6 <clamp_output>:

static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 801f2b6:	b480      	push	{r7}
 801f2b8:	b08d      	sub	sp, #52	; 0x34
 801f2ba:	af00      	add	r7, sp, #0
 801f2bc:	60f8      	str	r0, [r7, #12]
 801f2be:	60b9      	str	r1, [r7, #8]
 801f2c0:	607a      	str	r2, [r7, #4]
 801f2c2:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 801f2c4:	68bb      	ldr	r3, [r7, #8]
 801f2c6:	109b      	asrs	r3, r3, #2
 801f2c8:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 801f2ca:	e060      	b.n	801f38e <clamp_output+0xd8>
    {
        in.word = arm_nn_read_q7x4(source);
 801f2cc:	68fb      	ldr	r3, [r7, #12]
 801f2ce:	623b      	str	r3, [r7, #32]
 801f2d0:	6a3b      	ldr	r3, [r7, #32]
 801f2d2:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 801f2d4:	61bb      	str	r3, [r7, #24]
    return (val);
 801f2d6:	69bb      	ldr	r3, [r7, #24]
 801f2d8:	61fb      	str	r3, [r7, #28]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 801f2da:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801f2de:	461a      	mov	r2, r3
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	4293      	cmp	r3, r2
 801f2e4:	bfb8      	it	lt
 801f2e6:	4613      	movlt	r3, r2
 801f2e8:	b25b      	sxtb	r3, r3
 801f2ea:	773b      	strb	r3, [r7, #28]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 801f2ec:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801f2f0:	461a      	mov	r2, r3
 801f2f2:	683b      	ldr	r3, [r7, #0]
 801f2f4:	4293      	cmp	r3, r2
 801f2f6:	bfa8      	it	ge
 801f2f8:	4613      	movge	r3, r2
 801f2fa:	b25b      	sxtb	r3, r3
 801f2fc:	773b      	strb	r3, [r7, #28]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 801f2fe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801f302:	461a      	mov	r2, r3
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	4293      	cmp	r3, r2
 801f308:	bfb8      	it	lt
 801f30a:	4613      	movlt	r3, r2
 801f30c:	b25b      	sxtb	r3, r3
 801f30e:	777b      	strb	r3, [r7, #29]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 801f310:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801f314:	461a      	mov	r2, r3
 801f316:	683b      	ldr	r3, [r7, #0]
 801f318:	4293      	cmp	r3, r2
 801f31a:	bfa8      	it	ge
 801f31c:	4613      	movge	r3, r2
 801f31e:	b25b      	sxtb	r3, r3
 801f320:	777b      	strb	r3, [r7, #29]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 801f322:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801f326:	461a      	mov	r2, r3
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	4293      	cmp	r3, r2
 801f32c:	bfb8      	it	lt
 801f32e:	4613      	movlt	r3, r2
 801f330:	b25b      	sxtb	r3, r3
 801f332:	77bb      	strb	r3, [r7, #30]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 801f334:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801f338:	461a      	mov	r2, r3
 801f33a:	683b      	ldr	r3, [r7, #0]
 801f33c:	4293      	cmp	r3, r2
 801f33e:	bfa8      	it	ge
 801f340:	4613      	movge	r3, r2
 801f342:	b25b      	sxtb	r3, r3
 801f344:	77bb      	strb	r3, [r7, #30]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 801f346:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801f34a:	461a      	mov	r2, r3
 801f34c:	687b      	ldr	r3, [r7, #4]
 801f34e:	4293      	cmp	r3, r2
 801f350:	bfb8      	it	lt
 801f352:	4613      	movlt	r3, r2
 801f354:	b25b      	sxtb	r3, r3
 801f356:	77fb      	strb	r3, [r7, #31]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 801f358:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801f35c:	461a      	mov	r2, r3
 801f35e:	683b      	ldr	r3, [r7, #0]
 801f360:	4293      	cmp	r3, r2
 801f362:	bfa8      	it	ge
 801f364:	4613      	movge	r3, r2
 801f366:	b25b      	sxtb	r3, r3
 801f368:	77fb      	strb	r3, [r7, #31]

        arm_nn_write_q7x4_ia(&source, in.word);
 801f36a:	69fb      	ldr	r3, [r7, #28]
 801f36c:	f107 020c 	add.w	r2, r7, #12
 801f370:	627a      	str	r2, [r7, #36]	; 0x24
 801f372:	617b      	str	r3, [r7, #20]
    memcpy(*in, &value, 4);
 801f374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f376:	681b      	ldr	r3, [r3, #0]
 801f378:	697a      	ldr	r2, [r7, #20]
 801f37a:	601a      	str	r2, [r3, #0]
    *in += 4;
 801f37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	1d1a      	adds	r2, r3, #4
 801f382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f384:	601a      	str	r2, [r3, #0]
}
 801f386:	bf00      	nop
        cnt--;
 801f388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f38a:	3b01      	subs	r3, #1
 801f38c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 801f38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f390:	2b00      	cmp	r3, #0
 801f392:	dc9b      	bgt.n	801f2cc <clamp_output+0x16>
    }

    cnt = length & 0x3;
 801f394:	68bb      	ldr	r3, [r7, #8]
 801f396:	f003 0303 	and.w	r3, r3, #3
 801f39a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 801f39c:	e018      	b.n	801f3d0 <clamp_output+0x11a>
    {
        int32_t comp = *source;
 801f39e:	68fb      	ldr	r3, [r7, #12]
 801f3a0:	f993 3000 	ldrsb.w	r3, [r3]
 801f3a4:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 801f3a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	4293      	cmp	r3, r2
 801f3ac:	bfb8      	it	lt
 801f3ae:	4613      	movlt	r3, r2
 801f3b0:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 801f3b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f3b4:	683b      	ldr	r3, [r7, #0]
 801f3b6:	4293      	cmp	r3, r2
 801f3b8:	bfa8      	it	ge
 801f3ba:	4613      	movge	r3, r2
 801f3bc:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 801f3be:	68fb      	ldr	r3, [r7, #12]
 801f3c0:	1c5a      	adds	r2, r3, #1
 801f3c2:	60fa      	str	r2, [r7, #12]
 801f3c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f3c6:	b252      	sxtb	r2, r2
 801f3c8:	701a      	strb	r2, [r3, #0]
        cnt--;
 801f3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3cc:	3b01      	subs	r3, #1
 801f3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 801f3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3d2:	2b00      	cmp	r3, #0
 801f3d4:	dce3      	bgt.n	801f39e <clamp_output+0xe8>
    }
#endif
}
 801f3d6:	bf00      	nop
 801f3d8:	bf00      	nop
 801f3da:	3734      	adds	r7, #52	; 0x34
 801f3dc:	46bd      	mov	sp, r7
 801f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3e2:	4770      	bx	lr

0801f3e4 <arm_max_pool_s8>:
                                    const cmsis_nn_dims *input_dims,
                                    const q7_t *src,
                                    const cmsis_nn_dims *filter_dims,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *dst)
{
 801f3e4:	b580      	push	{r7, lr}
 801f3e6:	b0a2      	sub	sp, #136	; 0x88
 801f3e8:	af00      	add	r7, sp, #0
 801f3ea:	60f8      	str	r0, [r7, #12]
 801f3ec:	60b9      	str	r1, [r7, #8]
 801f3ee:	607a      	str	r2, [r7, #4]
 801f3f0:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	685b      	ldr	r3, [r3, #4]
 801f3f6:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t input_x = input_dims->w;
 801f3f8:	687b      	ldr	r3, [r7, #4]
 801f3fa:	689b      	ldr	r3, [r3, #8]
 801f3fc:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_y = output_dims->h;
 801f3fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f402:	685b      	ldr	r3, [r3, #4]
 801f404:	663b      	str	r3, [r7, #96]	; 0x60
    const int32_t output_x = output_dims->w;
 801f406:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f40a:	689b      	ldr	r3, [r3, #8]
 801f40c:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int32_t stride_y = pool_params->stride.h;
 801f40e:	68bb      	ldr	r3, [r7, #8]
 801f410:	685b      	ldr	r3, [r3, #4]
 801f412:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t stride_x = pool_params->stride.w;
 801f414:	68bb      	ldr	r3, [r7, #8]
 801f416:	681b      	ldr	r3, [r3, #0]
 801f418:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t kernel_y = filter_dims->h;
 801f41a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801f41e:	685b      	ldr	r3, [r3, #4]
 801f420:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t kernel_x = filter_dims->w;
 801f422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801f426:	689b      	ldr	r3, [r3, #8]
 801f428:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t pad_y = pool_params->padding.h;
 801f42a:	68bb      	ldr	r3, [r7, #8]
 801f42c:	68db      	ldr	r3, [r3, #12]
 801f42e:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t pad_x = pool_params->padding.w;
 801f430:	68bb      	ldr	r3, [r7, #8]
 801f432:	689b      	ldr	r3, [r3, #8]
 801f434:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t act_min = pool_params->activation.min;
 801f436:	68bb      	ldr	r3, [r7, #8]
 801f438:	691b      	ldr	r3, [r3, #16]
 801f43a:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
 801f43c:	68bb      	ldr	r3, [r7, #8]
 801f43e:	695b      	ldr	r3, [r3, #20]
 801f440:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t channel_in = input_dims->c;
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	68db      	ldr	r3, [r3, #12]
 801f446:	63bb      	str	r3, [r7, #56]	; 0x38
    (void)ctx;
    q7_t *dst_base = dst;
 801f448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f44c:	637b      	str	r3, [r7, #52]	; 0x34

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 801f44e:	2300      	movs	r3, #0
 801f450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801f454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f456:	425b      	negs	r3, r3
 801f458:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801f45c:	e086      	b.n	801f56c <arm_max_pool_s8+0x188>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 801f45e:	2300      	movs	r3, #0
 801f460:	67fb      	str	r3, [r7, #124]	; 0x7c
 801f462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f464:	425b      	negs	r3, r3
 801f466:	67bb      	str	r3, [r7, #120]	; 0x78
 801f468:	e071      	b.n	801f54e <arm_max_pool_s8+0x16a>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 801f46a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801f46e:	2b00      	cmp	r3, #0
 801f470:	dc03      	bgt.n	801f47a <arm_max_pool_s8+0x96>
 801f472:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801f476:	425b      	negs	r3, r3
 801f478:	e000      	b.n	801f47c <arm_max_pool_s8+0x98>
 801f47a:	2300      	movs	r3, #0
 801f47c:	633b      	str	r3, [r7, #48]	; 0x30
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 801f47e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f480:	2b00      	cmp	r3, #0
 801f482:	dc02      	bgt.n	801f48a <arm_max_pool_s8+0xa6>
 801f484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f486:	425b      	negs	r3, r3
 801f488:	e000      	b.n	801f48c <arm_max_pool_s8+0xa8>
 801f48a:	2300      	movs	r3, #0
 801f48c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 801f48e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f490:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801f494:	1ad3      	subs	r3, r2, r3
 801f496:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f498:	4293      	cmp	r3, r2
 801f49a:	bfa8      	it	ge
 801f49c:	4613      	movge	r3, r2
 801f49e:	62bb      	str	r3, [r7, #40]	; 0x28
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 801f4a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801f4a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f4a4:	1ad3      	subs	r3, r2, r3
 801f4a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f4a8:	4293      	cmp	r3, r2
 801f4aa:	bfa8      	it	ge
 801f4ac:	4613      	movge	r3, r2
 801f4ae:	627b      	str	r3, [r7, #36]	; 0x24

            int count = 0;
 801f4b0:	2300      	movs	r3, #0
 801f4b2:	677b      	str	r3, [r7, #116]	; 0x74

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 801f4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f4b6:	673b      	str	r3, [r7, #112]	; 0x70
 801f4b8:	e038      	b.n	801f52c <arm_max_pool_s8+0x148>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 801f4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 801f4be:	e02e      	b.n	801f51e <arm_max_pool_s8+0x13a>
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 801f4c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801f4c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f4c4:	441a      	add	r2, r3
 801f4c6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801f4c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801f4cc:	440b      	add	r3, r1
 801f4ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801f4d0:	fb01 f303 	mul.w	r3, r1, r3
 801f4d4:	4413      	add	r3, r2
 801f4d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f4d8:	fb02 f303 	mul.w	r3, r2, r3
 801f4dc:	461a      	mov	r2, r3
 801f4de:	683b      	ldr	r3, [r7, #0]
 801f4e0:	4413      	add	r3, r2
 801f4e2:	623b      	str	r3, [r7, #32]

                    if (count == 0)
 801f4e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	d110      	bne.n	801f50c <arm_max_pool_s8+0x128>
                    {
                        arm_memcpy_q7(dst, start, channel_in);
 801f4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f4ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801f4f0:	61fa      	str	r2, [r7, #28]
 801f4f2:	6a3a      	ldr	r2, [r7, #32]
 801f4f4:	61ba      	str	r2, [r7, #24]
 801f4f6:	617b      	str	r3, [r7, #20]
    memcpy(dst, src, block_size);
 801f4f8:	697a      	ldr	r2, [r7, #20]
 801f4fa:	69b9      	ldr	r1, [r7, #24]
 801f4fc:	69f8      	ldr	r0, [r7, #28]
 801f4fe:	f00f f9f4 	bl	802e8ea <memcpy>
}
 801f502:	bf00      	nop
                        count++;
 801f504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801f506:	3301      	adds	r3, #1
 801f508:	677b      	str	r3, [r7, #116]	; 0x74
 801f50a:	e005      	b.n	801f518 <arm_max_pool_s8+0x134>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 801f50c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f50e:	6a39      	ldr	r1, [r7, #32]
 801f510:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801f514:	f7ff fe4a 	bl	801f1ac <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 801f518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f51a:	3301      	adds	r3, #1
 801f51c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801f51e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801f520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f522:	429a      	cmp	r2, r3
 801f524:	dbcc      	blt.n	801f4c0 <arm_max_pool_s8+0xdc>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 801f526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f528:	3301      	adds	r3, #1
 801f52a:	673b      	str	r3, [r7, #112]	; 0x70
 801f52c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801f52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f530:	429a      	cmp	r2, r3
 801f532:	dbc2      	blt.n	801f4ba <arm_max_pool_s8+0xd6>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 801f534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f536:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801f53a:	4413      	add	r3, r2
 801f53c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 801f540:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801f542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f544:	4413      	add	r3, r2
 801f546:	67bb      	str	r3, [r7, #120]	; 0x78
 801f548:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f54a:	3301      	adds	r3, #1
 801f54c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801f54e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801f550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f552:	429a      	cmp	r2, r3
 801f554:	db89      	blt.n	801f46a <arm_max_pool_s8+0x86>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 801f556:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801f55a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f55c:	4413      	add	r3, r2
 801f55e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801f562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801f566:	3301      	adds	r3, #1
 801f568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801f56c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801f570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801f572:	429a      	cmp	r2, r3
 801f574:	f6ff af73 	blt.w	801f45e <arm_max_pool_s8+0x7a>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 801f578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f57a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801f57c:	fb02 f303 	mul.w	r3, r2, r3
 801f580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f582:	fb02 f103 	mul.w	r1, r2, r3
 801f586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f58a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801f58c:	f7ff fe93 	bl	801f2b6 <clamp_output>

    return ARM_CMSIS_NN_SUCCESS;
 801f590:	2300      	movs	r3, #0
}
 801f592:	4618      	mov	r0, r3
 801f594:	3788      	adds	r7, #136	; 0x88
 801f596:	46bd      	mov	sp, r7
 801f598:	bd80      	pop	{r7, pc}
 801f59a:	0000      	movs	r0, r0
 801f59c:	0000      	movs	r0, r0
	...

0801f5a0 <arm_nn_softmax_common_s8>:
                              const int32_t mult,
                              const int32_t shift,
                              const int32_t diff_min,
                              const bool int16_output,
                              void *output)
{
 801f5a0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801f5a4:	f5ad 6d1b 	sub.w	sp, sp, #2480	; 0x9b0
 801f5a8:	af00      	add	r7, sp, #0
 801f5aa:	f507 641b 	add.w	r4, r7, #2480	; 0x9b0
 801f5ae:	f5a4 7473 	sub.w	r4, r4, #972	; 0x3cc
 801f5b2:	6020      	str	r0, [r4, #0]
 801f5b4:	f507 601b 	add.w	r0, r7, #2480	; 0x9b0
 801f5b8:	f5a0 7074 	sub.w	r0, r0, #976	; 0x3d0
 801f5bc:	6001      	str	r1, [r0, #0]
 801f5be:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 801f5c2:	f5a1 7175 	sub.w	r1, r1, #980	; 0x3d4
 801f5c6:	600a      	str	r2, [r1, #0]
 801f5c8:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 801f5cc:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 801f5d0:	6013      	str	r3, [r2, #0]
    const int32_t mask = (1 << shift);
 801f5d2:	2201      	movs	r2, #1
 801f5d4:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 801f5d8:	fa02 f303 	lsl.w	r3, r2, r3
 801f5dc:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac

    int32_t col = 0;
 801f5e0:	2300      	movs	r3, #0
 801f5e2:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 801f5e6:	2300      	movs	r3, #0
 801f5e8:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 801f5ec:	f004 b88d 	b.w	802370a <arm_nn_softmax_common_s8+0x416a>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 801f5f0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f5f4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801f5f8:	681b      	ldr	r3, [r3, #0]
 801f5fa:	781b      	ldrb	r3, [r3, #0]
 801f5fc:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 801f600:	2301      	movs	r3, #1
 801f602:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801f606:	e015      	b.n	801f634 <arm_nn_softmax_common_s8+0x94>
        {
            max = MAX(max, input[col]);
 801f608:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801f60c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f610:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801f614:	681b      	ldr	r3, [r3, #0]
 801f616:	4413      	add	r3, r2
 801f618:	f993 2000 	ldrsb.w	r2, [r3]
 801f61c:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 801f620:	4293      	cmp	r3, r2
 801f622:	bfb8      	it	lt
 801f624:	4613      	movlt	r3, r2
 801f626:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 801f62a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 801f62e:	3301      	adds	r3, #1
 801f630:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801f634:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f638:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 801f63c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801f640:	681b      	ldr	r3, [r3, #0]
 801f642:	429a      	cmp	r2, r3
 801f644:	dbe0      	blt.n	801f608 <arm_nn_softmax_common_s8+0x68>
        }

        int32_t diff = 0;
 801f646:	2300      	movs	r3, #0
 801f648:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        int32_t sum = 0;
 801f64c:	2300      	movs	r3, #0
 801f64e:	f8c7 39a8 	str.w	r3, [r7, #2472]	; 0x9a8

        for (col = 0; col < row_size; ++col)
 801f652:	2300      	movs	r3, #0
 801f654:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801f658:	f001 ba36 	b.w	8020ac8 <arm_nn_softmax_common_s8+0x1528>
        {
            diff = input[col] - max;
 801f65c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801f660:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f664:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801f668:	681b      	ldr	r3, [r3, #0]
 801f66a:	4413      	add	r3, r2
 801f66c:	f993 3000 	ldrsb.w	r3, [r3]
 801f670:	461a      	mov	r2, r3
 801f672:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 801f676:	1ad3      	subs	r3, r2, r3
 801f678:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
            if (diff >= diff_min)
 801f67c:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 801f680:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 801f684:	429a      	cmp	r2, r3
 801f686:	f2c1 821a 	blt.w	8020abe <arm_nn_softmax_common_s8+0x151e>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 801f68a:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 801f68e:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 801f692:	fb03 f202 	mul.w	r2, r3, r2
 801f696:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f69a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801f69e:	601a      	str	r2, [r3, #0]
 801f6a0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f6a4:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 801f6a8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f6ac:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801f6b0:	681b      	ldr	r3, [r3, #0]
 801f6b2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f6b4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f6b8:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 801f6bc:	2300      	movs	r3, #0
 801f6be:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801f6c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801f6c4:	f04f 0300 	mov.w	r3, #0
 801f6c8:	f607 0138 	addw	r1, r7, #2104	; 0x838
 801f6cc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801f6d0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f6d4:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 801f6d8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f6dc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801f6e0:	6812      	ldr	r2, [r2, #0]
 801f6e2:	681b      	ldr	r3, [r3, #0]
 801f6e4:	4053      	eors	r3, r2
 801f6e6:	0fdb      	lsrs	r3, r3, #31
 801f6e8:	f003 0301 	and.w	r3, r3, #1
 801f6ec:	b2db      	uxtb	r3, r3
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	d012      	beq.n	801f718 <arm_nn_softmax_common_s8+0x178>
        mult = 1 - mult;
 801f6f2:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801f6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6fa:	2100      	movs	r1, #0
 801f6fc:	f1d2 0001 	rsbs	r0, r2, #1
 801f700:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 801f704:	eb61 0303 	sbc.w	r3, r1, r3
 801f708:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 801f70c:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 801f710:	f607 0238 	addw	r2, r7, #2104	; 0x838
 801f714:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801f718:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f71c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	17da      	asrs	r2, r3, #31
 801f724:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 801f728:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 801f72c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f730:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801f734:	681b      	ldr	r3, [r3, #0]
 801f736:	17da      	asrs	r2, r3, #31
 801f738:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 801f73c:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 801f740:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801f744:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f748:	460b      	mov	r3, r1
 801f74a:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 801f74e:	fb02 f203 	mul.w	r2, r2, r3
 801f752:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 801f756:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 801f75a:	e9c4 0100 	strd	r0, r1, [r4]
 801f75e:	4601      	mov	r1, r0
 801f760:	fb01 f303 	mul.w	r3, r1, r3
 801f764:	4413      	add	r3, r2
 801f766:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 801f76a:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 801f76e:	fba2 1201 	umull	r1, r2, r2, r1
 801f772:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 801f776:	460a      	mov	r2, r1
 801f778:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 801f77c:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 801f780:	4413      	add	r3, r2
 801f782:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 801f786:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801f78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f78e:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 801f792:	1851      	adds	r1, r2, r1
 801f794:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 801f798:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 801f79c:	414b      	adcs	r3, r1
 801f79e:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 801f7a2:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 801f7a6:	f607 0238 	addw	r2, r7, #2104	; 0x838
 801f7aa:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801f7ae:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801f7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7b6:	2b00      	cmp	r3, #0
 801f7b8:	da0a      	bge.n	801f7d0 <arm_nn_softmax_common_s8+0x230>
 801f7ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f7be:	1851      	adds	r1, r2, r1
 801f7c0:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 801f7c4:	f143 0300 	adc.w	r3, r3, #0
 801f7c8:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 801f7cc:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 801f7d0:	f04f 0000 	mov.w	r0, #0
 801f7d4:	f04f 0100 	mov.w	r1, #0
 801f7d8:	0fd0      	lsrs	r0, r2, #31
 801f7da:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f7de:	17d9      	asrs	r1, r3, #31
 801f7e0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f7e4:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 801f7e8:	4603      	mov	r3, r0
 801f7ea:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 801f7ec:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f7f0:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 801f7f4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f7f8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801f7fc:	6812      	ldr	r2, [r2, #0]
 801f7fe:	681b      	ldr	r3, [r3, #0]
 801f800:	429a      	cmp	r2, r3
 801f802:	d10e      	bne.n	801f822 <arm_nn_softmax_common_s8+0x282>
 801f804:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f808:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801f80c:	681b      	ldr	r3, [r3, #0]
 801f80e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f812:	d106      	bne.n	801f822 <arm_nn_softmax_common_s8+0x282>
        result = NN_Q31_MAX;
 801f814:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f818:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 801f81c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801f820:	6013      	str	r3, [r2, #0]
    return result;
 801f822:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801f826:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801f82a:	681b      	ldr	r3, [r3, #0]
 801f82c:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    int32_t mask = 0;
 801f830:	2300      	movs	r3, #0
 801f832:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
    int32_t shift = 24;
 801f836:	2318      	movs	r3, #24
 801f838:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 801f83c:	2201      	movs	r2, #1
 801f83e:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801f842:	fa02 f303 	lsl.w	r3, r2, r3
 801f846:	1e5a      	subs	r2, r3, #1
 801f848:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801f84c:	ea02 0103 	and.w	r1, r2, r3
 801f850:	2201      	movs	r2, #1
 801f852:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801f856:	fa02 f303 	lsl.w	r3, r2, r3
 801f85a:	1acb      	subs	r3, r1, r3
 801f85c:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
    const int32_t remainder = val_mod_minus_quarter - val;
 801f860:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801f864:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801f868:	1ad3      	subs	r3, r2, r3
 801f86a:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 801f86e:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 801f872:	015b      	lsls	r3, r3, #5
 801f874:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 801f878:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 801f87c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801f880:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 801f884:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801f888:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
    q31_t result = 0;
 801f88c:	2300      	movs	r3, #0
 801f88e:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q63_t mult = 1 << 30;
 801f892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801f896:	f04f 0300 	mov.w	r3, #0
 801f89a:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 801f89e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801f8a2:	f8d7 2954 	ldr.w	r2, [r7, #2388]	; 0x954
 801f8a6:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801f8aa:	4053      	eors	r3, r2
 801f8ac:	0fdb      	lsrs	r3, r3, #31
 801f8ae:	f003 0301 	and.w	r3, r3, #1
 801f8b2:	b2db      	uxtb	r3, r3
 801f8b4:	2b00      	cmp	r3, #0
 801f8b6:	d012      	beq.n	801f8de <arm_nn_softmax_common_s8+0x33e>
        mult = 1 - mult;
 801f8b8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801f8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8c0:	2100      	movs	r1, #0
 801f8c2:	f1d2 0001 	rsbs	r0, r2, #1
 801f8c6:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 801f8ca:	eb61 0303 	sbc.w	r3, r1, r3
 801f8ce:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 801f8d2:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 801f8d6:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 801f8da:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801f8de:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 801f8e2:	17da      	asrs	r2, r3, #31
 801f8e4:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 801f8e8:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 801f8ec:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801f8f0:	17da      	asrs	r2, r3, #31
 801f8f2:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 801f8f6:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 801f8fa:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801f8fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f902:	460b      	mov	r3, r1
 801f904:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 801f908:	fb02 f203 	mul.w	r2, r2, r3
 801f90c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 801f910:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 801f914:	e9c4 0100 	strd	r0, r1, [r4]
 801f918:	4601      	mov	r1, r0
 801f91a:	fb01 f303 	mul.w	r3, r1, r3
 801f91e:	4413      	add	r3, r2
 801f920:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 801f924:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 801f928:	fba2 8901 	umull	r8, r9, r2, r1
 801f92c:	444b      	add	r3, r9
 801f92e:	4699      	mov	r9, r3
 801f930:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801f934:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f938:	eb12 0108 	adds.w	r1, r2, r8
 801f93c:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 801f940:	eb43 0309 	adc.w	r3, r3, r9
 801f944:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801f948:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 801f94c:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 801f950:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801f954:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801f958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	da0a      	bge.n	801f976 <arm_nn_softmax_common_s8+0x3d6>
 801f960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f964:	1851      	adds	r1, r2, r1
 801f966:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 801f96a:	f143 0300 	adc.w	r3, r3, #0
 801f96e:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 801f972:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 801f976:	f04f 0000 	mov.w	r0, #0
 801f97a:	f04f 0100 	mov.w	r1, #0
 801f97e:	0fd0      	lsrs	r0, r2, #31
 801f980:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f984:	17d9      	asrs	r1, r3, #31
 801f986:	4602      	mov	r2, r0
 801f988:	460b      	mov	r3, r1
 801f98a:	4613      	mov	r3, r2
 801f98c:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 801f990:	f8d7 2954 	ldr.w	r2, [r7, #2388]	; 0x954
 801f994:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801f998:	429a      	cmp	r2, r3
 801f99a:	d108      	bne.n	801f9ae <arm_nn_softmax_common_s8+0x40e>
 801f99c:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 801f9a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f9a4:	d103      	bne.n	801f9ae <arm_nn_softmax_common_s8+0x40e>
        result = NN_Q31_MAX;
 801f9a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801f9aa:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    return result;
 801f9ae:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
    const int32_t x2 = MUL_SAT(x, x);
 801f9b2:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 801f9b6:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 801f9ba:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 801f9be:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 801f9c2:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 801f9c6:	2300      	movs	r3, #0
 801f9c8:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 801f9cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801f9d0:	f04f 0300 	mov.w	r3, #0
 801f9d4:	f607 1128 	addw	r1, r7, #2344	; 0x928
 801f9d8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801f9dc:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 801f9e0:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801f9e4:	4053      	eors	r3, r2
 801f9e6:	0fdb      	lsrs	r3, r3, #31
 801f9e8:	f003 0301 	and.w	r3, r3, #1
 801f9ec:	b2db      	uxtb	r3, r3
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	d012      	beq.n	801fa18 <arm_nn_softmax_common_s8+0x478>
        mult = 1 - mult;
 801f9f2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801f9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9fa:	2100      	movs	r1, #0
 801f9fc:	f1d2 0001 	rsbs	r0, r2, #1
 801fa00:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 801fa04:	eb61 0303 	sbc.w	r3, r1, r3
 801fa08:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801fa0c:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 801fa10:	f607 1228 	addw	r2, r7, #2344	; 0x928
 801fa14:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801fa18:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 801fa1c:	17da      	asrs	r2, r3, #31
 801fa1e:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 801fa22:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 801fa26:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801fa2a:	17da      	asrs	r2, r3, #31
 801fa2c:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 801fa30:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 801fa34:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 801fa38:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fa3c:	460b      	mov	r3, r1
 801fa3e:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 801fa42:	fb02 f203 	mul.w	r2, r2, r3
 801fa46:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 801fa4a:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 801fa4e:	e9c4 0100 	strd	r0, r1, [r4]
 801fa52:	4601      	mov	r1, r0
 801fa54:	fb01 f303 	mul.w	r3, r1, r3
 801fa58:	4413      	add	r3, r2
 801fa5a:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 801fa5e:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 801fa62:	fba2 ab01 	umull	sl, fp, r2, r1
 801fa66:	445b      	add	r3, fp
 801fa68:	469b      	mov	fp, r3
 801fa6a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801fa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa72:	eb12 010a 	adds.w	r1, r2, sl
 801fa76:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 801fa7a:	eb43 030b 	adc.w	r3, r3, fp
 801fa7e:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 801fa82:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 801fa86:	f607 1228 	addw	r2, r7, #2344	; 0x928
 801fa8a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801fa8e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801fa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	da0a      	bge.n	801fab0 <arm_nn_softmax_common_s8+0x510>
 801fa9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fa9e:	1851      	adds	r1, r2, r1
 801faa0:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 801faa4:	f143 0300 	adc.w	r3, r3, #0
 801faa8:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 801faac:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 801fab0:	f04f 0000 	mov.w	r0, #0
 801fab4:	f04f 0100 	mov.w	r1, #0
 801fab8:	0fd0      	lsrs	r0, r2, #31
 801faba:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801fabe:	17d9      	asrs	r1, r3, #31
 801fac0:	4602      	mov	r2, r0
 801fac2:	460b      	mov	r3, r1
 801fac4:	4613      	mov	r3, r2
 801fac6:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 801faca:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 801face:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801fad2:	429a      	cmp	r2, r3
 801fad4:	d108      	bne.n	801fae8 <arm_nn_softmax_common_s8+0x548>
 801fad6:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 801fada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801fade:	d103      	bne.n	801fae8 <arm_nn_softmax_common_s8+0x548>
        result = NN_Q31_MAX;
 801fae0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801fae4:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 801fae8:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 801faec:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 801faf0:	2300      	movs	r3, #0
 801faf2:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 801faf6:	2304      	movs	r3, #4
 801faf8:	3b01      	subs	r3, #1
 801fafa:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 801fafe:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 801fb02:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 801fb06:	4013      	ands	r3, r2
 801fb08:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 801fb0c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 801fb10:	109b      	asrs	r3, r3, #2
 801fb12:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 801fb16:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 801fb1a:	105b      	asrs	r3, r3, #1
 801fb1c:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 801fb20:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 801fb24:	2b00      	cmp	r3, #0
 801fb26:	da04      	bge.n	801fb32 <arm_nn_softmax_common_s8+0x592>
        threshold++;
 801fb28:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 801fb2c:	3301      	adds	r3, #1
 801fb2e:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 801fb32:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 801fb36:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 801fb3a:	429a      	cmp	r2, r3
 801fb3c:	dd04      	ble.n	801fb48 <arm_nn_softmax_common_s8+0x5a8>
        result++;
 801fb3e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 801fb42:	3301      	adds	r3, #1
 801fb44:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 801fb48:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 801fb4c:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 801fb50:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 801fb54:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801fb58:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 801fb5c:	2300      	movs	r3, #0
 801fb5e:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 801fb62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801fb66:	f04f 0300 	mov.w	r3, #0
 801fb6a:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 801fb6e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801fb72:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 801fb76:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 801fb7a:	4053      	eors	r3, r2
 801fb7c:	0fdb      	lsrs	r3, r3, #31
 801fb7e:	f003 0301 	and.w	r3, r3, #1
 801fb82:	b2db      	uxtb	r3, r3
 801fb84:	2b00      	cmp	r3, #0
 801fb86:	d012      	beq.n	801fbae <arm_nn_softmax_common_s8+0x60e>
        mult = 1 - mult;
 801fb88:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb90:	2100      	movs	r1, #0
 801fb92:	f1d2 0001 	rsbs	r0, r2, #1
 801fb96:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 801fb9a:	eb61 0303 	sbc.w	r3, r1, r3
 801fb9e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 801fba2:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 801fba6:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 801fbaa:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 801fbae:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 801fbb2:	17da      	asrs	r2, r3, #31
 801fbb4:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 801fbb8:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 801fbbc:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 801fbc0:	17da      	asrs	r2, r3, #31
 801fbc2:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 801fbc6:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 801fbca:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 801fbce:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fbd2:	460b      	mov	r3, r1
 801fbd4:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 801fbd8:	fb02 f203 	mul.w	r2, r2, r3
 801fbdc:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 801fbe0:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 801fbe4:	e9cc 0100 	strd	r0, r1, [ip]
 801fbe8:	4601      	mov	r1, r0
 801fbea:	fb01 f303 	mul.w	r3, r1, r3
 801fbee:	4413      	add	r3, r2
 801fbf0:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 801fbf4:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 801fbf8:	fba2 5601 	umull	r5, r6, r2, r1
 801fbfc:	4433      	add	r3, r6
 801fbfe:	461e      	mov	r6, r3
 801fc00:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801fc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc08:	1951      	adds	r1, r2, r5
 801fc0a:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 801fc0e:	4173      	adcs	r3, r6
 801fc10:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801fc14:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 801fc18:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 801fc1c:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 801fc20:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801fc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	da0a      	bge.n	801fc42 <arm_nn_softmax_common_s8+0x6a2>
 801fc2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fc30:	1851      	adds	r1, r2, r1
 801fc32:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 801fc36:	f143 0300 	adc.w	r3, r3, #0
 801fc3a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 801fc3e:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 801fc42:	f04f 0000 	mov.w	r0, #0
 801fc46:	f04f 0100 	mov.w	r1, #0
 801fc4a:	0fd0      	lsrs	r0, r2, #31
 801fc4c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801fc50:	17d9      	asrs	r1, r3, #31
 801fc52:	4602      	mov	r2, r0
 801fc54:	460b      	mov	r3, r1
 801fc56:	4613      	mov	r3, r2
 801fc58:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 801fc5c:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 801fc60:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 801fc64:	429a      	cmp	r2, r3
 801fc66:	d108      	bne.n	801fc7a <arm_nn_softmax_common_s8+0x6da>
 801fc68:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 801fc6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801fc70:	d103      	bne.n	801fc7a <arm_nn_softmax_common_s8+0x6da>
        result = NN_Q31_MAX;
 801fc72:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801fc76:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 801fc7a:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801fc7e:	4423      	add	r3, r4
 801fc80:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 801fc84:	2300      	movs	r3, #0
 801fc86:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 801fc8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801fc8e:	f04f 0300 	mov.w	r3, #0
 801fc92:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 801fc96:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801fc9a:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 801fc9e:	4ba8      	ldr	r3, [pc, #672]	; (801ff40 <arm_nn_softmax_common_s8+0x9a0>)
 801fca0:	4053      	eors	r3, r2
 801fca2:	0fdb      	lsrs	r3, r3, #31
 801fca4:	f003 0301 	and.w	r3, r3, #1
 801fca8:	b2db      	uxtb	r3, r3
 801fcaa:	2b00      	cmp	r3, #0
 801fcac:	d012      	beq.n	801fcd4 <arm_nn_softmax_common_s8+0x734>
        mult = 1 - mult;
 801fcae:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801fcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcb6:	2100      	movs	r1, #0
 801fcb8:	f1d2 0001 	rsbs	r0, r2, #1
 801fcbc:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 801fcc0:	eb61 0303 	sbc.w	r3, r1, r3
 801fcc4:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 801fcc8:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 801fccc:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 801fcd0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801fcd4:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 801fcd8:	17da      	asrs	r2, r3, #31
 801fcda:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 801fcde:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 801fce2:	a393      	add	r3, pc, #588	; (adr r3, 801ff30 <arm_nn_softmax_common_s8+0x990>)
 801fce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fce8:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 801fcec:	fb02 f001 	mul.w	r0, r2, r1
 801fcf0:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 801fcf4:	fb01 f103 	mul.w	r1, r1, r3
 801fcf8:	4401      	add	r1, r0
 801fcfa:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 801fcfe:	fba0 2302 	umull	r2, r3, r0, r2
 801fd02:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 801fd06:	4613      	mov	r3, r2
 801fd08:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 801fd0c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 801fd10:	18cb      	adds	r3, r1, r3
 801fd12:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 801fd16:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd1e:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 801fd22:	1851      	adds	r1, r2, r1
 801fd24:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 801fd28:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 801fd2c:	414b      	adcs	r3, r1
 801fd2e:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 801fd32:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 801fd36:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 801fd3a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801fd3e:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801fd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd46:	2b00      	cmp	r3, #0
 801fd48:	da0a      	bge.n	801fd60 <arm_nn_softmax_common_s8+0x7c0>
 801fd4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fd4e:	1851      	adds	r1, r2, r1
 801fd50:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 801fd54:	f143 0300 	adc.w	r3, r3, #0
 801fd58:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 801fd5c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 801fd60:	f04f 0000 	mov.w	r0, #0
 801fd64:	f04f 0100 	mov.w	r1, #0
 801fd68:	0fd0      	lsrs	r0, r2, #31
 801fd6a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801fd6e:	17d9      	asrs	r1, r3, #31
 801fd70:	4602      	mov	r2, r0
 801fd72:	460b      	mov	r3, r1
 801fd74:	4613      	mov	r3, r2
 801fd76:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 801fd7a:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 801fd7e:	4b70      	ldr	r3, [pc, #448]	; (801ff40 <arm_nn_softmax_common_s8+0x9a0>)
 801fd80:	429a      	cmp	r2, r3
 801fd82:	d108      	bne.n	801fd96 <arm_nn_softmax_common_s8+0x7f6>
 801fd84:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 801fd88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801fd8c:	d103      	bne.n	801fd96 <arm_nn_softmax_common_s8+0x7f6>
        result = NN_Q31_MAX;
 801fd8e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801fd92:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 801fd96:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801fd9a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 801fd9e:	4413      	add	r3, r2
 801fda0:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 801fda4:	2300      	movs	r3, #0
 801fda6:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 801fdaa:	2302      	movs	r3, #2
 801fdac:	3b01      	subs	r3, #1
 801fdae:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 801fdb2:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 801fdb6:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 801fdba:	4013      	ands	r3, r2
 801fdbc:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 801fdc0:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 801fdc4:	105b      	asrs	r3, r3, #1
 801fdc6:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 801fdca:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 801fdce:	105b      	asrs	r3, r3, #1
 801fdd0:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 801fdd4:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	da04      	bge.n	801fde6 <arm_nn_softmax_common_s8+0x846>
        threshold++;
 801fddc:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 801fde0:	3301      	adds	r3, #1
 801fde2:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 801fde6:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 801fdea:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 801fdee:	429a      	cmp	r2, r3
 801fdf0:	dd04      	ble.n	801fdfc <arm_nn_softmax_common_s8+0x85c>
        result++;
 801fdf2:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 801fdf6:	3301      	adds	r3, #1
 801fdf8:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 801fdfc:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801fe00:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801fe04:	4413      	add	r3, r2
 801fe06:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 801fe0a:	2300      	movs	r3, #0
 801fe0c:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 801fe10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801fe14:	f04f 0300 	mov.w	r3, #0
 801fe18:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 801fe1c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801fe20:	f8d7 28d8 	ldr.w	r2, [r7, #2264]	; 0x8d8
 801fe24:	4b47      	ldr	r3, [pc, #284]	; (801ff44 <arm_nn_softmax_common_s8+0x9a4>)
 801fe26:	4053      	eors	r3, r2
 801fe28:	0fdb      	lsrs	r3, r3, #31
 801fe2a:	f003 0301 	and.w	r3, r3, #1
 801fe2e:	b2db      	uxtb	r3, r3
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	d012      	beq.n	801fe5a <arm_nn_softmax_common_s8+0x8ba>
        mult = 1 - mult;
 801fe34:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801fe38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe3c:	2100      	movs	r1, #0
 801fe3e:	f1d2 0001 	rsbs	r0, r2, #1
 801fe42:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 801fe46:	eb61 0303 	sbc.w	r3, r1, r3
 801fe4a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 801fe4e:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 801fe52:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 801fe56:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801fe5a:	a137      	add	r1, pc, #220	; (adr r1, 801ff38 <arm_nn_softmax_common_s8+0x998>)
 801fe5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe60:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 801fe64:	17da      	asrs	r2, r3, #31
 801fe66:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 801fe6a:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 801fe6e:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 801fe72:	fb03 f201 	mul.w	r2, r3, r1
 801fe76:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 801fe7a:	fb00 f303 	mul.w	r3, r0, r3
 801fe7e:	4413      	add	r3, r2
 801fe80:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 801fe84:	fba0 1202 	umull	r1, r2, r0, r2
 801fe88:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 801fe8c:	460a      	mov	r2, r1
 801fe8e:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 801fe92:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 801fe96:	4413      	add	r3, r2
 801fe98:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 801fe9c:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801fea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fea4:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801fea8:	1851      	adds	r1, r2, r1
 801feaa:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 801feae:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 801feb2:	414b      	adcs	r3, r1
 801feb4:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 801feb8:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 801febc:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 801fec0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801fec4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fecc:	2b00      	cmp	r3, #0
 801fece:	da0a      	bge.n	801fee6 <arm_nn_softmax_common_s8+0x946>
 801fed0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fed4:	1851      	adds	r1, r2, r1
 801fed6:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 801feda:	f143 0300 	adc.w	r3, r3, #0
 801fede:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 801fee2:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801fee6:	f04f 0000 	mov.w	r0, #0
 801feea:	f04f 0100 	mov.w	r1, #0
 801feee:	0fd0      	lsrs	r0, r2, #31
 801fef0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801fef4:	17d9      	asrs	r1, r3, #31
 801fef6:	4602      	mov	r2, r0
 801fef8:	460b      	mov	r3, r1
 801fefa:	4613      	mov	r3, r2
 801fefc:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 801ff00:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 801ff04:	4b0f      	ldr	r3, [pc, #60]	; (801ff44 <arm_nn_softmax_common_s8+0x9a4>)
 801ff06:	4413      	add	r3, r2
 801ff08:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1672461947)
 801ff0c:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 801ff10:	1c53      	adds	r3, r2, #1
 801ff12:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801ff16:	2301      	movs	r3, #1
 801ff18:	fa03 f202 	lsl.w	r2, r3, r2
 801ff1c:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801ff20:	4013      	ands	r3, r2
 801ff22:	2b00      	cmp	r3, #0
 801ff24:	d010      	beq.n	801ff48 <arm_nn_softmax_common_s8+0x9a8>
 801ff26:	f04f 33ff 	mov.w	r3, #4294967295
 801ff2a:	e00e      	b.n	801ff4a <arm_nn_softmax_common_s8+0x9aa>
 801ff2c:	f3af 8000 	nop.w
 801ff30:	2aaaaaab 	.word	0x2aaaaaab
 801ff34:	00000000 	.word	0x00000000
 801ff38:	70f5a894 	.word	0x70f5a894
 801ff3c:	00000000 	.word	0x00000000
 801ff40:	2aaaaaab 	.word	0x2aaaaaab
 801ff44:	70f5a894 	.word	0x70f5a894
 801ff48:	2300      	movs	r3, #0
 801ff4a:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 801ff4e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801ff52:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 801ff56:	2300      	movs	r3, #0
 801ff58:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 801ff5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801ff60:	f04f 0300 	mov.w	r3, #0
 801ff64:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 801ff68:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801ff6c:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 801ff70:	4bb5      	ldr	r3, [pc, #724]	; (8020248 <arm_nn_softmax_common_s8+0xca8>)
 801ff72:	4053      	eors	r3, r2
 801ff74:	0fdb      	lsrs	r3, r3, #31
 801ff76:	f003 0301 	and.w	r3, r3, #1
 801ff7a:	b2db      	uxtb	r3, r3
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	d012      	beq.n	801ffa6 <arm_nn_softmax_common_s8+0xa06>
        mult = 1 - mult;
 801ff80:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801ff84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff88:	2100      	movs	r1, #0
 801ff8a:	f1d2 0001 	rsbs	r0, r2, #1
 801ff8e:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 801ff92:	eb61 0303 	sbc.w	r3, r1, r3
 801ff96:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 801ff9a:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 801ff9e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 801ffa2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801ffa6:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 801ffaa:	17da      	asrs	r2, r3, #31
 801ffac:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 801ffb0:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 801ffb4:	a3a0      	add	r3, pc, #640	; (adr r3, 8020238 <arm_nn_softmax_common_s8+0xc98>)
 801ffb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffba:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 801ffbe:	fb02 f001 	mul.w	r0, r2, r1
 801ffc2:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 801ffc6:	fb01 f103 	mul.w	r1, r1, r3
 801ffca:	4401      	add	r1, r0
 801ffcc:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 801ffd0:	fba0 2302 	umull	r2, r3, r0, r2
 801ffd4:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801ffd8:	4613      	mov	r3, r2
 801ffda:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 801ffde:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 801ffe2:	18cb      	adds	r3, r1, r3
 801ffe4:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801ffe8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801ffec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fff0:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801fff4:	1851      	adds	r1, r2, r1
 801fff6:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 801fffa:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 801fffe:	414b      	adcs	r3, r1
 8020000:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8020004:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8020008:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 802000c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8020010:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8020014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020018:	2b00      	cmp	r3, #0
 802001a:	da0a      	bge.n	8020032 <arm_nn_softmax_common_s8+0xa92>
 802001c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020020:	1851      	adds	r1, r2, r1
 8020022:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8020026:	f143 0300 	adc.w	r3, r3, #0
 802002a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 802002e:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8020032:	f04f 0000 	mov.w	r0, #0
 8020036:	f04f 0100 	mov.w	r1, #0
 802003a:	0fd0      	lsrs	r0, r2, #31
 802003c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020040:	17d9      	asrs	r1, r3, #31
 8020042:	4602      	mov	r2, r0
 8020044:	460b      	mov	r3, r1
 8020046:	4613      	mov	r3, r2
 8020048:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802004c:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8020050:	4b7d      	ldr	r3, [pc, #500]	; (8020248 <arm_nn_softmax_common_s8+0xca8>)
 8020052:	429a      	cmp	r2, r3
 8020054:	d108      	bne.n	8020068 <arm_nn_softmax_common_s8+0xac8>
 8020056:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 802005a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802005e:	d103      	bne.n	8020068 <arm_nn_softmax_common_s8+0xac8>
        result = NN_Q31_MAX;
 8020060:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8020064:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 8020068:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 802006c:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8020070:	ea02 0103 	and.w	r1, r2, r3
 8020074:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8020078:	43da      	mvns	r2, r3
 802007a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 802007e:	4013      	ands	r3, r2
 8020080:	404b      	eors	r3, r1
 8020082:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 8020086:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 802008a:	1c53      	adds	r3, r2, #1
 802008c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8020090:	2301      	movs	r3, #1
 8020092:	fa03 f202 	lsl.w	r2, r3, r2
 8020096:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 802009a:	4013      	ands	r3, r2
 802009c:	2b00      	cmp	r3, #0
 802009e:	d002      	beq.n	80200a6 <arm_nn_softmax_common_s8+0xb06>
 80200a0:	f04f 33ff 	mov.w	r3, #4294967295
 80200a4:	e000      	b.n	80200a8 <arm_nn_softmax_common_s8+0xb08>
 80200a6:	2300      	movs	r3, #0
 80200a8:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 80200ac:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80200b0:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 80200b4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80200b8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80200ba:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80200be:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80200c2:	2300      	movs	r3, #0
 80200c4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80200c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80200ca:	f04f 0300 	mov.w	r3, #0
 80200ce:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 80200d2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80200d6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80200da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80200de:	681a      	ldr	r2, [r3, #0]
 80200e0:	4b5a      	ldr	r3, [pc, #360]	; (802024c <arm_nn_softmax_common_s8+0xcac>)
 80200e2:	4053      	eors	r3, r2
 80200e4:	0fdb      	lsrs	r3, r3, #31
 80200e6:	f003 0301 	and.w	r3, r3, #1
 80200ea:	b2db      	uxtb	r3, r3
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d012      	beq.n	8020116 <arm_nn_softmax_common_s8+0xb76>
        mult = 1 - mult;
 80200f0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80200f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200f8:	2100      	movs	r1, #0
 80200fa:	f1d2 0001 	rsbs	r0, r2, #1
 80200fe:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 8020102:	eb61 0303 	sbc.w	r3, r1, r3
 8020106:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 802010a:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 802010e:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8020112:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8020116:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802011a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 802011e:	681b      	ldr	r3, [r3, #0]
 8020120:	17da      	asrs	r2, r3, #31
 8020122:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8020126:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 802012a:	a345      	add	r3, pc, #276	; (adr r3, 8020240 <arm_nn_softmax_common_s8+0xca0>)
 802012c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020130:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 8020134:	fb02 f001 	mul.w	r0, r2, r1
 8020138:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 802013c:	fb01 f103 	mul.w	r1, r1, r3
 8020140:	4401      	add	r1, r0
 8020142:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 8020146:	fba0 2302 	umull	r2, r3, r0, r2
 802014a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 802014e:	4613      	mov	r3, r2
 8020150:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8020154:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8020158:	18cb      	adds	r3, r1, r3
 802015a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 802015e:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8020162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020166:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 802016a:	1851      	adds	r1, r2, r1
 802016c:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8020170:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8020174:	414b      	adcs	r3, r1
 8020176:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 802017a:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 802017e:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8020182:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8020186:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 802018a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802018e:	2b00      	cmp	r3, #0
 8020190:	da0a      	bge.n	80201a8 <arm_nn_softmax_common_s8+0xc08>
 8020192:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020196:	1851      	adds	r1, r2, r1
 8020198:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 802019c:	f143 0300 	adc.w	r3, r3, #0
 80201a0:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80201a4:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80201a8:	f04f 0000 	mov.w	r0, #0
 80201ac:	f04f 0100 	mov.w	r1, #0
 80201b0:	0fd0      	lsrs	r0, r2, #31
 80201b2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80201b6:	17d9      	asrs	r1, r3, #31
 80201b8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80201bc:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80201c0:	4603      	mov	r3, r0
 80201c2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80201c4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80201c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80201cc:	681a      	ldr	r2, [r3, #0]
 80201ce:	4b1f      	ldr	r3, [pc, #124]	; (802024c <arm_nn_softmax_common_s8+0xcac>)
 80201d0:	429a      	cmp	r2, r3
 80201d2:	d10e      	bne.n	80201f2 <arm_nn_softmax_common_s8+0xc52>
 80201d4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80201d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80201dc:	681b      	ldr	r3, [r3, #0]
 80201de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80201e2:	d106      	bne.n	80201f2 <arm_nn_softmax_common_s8+0xc52>
        result = NN_Q31_MAX;
 80201e4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80201e8:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80201ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80201f0:	6013      	str	r3, [r2, #0]
    return result;
 80201f2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80201f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80201fa:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 80201fc:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8020200:	ea02 0103 	and.w	r1, r2, r3
 8020204:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8020208:	43da      	mvns	r2, r3
 802020a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 802020e:	4013      	ands	r3, r2
 8020210:	404b      	eors	r3, r1
 8020212:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 8020216:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 802021a:	1c53      	adds	r3, r2, #1
 802021c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8020220:	2301      	movs	r3, #1
 8020222:	fa03 f202 	lsl.w	r2, r3, r2
 8020226:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 802022a:	4013      	ands	r3, r2
 802022c:	2b00      	cmp	r3, #0
 802022e:	d00f      	beq.n	8020250 <arm_nn_softmax_common_s8+0xcb0>
 8020230:	f04f 33ff 	mov.w	r3, #4294967295
 8020234:	e00d      	b.n	8020252 <arm_nn_softmax_common_s8+0xcb2>
 8020236:	bf00      	nop
 8020238:	63afbe7b 	.word	0x63afbe7b
 802023c:	00000000 	.word	0x00000000
 8020240:	4da2cbf2 	.word	0x4da2cbf2
 8020244:	00000000 	.word	0x00000000
 8020248:	63afbe7b 	.word	0x63afbe7b
 802024c:	4da2cbf2 	.word	0x4da2cbf2
 8020250:	2300      	movs	r3, #0
 8020252:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 8020256:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802025a:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 802025e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8020262:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8020264:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020268:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 802026c:	2300      	movs	r3, #0
 802026e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8020270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020274:	f04f 0300 	mov.w	r3, #0
 8020278:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 802027c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8020280:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020284:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8020288:	681a      	ldr	r2, [r3, #0]
 802028a:	4bbd      	ldr	r3, [pc, #756]	; (8020580 <arm_nn_softmax_common_s8+0xfe0>)
 802028c:	4053      	eors	r3, r2
 802028e:	0fdb      	lsrs	r3, r3, #31
 8020290:	f003 0301 	and.w	r3, r3, #1
 8020294:	b2db      	uxtb	r3, r3
 8020296:	2b00      	cmp	r3, #0
 8020298:	d012      	beq.n	80202c0 <arm_nn_softmax_common_s8+0xd20>
        mult = 1 - mult;
 802029a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 802029e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202a2:	2100      	movs	r1, #0
 80202a4:	f1d2 0001 	rsbs	r0, r2, #1
 80202a8:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 80202ac:	eb61 0303 	sbc.w	r3, r1, r3
 80202b0:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80202b4:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 80202b8:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 80202bc:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80202c0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80202c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80202c8:	681b      	ldr	r3, [r3, #0]
 80202ca:	17da      	asrs	r2, r3, #31
 80202cc:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 80202d0:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 80202d4:	a3a6      	add	r3, pc, #664	; (adr r3, 8020570 <arm_nn_softmax_common_s8+0xfd0>)
 80202d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202da:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 80202de:	fb02 f001 	mul.w	r0, r2, r1
 80202e2:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 80202e6:	fb01 f103 	mul.w	r1, r1, r3
 80202ea:	4401      	add	r1, r0
 80202ec:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 80202f0:	fba0 2302 	umull	r2, r3, r0, r2
 80202f4:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80202f8:	4613      	mov	r3, r2
 80202fa:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80202fe:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8020302:	18cb      	adds	r3, r1, r3
 8020304:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8020308:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 802030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020310:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8020314:	1851      	adds	r1, r2, r1
 8020316:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 802031a:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 802031e:	414b      	adcs	r3, r1
 8020320:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8020324:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 8020328:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 802032c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8020330:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8020334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020338:	2b00      	cmp	r3, #0
 802033a:	da0a      	bge.n	8020352 <arm_nn_softmax_common_s8+0xdb2>
 802033c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020340:	1851      	adds	r1, r2, r1
 8020342:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8020346:	f143 0300 	adc.w	r3, r3, #0
 802034a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 802034e:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8020352:	f04f 0000 	mov.w	r0, #0
 8020356:	f04f 0100 	mov.w	r1, #0
 802035a:	0fd0      	lsrs	r0, r2, #31
 802035c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020360:	17d9      	asrs	r1, r3, #31
 8020362:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020366:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 802036a:	4603      	mov	r3, r0
 802036c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802036e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020372:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8020376:	681a      	ldr	r2, [r3, #0]
 8020378:	4b81      	ldr	r3, [pc, #516]	; (8020580 <arm_nn_softmax_common_s8+0xfe0>)
 802037a:	429a      	cmp	r2, r3
 802037c:	d10e      	bne.n	802039c <arm_nn_softmax_common_s8+0xdfc>
 802037e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020382:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8020386:	681b      	ldr	r3, [r3, #0]
 8020388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802038c:	d106      	bne.n	802039c <arm_nn_softmax_common_s8+0xdfc>
        result = NN_Q31_MAX;
 802038e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020392:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8020396:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802039a:	6013      	str	r3, [r2, #0]
    return result;
 802039c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80203a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80203a4:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 80203a6:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80203aa:	ea02 0103 	and.w	r1, r2, r3
 80203ae:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80203b2:	43da      	mvns	r2, r3
 80203b4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80203b8:	4013      	ands	r3, r2
 80203ba:	404b      	eors	r3, r1
 80203bc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 80203c0:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 80203c4:	1c53      	adds	r3, r2, #1
 80203c6:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80203ca:	2301      	movs	r3, #1
 80203cc:	fa03 f202 	lsl.w	r2, r3, r2
 80203d0:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 80203d4:	4013      	ands	r3, r2
 80203d6:	2b00      	cmp	r3, #0
 80203d8:	d002      	beq.n	80203e0 <arm_nn_softmax_common_s8+0xe40>
 80203da:	f04f 33ff 	mov.w	r3, #4294967295
 80203de:	e000      	b.n	80203e2 <arm_nn_softmax_common_s8+0xe42>
 80203e0:	2300      	movs	r3, #0
 80203e2:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 80203e6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80203ea:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 80203ee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80203f2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80203f4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80203f8:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 80203fc:	2300      	movs	r3, #0
 80203fe:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8020400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020404:	f04f 0300 	mov.w	r3, #0
 8020408:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 802040c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8020410:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020414:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8020418:	681a      	ldr	r2, [r3, #0]
 802041a:	4b5a      	ldr	r3, [pc, #360]	; (8020584 <arm_nn_softmax_common_s8+0xfe4>)
 802041c:	4053      	eors	r3, r2
 802041e:	0fdb      	lsrs	r3, r3, #31
 8020420:	f003 0301 	and.w	r3, r3, #1
 8020424:	b2db      	uxtb	r3, r3
 8020426:	2b00      	cmp	r3, #0
 8020428:	d012      	beq.n	8020450 <arm_nn_softmax_common_s8+0xeb0>
        mult = 1 - mult;
 802042a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 802042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020432:	2100      	movs	r1, #0
 8020434:	f1d2 0001 	rsbs	r0, r2, #1
 8020438:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 802043c:	eb61 0303 	sbc.w	r3, r1, r3
 8020440:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8020444:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8020448:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 802044c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8020450:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020454:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8020458:	681b      	ldr	r3, [r3, #0]
 802045a:	17da      	asrs	r2, r3, #31
 802045c:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8020460:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 8020464:	a344      	add	r3, pc, #272	; (adr r3, 8020578 <arm_nn_softmax_common_s8+0xfd8>)
 8020466:	e9d3 2300 	ldrd	r2, r3, [r3]
 802046a:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 802046e:	fb02 f001 	mul.w	r0, r2, r1
 8020472:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 8020476:	fb01 f103 	mul.w	r1, r1, r3
 802047a:	4401      	add	r1, r0
 802047c:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8020480:	fba0 2302 	umull	r2, r3, r0, r2
 8020484:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8020488:	4613      	mov	r3, r2
 802048a:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 802048e:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8020492:	18cb      	adds	r3, r1, r3
 8020494:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8020498:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 802049c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204a0:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 80204a4:	1851      	adds	r1, r2, r1
 80204a6:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 80204aa:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 80204ae:	414b      	adcs	r3, r1
 80204b0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80204b4:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80204b8:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80204bc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80204c0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80204c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204c8:	2b00      	cmp	r3, #0
 80204ca:	da0a      	bge.n	80204e2 <arm_nn_softmax_common_s8+0xf42>
 80204cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80204d0:	1851      	adds	r1, r2, r1
 80204d2:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 80204d6:	f143 0300 	adc.w	r3, r3, #0
 80204da:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80204de:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80204e2:	f04f 0000 	mov.w	r0, #0
 80204e6:	f04f 0100 	mov.w	r1, #0
 80204ea:	0fd0      	lsrs	r0, r2, #31
 80204ec:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80204f0:	17d9      	asrs	r1, r3, #31
 80204f2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80204f6:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 80204fa:	4603      	mov	r3, r0
 80204fc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80204fe:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020502:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8020506:	681a      	ldr	r2, [r3, #0]
 8020508:	4b1e      	ldr	r3, [pc, #120]	; (8020584 <arm_nn_softmax_common_s8+0xfe4>)
 802050a:	429a      	cmp	r2, r3
 802050c:	d10e      	bne.n	802052c <arm_nn_softmax_common_s8+0xf8c>
 802050e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020512:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8020516:	681b      	ldr	r3, [r3, #0]
 8020518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802051c:	d106      	bne.n	802052c <arm_nn_softmax_common_s8+0xf8c>
        result = NN_Q31_MAX;
 802051e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020522:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8020526:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802052a:	6013      	str	r3, [r2, #0]
    return result;
 802052c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020530:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8020534:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8020536:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 802053a:	ea02 0103 	and.w	r1, r2, r3
 802053e:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8020542:	43da      	mvns	r2, r3
 8020544:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8020548:	4013      	ands	r3, r2
 802054a:	404b      	eors	r3, r1
 802054c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 8020550:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 8020554:	1c53      	adds	r3, r2, #1
 8020556:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 802055a:	2301      	movs	r3, #1
 802055c:	fa03 f202 	lsl.w	r2, r3, r2
 8020560:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 8020564:	4013      	ands	r3, r2
 8020566:	2b00      	cmp	r3, #0
 8020568:	d00e      	beq.n	8020588 <arm_nn_softmax_common_s8+0xfe8>
 802056a:	f04f 33ff 	mov.w	r3, #4294967295
 802056e:	e00c      	b.n	802058a <arm_nn_softmax_common_s8+0xfea>
 8020570:	2f16ac6c 	.word	0x2f16ac6c
 8020574:	00000000 	.word	0x00000000
 8020578:	1152aaa4 	.word	0x1152aaa4
 802057c:	00000000 	.word	0x00000000
 8020580:	2f16ac6c 	.word	0x2f16ac6c
 8020584:	1152aaa4 	.word	0x1152aaa4
 8020588:	2300      	movs	r3, #0
 802058a:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 802058e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020592:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8020596:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 802059a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802059c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80205a0:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 80205a4:	2300      	movs	r3, #0
 80205a6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80205a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80205ac:	f04f 0300 	mov.w	r3, #0
 80205b0:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 80205b4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80205b8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80205bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80205c0:	681a      	ldr	r2, [r3, #0]
 80205c2:	4bbb      	ldr	r3, [pc, #748]	; (80208b0 <arm_nn_softmax_common_s8+0x1310>)
 80205c4:	4053      	eors	r3, r2
 80205c6:	0fdb      	lsrs	r3, r3, #31
 80205c8:	f003 0301 	and.w	r3, r3, #1
 80205cc:	b2db      	uxtb	r3, r3
 80205ce:	2b00      	cmp	r3, #0
 80205d0:	d012      	beq.n	80205f8 <arm_nn_softmax_common_s8+0x1058>
        mult = 1 - mult;
 80205d2:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80205d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205da:	2100      	movs	r1, #0
 80205dc:	f1d2 0001 	rsbs	r0, r2, #1
 80205e0:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 80205e4:	eb61 0303 	sbc.w	r3, r1, r3
 80205e8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80205ec:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80205f0:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 80205f4:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80205f8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80205fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8020600:	681b      	ldr	r3, [r3, #0]
 8020602:	17da      	asrs	r2, r3, #31
 8020604:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8020608:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 802060c:	a3a6      	add	r3, pc, #664	; (adr r3, 80208a8 <arm_nn_softmax_common_s8+0x1308>)
 802060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020612:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 8020616:	fb02 f001 	mul.w	r0, r2, r1
 802061a:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 802061e:	fb01 f103 	mul.w	r1, r1, r3
 8020622:	4401      	add	r1, r0
 8020624:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 8020628:	fba0 2302 	umull	r2, r3, r0, r2
 802062c:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8020630:	4613      	mov	r3, r2
 8020632:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8020636:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 802063a:	18cb      	adds	r3, r1, r3
 802063c:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8020640:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8020644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020648:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 802064c:	1851      	adds	r1, r2, r1
 802064e:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8020652:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 8020656:	414b      	adcs	r3, r1
 8020658:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 802065c:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8020660:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8020664:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8020668:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 802066c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020670:	2b00      	cmp	r3, #0
 8020672:	da0a      	bge.n	802068a <arm_nn_softmax_common_s8+0x10ea>
 8020674:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020678:	1851      	adds	r1, r2, r1
 802067a:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 802067e:	f143 0300 	adc.w	r3, r3, #0
 8020682:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8020686:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 802068a:	f04f 0000 	mov.w	r0, #0
 802068e:	f04f 0100 	mov.w	r1, #0
 8020692:	0fd0      	lsrs	r0, r2, #31
 8020694:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020698:	17d9      	asrs	r1, r3, #31
 802069a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802069e:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 80206a2:	4603      	mov	r3, r0
 80206a4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80206a6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80206aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80206ae:	681a      	ldr	r2, [r3, #0]
 80206b0:	4b7f      	ldr	r3, [pc, #508]	; (80208b0 <arm_nn_softmax_common_s8+0x1310>)
 80206b2:	429a      	cmp	r2, r3
 80206b4:	d10e      	bne.n	80206d4 <arm_nn_softmax_common_s8+0x1134>
 80206b6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80206ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80206c4:	d106      	bne.n	80206d4 <arm_nn_softmax_common_s8+0x1134>
        result = NN_Q31_MAX;
 80206c6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80206ca:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 80206ce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80206d2:	6013      	str	r3, [r2, #0]
    return result;
 80206d4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80206d8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80206dc:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 80206de:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80206e2:	ea02 0103 	and.w	r1, r2, r3
 80206e6:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80206ea:	43da      	mvns	r2, r3
 80206ec:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80206f0:	4013      	ands	r3, r2
 80206f2:	404b      	eors	r3, r1
 80206f4:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 80206f8:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 80206fc:	1c53      	adds	r3, r2, #1
 80206fe:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8020702:	2301      	movs	r3, #1
 8020704:	fa03 f202 	lsl.w	r2, r3, r2
 8020708:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 802070c:	4013      	ands	r3, r2
 802070e:	2b00      	cmp	r3, #0
 8020710:	d002      	beq.n	8020718 <arm_nn_softmax_common_s8+0x1178>
 8020712:	f04f 33ff 	mov.w	r3, #4294967295
 8020716:	e000      	b.n	802071a <arm_nn_softmax_common_s8+0x117a>
 8020718:	2300      	movs	r3, #0
 802071a:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 802071e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020722:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 8020726:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 802072a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802072c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020730:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8020734:	2300      	movs	r3, #0
 8020736:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8020738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802073c:	f04f 0300 	mov.w	r3, #0
 8020740:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 8020744:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8020748:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802074c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8020750:	681a      	ldr	r2, [r3, #0]
 8020752:	4b58      	ldr	r3, [pc, #352]	; (80208b4 <arm_nn_softmax_common_s8+0x1314>)
 8020754:	4053      	eors	r3, r2
 8020756:	0fdb      	lsrs	r3, r3, #31
 8020758:	f003 0301 	and.w	r3, r3, #1
 802075c:	b2db      	uxtb	r3, r3
 802075e:	2b00      	cmp	r3, #0
 8020760:	d012      	beq.n	8020788 <arm_nn_softmax_common_s8+0x11e8>
        mult = 1 - mult;
 8020762:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8020766:	e9d3 2300 	ldrd	r2, r3, [r3]
 802076a:	2100      	movs	r1, #0
 802076c:	f1d2 0001 	rsbs	r0, r2, #1
 8020770:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 8020774:	eb61 0303 	sbc.w	r3, r1, r3
 8020778:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 802077c:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 8020780:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8020784:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8020788:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802078c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8020790:	681b      	ldr	r3, [r3, #0]
 8020792:	17da      	asrs	r2, r3, #31
 8020794:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 8020798:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 802079c:	4a45      	ldr	r2, [pc, #276]	; (80208b4 <arm_nn_softmax_common_s8+0x1314>)
 802079e:	f04f 0300 	mov.w	r3, #0
 80207a2:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 80207a6:	fb02 f001 	mul.w	r0, r2, r1
 80207aa:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 80207ae:	fb01 f103 	mul.w	r1, r1, r3
 80207b2:	4401      	add	r1, r0
 80207b4:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 80207b8:	fba0 2302 	umull	r2, r3, r0, r2
 80207bc:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80207c0:	4613      	mov	r3, r2
 80207c2:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 80207c6:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80207ca:	18cb      	adds	r3, r1, r3
 80207cc:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80207d0:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80207d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207d8:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 80207dc:	1851      	adds	r1, r2, r1
 80207de:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 80207e2:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 80207e6:	414b      	adcs	r3, r1
 80207e8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80207ec:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 80207f0:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80207f4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80207f8:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80207fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020800:	2b00      	cmp	r3, #0
 8020802:	da0a      	bge.n	802081a <arm_nn_softmax_common_s8+0x127a>
 8020804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020808:	1851      	adds	r1, r2, r1
 802080a:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 802080e:	f143 0300 	adc.w	r3, r3, #0
 8020812:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8020816:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 802081a:	f04f 0000 	mov.w	r0, #0
 802081e:	f04f 0100 	mov.w	r1, #0
 8020822:	0fd0      	lsrs	r0, r2, #31
 8020824:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020828:	17d9      	asrs	r1, r3, #31
 802082a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802082e:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8020832:	4603      	mov	r3, r0
 8020834:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8020836:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802083a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 802083e:	681a      	ldr	r2, [r3, #0]
 8020840:	4b1c      	ldr	r3, [pc, #112]	; (80208b4 <arm_nn_softmax_common_s8+0x1314>)
 8020842:	429a      	cmp	r2, r3
 8020844:	d10e      	bne.n	8020864 <arm_nn_softmax_common_s8+0x12c4>
 8020846:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802084a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 802084e:	681b      	ldr	r3, [r3, #0]
 8020850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8020854:	d106      	bne.n	8020864 <arm_nn_softmax_common_s8+0x12c4>
        result = NN_Q31_MAX;
 8020856:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802085a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 802085e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8020862:	6013      	str	r3, [r2, #0]
    return result;
 8020864:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020868:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 802086c:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 802086e:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8020872:	ea02 0103 	and.w	r1, r2, r3
 8020876:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 802087a:	43da      	mvns	r2, r3
 802087c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8020880:	4013      	ands	r3, r2
 8020882:	404b      	eors	r3, r1
 8020884:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 8020888:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 802088c:	1c53      	adds	r3, r2, #1
 802088e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8020892:	2301      	movs	r3, #1
 8020894:	fa03 f202 	lsl.w	r2, r3, r2
 8020898:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 802089c:	4013      	ands	r3, r2
 802089e:	2b00      	cmp	r3, #0
 80208a0:	d00a      	beq.n	80208b8 <arm_nn_softmax_common_s8+0x1318>
 80208a2:	f04f 33ff 	mov.w	r3, #4294967295
 80208a6:	e008      	b.n	80208ba <arm_nn_softmax_common_s8+0x131a>
 80208a8:	02582ab7 	.word	0x02582ab7
 80208ac:	00000000 	.word	0x00000000
 80208b0:	02582ab7 	.word	0x02582ab7
 80208b4:	000afe11 	.word	0x000afe11
 80208b8:	2300      	movs	r3, #0
 80208ba:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 80208be:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80208c2:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 80208c6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80208ca:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80208cc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80208d0:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80208d4:	2300      	movs	r3, #0
 80208d6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80208d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80208dc:	f04f 0300 	mov.w	r3, #0
 80208e0:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 80208e4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80208e8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80208ec:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80208f0:	681b      	ldr	r3, [r3, #0]
 80208f2:	f083 03f2 	eor.w	r3, r3, #242	; 0xf2
 80208f6:	0fdb      	lsrs	r3, r3, #31
 80208f8:	f003 0301 	and.w	r3, r3, #1
 80208fc:	b2db      	uxtb	r3, r3
 80208fe:	2b00      	cmp	r3, #0
 8020900:	d012      	beq.n	8020928 <arm_nn_softmax_common_s8+0x1388>
        mult = 1 - mult;
 8020902:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8020906:	e9d3 2300 	ldrd	r2, r3, [r3]
 802090a:	2100      	movs	r1, #0
 802090c:	f1d2 0001 	rsbs	r0, r2, #1
 8020910:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 8020914:	eb61 0303 	sbc.w	r3, r1, r3
 8020918:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 802091c:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 8020920:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8020924:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8020928:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802092c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8020930:	681b      	ldr	r3, [r3, #0]
 8020932:	17da      	asrs	r2, r3, #31
 8020934:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8020938:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 802093c:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8020940:	f04f 0300 	mov.w	r3, #0
 8020944:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 8020948:	fb02 f001 	mul.w	r0, r2, r1
 802094c:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 8020950:	fb01 f103 	mul.w	r1, r1, r3
 8020954:	4401      	add	r1, r0
 8020956:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 802095a:	fba0 2302 	umull	r2, r3, r0, r2
 802095e:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8020962:	4613      	mov	r3, r2
 8020964:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8020968:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 802096c:	18cb      	adds	r3, r1, r3
 802096e:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8020972:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8020976:	e9d3 2300 	ldrd	r2, r3, [r3]
 802097a:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 802097e:	1851      	adds	r1, r2, r1
 8020980:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8020984:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 8020988:	414b      	adcs	r3, r1
 802098a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 802098e:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8020992:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8020996:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802099a:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 802099e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209a2:	2b00      	cmp	r3, #0
 80209a4:	da0a      	bge.n	80209bc <arm_nn_softmax_common_s8+0x141c>
 80209a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80209aa:	1851      	adds	r1, r2, r1
 80209ac:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80209b0:	f143 0300 	adc.w	r3, r3, #0
 80209b4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80209b8:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 80209bc:	f04f 0000 	mov.w	r0, #0
 80209c0:	f04f 0100 	mov.w	r1, #0
 80209c4:	0fd0      	lsrs	r0, r2, #31
 80209c6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80209ca:	17d9      	asrs	r1, r3, #31
 80209cc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80209d0:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80209d4:	4603      	mov	r3, r0
 80209d6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80209d8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80209dc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80209e0:	681b      	ldr	r3, [r3, #0]
 80209e2:	2bf2      	cmp	r3, #242	; 0xf2
 80209e4:	d10e      	bne.n	8020a04 <arm_nn_softmax_common_s8+0x1464>
 80209e6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80209ea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80209ee:	681b      	ldr	r3, [r3, #0]
 80209f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80209f4:	d106      	bne.n	8020a04 <arm_nn_softmax_common_s8+0x1464>
        result = NN_Q31_MAX;
 80209f6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80209fa:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80209fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8020a02:	6013      	str	r3, [r2, #0]
    return result;
 8020a04:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020a08:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8020a0c:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8020a0e:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8020a12:	ea02 0103 	and.w	r1, r2, r3
 8020a16:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8020a1a:	43da      	mvns	r2, r3
 8020a1c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8020a20:	4013      	ands	r3, r2
 8020a22:	404b      	eors	r3, r1
 8020a24:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    mask = MASK_IF_ZERO(val);
 8020a28:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d102      	bne.n	8020a36 <arm_nn_softmax_common_s8+0x1496>
 8020a30:	f04f 33ff 	mov.w	r3, #4294967295
 8020a34:	e000      	b.n	8020a38 <arm_nn_softmax_common_s8+0x1498>
 8020a36:	2300      	movs	r3, #0
 8020a38:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 8020a3c:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8020a40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020a44:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8020a48:	43da      	mvns	r2, r3
 8020a4a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8020a4e:	4013      	ands	r3, r2
 8020a50:	404b      	eors	r3, r1
 8020a52:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
    q31_t result = 0;
 8020a56:	2300      	movs	r3, #0
 8020a58:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020a60:	3b01      	subs	r3, #1
 8020a62:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    int32_t remainder = remainder_mask & dividend;
 8020a66:	f8d7 2980 	ldr.w	r2, [r7, #2432]	; 0x980
 8020a6a:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8020a6e:	4013      	ands	r3, r2
 8020a70:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    result = dividend >> exponent;
 8020a74:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8020a78:	131b      	asrs	r3, r3, #12
 8020a7a:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t threshold = remainder_mask >> 1;
 8020a7e:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8020a82:	105b      	asrs	r3, r3, #1
 8020a84:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    if (result < 0)
 8020a88:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	da04      	bge.n	8020a9a <arm_nn_softmax_common_s8+0x14fa>
        threshold++;
 8020a90:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8020a94:	3301      	adds	r3, #1
 8020a96:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    if (remainder > threshold)
 8020a9a:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 8020a9e:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8020aa2:	429a      	cmp	r2, r3
 8020aa4:	dd04      	ble.n	8020ab0 <arm_nn_softmax_common_s8+0x1510>
        result++;
 8020aa6:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8020aaa:	3301      	adds	r3, #1
 8020aac:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    return result;
 8020ab0:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 8020ab4:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 8020ab8:	4413      	add	r3, r2
 8020aba:	f8c7 39a8 	str.w	r3, [r7, #2472]	; 0x9a8
        for (col = 0; col < row_size; ++col)
 8020abe:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8020ac2:	3301      	adds	r3, #1
 8020ac4:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8020ac8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020acc:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8020ad0:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8020ad4:	681b      	ldr	r3, [r3, #0]
 8020ad6:	429a      	cmp	r2, r3
 8020ad8:	f6fe adc0 	blt.w	801f65c <arm_nn_softmax_common_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8020adc:	f8d7 29a8 	ldr.w	r2, [r7, #2472]	; 0x9a8
 8020ae0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020ae4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8020ae8:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 8020aea:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020aee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8020af2:	681b      	ldr	r3, [r3, #0]
 8020af4:	2b00      	cmp	r3, #0
 8020af6:	d101      	bne.n	8020afc <arm_nn_softmax_common_s8+0x155c>
    return 32U;
 8020af8:	2320      	movs	r3, #32
 8020afa:	e007      	b.n	8020b0c <arm_nn_softmax_common_s8+0x156c>
  return __builtin_clz(value);
 8020afc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020b00:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	fab3 f383 	clz	r3, r3
 8020b0a:	b2db      	uxtb	r3, r3
 8020b0c:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
 8020b10:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	dd08      	ble.n	8020b2a <arm_nn_softmax_common_s8+0x158a>
 8020b18:	f8d7 29a8 	ldr.w	r2, [r7, #2472]	; 0x9a8
 8020b1c:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8020b20:	fa02 f303 	lsl.w	r3, r2, r3
 8020b24:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8020b28:	e001      	b.n	8020b2e <arm_nn_softmax_common_s8+0x158e>
 8020b2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020b2e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020b32:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8020b36:	601a      	str	r2, [r3, #0]
    const int64_t sum = (int64_t)val + (int64_t)NN_Q31_MAX;
 8020b38:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020b3c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8020b40:	681b      	ldr	r3, [r3, #0]
 8020b42:	17da      	asrs	r2, r3, #31
 8020b44:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8020b48:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8020b4c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8020b50:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8020b54:	4602      	mov	r2, r0
 8020b56:	18d3      	adds	r3, r2, r3
 8020b58:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8020b5c:	460b      	mov	r3, r1
 8020b5e:	f143 0300 	adc.w	r3, r3, #0
 8020b62:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020b66:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8020b6a:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8020b6e:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8020b72:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8020b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	db04      	blt.n	8020b88 <arm_nn_softmax_common_s8+0x15e8>
 8020b7e:	f04f 0001 	mov.w	r0, #1
 8020b82:	f04f 0100 	mov.w	r1, #0
 8020b86:	e003      	b.n	8020b90 <arm_nn_softmax_common_s8+0x15f0>
 8020b88:	f04f 30ff 	mov.w	r0, #4294967295
 8020b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8020b90:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8020b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b98:	1884      	adds	r4, r0, r2
 8020b9a:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 8020b9e:	eb41 0303 	adc.w	r3, r1, r3
 8020ba2:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8020ba6:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8020baa:	460b      	mov	r3, r1
 8020bac:	0fdb      	lsrs	r3, r3, #31
 8020bae:	2200      	movs	r2, #0
 8020bb0:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8020bb4:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 8020bb8:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8020bbc:	4602      	mov	r2, r0
 8020bbe:	189b      	adds	r3, r3, r2
 8020bc0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8020bc4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8020bc8:	460a      	mov	r2, r1
 8020bca:	4153      	adcs	r3, r2
 8020bcc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8020bd0:	f04f 0200 	mov.w	r2, #0
 8020bd4:	f04f 0300 	mov.w	r3, #0
 8020bd8:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 8020bdc:	084a      	lsrs	r2, r1, #1
 8020bde:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8020be2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8020be6:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8020bea:	104b      	asrs	r3, r1, #1
 8020bec:	4610      	mov	r0, r2
 8020bee:	4619      	mov	r1, r3
 8020bf0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020bf4:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8020bf8:	4603      	mov	r3, r0
 8020bfa:	6013      	str	r3, [r2, #0]
 8020bfc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020c00:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8020c04:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020c08:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8020c0c:	681b      	ldr	r3, [r3, #0]
 8020c0e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8020c10:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020c14:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 8020c18:	2300      	movs	r3, #0
 8020c1a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8020c1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020c20:	f04f 0300 	mov.w	r3, #0
 8020c24:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8020c28:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8020c2c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020c30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8020c34:	681a      	ldr	r2, [r3, #0]
 8020c36:	4bdc      	ldr	r3, [pc, #880]	; (8020fa8 <arm_nn_softmax_common_s8+0x1a08>)
 8020c38:	4053      	eors	r3, r2
 8020c3a:	0fdb      	lsrs	r3, r3, #31
 8020c3c:	f003 0301 	and.w	r3, r3, #1
 8020c40:	b2db      	uxtb	r3, r3
 8020c42:	2b00      	cmp	r3, #0
 8020c44:	d012      	beq.n	8020c6c <arm_nn_softmax_common_s8+0x16cc>
        mult = 1 - mult;
 8020c46:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8020c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c4e:	2100      	movs	r1, #0
 8020c50:	f1d2 0001 	rsbs	r0, r2, #1
 8020c54:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 8020c58:	eb61 0303 	sbc.w	r3, r1, r3
 8020c5c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8020c60:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8020c64:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8020c68:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8020c6c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020c70:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8020c74:	681b      	ldr	r3, [r3, #0]
 8020c76:	17da      	asrs	r2, r3, #31
 8020c78:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8020c7c:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 8020c80:	a3c7      	add	r3, pc, #796	; (adr r3, 8020fa0 <arm_nn_softmax_common_s8+0x1a00>)
 8020c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c86:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8020c8a:	fb02 f001 	mul.w	r0, r2, r1
 8020c8e:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8020c92:	fb01 f103 	mul.w	r1, r1, r3
 8020c96:	4401      	add	r1, r0
 8020c98:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8020c9c:	fba0 2302 	umull	r2, r3, r0, r2
 8020ca0:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8020ca4:	4613      	mov	r3, r2
 8020ca6:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 8020caa:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8020cae:	18cb      	adds	r3, r1, r3
 8020cb0:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8020cb4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8020cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cbc:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 8020cc0:	1851      	adds	r1, r2, r1
 8020cc2:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8020cc6:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8020cca:	414b      	adcs	r3, r1
 8020ccc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020cd0:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8020cd4:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8020cd8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8020cdc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8020ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ce4:	2b00      	cmp	r3, #0
 8020ce6:	da0a      	bge.n	8020cfe <arm_nn_softmax_common_s8+0x175e>
 8020ce8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020cec:	1851      	adds	r1, r2, r1
 8020cee:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8020cf2:	f143 0300 	adc.w	r3, r3, #0
 8020cf6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8020cfa:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8020cfe:	f04f 0000 	mov.w	r0, #0
 8020d02:	f04f 0100 	mov.w	r1, #0
 8020d06:	0fd0      	lsrs	r0, r2, #31
 8020d08:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020d0c:	17d9      	asrs	r1, r3, #31
 8020d0e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d12:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 8020d16:	4603      	mov	r3, r0
 8020d18:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8020d1a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d1e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8020d22:	681b      	ldr	r3, [r3, #0]
 8020d24:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8020d28:	d10e      	bne.n	8020d48 <arm_nn_softmax_common_s8+0x17a8>
 8020d2a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d2e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8020d32:	681b      	ldr	r3, [r3, #0]
 8020d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8020d38:	d106      	bne.n	8020d48 <arm_nn_softmax_common_s8+0x17a8>
        result = NN_Q31_MAX;
 8020d3a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d3e:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 8020d42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8020d46:	6013      	str	r3, [r2, #0]
    return result;
 8020d48:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d4c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8020d50:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8020d52:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d56:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8020d5a:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 8020d5e:	6013      	str	r3, [r2, #0]
    const int32_t shift = (1 << 29);
 8020d60:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d64:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8020d68:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8020d6c:	6013      	str	r3, [r2, #0]
 8020d6e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d72:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8020d76:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8020d7e:	681b      	ldr	r3, [r3, #0]
 8020d80:	6013      	str	r3, [r2, #0]
 8020d82:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d86:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8020d8a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d8e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8020d92:	681b      	ldr	r3, [r3, #0]
 8020d94:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8020d96:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020d9a:	f5a3 72da 	sub.w	r2, r3, #436	; 0x1b4
 8020d9e:	2300      	movs	r3, #0
 8020da0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8020da2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020da6:	f04f 0300 	mov.w	r3, #0
 8020daa:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8020dae:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8020db2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020db6:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8020dba:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020dbe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8020dc2:	6812      	ldr	r2, [r2, #0]
 8020dc4:	681b      	ldr	r3, [r3, #0]
 8020dc6:	4053      	eors	r3, r2
 8020dc8:	0fdb      	lsrs	r3, r3, #31
 8020dca:	f003 0301 	and.w	r3, r3, #1
 8020dce:	b2db      	uxtb	r3, r3
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	d012      	beq.n	8020dfa <arm_nn_softmax_common_s8+0x185a>
        mult = 1 - mult;
 8020dd4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8020dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ddc:	2100      	movs	r1, #0
 8020dde:	f1d2 0001 	rsbs	r0, r2, #1
 8020de2:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 8020de6:	eb61 0303 	sbc.w	r3, r1, r3
 8020dea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8020dee:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8020df2:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8020df6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8020dfa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020dfe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8020e02:	681b      	ldr	r3, [r3, #0]
 8020e04:	17da      	asrs	r2, r3, #31
 8020e06:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8020e0a:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 8020e0e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020e12:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8020e16:	681b      	ldr	r3, [r3, #0]
 8020e18:	17da      	asrs	r2, r3, #31
 8020e1a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8020e1e:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 8020e22:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8020e26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020e2a:	460b      	mov	r3, r1
 8020e2c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8020e30:	fb02 f203 	mul.w	r2, r2, r3
 8020e34:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8020e38:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8020e3c:	e9c4 0100 	strd	r0, r1, [r4]
 8020e40:	4601      	mov	r1, r0
 8020e42:	fb01 f303 	mul.w	r3, r1, r3
 8020e46:	4413      	add	r3, r2
 8020e48:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8020e4c:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8020e50:	fba2 1201 	umull	r1, r2, r2, r1
 8020e54:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 8020e58:	460a      	mov	r2, r1
 8020e5a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8020e5e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8020e62:	4413      	add	r3, r2
 8020e64:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8020e68:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8020e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e70:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8020e74:	1851      	adds	r1, r2, r1
 8020e76:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8020e7a:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8020e7e:	414b      	adcs	r3, r1
 8020e80:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8020e84:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8020e88:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8020e8c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8020e90:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8020e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e98:	2b00      	cmp	r3, #0
 8020e9a:	da0a      	bge.n	8020eb2 <arm_nn_softmax_common_s8+0x1912>
 8020e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020ea0:	1851      	adds	r1, r2, r1
 8020ea2:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8020ea6:	f143 0300 	adc.w	r3, r3, #0
 8020eaa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8020eae:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020eb2:	f04f 0000 	mov.w	r0, #0
 8020eb6:	f04f 0100 	mov.w	r1, #0
 8020eba:	0fd0      	lsrs	r0, r2, #31
 8020ebc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020ec0:	17d9      	asrs	r1, r3, #31
 8020ec2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020ec6:	f5a3 72da 	sub.w	r2, r3, #436	; 0x1b4
 8020eca:	4603      	mov	r3, r0
 8020ecc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8020ece:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020ed2:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8020ed6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020eda:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8020ede:	6812      	ldr	r2, [r2, #0]
 8020ee0:	681b      	ldr	r3, [r3, #0]
 8020ee2:	429a      	cmp	r2, r3
 8020ee4:	d10e      	bne.n	8020f04 <arm_nn_softmax_common_s8+0x1964>
 8020ee6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020eea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8020eee:	681b      	ldr	r3, [r3, #0]
 8020ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8020ef4:	d106      	bne.n	8020f04 <arm_nn_softmax_common_s8+0x1964>
        result = NN_Q31_MAX;
 8020ef6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020efa:	f5a3 72da 	sub.w	r2, r3, #436	; 0x1b4
 8020efe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8020f02:	6013      	str	r3, [r2, #0]
    return result;
 8020f04:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020f08:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8020f0c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8020f0e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020f12:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8020f16:	681b      	ldr	r3, [r3, #0]
 8020f18:	1a99      	subs	r1, r3, r2
 8020f1a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020f1e:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8020f22:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020f26:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8020f2a:	681b      	ldr	r3, [r3, #0]
 8020f2c:	6013      	str	r3, [r2, #0]
 8020f2e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020f32:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8020f36:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8020f38:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020f3c:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 8020f40:	2300      	movs	r3, #0
 8020f42:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8020f44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020f48:	f04f 0300 	mov.w	r3, #0
 8020f4c:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8020f50:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8020f54:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020f58:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8020f5c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020f60:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8020f64:	6812      	ldr	r2, [r2, #0]
 8020f66:	681b      	ldr	r3, [r3, #0]
 8020f68:	4053      	eors	r3, r2
 8020f6a:	0fdb      	lsrs	r3, r3, #31
 8020f6c:	f003 0301 	and.w	r3, r3, #1
 8020f70:	b2db      	uxtb	r3, r3
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	d01a      	beq.n	8020fac <arm_nn_softmax_common_s8+0x1a0c>
        mult = 1 - mult;
 8020f76:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8020f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f7e:	2100      	movs	r1, #0
 8020f80:	f1d2 0001 	rsbs	r0, r2, #1
 8020f84:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 8020f88:	eb61 0303 	sbc.w	r3, r1, r3
 8020f8c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8020f90:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8020f94:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8020f98:	e9c2 3400 	strd	r3, r4, [r2]
 8020f9c:	e006      	b.n	8020fac <arm_nn_softmax_common_s8+0x1a0c>
 8020f9e:	bf00      	nop
 8020fa0:	c3c3c3c4 	.word	0xc3c3c3c4
 8020fa4:	ffffffff 	.word	0xffffffff
 8020fa8:	c3c3c3c4 	.word	0xc3c3c3c4
    mult = mult + (q63_t)m1 * m2;
 8020fac:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020fb0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8020fb4:	681b      	ldr	r3, [r3, #0]
 8020fb6:	17da      	asrs	r2, r3, #31
 8020fb8:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8020fbc:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 8020fc0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8020fc4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8020fc8:	681b      	ldr	r3, [r3, #0]
 8020fca:	17da      	asrs	r2, r3, #31
 8020fcc:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8020fd0:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 8020fd4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8020fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020fdc:	460b      	mov	r3, r1
 8020fde:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8020fe2:	fb02 f203 	mul.w	r2, r2, r3
 8020fe6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8020fea:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 8020fee:	e9c4 0100 	strd	r0, r1, [r4]
 8020ff2:	4601      	mov	r1, r0
 8020ff4:	fb01 f303 	mul.w	r3, r1, r3
 8020ff8:	4413      	add	r3, r2
 8020ffa:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8020ffe:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 8021002:	fba2 1201 	umull	r1, r2, r2, r1
 8021006:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 802100a:	460a      	mov	r2, r1
 802100c:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 8021010:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8021014:	4413      	add	r3, r2
 8021016:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 802101a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021022:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8021026:	1851      	adds	r1, r2, r1
 8021028:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 802102c:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8021030:	414b      	adcs	r3, r1
 8021032:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8021036:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 802103a:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802103e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021042:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8021046:	e9d3 2300 	ldrd	r2, r3, [r3]
 802104a:	2b00      	cmp	r3, #0
 802104c:	da0a      	bge.n	8021064 <arm_nn_softmax_common_s8+0x1ac4>
 802104e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021052:	1851      	adds	r1, r2, r1
 8021054:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8021058:	f143 0300 	adc.w	r3, r3, #0
 802105c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8021060:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8021064:	f04f 0000 	mov.w	r0, #0
 8021068:	f04f 0100 	mov.w	r1, #0
 802106c:	0fd0      	lsrs	r0, r2, #31
 802106e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021072:	17d9      	asrs	r1, r3, #31
 8021074:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021078:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 802107c:	4603      	mov	r3, r0
 802107e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8021080:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021084:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8021088:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802108c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8021090:	6812      	ldr	r2, [r2, #0]
 8021092:	681b      	ldr	r3, [r3, #0]
 8021094:	429a      	cmp	r2, r3
 8021096:	d10e      	bne.n	80210b6 <arm_nn_softmax_common_s8+0x1b16>
 8021098:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802109c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80210a0:	681b      	ldr	r3, [r3, #0]
 80210a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80210a6:	d106      	bne.n	80210b6 <arm_nn_softmax_common_s8+0x1b16>
        result = NN_Q31_MAX;
 80210a8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80210ac:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 80210b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80210b4:	6013      	str	r3, [r2, #0]
    return result;
 80210b6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80210ba:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80210be:	681a      	ldr	r2, [r3, #0]
 80210c0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80210c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80210c8:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80210ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80210ce:	4619      	mov	r1, r3
 80210d0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80210d4:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 80210d8:	1e4b      	subs	r3, r1, #1
 80210da:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80210dc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80210e0:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 80210e4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80210e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80210ec:	681b      	ldr	r3, [r3, #0]
 80210ee:	009b      	lsls	r3, r3, #2
 80210f0:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 80210f2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80210f6:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80210fa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80210fe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8021102:	6812      	ldr	r2, [r2, #0]
 8021104:	681b      	ldr	r3, [r3, #0]
 8021106:	429a      	cmp	r2, r3
 8021108:	dd02      	ble.n	8021110 <arm_nn_softmax_common_s8+0x1b70>
 802110a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802110e:	e000      	b.n	8021112 <arm_nn_softmax_common_s8+0x1b72>
 8021110:	2000      	movs	r0, #0
 8021112:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021116:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 802111a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802111e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8021122:	6812      	ldr	r2, [r2, #0]
 8021124:	681b      	ldr	r3, [r3, #0]
 8021126:	429a      	cmp	r2, r3
 8021128:	dd01      	ble.n	802112e <arm_nn_softmax_common_s8+0x1b8e>
 802112a:	2200      	movs	r2, #0
 802112c:	e001      	b.n	8021132 <arm_nn_softmax_common_s8+0x1b92>
 802112e:	f04f 32ff 	mov.w	r2, #4294967295
 8021132:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021136:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 802113a:	681b      	ldr	r3, [r3, #0]
 802113c:	ea02 0103 	and.w	r1, r2, r3
 8021140:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021144:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 8021148:	ea81 0300 	eor.w	r3, r1, r0
 802114c:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 802114e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021152:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8021156:	681b      	ldr	r3, [r3, #0]
 8021158:	425a      	negs	r2, r3
 802115a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802115e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8021162:	681b      	ldr	r3, [r3, #0]
 8021164:	4293      	cmp	r3, r2
 8021166:	da02      	bge.n	802116e <arm_nn_softmax_common_s8+0x1bce>
 8021168:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 802116c:	e000      	b.n	8021170 <arm_nn_softmax_common_s8+0x1bd0>
 802116e:	2000      	movs	r0, #0
 8021170:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021174:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8021178:	681b      	ldr	r3, [r3, #0]
 802117a:	425a      	negs	r2, r3
 802117c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021180:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	4293      	cmp	r3, r2
 8021188:	da01      	bge.n	802118e <arm_nn_softmax_common_s8+0x1bee>
 802118a:	2200      	movs	r2, #0
 802118c:	e001      	b.n	8021192 <arm_nn_softmax_common_s8+0x1bf2>
 802118e:	f04f 32ff 	mov.w	r2, #4294967295
 8021192:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021196:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 802119a:	681b      	ldr	r3, [r3, #0]
 802119c:	ea02 0103 	and.w	r1, r2, r3
 80211a0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80211a4:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 80211a8:	ea81 0300 	eor.w	r3, r1, r0
 80211ac:	6013      	str	r3, [r2, #0]
    return result;
 80211ae:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80211b2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80211b6:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80211b8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80211bc:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80211c0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80211c4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80211c8:	681b      	ldr	r3, [r3, #0]
 80211ca:	440b      	add	r3, r1
 80211cc:	6013      	str	r3, [r2, #0]
 80211ce:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80211d2:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80211d6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80211da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80211de:	681b      	ldr	r3, [r3, #0]
 80211e0:	6013      	str	r3, [r2, #0]
 80211e2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80211e6:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 80211ea:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80211ee:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80211f2:	681b      	ldr	r3, [r3, #0]
 80211f4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80211f6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80211fa:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 80211fe:	2300      	movs	r3, #0
 8021200:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021206:	f04f 0300 	mov.w	r3, #0
 802120a:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 802120e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021212:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021216:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 802121a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802121e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8021222:	6812      	ldr	r2, [r2, #0]
 8021224:	681b      	ldr	r3, [r3, #0]
 8021226:	4053      	eors	r3, r2
 8021228:	0fdb      	lsrs	r3, r3, #31
 802122a:	f003 0301 	and.w	r3, r3, #1
 802122e:	b2db      	uxtb	r3, r3
 8021230:	2b00      	cmp	r3, #0
 8021232:	d012      	beq.n	802125a <arm_nn_softmax_common_s8+0x1cba>
        mult = 1 - mult;
 8021234:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8021238:	e9d3 2300 	ldrd	r2, r3, [r3]
 802123c:	2100      	movs	r1, #0
 802123e:	f1d2 0001 	rsbs	r0, r2, #1
 8021242:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8021246:	eb61 0303 	sbc.w	r3, r1, r3
 802124a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 802124e:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8021252:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8021256:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802125a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802125e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8021262:	681b      	ldr	r3, [r3, #0]
 8021264:	17da      	asrs	r2, r3, #31
 8021266:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 802126a:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 802126e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021272:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	17da      	asrs	r2, r3, #31
 802127a:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 802127e:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 8021282:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021286:	e9d3 0100 	ldrd	r0, r1, [r3]
 802128a:	460b      	mov	r3, r1
 802128c:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8021290:	fb02 f203 	mul.w	r2, r2, r3
 8021294:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8021298:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 802129c:	e9c4 0100 	strd	r0, r1, [r4]
 80212a0:	4601      	mov	r1, r0
 80212a2:	fb01 f303 	mul.w	r3, r1, r3
 80212a6:	4413      	add	r3, r2
 80212a8:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80212ac:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 80212b0:	fba2 1201 	umull	r1, r2, r2, r1
 80212b4:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 80212b8:	460a      	mov	r2, r1
 80212ba:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 80212be:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80212c2:	4413      	add	r3, r2
 80212c4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80212c8:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80212cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212d0:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 80212d4:	1851      	adds	r1, r2, r1
 80212d6:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 80212da:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80212de:	414b      	adcs	r3, r1
 80212e0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80212e4:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 80212e8:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80212ec:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80212f0:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80212f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	da0a      	bge.n	8021312 <arm_nn_softmax_common_s8+0x1d72>
 80212fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021300:	1851      	adds	r1, r2, r1
 8021302:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8021306:	f143 0300 	adc.w	r3, r3, #0
 802130a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 802130e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8021312:	f04f 0000 	mov.w	r0, #0
 8021316:	f04f 0100 	mov.w	r1, #0
 802131a:	0fd0      	lsrs	r0, r2, #31
 802131c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021320:	17d9      	asrs	r1, r3, #31
 8021322:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021326:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 802132a:	4603      	mov	r3, r0
 802132c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802132e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021332:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8021336:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802133a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 802133e:	6812      	ldr	r2, [r2, #0]
 8021340:	681b      	ldr	r3, [r3, #0]
 8021342:	429a      	cmp	r2, r3
 8021344:	d10e      	bne.n	8021364 <arm_nn_softmax_common_s8+0x1dc4>
 8021346:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802134a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 802134e:	681b      	ldr	r3, [r3, #0]
 8021350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021354:	d106      	bne.n	8021364 <arm_nn_softmax_common_s8+0x1dc4>
        result = NN_Q31_MAX;
 8021356:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802135a:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 802135e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021362:	6013      	str	r3, [r2, #0]
    return result;
 8021364:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021368:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 802136c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 802136e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021372:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	1a99      	subs	r1, r3, r2
 802137a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802137e:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8021382:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021386:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	6013      	str	r3, [r2, #0]
 802138e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021392:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8021396:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8021398:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802139c:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80213a0:	2300      	movs	r3, #0
 80213a2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80213a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80213a8:	f04f 0300 	mov.w	r3, #0
 80213ac:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 80213b0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80213b4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80213b8:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80213bc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80213c0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80213c4:	6812      	ldr	r2, [r2, #0]
 80213c6:	681b      	ldr	r3, [r3, #0]
 80213c8:	4053      	eors	r3, r2
 80213ca:	0fdb      	lsrs	r3, r3, #31
 80213cc:	f003 0301 	and.w	r3, r3, #1
 80213d0:	b2db      	uxtb	r3, r3
 80213d2:	2b00      	cmp	r3, #0
 80213d4:	d012      	beq.n	80213fc <arm_nn_softmax_common_s8+0x1e5c>
        mult = 1 - mult;
 80213d6:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80213da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213de:	2100      	movs	r1, #0
 80213e0:	f1d2 0001 	rsbs	r0, r2, #1
 80213e4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 80213e8:	eb61 0303 	sbc.w	r3, r1, r3
 80213ec:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80213f0:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 80213f4:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 80213f8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80213fc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021400:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8021404:	681b      	ldr	r3, [r3, #0]
 8021406:	17da      	asrs	r2, r3, #31
 8021408:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 802140c:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 8021410:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021414:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8021418:	681b      	ldr	r3, [r3, #0]
 802141a:	17da      	asrs	r2, r3, #31
 802141c:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8021420:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 8021424:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8021428:	e9d3 0100 	ldrd	r0, r1, [r3]
 802142c:	460b      	mov	r3, r1
 802142e:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8021432:	fb02 f203 	mul.w	r2, r2, r3
 8021436:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 802143a:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 802143e:	e9c4 0100 	strd	r0, r1, [r4]
 8021442:	4601      	mov	r1, r0
 8021444:	fb01 f303 	mul.w	r3, r1, r3
 8021448:	4413      	add	r3, r2
 802144a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 802144e:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8021452:	fba2 1201 	umull	r1, r2, r2, r1
 8021456:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 802145a:	460a      	mov	r2, r1
 802145c:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 8021460:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8021464:	4413      	add	r3, r2
 8021466:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 802146a:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 802146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021472:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8021476:	1851      	adds	r1, r2, r1
 8021478:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 802147c:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8021480:	414b      	adcs	r3, r1
 8021482:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8021486:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 802148a:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 802148e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021492:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8021496:	e9d3 2300 	ldrd	r2, r3, [r3]
 802149a:	2b00      	cmp	r3, #0
 802149c:	da0a      	bge.n	80214b4 <arm_nn_softmax_common_s8+0x1f14>
 802149e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80214a2:	1851      	adds	r1, r2, r1
 80214a4:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 80214a8:	f143 0300 	adc.w	r3, r3, #0
 80214ac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80214b0:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80214b4:	f04f 0000 	mov.w	r0, #0
 80214b8:	f04f 0100 	mov.w	r1, #0
 80214bc:	0fd0      	lsrs	r0, r2, #31
 80214be:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80214c2:	17d9      	asrs	r1, r3, #31
 80214c4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80214c8:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80214cc:	4603      	mov	r3, r0
 80214ce:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80214d0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80214d4:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80214d8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80214dc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80214e0:	6812      	ldr	r2, [r2, #0]
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	429a      	cmp	r2, r3
 80214e6:	d10e      	bne.n	8021506 <arm_nn_softmax_common_s8+0x1f66>
 80214e8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80214ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80214f0:	681b      	ldr	r3, [r3, #0]
 80214f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80214f6:	d106      	bne.n	8021506 <arm_nn_softmax_common_s8+0x1f66>
        result = NN_Q31_MAX;
 80214f8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80214fc:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8021500:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021504:	6013      	str	r3, [r2, #0]
    return result;
 8021506:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802150a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 802150e:	681a      	ldr	r2, [r3, #0]
 8021510:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021514:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8021518:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 802151a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 802151e:	4619      	mov	r1, r3
 8021520:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021524:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8021528:	1e4b      	subs	r3, r1, #1
 802152a:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 802152c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021530:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8021534:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021538:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 802153c:	681b      	ldr	r3, [r3, #0]
 802153e:	009b      	lsls	r3, r3, #2
 8021540:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 8021542:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021546:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 802154a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802154e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8021552:	6812      	ldr	r2, [r2, #0]
 8021554:	681b      	ldr	r3, [r3, #0]
 8021556:	429a      	cmp	r2, r3
 8021558:	dd02      	ble.n	8021560 <arm_nn_softmax_common_s8+0x1fc0>
 802155a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802155e:	e000      	b.n	8021562 <arm_nn_softmax_common_s8+0x1fc2>
 8021560:	2000      	movs	r0, #0
 8021562:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021566:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 802156a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802156e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8021572:	6812      	ldr	r2, [r2, #0]
 8021574:	681b      	ldr	r3, [r3, #0]
 8021576:	429a      	cmp	r2, r3
 8021578:	dd01      	ble.n	802157e <arm_nn_softmax_common_s8+0x1fde>
 802157a:	2200      	movs	r2, #0
 802157c:	e001      	b.n	8021582 <arm_nn_softmax_common_s8+0x1fe2>
 802157e:	f04f 32ff 	mov.w	r2, #4294967295
 8021582:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021586:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 802158a:	681b      	ldr	r3, [r3, #0]
 802158c:	ea02 0103 	and.w	r1, r2, r3
 8021590:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021594:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8021598:	ea81 0300 	eor.w	r3, r1, r0
 802159c:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 802159e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80215a2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80215a6:	681b      	ldr	r3, [r3, #0]
 80215a8:	425a      	negs	r2, r3
 80215aa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80215ae:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80215b2:	681b      	ldr	r3, [r3, #0]
 80215b4:	4293      	cmp	r3, r2
 80215b6:	da02      	bge.n	80215be <arm_nn_softmax_common_s8+0x201e>
 80215b8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80215bc:	e000      	b.n	80215c0 <arm_nn_softmax_common_s8+0x2020>
 80215be:	2000      	movs	r0, #0
 80215c0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80215c4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80215c8:	681b      	ldr	r3, [r3, #0]
 80215ca:	425a      	negs	r2, r3
 80215cc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80215d0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80215d4:	681b      	ldr	r3, [r3, #0]
 80215d6:	4293      	cmp	r3, r2
 80215d8:	da01      	bge.n	80215de <arm_nn_softmax_common_s8+0x203e>
 80215da:	2200      	movs	r2, #0
 80215dc:	e001      	b.n	80215e2 <arm_nn_softmax_common_s8+0x2042>
 80215de:	f04f 32ff 	mov.w	r2, #4294967295
 80215e2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80215e6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80215ea:	681b      	ldr	r3, [r3, #0]
 80215ec:	ea02 0103 	and.w	r1, r2, r3
 80215f0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80215f4:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 80215f8:	ea81 0300 	eor.w	r3, r1, r0
 80215fc:	6013      	str	r3, [r2, #0]
    return result;
 80215fe:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021602:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8021606:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8021608:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802160c:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8021610:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021614:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8021618:	681b      	ldr	r3, [r3, #0]
 802161a:	440b      	add	r3, r1
 802161c:	6013      	str	r3, [r2, #0]
 802161e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021622:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8021626:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802162a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 802162e:	681b      	ldr	r3, [r3, #0]
 8021630:	6013      	str	r3, [r2, #0]
 8021632:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021636:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 802163a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802163e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8021642:	681b      	ldr	r3, [r3, #0]
 8021644:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021646:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802164a:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 802164e:	2300      	movs	r3, #0
 8021650:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021656:	f04f 0300 	mov.w	r3, #0
 802165a:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 802165e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021662:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021666:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 802166a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802166e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8021672:	6812      	ldr	r2, [r2, #0]
 8021674:	681b      	ldr	r3, [r3, #0]
 8021676:	4053      	eors	r3, r2
 8021678:	0fdb      	lsrs	r3, r3, #31
 802167a:	f003 0301 	and.w	r3, r3, #1
 802167e:	b2db      	uxtb	r3, r3
 8021680:	2b00      	cmp	r3, #0
 8021682:	d012      	beq.n	80216aa <arm_nn_softmax_common_s8+0x210a>
        mult = 1 - mult;
 8021684:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8021688:	e9d3 2300 	ldrd	r2, r3, [r3]
 802168c:	2100      	movs	r1, #0
 802168e:	f1d2 0001 	rsbs	r0, r2, #1
 8021692:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8021696:	eb61 0303 	sbc.w	r3, r1, r3
 802169a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 802169e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80216a2:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 80216a6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80216aa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80216ae:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80216b2:	681b      	ldr	r3, [r3, #0]
 80216b4:	17da      	asrs	r2, r3, #31
 80216b6:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80216ba:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 80216be:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80216c2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80216c6:	681b      	ldr	r3, [r3, #0]
 80216c8:	17da      	asrs	r2, r3, #31
 80216ca:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 80216ce:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 80216d2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80216d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80216da:	460b      	mov	r3, r1
 80216dc:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 80216e0:	fb02 f203 	mul.w	r2, r2, r3
 80216e4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80216e8:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 80216ec:	e9c4 0100 	strd	r0, r1, [r4]
 80216f0:	4601      	mov	r1, r0
 80216f2:	fb01 f303 	mul.w	r3, r1, r3
 80216f6:	4413      	add	r3, r2
 80216f8:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80216fc:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8021700:	fba2 1201 	umull	r1, r2, r2, r1
 8021704:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8021708:	460a      	mov	r2, r1
 802170a:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 802170e:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8021712:	4413      	add	r3, r2
 8021714:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8021718:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 802171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021720:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8021724:	1851      	adds	r1, r2, r1
 8021726:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 802172a:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 802172e:	414b      	adcs	r3, r1
 8021730:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8021734:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8021738:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 802173c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021740:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8021744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021748:	2b00      	cmp	r3, #0
 802174a:	da0a      	bge.n	8021762 <arm_nn_softmax_common_s8+0x21c2>
 802174c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021750:	1851      	adds	r1, r2, r1
 8021752:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8021756:	f143 0300 	adc.w	r3, r3, #0
 802175a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 802175e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8021762:	f04f 0000 	mov.w	r0, #0
 8021766:	f04f 0100 	mov.w	r1, #0
 802176a:	0fd0      	lsrs	r0, r2, #31
 802176c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021770:	17d9      	asrs	r1, r3, #31
 8021772:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021776:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 802177a:	4603      	mov	r3, r0
 802177c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802177e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021782:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8021786:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802178a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 802178e:	6812      	ldr	r2, [r2, #0]
 8021790:	681b      	ldr	r3, [r3, #0]
 8021792:	429a      	cmp	r2, r3
 8021794:	d10e      	bne.n	80217b4 <arm_nn_softmax_common_s8+0x2214>
 8021796:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802179a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 802179e:	681b      	ldr	r3, [r3, #0]
 80217a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80217a4:	d106      	bne.n	80217b4 <arm_nn_softmax_common_s8+0x2214>
        result = NN_Q31_MAX;
 80217a6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80217aa:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 80217ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80217b2:	6013      	str	r3, [r2, #0]
    return result;
 80217b4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80217b8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80217bc:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80217be:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80217c2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80217c6:	681b      	ldr	r3, [r3, #0]
 80217c8:	1a99      	subs	r1, r3, r2
 80217ca:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80217ce:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 80217d2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80217d6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80217da:	681b      	ldr	r3, [r3, #0]
 80217dc:	6013      	str	r3, [r2, #0]
 80217de:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80217e2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80217e6:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80217e8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80217ec:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 80217f0:	2300      	movs	r3, #0
 80217f2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80217f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80217f8:	f04f 0300 	mov.w	r3, #0
 80217fc:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8021800:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021804:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021808:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 802180c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021810:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8021814:	6812      	ldr	r2, [r2, #0]
 8021816:	681b      	ldr	r3, [r3, #0]
 8021818:	4053      	eors	r3, r2
 802181a:	0fdb      	lsrs	r3, r3, #31
 802181c:	f003 0301 	and.w	r3, r3, #1
 8021820:	b2db      	uxtb	r3, r3
 8021822:	2b00      	cmp	r3, #0
 8021824:	d012      	beq.n	802184c <arm_nn_softmax_common_s8+0x22ac>
        mult = 1 - mult;
 8021826:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802182e:	2100      	movs	r1, #0
 8021830:	f1d2 0001 	rsbs	r0, r2, #1
 8021834:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 8021838:	eb61 0303 	sbc.w	r3, r1, r3
 802183c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8021840:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8021844:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8021848:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802184c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021850:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8021854:	681b      	ldr	r3, [r3, #0]
 8021856:	17da      	asrs	r2, r3, #31
 8021858:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 802185c:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 8021860:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021864:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8021868:	681b      	ldr	r3, [r3, #0]
 802186a:	17da      	asrs	r2, r3, #31
 802186c:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8021870:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8021874:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8021878:	460b      	mov	r3, r1
 802187a:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 802187e:	fb02 f203 	mul.w	r2, r2, r3
 8021882:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8021886:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 802188a:	4601      	mov	r1, r0
 802188c:	fb01 f303 	mul.w	r3, r1, r3
 8021890:	4413      	add	r3, r2
 8021892:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8021896:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 802189a:	fba2 1201 	umull	r1, r2, r2, r1
 802189e:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 80218a2:	460a      	mov	r2, r1
 80218a4:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 80218a8:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 80218ac:	4413      	add	r3, r2
 80218ae:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 80218b2:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80218b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218ba:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 80218be:	1851      	adds	r1, r2, r1
 80218c0:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80218c4:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 80218c8:	414b      	adcs	r3, r1
 80218ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80218ce:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 80218d2:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 80218d6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80218da:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80218de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218e2:	2b00      	cmp	r3, #0
 80218e4:	da0a      	bge.n	80218fc <arm_nn_softmax_common_s8+0x235c>
 80218e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80218ea:	1851      	adds	r1, r2, r1
 80218ec:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80218f0:	f143 0300 	adc.w	r3, r3, #0
 80218f4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80218f8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80218fc:	f04f 0000 	mov.w	r0, #0
 8021900:	f04f 0100 	mov.w	r1, #0
 8021904:	0fd0      	lsrs	r0, r2, #31
 8021906:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802190a:	17d9      	asrs	r1, r3, #31
 802190c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021910:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 8021914:	4603      	mov	r3, r0
 8021916:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8021918:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802191c:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8021920:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021924:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8021928:	6812      	ldr	r2, [r2, #0]
 802192a:	681b      	ldr	r3, [r3, #0]
 802192c:	429a      	cmp	r2, r3
 802192e:	d10e      	bne.n	802194e <arm_nn_softmax_common_s8+0x23ae>
 8021930:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021934:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8021938:	681b      	ldr	r3, [r3, #0]
 802193a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802193e:	d106      	bne.n	802194e <arm_nn_softmax_common_s8+0x23ae>
        result = NN_Q31_MAX;
 8021940:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021944:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 8021948:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802194c:	6013      	str	r3, [r2, #0]
    return result;
 802194e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021952:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8021956:	681a      	ldr	r2, [r3, #0]
 8021958:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802195c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8021960:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8021962:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8021966:	4619      	mov	r1, r3
 8021968:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802196c:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8021970:	1e4b      	subs	r3, r1, #1
 8021972:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8021974:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021978:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 802197c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021980:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8021984:	681b      	ldr	r3, [r3, #0]
 8021986:	009b      	lsls	r3, r3, #2
 8021988:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 802198a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802198e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8021992:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021996:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 802199a:	6812      	ldr	r2, [r2, #0]
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	429a      	cmp	r2, r3
 80219a0:	dd02      	ble.n	80219a8 <arm_nn_softmax_common_s8+0x2408>
 80219a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80219a6:	e000      	b.n	80219aa <arm_nn_softmax_common_s8+0x240a>
 80219a8:	2000      	movs	r0, #0
 80219aa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80219ae:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 80219b2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80219b6:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80219ba:	6812      	ldr	r2, [r2, #0]
 80219bc:	681b      	ldr	r3, [r3, #0]
 80219be:	429a      	cmp	r2, r3
 80219c0:	dd01      	ble.n	80219c6 <arm_nn_softmax_common_s8+0x2426>
 80219c2:	2200      	movs	r2, #0
 80219c4:	e001      	b.n	80219ca <arm_nn_softmax_common_s8+0x242a>
 80219c6:	f04f 32ff 	mov.w	r2, #4294967295
 80219ca:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80219ce:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80219d2:	681b      	ldr	r3, [r3, #0]
 80219d4:	ea02 0103 	and.w	r1, r2, r3
 80219d8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80219dc:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 80219e0:	ea81 0300 	eor.w	r3, r1, r0
 80219e4:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 80219e6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80219ea:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80219ee:	681b      	ldr	r3, [r3, #0]
 80219f0:	425a      	negs	r2, r3
 80219f2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80219f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80219fa:	681b      	ldr	r3, [r3, #0]
 80219fc:	4293      	cmp	r3, r2
 80219fe:	da02      	bge.n	8021a06 <arm_nn_softmax_common_s8+0x2466>
 8021a00:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8021a04:	e000      	b.n	8021a08 <arm_nn_softmax_common_s8+0x2468>
 8021a06:	2000      	movs	r0, #0
 8021a08:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a0c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8021a10:	681b      	ldr	r3, [r3, #0]
 8021a12:	425a      	negs	r2, r3
 8021a14:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8021a1c:	681b      	ldr	r3, [r3, #0]
 8021a1e:	4293      	cmp	r3, r2
 8021a20:	da01      	bge.n	8021a26 <arm_nn_softmax_common_s8+0x2486>
 8021a22:	2200      	movs	r2, #0
 8021a24:	e001      	b.n	8021a2a <arm_nn_softmax_common_s8+0x248a>
 8021a26:	f04f 32ff 	mov.w	r2, #4294967295
 8021a2a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a2e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8021a32:	681b      	ldr	r3, [r3, #0]
 8021a34:	ea02 0103 	and.w	r1, r2, r3
 8021a38:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a3c:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8021a40:	ea81 0300 	eor.w	r3, r1, r0
 8021a44:	6013      	str	r3, [r2, #0]
    return result;
 8021a46:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a4a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8021a4e:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8021a50:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a54:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8021a58:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a5c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8021a60:	681b      	ldr	r3, [r3, #0]
 8021a62:	440b      	add	r3, r1
 8021a64:	6013      	str	r3, [r2, #0]
 8021a66:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a6a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8021a6e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a72:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8021a76:	681b      	ldr	r3, [r3, #0]
 8021a78:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8021a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021a7e:	4619      	mov	r1, r3
 8021a80:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a84:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8021a88:	1e4b      	subs	r3, r1, #1
 8021a8a:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8021a8c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a90:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8021a94:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021a98:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8021a9c:	681b      	ldr	r3, [r3, #0]
 8021a9e:	005b      	lsls	r3, r3, #1
 8021aa0:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 8021aa2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021aa6:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8021aaa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021aae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8021ab2:	6812      	ldr	r2, [r2, #0]
 8021ab4:	681b      	ldr	r3, [r3, #0]
 8021ab6:	429a      	cmp	r2, r3
 8021ab8:	dd02      	ble.n	8021ac0 <arm_nn_softmax_common_s8+0x2520>
 8021aba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8021abe:	e000      	b.n	8021ac2 <arm_nn_softmax_common_s8+0x2522>
 8021ac0:	2000      	movs	r0, #0
 8021ac2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021ac6:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8021aca:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021ace:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8021ad2:	6812      	ldr	r2, [r2, #0]
 8021ad4:	681b      	ldr	r3, [r3, #0]
 8021ad6:	429a      	cmp	r2, r3
 8021ad8:	dd01      	ble.n	8021ade <arm_nn_softmax_common_s8+0x253e>
 8021ada:	2200      	movs	r2, #0
 8021adc:	e001      	b.n	8021ae2 <arm_nn_softmax_common_s8+0x2542>
 8021ade:	f04f 32ff 	mov.w	r2, #4294967295
 8021ae2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021ae6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8021aea:	681b      	ldr	r3, [r3, #0]
 8021aec:	ea02 0103 	and.w	r1, r2, r3
 8021af0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021af4:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8021af8:	ea81 0300 	eor.w	r3, r1, r0
 8021afc:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 8021afe:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021b02:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8021b06:	681b      	ldr	r3, [r3, #0]
 8021b08:	425a      	negs	r2, r3
 8021b0a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021b0e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8021b12:	681b      	ldr	r3, [r3, #0]
 8021b14:	4293      	cmp	r3, r2
 8021b16:	da02      	bge.n	8021b1e <arm_nn_softmax_common_s8+0x257e>
 8021b18:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8021b1c:	e000      	b.n	8021b20 <arm_nn_softmax_common_s8+0x2580>
 8021b1e:	2000      	movs	r0, #0
 8021b20:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021b24:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8021b28:	681b      	ldr	r3, [r3, #0]
 8021b2a:	425a      	negs	r2, r3
 8021b2c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021b30:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8021b34:	681b      	ldr	r3, [r3, #0]
 8021b36:	4293      	cmp	r3, r2
 8021b38:	da01      	bge.n	8021b3e <arm_nn_softmax_common_s8+0x259e>
 8021b3a:	2200      	movs	r2, #0
 8021b3c:	e001      	b.n	8021b42 <arm_nn_softmax_common_s8+0x25a2>
 8021b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8021b42:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021b46:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8021b4a:	681b      	ldr	r3, [r3, #0]
 8021b4c:	ea02 0103 	and.w	r1, r2, r3
 8021b50:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021b54:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8021b58:	ea81 0300 	eor.w	r3, r1, r0
 8021b5c:	6013      	str	r3, [r2, #0]
    return result;
 8021b5e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021b62:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8021b66:	681b      	ldr	r3, [r3, #0]
    return MUL_POW2(x, 1);
 8021b68:	bf00      	nop
 8021b6a:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t bits_over_unit;

        if (int16_output)
 8021b6e:	f897 39d8 	ldrb.w	r3, [r7, #2520]	; 0x9d8
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	f041 85d4 	bne.w	8023720 <arm_nn_softmax_common_s8+0x4180>
        else
        {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      return;
#endif
            int8_t *output_s8 = (int8_t *)output + row_idx * row_size;
 8021b78:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021b7c:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8021b80:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 8021b84:	681b      	ldr	r3, [r3, #0]
 8021b86:	fb02 f303 	mul.w	r3, r2, r3
 8021b8a:	461a      	mov	r2, r3
 8021b8c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8021b90:	4413      	add	r3, r2
 8021b92:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c

            bits_over_unit = ACCUM_BITS - headroom + 23;
 8021b96:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8021b9a:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8021b9e:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988

            for (col = 0; col < row_size; ++col)
 8021ba2:	2300      	movs	r3, #0
 8021ba4:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8021ba8:	f001 bd90 	b.w	80236cc <arm_nn_softmax_common_s8+0x412c>
            {
                diff = input[col] - max;
 8021bac:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8021bb0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021bb4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8021bb8:	681b      	ldr	r3, [r3, #0]
 8021bba:	4413      	add	r3, r2
 8021bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8021bc0:	461a      	mov	r2, r3
 8021bc2:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8021bc6:	1ad3      	subs	r3, r2, r3
 8021bc8:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
                if (diff >= diff_min)
 8021bcc:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8021bd0:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 8021bd4:	429a      	cmp	r2, r3
 8021bd6:	f2c1 856d 	blt.w	80236b4 <arm_nn_softmax_common_s8+0x4114>
                {
                    const int32_t res =
                        DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) +
 8021bda:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8021bde:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 8021be2:	fb03 f202 	mul.w	r2, r3, r2
 8021be6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021bea:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8021bee:	601a      	str	r2, [r3, #0]
 8021bf0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021bf4:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8021bf8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021bfc:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8021c00:	681b      	ldr	r3, [r3, #0]
 8021c02:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021c04:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021c08:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 8021c0c:	2300      	movs	r3, #0
 8021c0e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021c14:	f04f 0300 	mov.w	r3, #0
 8021c18:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8021c1c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021c20:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021c24:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8021c28:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021c2c:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8021c30:	6812      	ldr	r2, [r2, #0]
 8021c32:	681b      	ldr	r3, [r3, #0]
 8021c34:	4053      	eors	r3, r2
 8021c36:	0fdb      	lsrs	r3, r3, #31
 8021c38:	f003 0301 	and.w	r3, r3, #1
 8021c3c:	b2db      	uxtb	r3, r3
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d012      	beq.n	8021c68 <arm_nn_softmax_common_s8+0x26c8>
        mult = 1 - mult;
 8021c42:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8021c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c4a:	2100      	movs	r1, #0
 8021c4c:	f1d2 0001 	rsbs	r0, r2, #1
 8021c50:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 8021c54:	eb61 0303 	sbc.w	r3, r1, r3
 8021c58:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8021c5c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8021c60:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8021c64:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021c68:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021c6c:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8021c70:	681b      	ldr	r3, [r3, #0]
 8021c72:	17da      	asrs	r2, r3, #31
 8021c74:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8021c78:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8021c7c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021c80:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8021c84:	681b      	ldr	r3, [r3, #0]
 8021c86:	17da      	asrs	r2, r3, #31
 8021c88:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8021c8c:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8021c90:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8021c94:	460b      	mov	r3, r1
 8021c96:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8021c9a:	fb02 f203 	mul.w	r2, r2, r3
 8021c9e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8021ca2:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 8021ca6:	4601      	mov	r1, r0
 8021ca8:	fb01 f303 	mul.w	r3, r1, r3
 8021cac:	4413      	add	r3, r2
 8021cae:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8021cb2:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8021cb6:	fba2 1201 	umull	r1, r2, r2, r1
 8021cba:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 8021cbe:	460a      	mov	r2, r1
 8021cc0:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 8021cc4:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8021cc8:	4413      	add	r3, r2
 8021cca:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8021cce:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8021cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cd6:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8021cda:	1851      	adds	r1, r2, r1
 8021cdc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8021ce0:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 8021ce4:	414b      	adcs	r3, r1
 8021ce6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8021cea:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8021cee:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8021cf2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021cf6:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8021cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cfe:	2b00      	cmp	r3, #0
 8021d00:	da0a      	bge.n	8021d18 <arm_nn_softmax_common_s8+0x2778>
 8021d02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021d06:	1851      	adds	r1, r2, r1
 8021d08:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8021d0c:	f143 0300 	adc.w	r3, r3, #0
 8021d10:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8021d14:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8021d18:	f04f 0000 	mov.w	r0, #0
 8021d1c:	f04f 0100 	mov.w	r1, #0
 8021d20:	0fd0      	lsrs	r0, r2, #31
 8021d22:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021d26:	17d9      	asrs	r1, r3, #31
 8021d28:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021d2c:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 8021d30:	4603      	mov	r3, r0
 8021d32:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8021d34:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021d38:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8021d3c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021d40:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8021d44:	6812      	ldr	r2, [r2, #0]
 8021d46:	681b      	ldr	r3, [r3, #0]
 8021d48:	429a      	cmp	r2, r3
 8021d4a:	d10e      	bne.n	8021d6a <arm_nn_softmax_common_s8+0x27ca>
 8021d4c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021d50:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8021d54:	681b      	ldr	r3, [r3, #0]
 8021d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021d5a:	d106      	bne.n	8021d6a <arm_nn_softmax_common_s8+0x27ca>
        result = NN_Q31_MAX;
 8021d5c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021d60:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 8021d64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021d68:	6013      	str	r3, [r2, #0]
    return result;
 8021d6a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021d6e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8021d72:	681a      	ldr	r2, [r3, #0]
 8021d74:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021d78:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8021d7c:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8021d7e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021d82:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8021d86:	2300      	movs	r3, #0
 8021d88:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8021d8a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021d8e:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8021d92:	2318      	movs	r3, #24
 8021d94:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8021d96:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021d9a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8021d9e:	2201      	movs	r2, #1
 8021da0:	681b      	ldr	r3, [r3, #0]
 8021da2:	fa02 f303 	lsl.w	r3, r2, r3
 8021da6:	1e5a      	subs	r2, r3, #1
 8021da8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021dac:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8021db0:	681b      	ldr	r3, [r3, #0]
 8021db2:	ea02 0003 	and.w	r0, r2, r3
 8021db6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021dba:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8021dbe:	2201      	movs	r2, #1
 8021dc0:	681b      	ldr	r3, [r3, #0]
 8021dc2:	fa02 f103 	lsl.w	r1, r2, r3
 8021dc6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021dca:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8021dce:	1a43      	subs	r3, r0, r1
 8021dd0:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 8021dd2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021dd6:	f5a3 7129 	sub.w	r1, r3, #676	; 0x2a4
 8021dda:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021dde:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8021de2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021de6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8021dea:	6812      	ldr	r2, [r2, #0]
 8021dec:	681b      	ldr	r3, [r3, #0]
 8021dee:	1ad3      	subs	r3, r2, r3
 8021df0:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8021df2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021df6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8021dfa:	681b      	ldr	r3, [r3, #0]
 8021dfc:	0159      	lsls	r1, r3, #5
 8021dfe:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021e02:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8021e06:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 8021e0a:	6013      	str	r3, [r2, #0]
 8021e0c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021e10:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8021e14:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021e18:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8021e1c:	681b      	ldr	r3, [r3, #0]
 8021e1e:	6013      	str	r3, [r2, #0]
 8021e20:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021e24:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8021e28:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021e2c:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8021e30:	681b      	ldr	r3, [r3, #0]
 8021e32:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021e34:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021e38:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8021e3c:	2300      	movs	r3, #0
 8021e3e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021e40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021e44:	f04f 0300 	mov.w	r3, #0
 8021e48:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8021e4c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021e50:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021e54:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8021e58:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021e5c:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8021e60:	6812      	ldr	r2, [r2, #0]
 8021e62:	681b      	ldr	r3, [r3, #0]
 8021e64:	4053      	eors	r3, r2
 8021e66:	0fdb      	lsrs	r3, r3, #31
 8021e68:	f003 0301 	and.w	r3, r3, #1
 8021e6c:	b2db      	uxtb	r3, r3
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	d012      	beq.n	8021e98 <arm_nn_softmax_common_s8+0x28f8>
        mult = 1 - mult;
 8021e72:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8021e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e7a:	2100      	movs	r1, #0
 8021e7c:	f1d2 0001 	rsbs	r0, r2, #1
 8021e80:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8021e84:	eb61 0303 	sbc.w	r3, r1, r3
 8021e88:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8021e8c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8021e90:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8021e94:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021e98:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021e9c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8021ea0:	681b      	ldr	r3, [r3, #0]
 8021ea2:	17da      	asrs	r2, r3, #31
 8021ea4:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8021ea8:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8021eac:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021eb0:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8021eb4:	681b      	ldr	r3, [r3, #0]
 8021eb6:	17da      	asrs	r2, r3, #31
 8021eb8:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8021ebc:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 8021ec0:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8021ec4:	460b      	mov	r3, r1
 8021ec6:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8021eca:	fb02 f203 	mul.w	r2, r2, r3
 8021ece:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8021ed2:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 8021ed6:	4601      	mov	r1, r0
 8021ed8:	fb01 f303 	mul.w	r3, r1, r3
 8021edc:	4413      	add	r3, r2
 8021ede:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8021ee2:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8021ee6:	fba2 1201 	umull	r1, r2, r2, r1
 8021eea:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8021eee:	460a      	mov	r2, r1
 8021ef0:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 8021ef4:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8021ef8:	4413      	add	r3, r2
 8021efa:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8021efe:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8021f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f06:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 8021f0a:	1851      	adds	r1, r2, r1
 8021f0c:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8021f10:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 8021f14:	414b      	adcs	r3, r1
 8021f16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8021f1a:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8021f1e:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8021f22:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021f26:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8021f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	da0a      	bge.n	8021f48 <arm_nn_softmax_common_s8+0x29a8>
 8021f32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021f36:	1851      	adds	r1, r2, r1
 8021f38:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8021f3c:	f143 0300 	adc.w	r3, r3, #0
 8021f40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8021f44:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8021f48:	f04f 0000 	mov.w	r0, #0
 8021f4c:	f04f 0100 	mov.w	r1, #0
 8021f50:	0fd0      	lsrs	r0, r2, #31
 8021f52:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021f56:	17d9      	asrs	r1, r3, #31
 8021f58:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021f5c:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8021f60:	4603      	mov	r3, r0
 8021f62:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8021f64:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021f68:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8021f6c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021f70:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8021f74:	6812      	ldr	r2, [r2, #0]
 8021f76:	681b      	ldr	r3, [r3, #0]
 8021f78:	429a      	cmp	r2, r3
 8021f7a:	d10e      	bne.n	8021f9a <arm_nn_softmax_common_s8+0x29fa>
 8021f7c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021f80:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8021f84:	681b      	ldr	r3, [r3, #0]
 8021f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021f8a:	d106      	bne.n	8021f9a <arm_nn_softmax_common_s8+0x29fa>
        result = NN_Q31_MAX;
 8021f8c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021f90:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8021f94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021f98:	6013      	str	r3, [r2, #0]
    return result;
 8021f9a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021f9e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8021fa2:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 8021fa4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021fa8:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8021fac:	601a      	str	r2, [r3, #0]
 8021fae:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021fb2:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8021fb6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021fba:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8021fbe:	681b      	ldr	r3, [r3, #0]
 8021fc0:	6013      	str	r3, [r2, #0]
 8021fc2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021fc6:	f5a3 7233 	sub.w	r2, r3, #716	; 0x2cc
 8021fca:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021fce:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8021fd2:	681b      	ldr	r3, [r3, #0]
 8021fd4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021fd6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021fda:	f5a3 7234 	sub.w	r2, r3, #720	; 0x2d0
 8021fde:	2300      	movs	r3, #0
 8021fe0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021fe6:	f04f 0300 	mov.w	r3, #0
 8021fea:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8021fee:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021ff2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021ff6:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8021ffa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8021ffe:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8022002:	6812      	ldr	r2, [r2, #0]
 8022004:	681b      	ldr	r3, [r3, #0]
 8022006:	4053      	eors	r3, r2
 8022008:	0fdb      	lsrs	r3, r3, #31
 802200a:	f003 0301 	and.w	r3, r3, #1
 802200e:	b2db      	uxtb	r3, r3
 8022010:	2b00      	cmp	r3, #0
 8022012:	d012      	beq.n	802203a <arm_nn_softmax_common_s8+0x2a9a>
        mult = 1 - mult;
 8022014:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8022018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802201c:	2100      	movs	r1, #0
 802201e:	f1d2 0001 	rsbs	r0, r2, #1
 8022022:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8022026:	eb61 0303 	sbc.w	r3, r1, r3
 802202a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 802202e:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8022032:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8022036:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802203a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802203e:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	17da      	asrs	r2, r3, #31
 8022046:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 802204a:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 802204e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022052:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8022056:	681b      	ldr	r3, [r3, #0]
 8022058:	17da      	asrs	r2, r3, #31
 802205a:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 802205e:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8022062:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8022066:	460b      	mov	r3, r1
 8022068:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 802206c:	fb02 f203 	mul.w	r2, r2, r3
 8022070:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8022074:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 8022078:	4601      	mov	r1, r0
 802207a:	fb01 f303 	mul.w	r3, r1, r3
 802207e:	4413      	add	r3, r2
 8022080:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8022084:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 8022088:	fba2 1201 	umull	r1, r2, r2, r1
 802208c:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 8022090:	460a      	mov	r2, r1
 8022092:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 8022096:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 802209a:	4413      	add	r3, r2
 802209c:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 80220a0:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80220a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220a8:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 80220ac:	1851      	adds	r1, r2, r1
 80220ae:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80220b2:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 80220b6:	414b      	adcs	r3, r1
 80220b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80220bc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80220c0:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 80220c4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80220c8:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80220cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220d0:	2b00      	cmp	r3, #0
 80220d2:	da0a      	bge.n	80220ea <arm_nn_softmax_common_s8+0x2b4a>
 80220d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80220d8:	1851      	adds	r1, r2, r1
 80220da:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80220de:	f143 0300 	adc.w	r3, r3, #0
 80220e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80220e6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80220ea:	f04f 0000 	mov.w	r0, #0
 80220ee:	f04f 0100 	mov.w	r1, #0
 80220f2:	0fd0      	lsrs	r0, r2, #31
 80220f4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80220f8:	17d9      	asrs	r1, r3, #31
 80220fa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80220fe:	f5a3 7234 	sub.w	r2, r3, #720	; 0x2d0
 8022102:	4603      	mov	r3, r0
 8022104:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022106:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802210a:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 802210e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022112:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8022116:	6812      	ldr	r2, [r2, #0]
 8022118:	681b      	ldr	r3, [r3, #0]
 802211a:	429a      	cmp	r2, r3
 802211c:	d10e      	bne.n	802213c <arm_nn_softmax_common_s8+0x2b9c>
 802211e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022122:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8022126:	681b      	ldr	r3, [r3, #0]
 8022128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802212c:	d106      	bne.n	802213c <arm_nn_softmax_common_s8+0x2b9c>
        result = NN_Q31_MAX;
 802212e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022132:	f5a3 7234 	sub.w	r2, r3, #720	; 0x2d0
 8022136:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802213a:	6013      	str	r3, [r2, #0]
    return result;
 802213c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022140:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8022144:	681a      	ldr	r2, [r3, #0]
 8022146:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802214a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 802214e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8022150:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022154:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8022158:	2300      	movs	r3, #0
 802215a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 802215c:	2104      	movs	r1, #4
 802215e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022162:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8022166:	1e4b      	subs	r3, r1, #1
 8022168:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 802216a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802216e:	f5a3 713a 	sub.w	r1, r3, #744	; 0x2e8
 8022172:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022176:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 802217a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802217e:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8022182:	6812      	ldr	r2, [r2, #0]
 8022184:	681b      	ldr	r3, [r3, #0]
 8022186:	4013      	ands	r3, r2
 8022188:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 802218a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802218e:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8022192:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022196:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 802219a:	681b      	ldr	r3, [r3, #0]
 802219c:	109b      	asrs	r3, r3, #2
 802219e:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 80221a0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80221a4:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 80221a8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80221ac:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80221b0:	681b      	ldr	r3, [r3, #0]
 80221b2:	105b      	asrs	r3, r3, #1
 80221b4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80221b6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80221ba:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80221be:	681b      	ldr	r3, [r3, #0]
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	da0a      	bge.n	80221da <arm_nn_softmax_common_s8+0x2c3a>
        threshold++;
 80221c4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80221c8:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 80221cc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80221d0:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80221d4:	681b      	ldr	r3, [r3, #0]
 80221d6:	3301      	adds	r3, #1
 80221d8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80221da:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80221de:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80221e2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80221e6:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80221ea:	6812      	ldr	r2, [r2, #0]
 80221ec:	681b      	ldr	r3, [r3, #0]
 80221ee:	429a      	cmp	r2, r3
 80221f0:	dd0a      	ble.n	8022208 <arm_nn_softmax_common_s8+0x2c68>
        result++;
 80221f2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80221f6:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 80221fa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80221fe:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8022202:	681b      	ldr	r3, [r3, #0]
 8022204:	3301      	adds	r3, #1
 8022206:	6013      	str	r3, [r2, #0]
    return result;
 8022208:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802220c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8022210:	681c      	ldr	r4, [r3, #0]
 8022212:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022216:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 802221a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802221e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8022222:	681b      	ldr	r3, [r3, #0]
 8022224:	6013      	str	r3, [r2, #0]
 8022226:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802222a:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 802222e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022232:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8022236:	681b      	ldr	r3, [r3, #0]
 8022238:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802223a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802223e:	f5a3 723e 	sub.w	r2, r3, #760	; 0x2f8
 8022242:	2300      	movs	r3, #0
 8022244:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022246:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802224a:	f04f 0300 	mov.w	r3, #0
 802224e:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8022252:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022256:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802225a:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 802225e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022262:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8022266:	6812      	ldr	r2, [r2, #0]
 8022268:	681b      	ldr	r3, [r3, #0]
 802226a:	4053      	eors	r3, r2
 802226c:	0fdb      	lsrs	r3, r3, #31
 802226e:	f003 0301 	and.w	r3, r3, #1
 8022272:	b2db      	uxtb	r3, r3
 8022274:	2b00      	cmp	r3, #0
 8022276:	d012      	beq.n	802229e <arm_nn_softmax_common_s8+0x2cfe>
        mult = 1 - mult;
 8022278:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 802227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022280:	2100      	movs	r1, #0
 8022282:	f1d2 0001 	rsbs	r0, r2, #1
 8022286:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 802228a:	eb61 0303 	sbc.w	r3, r1, r3
 802228e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8022292:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8022296:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 802229a:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 802229e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80222a2:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80222a6:	681b      	ldr	r3, [r3, #0]
 80222a8:	17da      	asrs	r2, r3, #31
 80222aa:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80222ae:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 80222b2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80222b6:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80222ba:	681b      	ldr	r3, [r3, #0]
 80222bc:	17da      	asrs	r2, r3, #31
 80222be:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 80222c2:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 80222c6:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80222ca:	460b      	mov	r3, r1
 80222cc:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80222d0:	fb02 f203 	mul.w	r2, r2, r3
 80222d4:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80222d8:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 80222dc:	4601      	mov	r1, r0
 80222de:	fb01 f303 	mul.w	r3, r1, r3
 80222e2:	4413      	add	r3, r2
 80222e4:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 80222e8:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 80222ec:	fba2 1201 	umull	r1, r2, r2, r1
 80222f0:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 80222f4:	460a      	mov	r2, r1
 80222f6:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 80222fa:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 80222fe:	4413      	add	r3, r2
 8022300:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8022304:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8022308:	e9d3 2300 	ldrd	r2, r3, [r3]
 802230c:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 8022310:	1851      	adds	r1, r2, r1
 8022312:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8022316:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 802231a:	414b      	adcs	r3, r1
 802231c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8022320:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8022324:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8022328:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 802232c:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8022330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022334:	2b00      	cmp	r3, #0
 8022336:	da0a      	bge.n	802234e <arm_nn_softmax_common_s8+0x2dae>
 8022338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802233c:	1851      	adds	r1, r2, r1
 802233e:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8022342:	f143 0300 	adc.w	r3, r3, #0
 8022346:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 802234a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 802234e:	f04f 0000 	mov.w	r0, #0
 8022352:	f04f 0100 	mov.w	r1, #0
 8022356:	0fd0      	lsrs	r0, r2, #31
 8022358:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802235c:	17d9      	asrs	r1, r3, #31
 802235e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022362:	f5a3 723e 	sub.w	r2, r3, #760	; 0x2f8
 8022366:	4603      	mov	r3, r0
 8022368:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802236a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802236e:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8022372:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022376:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 802237a:	6812      	ldr	r2, [r2, #0]
 802237c:	681b      	ldr	r3, [r3, #0]
 802237e:	429a      	cmp	r2, r3
 8022380:	d10e      	bne.n	80223a0 <arm_nn_softmax_common_s8+0x2e00>
 8022382:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022386:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 802238a:	681b      	ldr	r3, [r3, #0]
 802238c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022390:	d106      	bne.n	80223a0 <arm_nn_softmax_common_s8+0x2e00>
        result = NN_Q31_MAX;
 8022392:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022396:	f5a3 723e 	sub.w	r2, r3, #760	; 0x2f8
 802239a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802239e:	6013      	str	r3, [r2, #0]
    return result;
 80223a0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80223a4:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80223a8:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80223aa:	18e2      	adds	r2, r4, r3
 80223ac:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80223b0:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80223b4:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80223b6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80223ba:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 80223be:	2300      	movs	r3, #0
 80223c0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80223c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80223c6:	f04f 0300 	mov.w	r3, #0
 80223ca:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80223ce:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80223d2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80223d6:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80223da:	681a      	ldr	r2, [r3, #0]
 80223dc:	4bdc      	ldr	r3, [pc, #880]	; (8022750 <arm_nn_softmax_common_s8+0x31b0>)
 80223de:	4053      	eors	r3, r2
 80223e0:	0fdb      	lsrs	r3, r3, #31
 80223e2:	f003 0301 	and.w	r3, r3, #1
 80223e6:	b2db      	uxtb	r3, r3
 80223e8:	2b00      	cmp	r3, #0
 80223ea:	d012      	beq.n	8022412 <arm_nn_softmax_common_s8+0x2e72>
        mult = 1 - mult;
 80223ec:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80223f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223f4:	2100      	movs	r1, #0
 80223f6:	f1d2 0001 	rsbs	r0, r2, #1
 80223fa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80223fe:	eb61 0303 	sbc.w	r3, r1, r3
 8022402:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8022406:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 802240a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 802240e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022412:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022416:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 802241a:	681b      	ldr	r3, [r3, #0]
 802241c:	17da      	asrs	r2, r3, #31
 802241e:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8022422:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8022426:	a3c6      	add	r3, pc, #792	; (adr r3, 8022740 <arm_nn_softmax_common_s8+0x31a0>)
 8022428:	e9d3 2300 	ldrd	r2, r3, [r3]
 802242c:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 8022430:	fb02 f001 	mul.w	r0, r2, r1
 8022434:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 8022438:	fb01 f103 	mul.w	r1, r1, r3
 802243c:	4401      	add	r1, r0
 802243e:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8022442:	fba0 2302 	umull	r2, r3, r0, r2
 8022446:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 802244a:	4613      	mov	r3, r2
 802244c:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8022450:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8022454:	18cb      	adds	r3, r1, r3
 8022456:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 802245a:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 802245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022462:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 8022466:	1851      	adds	r1, r2, r1
 8022468:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 802246c:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8022470:	414b      	adcs	r3, r1
 8022472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8022476:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 802247a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 802247e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022482:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8022486:	e9d3 2300 	ldrd	r2, r3, [r3]
 802248a:	2b00      	cmp	r3, #0
 802248c:	da0a      	bge.n	80224a4 <arm_nn_softmax_common_s8+0x2f04>
 802248e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022492:	1851      	adds	r1, r2, r1
 8022494:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8022498:	f143 0300 	adc.w	r3, r3, #0
 802249c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80224a0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80224a4:	f04f 0000 	mov.w	r0, #0
 80224a8:	f04f 0100 	mov.w	r1, #0
 80224ac:	0fd0      	lsrs	r0, r2, #31
 80224ae:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80224b2:	17d9      	asrs	r1, r3, #31
 80224b4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80224b8:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 80224bc:	4603      	mov	r3, r0
 80224be:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80224c0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80224c4:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80224c8:	681a      	ldr	r2, [r3, #0]
 80224ca:	4ba1      	ldr	r3, [pc, #644]	; (8022750 <arm_nn_softmax_common_s8+0x31b0>)
 80224cc:	429a      	cmp	r2, r3
 80224ce:	d10e      	bne.n	80224ee <arm_nn_softmax_common_s8+0x2f4e>
 80224d0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80224d4:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80224d8:	681b      	ldr	r3, [r3, #0]
 80224da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80224de:	d106      	bne.n	80224ee <arm_nn_softmax_common_s8+0x2f4e>
        result = NN_Q31_MAX;
 80224e0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80224e4:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 80224e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80224ec:	6013      	str	r3, [r2, #0]
    return result;
 80224ee:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80224f2:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80224f6:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80224f8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80224fc:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8022500:	681b      	ldr	r3, [r3, #0]
 8022502:	441a      	add	r2, r3
 8022504:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022508:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 802250c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 802250e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022512:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8022516:	2300      	movs	r3, #0
 8022518:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 802251a:	2102      	movs	r1, #2
 802251c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022520:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8022524:	1e4b      	subs	r3, r1, #1
 8022526:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8022528:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802252c:	f5a3 7148 	sub.w	r1, r3, #800	; 0x320
 8022530:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022534:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8022538:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802253c:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8022540:	6812      	ldr	r2, [r2, #0]
 8022542:	681b      	ldr	r3, [r3, #0]
 8022544:	4013      	ands	r3, r2
 8022546:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8022548:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802254c:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8022550:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022554:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8022558:	681b      	ldr	r3, [r3, #0]
 802255a:	105b      	asrs	r3, r3, #1
 802255c:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 802255e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022562:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8022566:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802256a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 802256e:	681b      	ldr	r3, [r3, #0]
 8022570:	105b      	asrs	r3, r3, #1
 8022572:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8022574:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022578:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 802257c:	681b      	ldr	r3, [r3, #0]
 802257e:	2b00      	cmp	r3, #0
 8022580:	da0a      	bge.n	8022598 <arm_nn_softmax_common_s8+0x2ff8>
        threshold++;
 8022582:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022586:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 802258a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802258e:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8022592:	681b      	ldr	r3, [r3, #0]
 8022594:	3301      	adds	r3, #1
 8022596:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8022598:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802259c:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 80225a0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80225a4:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80225a8:	6812      	ldr	r2, [r2, #0]
 80225aa:	681b      	ldr	r3, [r3, #0]
 80225ac:	429a      	cmp	r2, r3
 80225ae:	dd0a      	ble.n	80225c6 <arm_nn_softmax_common_s8+0x3026>
        result++;
 80225b0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80225b4:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 80225b8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80225bc:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80225c0:	681b      	ldr	r3, [r3, #0]
 80225c2:	3301      	adds	r3, #1
 80225c4:	6013      	str	r3, [r2, #0]
    return result;
 80225c6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80225ca:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80225ce:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80225d0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80225d4:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80225d8:	681b      	ldr	r3, [r3, #0]
 80225da:	441a      	add	r2, r3
 80225dc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80225e0:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80225e4:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80225e6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80225ea:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 80225ee:	2300      	movs	r3, #0
 80225f0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80225f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80225f6:	f04f 0300 	mov.w	r3, #0
 80225fa:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 80225fe:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022602:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022606:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 802260a:	681a      	ldr	r2, [r3, #0]
 802260c:	4b51      	ldr	r3, [pc, #324]	; (8022754 <arm_nn_softmax_common_s8+0x31b4>)
 802260e:	4053      	eors	r3, r2
 8022610:	0fdb      	lsrs	r3, r3, #31
 8022612:	f003 0301 	and.w	r3, r3, #1
 8022616:	b2db      	uxtb	r3, r3
 8022618:	2b00      	cmp	r3, #0
 802261a:	d012      	beq.n	8022642 <arm_nn_softmax_common_s8+0x30a2>
        mult = 1 - mult;
 802261c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8022620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022624:	2100      	movs	r1, #0
 8022626:	f1d2 0001 	rsbs	r0, r2, #1
 802262a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 802262e:	eb61 0303 	sbc.w	r3, r1, r3
 8022632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8022636:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 802263a:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 802263e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022642:	a141      	add	r1, pc, #260	; (adr r1, 8022748 <arm_nn_softmax_common_s8+0x31a8>)
 8022644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022648:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802264c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8022650:	681b      	ldr	r3, [r3, #0]
 8022652:	17da      	asrs	r2, r3, #31
 8022654:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8022658:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 802265c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8022660:	fb03 f201 	mul.w	r2, r3, r1
 8022664:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8022668:	fb00 f303 	mul.w	r3, r0, r3
 802266c:	4413      	add	r3, r2
 802266e:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8022672:	fba0 1202 	umull	r1, r2, r0, r2
 8022676:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 802267a:	460a      	mov	r2, r1
 802267c:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 8022680:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8022684:	4413      	add	r3, r2
 8022686:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 802268a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 802268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022692:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8022696:	1851      	adds	r1, r2, r1
 8022698:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 802269c:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 80226a0:	414b      	adcs	r3, r1
 80226a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80226a6:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80226aa:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 80226ae:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80226b2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80226b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226ba:	2b00      	cmp	r3, #0
 80226bc:	da0a      	bge.n	80226d4 <arm_nn_softmax_common_s8+0x3134>
 80226be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80226c2:	1851      	adds	r1, r2, r1
 80226c4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80226c8:	f143 0300 	adc.w	r3, r3, #0
 80226cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80226d0:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80226d4:	f04f 0000 	mov.w	r0, #0
 80226d8:	f04f 0100 	mov.w	r1, #0
 80226dc:	0fd0      	lsrs	r0, r2, #31
 80226de:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80226e2:	17d9      	asrs	r1, r3, #31
 80226e4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80226e8:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 80226ec:	4603      	mov	r3, r0
 80226ee:	6013      	str	r3, [r2, #0]
    return result;
 80226f0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80226f4:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80226f8:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 80226fa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80226fe:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8022702:	4b14      	ldr	r3, [pc, #80]	; (8022754 <arm_nn_softmax_common_s8+0x31b4>)
 8022704:	440b      	add	r3, r1
 8022706:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8022708:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802270c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8022710:	6819      	ldr	r1, [r3, #0]
 8022712:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022716:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 802271a:	1c4b      	adds	r3, r1, #1
 802271c:	6013      	str	r3, [r2, #0]
 802271e:	2301      	movs	r3, #1
 8022720:	fa03 f201 	lsl.w	r2, r3, r1
 8022724:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022728:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 802272c:	681b      	ldr	r3, [r3, #0]
 802272e:	4013      	ands	r3, r2
 8022730:	2b00      	cmp	r3, #0
 8022732:	d011      	beq.n	8022758 <arm_nn_softmax_common_s8+0x31b8>
 8022734:	f04f 32ff 	mov.w	r2, #4294967295
 8022738:	e00f      	b.n	802275a <arm_nn_softmax_common_s8+0x31ba>
 802273a:	bf00      	nop
 802273c:	f3af 8000 	nop.w
 8022740:	2aaaaaab 	.word	0x2aaaaaab
 8022744:	00000000 	.word	0x00000000
 8022748:	70f5a894 	.word	0x70f5a894
 802274c:	00000000 	.word	0x00000000
 8022750:	2aaaaaab 	.word	0x2aaaaaab
 8022754:	70f5a894 	.word	0x70f5a894
 8022758:	2200      	movs	r2, #0
 802275a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802275e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8022762:	601a      	str	r2, [r3, #0]
 8022764:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022768:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 802276c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022770:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8022774:	681b      	ldr	r3, [r3, #0]
 8022776:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022778:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802277c:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8022780:	2300      	movs	r3, #0
 8022782:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022788:	f04f 0300 	mov.w	r3, #0
 802278c:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8022790:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022794:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022798:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 802279c:	681a      	ldr	r2, [r3, #0]
 802279e:	4bd8      	ldr	r3, [pc, #864]	; (8022b00 <arm_nn_softmax_common_s8+0x3560>)
 80227a0:	4053      	eors	r3, r2
 80227a2:	0fdb      	lsrs	r3, r3, #31
 80227a4:	f003 0301 	and.w	r3, r3, #1
 80227a8:	b2db      	uxtb	r3, r3
 80227aa:	2b00      	cmp	r3, #0
 80227ac:	d012      	beq.n	80227d4 <arm_nn_softmax_common_s8+0x3234>
        mult = 1 - mult;
 80227ae:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80227b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227b6:	2100      	movs	r1, #0
 80227b8:	f1d2 0001 	rsbs	r0, r2, #1
 80227bc:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 80227c0:	eb61 0303 	sbc.w	r3, r1, r3
 80227c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80227c8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80227cc:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 80227d0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80227d4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80227d8:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80227dc:	681b      	ldr	r3, [r3, #0]
 80227de:	17da      	asrs	r2, r3, #31
 80227e0:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 80227e4:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 80227e8:	a3c1      	add	r3, pc, #772	; (adr r3, 8022af0 <arm_nn_softmax_common_s8+0x3550>)
 80227ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227ee:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 80227f2:	fb02 f001 	mul.w	r0, r2, r1
 80227f6:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 80227fa:	fb01 f103 	mul.w	r1, r1, r3
 80227fe:	4401      	add	r1, r0
 8022800:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8022804:	fba0 2302 	umull	r2, r3, r0, r2
 8022808:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 802280c:	4613      	mov	r3, r2
 802280e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8022812:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8022816:	18cb      	adds	r3, r1, r3
 8022818:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 802281c:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8022820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022824:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 8022828:	1851      	adds	r1, r2, r1
 802282a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 802282e:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8022832:	414b      	adcs	r3, r1
 8022834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022838:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 802283c:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8022840:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022844:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8022848:	e9d3 2300 	ldrd	r2, r3, [r3]
 802284c:	2b00      	cmp	r3, #0
 802284e:	da0a      	bge.n	8022866 <arm_nn_softmax_common_s8+0x32c6>
 8022850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022854:	1851      	adds	r1, r2, r1
 8022856:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 802285a:	f143 0300 	adc.w	r3, r3, #0
 802285e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022862:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8022866:	f04f 0000 	mov.w	r0, #0
 802286a:	f04f 0100 	mov.w	r1, #0
 802286e:	0fd0      	lsrs	r0, r2, #31
 8022870:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022874:	17d9      	asrs	r1, r3, #31
 8022876:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802287a:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 802287e:	4603      	mov	r3, r0
 8022880:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022882:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022886:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 802288a:	681a      	ldr	r2, [r3, #0]
 802288c:	4b9c      	ldr	r3, [pc, #624]	; (8022b00 <arm_nn_softmax_common_s8+0x3560>)
 802288e:	429a      	cmp	r2, r3
 8022890:	d10e      	bne.n	80228b0 <arm_nn_softmax_common_s8+0x3310>
 8022892:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022896:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80228a0:	d106      	bne.n	80228b0 <arm_nn_softmax_common_s8+0x3310>
        result = NN_Q31_MAX;
 80228a2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80228a6:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 80228aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80228ae:	6013      	str	r3, [r2, #0]
    return result;
 80228b0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80228b4:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80228b8:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 80228ba:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80228be:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80228c2:	681b      	ldr	r3, [r3, #0]
 80228c4:	ea02 0003 	and.w	r0, r2, r3
 80228c8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80228cc:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80228d0:	681b      	ldr	r3, [r3, #0]
 80228d2:	43da      	mvns	r2, r3
 80228d4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80228d8:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	ea02 0103 	and.w	r1, r2, r3
 80228e2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80228e6:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80228ea:	ea80 0301 	eor.w	r3, r0, r1
 80228ee:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 80228f0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80228f4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80228f8:	6819      	ldr	r1, [r3, #0]
 80228fa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80228fe:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8022902:	1c4b      	adds	r3, r1, #1
 8022904:	6013      	str	r3, [r2, #0]
 8022906:	2301      	movs	r3, #1
 8022908:	fa03 f201 	lsl.w	r2, r3, r1
 802290c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022910:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8022914:	681b      	ldr	r3, [r3, #0]
 8022916:	4013      	ands	r3, r2
 8022918:	2b00      	cmp	r3, #0
 802291a:	d002      	beq.n	8022922 <arm_nn_softmax_common_s8+0x3382>
 802291c:	f04f 32ff 	mov.w	r2, #4294967295
 8022920:	e000      	b.n	8022924 <arm_nn_softmax_common_s8+0x3384>
 8022922:	2200      	movs	r2, #0
 8022924:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022928:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 802292c:	601a      	str	r2, [r3, #0]
 802292e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022932:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 8022936:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802293a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 802293e:	681b      	ldr	r3, [r3, #0]
 8022940:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022942:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022946:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 802294a:	2300      	movs	r3, #0
 802294c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802294e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022952:	f04f 0300 	mov.w	r3, #0
 8022956:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 802295a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802295e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022962:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8022966:	681a      	ldr	r2, [r3, #0]
 8022968:	4b66      	ldr	r3, [pc, #408]	; (8022b04 <arm_nn_softmax_common_s8+0x3564>)
 802296a:	4053      	eors	r3, r2
 802296c:	0fdb      	lsrs	r3, r3, #31
 802296e:	f003 0301 	and.w	r3, r3, #1
 8022972:	b2db      	uxtb	r3, r3
 8022974:	2b00      	cmp	r3, #0
 8022976:	d012      	beq.n	802299e <arm_nn_softmax_common_s8+0x33fe>
        mult = 1 - mult;
 8022978:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 802297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022980:	2100      	movs	r1, #0
 8022982:	f1d2 0001 	rsbs	r0, r2, #1
 8022986:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 802298a:	eb61 0303 	sbc.w	r3, r1, r3
 802298e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8022992:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8022996:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 802299a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802299e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80229a2:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80229a6:	681b      	ldr	r3, [r3, #0]
 80229a8:	17da      	asrs	r2, r3, #31
 80229aa:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 80229ae:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 80229b2:	a351      	add	r3, pc, #324	; (adr r3, 8022af8 <arm_nn_softmax_common_s8+0x3558>)
 80229b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229b8:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 80229bc:	fb02 f001 	mul.w	r0, r2, r1
 80229c0:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 80229c4:	fb01 f103 	mul.w	r1, r1, r3
 80229c8:	4401      	add	r1, r0
 80229ca:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 80229ce:	fba0 2302 	umull	r2, r3, r0, r2
 80229d2:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80229d6:	4613      	mov	r3, r2
 80229d8:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80229dc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80229e0:	18cb      	adds	r3, r1, r3
 80229e2:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80229e6:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80229ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229ee:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 80229f2:	1851      	adds	r1, r2, r1
 80229f4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80229f8:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 80229fc:	414b      	adcs	r3, r1
 80229fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8022a02:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8022a06:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8022a0a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022a0e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8022a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a16:	2b00      	cmp	r3, #0
 8022a18:	da0a      	bge.n	8022a30 <arm_nn_softmax_common_s8+0x3490>
 8022a1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022a1e:	1851      	adds	r1, r2, r1
 8022a20:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8022a24:	f143 0300 	adc.w	r3, r3, #0
 8022a28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8022a2c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8022a30:	f04f 0000 	mov.w	r0, #0
 8022a34:	f04f 0100 	mov.w	r1, #0
 8022a38:	0fd0      	lsrs	r0, r2, #31
 8022a3a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022a3e:	17d9      	asrs	r1, r3, #31
 8022a40:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022a44:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 8022a48:	4603      	mov	r3, r0
 8022a4a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022a4c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022a50:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8022a54:	681a      	ldr	r2, [r3, #0]
 8022a56:	4b2b      	ldr	r3, [pc, #172]	; (8022b04 <arm_nn_softmax_common_s8+0x3564>)
 8022a58:	429a      	cmp	r2, r3
 8022a5a:	d10e      	bne.n	8022a7a <arm_nn_softmax_common_s8+0x34da>
 8022a5c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022a60:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8022a64:	681b      	ldr	r3, [r3, #0]
 8022a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022a6a:	d106      	bne.n	8022a7a <arm_nn_softmax_common_s8+0x34da>
        result = NN_Q31_MAX;
 8022a6c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022a70:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 8022a74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022a78:	6013      	str	r3, [r2, #0]
    return result;
 8022a7a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022a7e:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8022a82:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8022a84:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022a88:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8022a8c:	681b      	ldr	r3, [r3, #0]
 8022a8e:	ea02 0003 	and.w	r0, r2, r3
 8022a92:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022a96:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8022a9a:	681b      	ldr	r3, [r3, #0]
 8022a9c:	43da      	mvns	r2, r3
 8022a9e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022aa2:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	ea02 0103 	and.w	r1, r2, r3
 8022aac:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022ab0:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8022ab4:	ea80 0301 	eor.w	r3, r0, r1
 8022ab8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 8022aba:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022abe:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8022ac2:	6819      	ldr	r1, [r3, #0]
 8022ac4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022ac8:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8022acc:	1c4b      	adds	r3, r1, #1
 8022ace:	6013      	str	r3, [r2, #0]
 8022ad0:	2301      	movs	r3, #1
 8022ad2:	fa03 f201 	lsl.w	r2, r3, r1
 8022ad6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022ada:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8022ade:	681b      	ldr	r3, [r3, #0]
 8022ae0:	4013      	ands	r3, r2
 8022ae2:	2b00      	cmp	r3, #0
 8022ae4:	d010      	beq.n	8022b08 <arm_nn_softmax_common_s8+0x3568>
 8022ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8022aea:	e00e      	b.n	8022b0a <arm_nn_softmax_common_s8+0x356a>
 8022aec:	f3af 8000 	nop.w
 8022af0:	63afbe7b 	.word	0x63afbe7b
 8022af4:	00000000 	.word	0x00000000
 8022af8:	4da2cbf2 	.word	0x4da2cbf2
 8022afc:	00000000 	.word	0x00000000
 8022b00:	63afbe7b 	.word	0x63afbe7b
 8022b04:	4da2cbf2 	.word	0x4da2cbf2
 8022b08:	2200      	movs	r2, #0
 8022b0a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022b0e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8022b12:	601a      	str	r2, [r3, #0]
 8022b14:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022b18:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 8022b1c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022b20:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8022b24:	681b      	ldr	r3, [r3, #0]
 8022b26:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022b28:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022b2c:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8022b30:	2300      	movs	r3, #0
 8022b32:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022b34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022b38:	f04f 0300 	mov.w	r3, #0
 8022b3c:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8022b40:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022b44:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022b48:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8022b4c:	681a      	ldr	r2, [r3, #0]
 8022b4e:	4bd4      	ldr	r3, [pc, #848]	; (8022ea0 <arm_nn_softmax_common_s8+0x3900>)
 8022b50:	4053      	eors	r3, r2
 8022b52:	0fdb      	lsrs	r3, r3, #31
 8022b54:	f003 0301 	and.w	r3, r3, #1
 8022b58:	b2db      	uxtb	r3, r3
 8022b5a:	2b00      	cmp	r3, #0
 8022b5c:	d012      	beq.n	8022b84 <arm_nn_softmax_common_s8+0x35e4>
        mult = 1 - mult;
 8022b5e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8022b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b66:	2100      	movs	r1, #0
 8022b68:	f1d2 0001 	rsbs	r0, r2, #1
 8022b6c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8022b70:	eb61 0303 	sbc.w	r3, r1, r3
 8022b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8022b78:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8022b7c:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8022b80:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022b84:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022b88:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8022b8c:	681b      	ldr	r3, [r3, #0]
 8022b8e:	17da      	asrs	r2, r3, #31
 8022b90:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8022b94:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8022b98:	a3bd      	add	r3, pc, #756	; (adr r3, 8022e90 <arm_nn_softmax_common_s8+0x38f0>)
 8022b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b9e:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8022ba2:	fb02 f001 	mul.w	r0, r2, r1
 8022ba6:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8022baa:	fb01 f103 	mul.w	r1, r1, r3
 8022bae:	4401      	add	r1, r0
 8022bb0:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 8022bb4:	fba0 2302 	umull	r2, r3, r0, r2
 8022bb8:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8022bbc:	4613      	mov	r3, r2
 8022bbe:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8022bc2:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8022bc6:	18cb      	adds	r3, r1, r3
 8022bc8:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8022bcc:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8022bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bd4:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 8022bd8:	1851      	adds	r1, r2, r1
 8022bda:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8022bde:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 8022be2:	414b      	adcs	r3, r1
 8022be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8022be8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8022bec:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8022bf0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022bf4:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8022bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bfc:	2b00      	cmp	r3, #0
 8022bfe:	da08      	bge.n	8022c12 <arm_nn_softmax_common_s8+0x3672>
 8022c00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022c04:	1851      	adds	r1, r2, r1
 8022c06:	67b9      	str	r1, [r7, #120]	; 0x78
 8022c08:	f143 0300 	adc.w	r3, r3, #0
 8022c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8022c0e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8022c12:	f04f 0000 	mov.w	r0, #0
 8022c16:	f04f 0100 	mov.w	r1, #0
 8022c1a:	0fd0      	lsrs	r0, r2, #31
 8022c1c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022c20:	17d9      	asrs	r1, r3, #31
 8022c22:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022c26:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8022c2a:	4603      	mov	r3, r0
 8022c2c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022c2e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022c32:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8022c36:	681a      	ldr	r2, [r3, #0]
 8022c38:	4b99      	ldr	r3, [pc, #612]	; (8022ea0 <arm_nn_softmax_common_s8+0x3900>)
 8022c3a:	429a      	cmp	r2, r3
 8022c3c:	d10e      	bne.n	8022c5c <arm_nn_softmax_common_s8+0x36bc>
 8022c3e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022c42:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8022c46:	681b      	ldr	r3, [r3, #0]
 8022c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022c4c:	d106      	bne.n	8022c5c <arm_nn_softmax_common_s8+0x36bc>
        result = NN_Q31_MAX;
 8022c4e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022c52:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8022c56:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022c5a:	6013      	str	r3, [r2, #0]
    return result;
 8022c5c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022c60:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8022c64:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8022c66:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022c6a:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8022c6e:	681b      	ldr	r3, [r3, #0]
 8022c70:	ea02 0003 	and.w	r0, r2, r3
 8022c74:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022c78:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8022c7c:	681b      	ldr	r3, [r3, #0]
 8022c7e:	43da      	mvns	r2, r3
 8022c80:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022c84:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8022c88:	681b      	ldr	r3, [r3, #0]
 8022c8a:	ea02 0103 	and.w	r1, r2, r3
 8022c8e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022c92:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8022c96:	ea80 0301 	eor.w	r3, r0, r1
 8022c9a:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8022c9c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022ca0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8022ca4:	6819      	ldr	r1, [r3, #0]
 8022ca6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022caa:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8022cae:	1c4b      	adds	r3, r1, #1
 8022cb0:	6013      	str	r3, [r2, #0]
 8022cb2:	2301      	movs	r3, #1
 8022cb4:	fa03 f201 	lsl.w	r2, r3, r1
 8022cb8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022cbc:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8022cc0:	681b      	ldr	r3, [r3, #0]
 8022cc2:	4013      	ands	r3, r2
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	d002      	beq.n	8022cce <arm_nn_softmax_common_s8+0x372e>
 8022cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8022ccc:	e000      	b.n	8022cd0 <arm_nn_softmax_common_s8+0x3730>
 8022cce:	2200      	movs	r2, #0
 8022cd0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022cd4:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8022cd8:	601a      	str	r2, [r3, #0]
 8022cda:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022cde:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8022ce2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022ce6:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8022cea:	681b      	ldr	r3, [r3, #0]
 8022cec:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022cee:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022cf2:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8022cf6:	2300      	movs	r3, #0
 8022cf8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022cfe:	f04f 0300 	mov.w	r3, #0
 8022d02:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8022d06:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022d0a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022d0e:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8022d12:	681a      	ldr	r2, [r3, #0]
 8022d14:	4b63      	ldr	r3, [pc, #396]	; (8022ea4 <arm_nn_softmax_common_s8+0x3904>)
 8022d16:	4053      	eors	r3, r2
 8022d18:	0fdb      	lsrs	r3, r3, #31
 8022d1a:	f003 0301 	and.w	r3, r3, #1
 8022d1e:	b2db      	uxtb	r3, r3
 8022d20:	2b00      	cmp	r3, #0
 8022d22:	d010      	beq.n	8022d46 <arm_nn_softmax_common_s8+0x37a6>
        mult = 1 - mult;
 8022d24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8022d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d2c:	2100      	movs	r1, #0
 8022d2e:	f1d2 0001 	rsbs	r0, r2, #1
 8022d32:	6738      	str	r0, [r7, #112]	; 0x70
 8022d34:	eb61 0303 	sbc.w	r3, r1, r3
 8022d38:	677b      	str	r3, [r7, #116]	; 0x74
 8022d3a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8022d3e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8022d42:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022d46:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022d4a:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8022d4e:	681b      	ldr	r3, [r3, #0]
 8022d50:	17da      	asrs	r2, r3, #31
 8022d52:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8022d56:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8022d5a:	a34f      	add	r3, pc, #316	; (adr r3, 8022e98 <arm_nn_softmax_common_s8+0x38f8>)
 8022d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d60:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8022d64:	fb02 f001 	mul.w	r0, r2, r1
 8022d68:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8022d6c:	fb01 f103 	mul.w	r1, r1, r3
 8022d70:	4401      	add	r1, r0
 8022d72:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8022d76:	fba0 2302 	umull	r2, r3, r0, r2
 8022d7a:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8022d7e:	4613      	mov	r3, r2
 8022d80:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8022d84:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8022d88:	18cb      	adds	r3, r1, r3
 8022d8a:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8022d8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8022d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d96:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 8022d9a:	1851      	adds	r1, r2, r1
 8022d9c:	66b9      	str	r1, [r7, #104]	; 0x68
 8022d9e:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 8022da2:	414b      	adcs	r3, r1
 8022da4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8022da6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8022daa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8022dae:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022db2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8022db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dba:	2b00      	cmp	r3, #0
 8022dbc:	da08      	bge.n	8022dd0 <arm_nn_softmax_common_s8+0x3830>
 8022dbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022dc2:	1851      	adds	r1, r2, r1
 8022dc4:	6639      	str	r1, [r7, #96]	; 0x60
 8022dc6:	f143 0300 	adc.w	r3, r3, #0
 8022dca:	667b      	str	r3, [r7, #100]	; 0x64
 8022dcc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8022dd0:	f04f 0000 	mov.w	r0, #0
 8022dd4:	f04f 0100 	mov.w	r1, #0
 8022dd8:	0fd0      	lsrs	r0, r2, #31
 8022dda:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022dde:	17d9      	asrs	r1, r3, #31
 8022de0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022de4:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8022de8:	4603      	mov	r3, r0
 8022dea:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022dec:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022df0:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8022df4:	681a      	ldr	r2, [r3, #0]
 8022df6:	4b2b      	ldr	r3, [pc, #172]	; (8022ea4 <arm_nn_softmax_common_s8+0x3904>)
 8022df8:	429a      	cmp	r2, r3
 8022dfa:	d10e      	bne.n	8022e1a <arm_nn_softmax_common_s8+0x387a>
 8022dfc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022e00:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8022e04:	681b      	ldr	r3, [r3, #0]
 8022e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022e0a:	d106      	bne.n	8022e1a <arm_nn_softmax_common_s8+0x387a>
        result = NN_Q31_MAX;
 8022e0c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022e10:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8022e14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022e18:	6013      	str	r3, [r2, #0]
    return result;
 8022e1a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022e1e:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8022e22:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8022e24:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022e28:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8022e2c:	681b      	ldr	r3, [r3, #0]
 8022e2e:	ea02 0003 	and.w	r0, r2, r3
 8022e32:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022e36:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8022e3a:	681b      	ldr	r3, [r3, #0]
 8022e3c:	43da      	mvns	r2, r3
 8022e3e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022e42:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8022e46:	681b      	ldr	r3, [r3, #0]
 8022e48:	ea02 0103 	and.w	r1, r2, r3
 8022e4c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022e50:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8022e54:	ea80 0301 	eor.w	r3, r0, r1
 8022e58:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8022e5a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022e5e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8022e62:	6819      	ldr	r1, [r3, #0]
 8022e64:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022e68:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8022e6c:	1c4b      	adds	r3, r1, #1
 8022e6e:	6013      	str	r3, [r2, #0]
 8022e70:	2301      	movs	r3, #1
 8022e72:	fa03 f201 	lsl.w	r2, r3, r1
 8022e76:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022e7a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8022e7e:	681b      	ldr	r3, [r3, #0]
 8022e80:	4013      	ands	r3, r2
 8022e82:	2b00      	cmp	r3, #0
 8022e84:	d010      	beq.n	8022ea8 <arm_nn_softmax_common_s8+0x3908>
 8022e86:	f04f 32ff 	mov.w	r2, #4294967295
 8022e8a:	e00e      	b.n	8022eaa <arm_nn_softmax_common_s8+0x390a>
 8022e8c:	f3af 8000 	nop.w
 8022e90:	2f16ac6c 	.word	0x2f16ac6c
 8022e94:	00000000 	.word	0x00000000
 8022e98:	1152aaa4 	.word	0x1152aaa4
 8022e9c:	00000000 	.word	0x00000000
 8022ea0:	2f16ac6c 	.word	0x2f16ac6c
 8022ea4:	1152aaa4 	.word	0x1152aaa4
 8022ea8:	2200      	movs	r2, #0
 8022eaa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022eae:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8022eb2:	601a      	str	r2, [r3, #0]
 8022eb4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022eb8:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 8022ebc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022ec0:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8022ec4:	681b      	ldr	r3, [r3, #0]
 8022ec6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022ec8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022ecc:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 8022ed0:	2300      	movs	r3, #0
 8022ed2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022ed4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022ed8:	f04f 0300 	mov.w	r3, #0
 8022edc:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8022ee0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022ee4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022ee8:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8022eec:	681a      	ldr	r2, [r3, #0]
 8022eee:	4bd0      	ldr	r3, [pc, #832]	; (8023230 <arm_nn_softmax_common_s8+0x3c90>)
 8022ef0:	4053      	eors	r3, r2
 8022ef2:	0fdb      	lsrs	r3, r3, #31
 8022ef4:	f003 0301 	and.w	r3, r3, #1
 8022ef8:	b2db      	uxtb	r3, r3
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d010      	beq.n	8022f20 <arm_nn_softmax_common_s8+0x3980>
        mult = 1 - mult;
 8022efe:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8022f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f06:	2100      	movs	r1, #0
 8022f08:	f1d2 0001 	rsbs	r0, r2, #1
 8022f0c:	65b8      	str	r0, [r7, #88]	; 0x58
 8022f0e:	eb61 0303 	sbc.w	r3, r1, r3
 8022f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022f14:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8022f18:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8022f1c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022f20:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022f24:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8022f28:	681b      	ldr	r3, [r3, #0]
 8022f2a:	17da      	asrs	r2, r3, #31
 8022f2c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8022f30:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8022f34:	a3bc      	add	r3, pc, #752	; (adr r3, 8023228 <arm_nn_softmax_common_s8+0x3c88>)
 8022f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f3a:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8022f3e:	fb02 f001 	mul.w	r0, r2, r1
 8022f42:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8022f46:	fb01 f103 	mul.w	r1, r1, r3
 8022f4a:	4401      	add	r1, r0
 8022f4c:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8022f50:	fba0 2302 	umull	r2, r3, r0, r2
 8022f54:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8022f58:	4613      	mov	r3, r2
 8022f5a:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8022f5e:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8022f62:	18cb      	adds	r3, r1, r3
 8022f64:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8022f68:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8022f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f70:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8022f74:	1851      	adds	r1, r2, r1
 8022f76:	6539      	str	r1, [r7, #80]	; 0x50
 8022f78:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 8022f7c:	414b      	adcs	r3, r1
 8022f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8022f80:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8022f84:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8022f88:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022f8c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8022f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f94:	2b00      	cmp	r3, #0
 8022f96:	da08      	bge.n	8022faa <arm_nn_softmax_common_s8+0x3a0a>
 8022f98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022f9c:	1851      	adds	r1, r2, r1
 8022f9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8022fa0:	f143 0300 	adc.w	r3, r3, #0
 8022fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022fa6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8022faa:	f04f 0000 	mov.w	r0, #0
 8022fae:	f04f 0100 	mov.w	r1, #0
 8022fb2:	0fd0      	lsrs	r0, r2, #31
 8022fb4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022fb8:	17d9      	asrs	r1, r3, #31
 8022fba:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022fbe:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 8022fc2:	4603      	mov	r3, r0
 8022fc4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8022fc6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022fca:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8022fce:	681a      	ldr	r2, [r3, #0]
 8022fd0:	4b97      	ldr	r3, [pc, #604]	; (8023230 <arm_nn_softmax_common_s8+0x3c90>)
 8022fd2:	429a      	cmp	r2, r3
 8022fd4:	d10e      	bne.n	8022ff4 <arm_nn_softmax_common_s8+0x3a54>
 8022fd6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022fda:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8022fde:	681b      	ldr	r3, [r3, #0]
 8022fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022fe4:	d106      	bne.n	8022ff4 <arm_nn_softmax_common_s8+0x3a54>
        result = NN_Q31_MAX;
 8022fe6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022fea:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 8022fee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022ff2:	6013      	str	r3, [r2, #0]
    return result;
 8022ff4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022ff8:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8022ffc:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8022ffe:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023002:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8023006:	681b      	ldr	r3, [r3, #0]
 8023008:	ea02 0003 	and.w	r0, r2, r3
 802300c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023010:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8023014:	681b      	ldr	r3, [r3, #0]
 8023016:	43da      	mvns	r2, r3
 8023018:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802301c:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8023020:	681b      	ldr	r3, [r3, #0]
 8023022:	ea02 0103 	and.w	r1, r2, r3
 8023026:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802302a:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 802302e:	ea80 0301 	eor.w	r3, r0, r1
 8023032:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8023034:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023038:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802303c:	6819      	ldr	r1, [r3, #0]
 802303e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023042:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8023046:	1c4b      	adds	r3, r1, #1
 8023048:	6013      	str	r3, [r2, #0]
 802304a:	2301      	movs	r3, #1
 802304c:	fa03 f201 	lsl.w	r2, r3, r1
 8023050:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023054:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8023058:	681b      	ldr	r3, [r3, #0]
 802305a:	4013      	ands	r3, r2
 802305c:	2b00      	cmp	r3, #0
 802305e:	d002      	beq.n	8023066 <arm_nn_softmax_common_s8+0x3ac6>
 8023060:	f04f 32ff 	mov.w	r2, #4294967295
 8023064:	e000      	b.n	8023068 <arm_nn_softmax_common_s8+0x3ac8>
 8023066:	2200      	movs	r2, #0
 8023068:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802306c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8023070:	601a      	str	r2, [r3, #0]
 8023072:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023076:	f5a3 7265 	sub.w	r2, r3, #916	; 0x394
 802307a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802307e:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8023082:	681b      	ldr	r3, [r3, #0]
 8023084:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023086:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802308a:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 802308e:	2300      	movs	r3, #0
 8023090:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023096:	f04f 0300 	mov.w	r3, #0
 802309a:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 802309e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80230a2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80230a6:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80230aa:	681a      	ldr	r2, [r3, #0]
 80230ac:	4b61      	ldr	r3, [pc, #388]	; (8023234 <arm_nn_softmax_common_s8+0x3c94>)
 80230ae:	4053      	eors	r3, r2
 80230b0:	0fdb      	lsrs	r3, r3, #31
 80230b2:	f003 0301 	and.w	r3, r3, #1
 80230b6:	b2db      	uxtb	r3, r3
 80230b8:	2b00      	cmp	r3, #0
 80230ba:	d010      	beq.n	80230de <arm_nn_softmax_common_s8+0x3b3e>
        mult = 1 - mult;
 80230bc:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 80230c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230c4:	2100      	movs	r1, #0
 80230c6:	f1d2 0001 	rsbs	r0, r2, #1
 80230ca:	6438      	str	r0, [r7, #64]	; 0x40
 80230cc:	eb61 0303 	sbc.w	r3, r1, r3
 80230d0:	647b      	str	r3, [r7, #68]	; 0x44
 80230d2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80230d6:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 80230da:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80230de:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80230e2:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80230e6:	681b      	ldr	r3, [r3, #0]
 80230e8:	17da      	asrs	r2, r3, #31
 80230ea:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 80230ee:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 80230f2:	4a50      	ldr	r2, [pc, #320]	; (8023234 <arm_nn_softmax_common_s8+0x3c94>)
 80230f4:	f04f 0300 	mov.w	r3, #0
 80230f8:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 80230fc:	fb02 f001 	mul.w	r0, r2, r1
 8023100:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8023104:	fb01 f103 	mul.w	r1, r1, r3
 8023108:	4401      	add	r1, r0
 802310a:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 802310e:	fba0 2302 	umull	r2, r3, r0, r2
 8023112:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8023116:	4613      	mov	r3, r2
 8023118:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 802311c:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8023120:	18cb      	adds	r3, r1, r3
 8023122:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8023126:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 802312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802312e:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8023132:	1851      	adds	r1, r2, r1
 8023134:	63b9      	str	r1, [r7, #56]	; 0x38
 8023136:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 802313a:	414b      	adcs	r3, r1
 802313c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802313e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8023142:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8023146:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802314a:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 802314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023152:	2b00      	cmp	r3, #0
 8023154:	da08      	bge.n	8023168 <arm_nn_softmax_common_s8+0x3bc8>
 8023156:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802315a:	1851      	adds	r1, r2, r1
 802315c:	6339      	str	r1, [r7, #48]	; 0x30
 802315e:	f143 0300 	adc.w	r3, r3, #0
 8023162:	637b      	str	r3, [r7, #52]	; 0x34
 8023164:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8023168:	f04f 0000 	mov.w	r0, #0
 802316c:	f04f 0100 	mov.w	r1, #0
 8023170:	0fd0      	lsrs	r0, r2, #31
 8023172:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8023176:	17d9      	asrs	r1, r3, #31
 8023178:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802317c:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 8023180:	4603      	mov	r3, r0
 8023182:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023184:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023188:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 802318c:	681a      	ldr	r2, [r3, #0]
 802318e:	4b29      	ldr	r3, [pc, #164]	; (8023234 <arm_nn_softmax_common_s8+0x3c94>)
 8023190:	429a      	cmp	r2, r3
 8023192:	d10e      	bne.n	80231b2 <arm_nn_softmax_common_s8+0x3c12>
 8023194:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023198:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 802319c:	681b      	ldr	r3, [r3, #0]
 802319e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80231a2:	d106      	bne.n	80231b2 <arm_nn_softmax_common_s8+0x3c12>
        result = NN_Q31_MAX;
 80231a4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80231a8:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 80231ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80231b0:	6013      	str	r3, [r2, #0]
    return result;
 80231b2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80231b6:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80231ba:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 80231bc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80231c0:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80231c4:	681b      	ldr	r3, [r3, #0]
 80231c6:	ea02 0003 	and.w	r0, r2, r3
 80231ca:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80231ce:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80231d2:	681b      	ldr	r3, [r3, #0]
 80231d4:	43da      	mvns	r2, r3
 80231d6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80231da:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80231de:	681b      	ldr	r3, [r3, #0]
 80231e0:	ea02 0103 	and.w	r1, r2, r3
 80231e4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80231e8:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80231ec:	ea80 0301 	eor.w	r3, r0, r1
 80231f0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 80231f2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80231f6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80231fa:	6819      	ldr	r1, [r3, #0]
 80231fc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023200:	f5a3 7227 	sub.w	r2, r3, #668	; 0x29c
 8023204:	1c4b      	adds	r3, r1, #1
 8023206:	6013      	str	r3, [r2, #0]
 8023208:	2301      	movs	r3, #1
 802320a:	fa03 f201 	lsl.w	r2, r3, r1
 802320e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023212:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8023216:	681b      	ldr	r3, [r3, #0]
 8023218:	4013      	ands	r3, r2
 802321a:	2b00      	cmp	r3, #0
 802321c:	d00c      	beq.n	8023238 <arm_nn_softmax_common_s8+0x3c98>
 802321e:	f04f 32ff 	mov.w	r2, #4294967295
 8023222:	e00a      	b.n	802323a <arm_nn_softmax_common_s8+0x3c9a>
 8023224:	f3af 8000 	nop.w
 8023228:	02582ab7 	.word	0x02582ab7
 802322c:	00000000 	.word	0x00000000
 8023230:	02582ab7 	.word	0x02582ab7
 8023234:	000afe11 	.word	0x000afe11
 8023238:	2200      	movs	r2, #0
 802323a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802323e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8023242:	601a      	str	r2, [r3, #0]
 8023244:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023248:	f5a3 7269 	sub.w	r2, r3, #932	; 0x3a4
 802324c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023250:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8023254:	681b      	ldr	r3, [r3, #0]
 8023256:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023258:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802325c:	f5a3 726a 	sub.w	r2, r3, #936	; 0x3a8
 8023260:	2300      	movs	r3, #0
 8023262:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023264:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023268:	f04f 0300 	mov.w	r3, #0
 802326c:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8023270:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023274:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023278:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 802327c:	681b      	ldr	r3, [r3, #0]
 802327e:	f083 03f2 	eor.w	r3, r3, #242	; 0xf2
 8023282:	0fdb      	lsrs	r3, r3, #31
 8023284:	f003 0301 	and.w	r3, r3, #1
 8023288:	b2db      	uxtb	r3, r3
 802328a:	2b00      	cmp	r3, #0
 802328c:	d010      	beq.n	80232b0 <arm_nn_softmax_common_s8+0x3d10>
        mult = 1 - mult;
 802328e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8023292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023296:	2100      	movs	r1, #0
 8023298:	f1d2 0001 	rsbs	r0, r2, #1
 802329c:	62b8      	str	r0, [r7, #40]	; 0x28
 802329e:	eb61 0303 	sbc.w	r3, r1, r3
 80232a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80232a4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80232a8:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80232ac:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80232b0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80232b4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80232b8:	681b      	ldr	r3, [r3, #0]
 80232ba:	17da      	asrs	r2, r3, #31
 80232bc:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80232c0:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80232c4:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80232c8:	f04f 0300 	mov.w	r3, #0
 80232cc:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 80232d0:	fb02 f001 	mul.w	r0, r2, r1
 80232d4:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 80232d8:	fb01 f103 	mul.w	r1, r1, r3
 80232dc:	4401      	add	r1, r0
 80232de:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80232e2:	fba0 2302 	umull	r2, r3, r0, r2
 80232e6:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80232ea:	4613      	mov	r3, r2
 80232ec:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 80232f0:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80232f4:	18cb      	adds	r3, r1, r3
 80232f6:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80232fa:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80232fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023302:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 8023306:	1851      	adds	r1, r2, r1
 8023308:	6239      	str	r1, [r7, #32]
 802330a:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 802330e:	414b      	adcs	r3, r1
 8023310:	627b      	str	r3, [r7, #36]	; 0x24
 8023312:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8023316:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 802331a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802331e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8023322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023326:	2b00      	cmp	r3, #0
 8023328:	da08      	bge.n	802333c <arm_nn_softmax_common_s8+0x3d9c>
 802332a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802332e:	1851      	adds	r1, r2, r1
 8023330:	61b9      	str	r1, [r7, #24]
 8023332:	f143 0300 	adc.w	r3, r3, #0
 8023336:	61fb      	str	r3, [r7, #28]
 8023338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802333c:	f04f 0000 	mov.w	r0, #0
 8023340:	f04f 0100 	mov.w	r1, #0
 8023344:	0fd0      	lsrs	r0, r2, #31
 8023346:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802334a:	17d9      	asrs	r1, r3, #31
 802334c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023350:	f5a3 726a 	sub.w	r2, r3, #936	; 0x3a8
 8023354:	4603      	mov	r3, r0
 8023356:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023358:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802335c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8023360:	681b      	ldr	r3, [r3, #0]
 8023362:	2bf2      	cmp	r3, #242	; 0xf2
 8023364:	d10e      	bne.n	8023384 <arm_nn_softmax_common_s8+0x3de4>
 8023366:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802336a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 802336e:	681b      	ldr	r3, [r3, #0]
 8023370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023374:	d106      	bne.n	8023384 <arm_nn_softmax_common_s8+0x3de4>
        result = NN_Q31_MAX;
 8023376:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802337a:	f5a3 726a 	sub.w	r2, r3, #936	; 0x3a8
 802337e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023382:	6013      	str	r3, [r2, #0]
    return result;
 8023384:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023388:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 802338c:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 802338e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023392:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8023396:	681b      	ldr	r3, [r3, #0]
 8023398:	ea02 0003 	and.w	r0, r2, r3
 802339c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80233a0:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80233a4:	681b      	ldr	r3, [r3, #0]
 80233a6:	43da      	mvns	r2, r3
 80233a8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80233ac:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80233b0:	681b      	ldr	r3, [r3, #0]
 80233b2:	ea02 0103 	and.w	r1, r2, r3
 80233b6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80233ba:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80233be:	ea80 0301 	eor.w	r3, r0, r1
 80233c2:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 80233c4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80233c8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80233cc:	681b      	ldr	r3, [r3, #0]
 80233ce:	2b00      	cmp	r3, #0
 80233d0:	d102      	bne.n	80233d8 <arm_nn_softmax_common_s8+0x3e38>
 80233d2:	f04f 32ff 	mov.w	r2, #4294967295
 80233d6:	e000      	b.n	80233da <arm_nn_softmax_common_s8+0x3e3a>
 80233d8:	2200      	movs	r2, #0
 80233da:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80233de:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80233e2:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 80233e4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80233e8:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80233ec:	681b      	ldr	r3, [r3, #0]
 80233ee:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80233f2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80233f6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80233fa:	681b      	ldr	r3, [r3, #0]
 80233fc:	43da      	mvns	r2, r3
 80233fe:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023402:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	4013      	ands	r3, r2
 802340a:	4059      	eors	r1, r3
 802340c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023410:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8023414:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 8023418:	6013      	str	r3, [r2, #0]
 802341a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802341e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8023422:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8023424:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023428:	f5a3 7221 	sub.w	r2, r3, #644	; 0x284
 802342c:	2300      	movs	r3, #0
 802342e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023434:	f04f 0300 	mov.w	r3, #0
 8023438:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 802343c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023440:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023444:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8023448:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802344c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8023450:	6812      	ldr	r2, [r2, #0]
 8023452:	681b      	ldr	r3, [r3, #0]
 8023454:	4053      	eors	r3, r2
 8023456:	0fdb      	lsrs	r3, r3, #31
 8023458:	f003 0301 	and.w	r3, r3, #1
 802345c:	b2db      	uxtb	r3, r3
 802345e:	2b00      	cmp	r3, #0
 8023460:	d010      	beq.n	8023484 <arm_nn_softmax_common_s8+0x3ee4>
        mult = 1 - mult;
 8023462:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8023466:	e9d3 2300 	ldrd	r2, r3, [r3]
 802346a:	2100      	movs	r1, #0
 802346c:	f1d2 0001 	rsbs	r0, r2, #1
 8023470:	6138      	str	r0, [r7, #16]
 8023472:	eb61 0303 	sbc.w	r3, r1, r3
 8023476:	617b      	str	r3, [r7, #20]
 8023478:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 802347c:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8023480:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023484:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023488:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 802348c:	681b      	ldr	r3, [r3, #0]
 802348e:	17da      	asrs	r2, r3, #31
 8023490:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8023494:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8023498:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802349c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80234a0:	681b      	ldr	r3, [r3, #0]
 80234a2:	17da      	asrs	r2, r3, #31
 80234a4:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80234a8:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 80234ac:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 80234b0:	460b      	mov	r3, r1
 80234b2:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80234b6:	fb02 f203 	mul.w	r2, r2, r3
 80234ba:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80234be:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 80234c2:	4601      	mov	r1, r0
 80234c4:	fb01 f303 	mul.w	r3, r1, r3
 80234c8:	4413      	add	r3, r2
 80234ca:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80234ce:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 80234d2:	fba2 1201 	umull	r1, r2, r2, r1
 80234d6:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 80234da:	460a      	mov	r2, r1
 80234dc:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 80234e0:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 80234e4:	4413      	add	r3, r2
 80234e6:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 80234ea:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80234ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234f2:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 80234f6:	1851      	adds	r1, r2, r1
 80234f8:	60b9      	str	r1, [r7, #8]
 80234fa:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 80234fe:	414b      	adcs	r3, r1
 8023500:	60fb      	str	r3, [r7, #12]
 8023502:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8023506:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 802350a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802350e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8023512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023516:	2b00      	cmp	r3, #0
 8023518:	da08      	bge.n	802352c <arm_nn_softmax_common_s8+0x3f8c>
 802351a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802351e:	1851      	adds	r1, r2, r1
 8023520:	6039      	str	r1, [r7, #0]
 8023522:	f143 0300 	adc.w	r3, r3, #0
 8023526:	607b      	str	r3, [r7, #4]
 8023528:	e9d7 2300 	ldrd	r2, r3, [r7]
 802352c:	f04f 0000 	mov.w	r0, #0
 8023530:	f04f 0100 	mov.w	r1, #0
 8023534:	0fd0      	lsrs	r0, r2, #31
 8023536:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802353a:	17d9      	asrs	r1, r3, #31
 802353c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023540:	f5a3 7221 	sub.w	r2, r3, #644	; 0x284
 8023544:	4603      	mov	r3, r0
 8023546:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023548:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802354c:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 8023550:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023554:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8023558:	6812      	ldr	r2, [r2, #0]
 802355a:	681b      	ldr	r3, [r3, #0]
 802355c:	429a      	cmp	r2, r3
 802355e:	d10e      	bne.n	802357e <arm_nn_softmax_common_s8+0x3fde>
 8023560:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023564:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8023568:	681b      	ldr	r3, [r3, #0]
 802356a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802356e:	d106      	bne.n	802357e <arm_nn_softmax_common_s8+0x3fde>
        result = NN_Q31_MAX;
 8023570:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023574:	f5a3 7221 	sub.w	r2, r3, #644	; 0x284
 8023578:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802357c:	6013      	str	r3, [r2, #0]
    return result;
 802357e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023582:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8023586:	681a      	ldr	r2, [r3, #0]
 8023588:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802358c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8023590:	601a      	str	r2, [r3, #0]
 8023592:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023596:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 802359a:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 802359e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80235a0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80235a4:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 80235a8:	2300      	movs	r3, #0
 80235aa:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80235ac:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80235b0:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80235b4:	2201      	movs	r2, #1
 80235b6:	681b      	ldr	r3, [r3, #0]
 80235b8:	fa02 f103 	lsl.w	r1, r2, r3
 80235bc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80235c0:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 80235c4:	1e4b      	subs	r3, r1, #1
 80235c6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80235c8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80235cc:	f5a3 711d 	sub.w	r1, r3, #628	; 0x274
 80235d0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80235d4:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 80235d8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80235dc:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80235e0:	6812      	ldr	r2, [r2, #0]
 80235e2:	681b      	ldr	r3, [r3, #0]
 80235e4:	4013      	ands	r3, r2
 80235e6:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80235e8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80235ec:	f5a3 711b 	sub.w	r1, r3, #620	; 0x26c
 80235f0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80235f4:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 80235f8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80235fc:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8023600:	6812      	ldr	r2, [r2, #0]
 8023602:	681b      	ldr	r3, [r3, #0]
 8023604:	fa42 f303 	asr.w	r3, r2, r3
 8023608:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 802360a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802360e:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8023612:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023616:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 802361a:	681b      	ldr	r3, [r3, #0]
 802361c:	105b      	asrs	r3, r3, #1
 802361e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8023620:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023624:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8023628:	681b      	ldr	r3, [r3, #0]
 802362a:	2b00      	cmp	r3, #0
 802362c:	da0a      	bge.n	8023644 <arm_nn_softmax_common_s8+0x40a4>
        threshold++;
 802362e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023632:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8023636:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802363a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 802363e:	681b      	ldr	r3, [r3, #0]
 8023640:	3301      	adds	r3, #1
 8023642:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8023644:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023648:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 802364c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023650:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8023654:	6812      	ldr	r2, [r2, #0]
 8023656:	681b      	ldr	r3, [r3, #0]
 8023658:	429a      	cmp	r2, r3
 802365a:	dd0a      	ble.n	8023672 <arm_nn_softmax_common_s8+0x40d2>
        result++;
 802365c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023660:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8023664:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023668:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 802366c:	681b      	ldr	r3, [r3, #0]
 802366e:	3301      	adds	r3, #1
 8023670:	6013      	str	r3, [r2, #0]
    return result;
 8023672:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8023676:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 802367a:	681b      	ldr	r3, [r3, #0]
                    const int32_t res =
 802367c:	3b80      	subs	r3, #128	; 0x80
 802367e:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
                        NN_Q7_MIN;
                    output_s8[col] = (int8_t)CLAMP(res, (int32_t)NN_Q7_MAX, (int32_t)NN_Q7_MIN);
 8023682:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8023686:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 802368a:	db09      	blt.n	80236a0 <arm_nn_softmax_common_s8+0x4100>
 802368c:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8023690:	2b7e      	cmp	r3, #126	; 0x7e
 8023692:	dc03      	bgt.n	802369c <arm_nn_softmax_common_s8+0x40fc>
 8023694:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8023698:	b259      	sxtb	r1, r3
 802369a:	e003      	b.n	80236a4 <arm_nn_softmax_common_s8+0x4104>
 802369c:	217f      	movs	r1, #127	; 0x7f
 802369e:	e001      	b.n	80236a4 <arm_nn_softmax_common_s8+0x4104>
 80236a0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80236a4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80236a8:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 80236ac:	441a      	add	r2, r3
 80236ae:	460b      	mov	r3, r1
 80236b0:	7013      	strb	r3, [r2, #0]
 80236b2:	e006      	b.n	80236c2 <arm_nn_softmax_common_s8+0x4122>
                }
                else
                {
                    output_s8[col] = NN_Q7_MIN;
 80236b4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80236b8:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 80236bc:	441a      	add	r2, r3
 80236be:	2380      	movs	r3, #128	; 0x80
 80236c0:	7013      	strb	r3, [r2, #0]
            for (col = 0; col < row_size; ++col)
 80236c2:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80236c6:	3301      	adds	r3, #1
 80236c8:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80236cc:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80236d0:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80236d4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80236d8:	681b      	ldr	r3, [r3, #0]
 80236da:	429a      	cmp	r2, r3
 80236dc:	f6fe aa66 	blt.w	8021bac <arm_nn_softmax_common_s8+0x260c>
                }
            }
        }

        input += row_size;
 80236e0:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80236e4:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80236e8:	6819      	ldr	r1, [r3, #0]
 80236ea:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80236ee:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 80236f2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80236f6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80236fa:	681b      	ldr	r3, [r3, #0]
 80236fc:	440b      	add	r3, r1
 80236fe:	6013      	str	r3, [r2, #0]
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8023700:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8023704:	3301      	adds	r3, #1
 8023706:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 802370a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802370e:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8023712:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	429a      	cmp	r2, r3
 802371a:	f6fb af69 	blt.w	801f5f0 <arm_nn_softmax_common_s8+0x50>
 802371e:	e000      	b.n	8023722 <arm_nn_softmax_common_s8+0x4182>
      return;
 8023720:	bf00      	nop
    }
}
 8023722:	f507 671b 	add.w	r7, r7, #2480	; 0x9b0
 8023726:	46bd      	mov	sp, r7
 8023728:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802372c:	4770      	bx	lr
 802372e:	bf00      	nop

08023730 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8023730:	b580      	push	{r7, lr}
 8023732:	b088      	sub	sp, #32
 8023734:	af04      	add	r7, sp, #16
 8023736:	60f8      	str	r0, [r7, #12]
 8023738:	60b9      	str	r1, [r7, #8]
 802373a:	607a      	str	r2, [r7, #4]
 802373c:	603b      	str	r3, [r7, #0]

        input += row_size;
        output += row_size;
    }
#else
    arm_nn_softmax_common_s8(input, num_rows, row_size, mult, shift, diff_min, false, (void *)output);
 802373e:	6a3b      	ldr	r3, [r7, #32]
 8023740:	9303      	str	r3, [sp, #12]
 8023742:	2300      	movs	r3, #0
 8023744:	9302      	str	r3, [sp, #8]
 8023746:	69fb      	ldr	r3, [r7, #28]
 8023748:	9301      	str	r3, [sp, #4]
 802374a:	69bb      	ldr	r3, [r7, #24]
 802374c:	9300      	str	r3, [sp, #0]
 802374e:	683b      	ldr	r3, [r7, #0]
 8023750:	687a      	ldr	r2, [r7, #4]
 8023752:	68b9      	ldr	r1, [r7, #8]
 8023754:	68f8      	ldr	r0, [r7, #12]
 8023756:	f7fb ff23 	bl	801f5a0 <arm_nn_softmax_common_s8>
#endif
}
 802375a:	bf00      	nop
 802375c:	3710      	adds	r7, #16
 802375e:	46bd      	mov	sp, r7
 8023760:	bd80      	pop	{r7, pc}

08023762 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8023762:	b580      	push	{r7, lr}
 8023764:	b082      	sub	sp, #8
 8023766:	af00      	add	r7, sp, #0
 8023768:	ed87 0a01 	vstr	s0, [r7, #4]
 802376c:	ed97 0a01 	vldr	s0, [r7, #4]
 8023770:	f007 fa2c 	bl	802abcc <cosf>
 8023774:	eef0 7a40 	vmov.f32	s15, s0
 8023778:	eeb0 0a67 	vmov.f32	s0, s15
 802377c:	3708      	adds	r7, #8
 802377e:	46bd      	mov	sp, r7
 8023780:	bd80      	pop	{r7, pc}

08023782 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 8023782:	b580      	push	{r7, lr}
 8023784:	b082      	sub	sp, #8
 8023786:	af00      	add	r7, sp, #0
 8023788:	ed87 0a01 	vstr	s0, [r7, #4]
 802378c:	ed97 0a01 	vldr	s0, [r7, #4]
 8023790:	f007 fa86 	bl	802aca0 <sinf>
 8023794:	eef0 7a40 	vmov.f32	s15, s0
 8023798:	eeb0 0a67 	vmov.f32	s0, s15
 802379c:	3708      	adds	r7, #8
 802379e:	46bd      	mov	sp, r7
 80237a0:	bd80      	pop	{r7, pc}
 80237a2:	0000      	movs	r0, r0
 80237a4:	0000      	movs	r0, r0
	...

080237a8 <_ZN2ei3dct9transformEPfj>:
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327950288
#endif // M_PI

// DCT type II, unscaled
int ei::dct::transform(float vector[], size_t len) {
 80237a8:	b5b0      	push	{r4, r5, r7, lr}
 80237aa:	ed2d 8b02 	vpush	{d8}
 80237ae:	b090      	sub	sp, #64	; 0x40
 80237b0:	af02      	add	r7, sp, #8
 80237b2:	6078      	str	r0, [r7, #4]
 80237b4:	6039      	str	r1, [r7, #0]
    const size_t fft_data_out_size = (len / 2 + 1) * sizeof(ei::fft_complex_t);
 80237b6:	683b      	ldr	r3, [r7, #0]
 80237b8:	085b      	lsrs	r3, r3, #1
 80237ba:	3301      	adds	r3, #1
 80237bc:	00db      	lsls	r3, r3, #3
 80237be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const size_t fft_data_in_size = len * sizeof(float);
 80237c0:	683b      	ldr	r3, [r7, #0]
 80237c2:	009b      	lsls	r3, r3, #2
 80237c4:	62bb      	str	r3, [r7, #40]	; 0x28

    // Allocate KissFFT input / output buffer
    fft_complex_t *fft_data_out =
        (ei::fft_complex_t*)ei_dsp_calloc(fft_data_out_size, 1);
 80237c6:	2101      	movs	r1, #1
 80237c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80237ca:	f001 fe61 	bl	8025490 <_Z9ei_callocjj>
 80237ce:	6278      	str	r0, [r7, #36]	; 0x24
    if (!fft_data_out) {
 80237d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80237d2:	2b00      	cmp	r3, #0
 80237d4:	d101      	bne.n	80237da <_ZN2ei3dct9transformEPfj+0x32>
        return ei::EIDSP_OUT_OF_MEM;
 80237d6:	4b86      	ldr	r3, [pc, #536]	; (80239f0 <_ZN2ei3dct9transformEPfj+0x248>)
 80237d8:	e0ff      	b.n	80239da <_ZN2ei3dct9transformEPfj+0x232>
    }

    float *fft_data_in = (float*)ei_dsp_calloc(fft_data_in_size, 1);
 80237da:	2101      	movs	r1, #1
 80237dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80237de:	f001 fe57 	bl	8025490 <_Z9ei_callocjj>
 80237e2:	6238      	str	r0, [r7, #32]
    if (!fft_data_in) {
 80237e4:	6a3b      	ldr	r3, [r7, #32]
 80237e6:	2b00      	cmp	r3, #0
 80237e8:	d104      	bne.n	80237f4 <_ZN2ei3dct9transformEPfj+0x4c>
        ei_dsp_free(fft_data_out, fft_data_out_size);
 80237ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80237ec:	f001 fe5e 	bl	80254ac <_Z7ei_freePv>
        return ei::EIDSP_OUT_OF_MEM;
 80237f0:	4b7f      	ldr	r3, [pc, #508]	; (80239f0 <_ZN2ei3dct9transformEPfj+0x248>)
 80237f2:	e0f2      	b.n	80239da <_ZN2ei3dct9transformEPfj+0x232>
    }

    // Preprocess the input buffer with the data from the vector
    size_t halfLen = len / 2;
 80237f4:	683b      	ldr	r3, [r7, #0]
 80237f6:	085b      	lsrs	r3, r3, #1
 80237f8:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < halfLen; i++) {
 80237fa:	2300      	movs	r3, #0
 80237fc:	637b      	str	r3, [r7, #52]	; 0x34
 80237fe:	e01a      	b.n	8023836 <_ZN2ei3dct9transformEPfj+0x8e>
        fft_data_in[i] = vector[i * 2];
 8023800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023802:	00db      	lsls	r3, r3, #3
 8023804:	687a      	ldr	r2, [r7, #4]
 8023806:	441a      	add	r2, r3
 8023808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802380a:	009b      	lsls	r3, r3, #2
 802380c:	6a39      	ldr	r1, [r7, #32]
 802380e:	440b      	add	r3, r1
 8023810:	6812      	ldr	r2, [r2, #0]
 8023812:	601a      	str	r2, [r3, #0]
        fft_data_in[len - 1 - i] = vector[i * 2 + 1];
 8023814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023816:	00db      	lsls	r3, r3, #3
 8023818:	3304      	adds	r3, #4
 802381a:	687a      	ldr	r2, [r7, #4]
 802381c:	441a      	add	r2, r3
 802381e:	6839      	ldr	r1, [r7, #0]
 8023820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023822:	1acb      	subs	r3, r1, r3
 8023824:	3b01      	subs	r3, #1
 8023826:	009b      	lsls	r3, r3, #2
 8023828:	6a39      	ldr	r1, [r7, #32]
 802382a:	440b      	add	r3, r1
 802382c:	6812      	ldr	r2, [r2, #0]
 802382e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < halfLen; i++) {
 8023830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023832:	3301      	adds	r3, #1
 8023834:	637b      	str	r3, [r7, #52]	; 0x34
 8023836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023838:	69fb      	ldr	r3, [r7, #28]
 802383a:	429a      	cmp	r2, r3
 802383c:	d3e0      	bcc.n	8023800 <_ZN2ei3dct9transformEPfj+0x58>
    }
    if (len % 2 == 1) {
 802383e:	683b      	ldr	r3, [r7, #0]
 8023840:	f003 0301 	and.w	r3, r3, #1
 8023844:	2b00      	cmp	r3, #0
 8023846:	d00c      	beq.n	8023862 <_ZN2ei3dct9transformEPfj+0xba>
        fft_data_in[halfLen] = vector[len - 1];
 8023848:	683b      	ldr	r3, [r7, #0]
 802384a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802384e:	3b01      	subs	r3, #1
 8023850:	009b      	lsls	r3, r3, #2
 8023852:	687a      	ldr	r2, [r7, #4]
 8023854:	441a      	add	r2, r3
 8023856:	69fb      	ldr	r3, [r7, #28]
 8023858:	009b      	lsls	r3, r3, #2
 802385a:	6a39      	ldr	r1, [r7, #32]
 802385c:	440b      	add	r3, r1
 802385e:	6812      	ldr	r2, [r2, #0]
 8023860:	601a      	str	r2, [r3, #0]
    }

    int r = ei::numpy::rfft(fft_data_in, len, fft_data_out, (len / 2 + 1), len);
 8023862:	683b      	ldr	r3, [r7, #0]
 8023864:	085b      	lsrs	r3, r3, #1
 8023866:	1c5a      	adds	r2, r3, #1
 8023868:	683b      	ldr	r3, [r7, #0]
 802386a:	9300      	str	r3, [sp, #0]
 802386c:	4613      	mov	r3, r2
 802386e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023870:	6839      	ldr	r1, [r7, #0]
 8023872:	6a38      	ldr	r0, [r7, #32]
 8023874:	f7de fa14 	bl	8001ca0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 8023878:	61b8      	str	r0, [r7, #24]
    if (r != 0) {
 802387a:	69bb      	ldr	r3, [r7, #24]
 802387c:	2b00      	cmp	r3, #0
 802387e:	d007      	beq.n	8023890 <_ZN2ei3dct9transformEPfj+0xe8>
        ei_dsp_free(fft_data_in, fft_data_in_size);
 8023880:	6a38      	ldr	r0, [r7, #32]
 8023882:	f001 fe13 	bl	80254ac <_Z7ei_freePv>
        ei_dsp_free(fft_data_out, fft_data_out_size);
 8023886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023888:	f001 fe10 	bl	80254ac <_Z7ei_freePv>
        return r;
 802388c:	69bb      	ldr	r3, [r7, #24]
 802388e:	e0a4      	b.n	80239da <_ZN2ei3dct9transformEPfj+0x232>
    }

    size_t i = 0;
 8023890:	2300      	movs	r3, #0
 8023892:	633b      	str	r3, [r7, #48]	; 0x30
    for (; i < len / 2 + 1; i++) {
 8023894:	e045      	b.n	8023922 <_ZN2ei3dct9transformEPfj+0x17a>
        float temp = i * M_PI / (len * 2);
 8023896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8023898:	f7dc fe34 	bl	8000504 <__aeabi_ui2d>
 802389c:	a352      	add	r3, pc, #328	; (adr r3, 80239e8 <_ZN2ei3dct9transformEPfj+0x240>)
 802389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238a2:	f7dc fea9 	bl	80005f8 <__aeabi_dmul>
 80238a6:	4602      	mov	r2, r0
 80238a8:	460b      	mov	r3, r1
 80238aa:	4614      	mov	r4, r2
 80238ac:	461d      	mov	r5, r3
 80238ae:	683b      	ldr	r3, [r7, #0]
 80238b0:	005b      	lsls	r3, r3, #1
 80238b2:	4618      	mov	r0, r3
 80238b4:	f7dc fe26 	bl	8000504 <__aeabi_ui2d>
 80238b8:	4602      	mov	r2, r0
 80238ba:	460b      	mov	r3, r1
 80238bc:	4620      	mov	r0, r4
 80238be:	4629      	mov	r1, r5
 80238c0:	f7dc ffc4 	bl	800084c <__aeabi_ddiv>
 80238c4:	4602      	mov	r2, r0
 80238c6:	460b      	mov	r3, r1
 80238c8:	4610      	mov	r0, r2
 80238ca:	4619      	mov	r1, r3
 80238cc:	f7dd f98c 	bl	8000be8 <__aeabi_d2f>
 80238d0:	4603      	mov	r3, r0
 80238d2:	60fb      	str	r3, [r7, #12]
        vector[i] = fft_data_out[i].r * cos(temp) + fft_data_out[i].i * sin(temp);
 80238d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80238d6:	00db      	lsls	r3, r3, #3
 80238d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80238da:	4413      	add	r3, r2
 80238dc:	ed93 8a00 	vldr	s16, [r3]
 80238e0:	ed97 0a03 	vldr	s0, [r7, #12]
 80238e4:	f7ff ff3d 	bl	8023762 <_ZSt3cosf>
 80238e8:	eef0 7a40 	vmov.f32	s15, s0
 80238ec:	ee28 8a27 	vmul.f32	s16, s16, s15
 80238f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80238f2:	00db      	lsls	r3, r3, #3
 80238f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80238f6:	4413      	add	r3, r2
 80238f8:	edd3 8a01 	vldr	s17, [r3, #4]
 80238fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8023900:	f7ff ff3f 	bl	8023782 <_ZSt3sinf>
 8023904:	eef0 7a40 	vmov.f32	s15, s0
 8023908:	ee68 7aa7 	vmul.f32	s15, s17, s15
 802390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802390e:	009b      	lsls	r3, r3, #2
 8023910:	687a      	ldr	r2, [r7, #4]
 8023912:	4413      	add	r3, r2
 8023914:	ee78 7a27 	vadd.f32	s15, s16, s15
 8023918:	edc3 7a00 	vstr	s15, [r3]
    for (; i < len / 2 + 1; i++) {
 802391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802391e:	3301      	adds	r3, #1
 8023920:	633b      	str	r3, [r7, #48]	; 0x30
 8023922:	683b      	ldr	r3, [r7, #0]
 8023924:	085b      	lsrs	r3, r3, #1
 8023926:	3301      	adds	r3, #1
 8023928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802392a:	429a      	cmp	r2, r3
 802392c:	d3b3      	bcc.n	8023896 <_ZN2ei3dct9transformEPfj+0xee>
    }
    //take advantage of hermetian symmetry to calculate remainder of signal
    for (; i < len; i++) {
 802392e:	e049      	b.n	80239c4 <_ZN2ei3dct9transformEPfj+0x21c>
        float temp = i * M_PI / (len * 2);
 8023930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8023932:	f7dc fde7 	bl	8000504 <__aeabi_ui2d>
 8023936:	a32c      	add	r3, pc, #176	; (adr r3, 80239e8 <_ZN2ei3dct9transformEPfj+0x240>)
 8023938:	e9d3 2300 	ldrd	r2, r3, [r3]
 802393c:	f7dc fe5c 	bl	80005f8 <__aeabi_dmul>
 8023940:	4602      	mov	r2, r0
 8023942:	460b      	mov	r3, r1
 8023944:	4614      	mov	r4, r2
 8023946:	461d      	mov	r5, r3
 8023948:	683b      	ldr	r3, [r7, #0]
 802394a:	005b      	lsls	r3, r3, #1
 802394c:	4618      	mov	r0, r3
 802394e:	f7dc fdd9 	bl	8000504 <__aeabi_ui2d>
 8023952:	4602      	mov	r2, r0
 8023954:	460b      	mov	r3, r1
 8023956:	4620      	mov	r0, r4
 8023958:	4629      	mov	r1, r5
 802395a:	f7dc ff77 	bl	800084c <__aeabi_ddiv>
 802395e:	4602      	mov	r2, r0
 8023960:	460b      	mov	r3, r1
 8023962:	4610      	mov	r0, r2
 8023964:	4619      	mov	r1, r3
 8023966:	f7dd f93f 	bl	8000be8 <__aeabi_d2f>
 802396a:	4603      	mov	r3, r0
 802396c:	617b      	str	r3, [r7, #20]
        int conj_idx = len-i;
 802396e:	683a      	ldr	r2, [r7, #0]
 8023970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023972:	1ad3      	subs	r3, r2, r3
 8023974:	613b      	str	r3, [r7, #16]
        // second half bins not calculated would have just been the conjugate of the first half (note minus of imag)
        vector[i] = fft_data_out[conj_idx].r * cos(temp) - fft_data_out[conj_idx].i * sin(temp);
 8023976:	693b      	ldr	r3, [r7, #16]
 8023978:	00db      	lsls	r3, r3, #3
 802397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802397c:	4413      	add	r3, r2
 802397e:	ed93 8a00 	vldr	s16, [r3]
 8023982:	ed97 0a05 	vldr	s0, [r7, #20]
 8023986:	f7ff feec 	bl	8023762 <_ZSt3cosf>
 802398a:	eef0 7a40 	vmov.f32	s15, s0
 802398e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8023992:	693b      	ldr	r3, [r7, #16]
 8023994:	00db      	lsls	r3, r3, #3
 8023996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023998:	4413      	add	r3, r2
 802399a:	edd3 8a01 	vldr	s17, [r3, #4]
 802399e:	ed97 0a05 	vldr	s0, [r7, #20]
 80239a2:	f7ff feee 	bl	8023782 <_ZSt3sinf>
 80239a6:	eef0 7a40 	vmov.f32	s15, s0
 80239aa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80239ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80239b0:	009b      	lsls	r3, r3, #2
 80239b2:	687a      	ldr	r2, [r7, #4]
 80239b4:	4413      	add	r3, r2
 80239b6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80239ba:	edc3 7a00 	vstr	s15, [r3]
    for (; i < len; i++) {
 80239be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80239c0:	3301      	adds	r3, #1
 80239c2:	633b      	str	r3, [r7, #48]	; 0x30
 80239c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80239c6:	683b      	ldr	r3, [r7, #0]
 80239c8:	429a      	cmp	r2, r3
 80239ca:	d3b1      	bcc.n	8023930 <_ZN2ei3dct9transformEPfj+0x188>
    }
    ei_dsp_free(fft_data_in, fft_data_in_size);
 80239cc:	6a38      	ldr	r0, [r7, #32]
 80239ce:	f001 fd6d 	bl	80254ac <_Z7ei_freePv>
    ei_dsp_free(fft_data_out, fft_data_out_size);
 80239d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80239d4:	f001 fd6a 	bl	80254ac <_Z7ei_freePv>

    return 0;
 80239d8:	2300      	movs	r3, #0
 80239da:	4618      	mov	r0, r3
 80239dc:	3738      	adds	r7, #56	; 0x38
 80239de:	46bd      	mov	sp, r7
 80239e0:	ecbd 8b02 	vpop	{d8}
 80239e4:	bdb0      	pop	{r4, r5, r7, pc}
 80239e6:	bf00      	nop
 80239e8:	54442d18 	.word	0x54442d18
 80239ec:	400921fb 	.word	0x400921fb
 80239f0:	fffffc16 	.word	0xfffffc16

080239f4 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 80239f4:	b480      	push	{r7}
 80239f6:	b089      	sub	sp, #36	; 0x24
 80239f8:	af00      	add	r7, sp, #0
 80239fa:	60f8      	str	r0, [r7, #12]
 80239fc:	60b9      	str	r1, [r7, #8]
 80239fe:	607a      	str	r2, [r7, #4]
 8023a00:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8023a02:	687b      	ldr	r3, [r7, #4]
 8023a04:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8023a08:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 8023a0a:	683b      	ldr	r3, [r7, #0]
 8023a0c:	00db      	lsls	r3, r3, #3
 8023a0e:	68fa      	ldr	r2, [r7, #12]
 8023a10:	4413      	add	r3, r2
 8023a12:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8023a14:	69fb      	ldr	r3, [r7, #28]
 8023a16:	ed93 7a00 	vldr	s14, [r3]
 8023a1a:	69bb      	ldr	r3, [r7, #24]
 8023a1c:	edd3 7a00 	vldr	s15, [r3]
 8023a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023a24:	69fb      	ldr	r3, [r7, #28]
 8023a26:	edd3 6a01 	vldr	s13, [r3, #4]
 8023a2a:	69bb      	ldr	r3, [r7, #24]
 8023a2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8023a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023a38:	edc7 7a04 	vstr	s15, [r7, #16]
 8023a3c:	69fb      	ldr	r3, [r7, #28]
 8023a3e:	ed93 7a00 	vldr	s14, [r3]
 8023a42:	69bb      	ldr	r3, [r7, #24]
 8023a44:	edd3 7a01 	vldr	s15, [r3, #4]
 8023a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023a4c:	69fb      	ldr	r3, [r7, #28]
 8023a4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8023a52:	69bb      	ldr	r3, [r7, #24]
 8023a54:	edd3 7a00 	vldr	s15, [r3]
 8023a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023a60:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 8023a64:	68bb      	ldr	r3, [r7, #8]
 8023a66:	00db      	lsls	r3, r3, #3
 8023a68:	69ba      	ldr	r2, [r7, #24]
 8023a6a:	4413      	add	r3, r2
 8023a6c:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 8023a6e:	68fb      	ldr	r3, [r7, #12]
 8023a70:	ed93 7a00 	vldr	s14, [r3]
 8023a74:	edd7 7a04 	vldr	s15, [r7, #16]
 8023a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023a7c:	69fb      	ldr	r3, [r7, #28]
 8023a7e:	edc3 7a00 	vstr	s15, [r3]
 8023a82:	68fb      	ldr	r3, [r7, #12]
 8023a84:	ed93 7a01 	vldr	s14, [r3, #4]
 8023a88:	edd7 7a05 	vldr	s15, [r7, #20]
 8023a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023a90:	69fb      	ldr	r3, [r7, #28]
 8023a92:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 8023a96:	68fb      	ldr	r3, [r7, #12]
 8023a98:	ed93 7a00 	vldr	s14, [r3]
 8023a9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8023aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023aa4:	68fb      	ldr	r3, [r7, #12]
 8023aa6:	edc3 7a00 	vstr	s15, [r3]
 8023aaa:	68fb      	ldr	r3, [r7, #12]
 8023aac:	ed93 7a01 	vldr	s14, [r3, #4]
 8023ab0:	edd7 7a05 	vldr	s15, [r7, #20]
 8023ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023ab8:	68fb      	ldr	r3, [r7, #12]
 8023aba:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 8023abe:	69fb      	ldr	r3, [r7, #28]
 8023ac0:	3308      	adds	r3, #8
 8023ac2:	61fb      	str	r3, [r7, #28]
        ++Fout;
 8023ac4:	68fb      	ldr	r3, [r7, #12]
 8023ac6:	3308      	adds	r3, #8
 8023ac8:	60fb      	str	r3, [r7, #12]
    }while (--m);
 8023aca:	683b      	ldr	r3, [r7, #0]
 8023acc:	3b01      	subs	r3, #1
 8023ace:	603b      	str	r3, [r7, #0]
 8023ad0:	683b      	ldr	r3, [r7, #0]
 8023ad2:	2b00      	cmp	r3, #0
 8023ad4:	bf14      	ite	ne
 8023ad6:	2301      	movne	r3, #1
 8023ad8:	2300      	moveq	r3, #0
 8023ada:	b2db      	uxtb	r3, r3
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	d199      	bne.n	8023a14 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 8023ae0:	bf00      	nop
 8023ae2:	bf00      	nop
 8023ae4:	3724      	adds	r7, #36	; 0x24
 8023ae6:	46bd      	mov	sp, r7
 8023ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023aec:	4770      	bx	lr

08023aee <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 8023aee:	b480      	push	{r7}
 8023af0:	b097      	sub	sp, #92	; 0x5c
 8023af2:	af00      	add	r7, sp, #0
 8023af4:	60f8      	str	r0, [r7, #12]
 8023af6:	60b9      	str	r1, [r7, #8]
 8023af8:	607a      	str	r2, [r7, #4]
 8023afa:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 8023afc:	683b      	ldr	r3, [r7, #0]
 8023afe:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 8023b00:	683b      	ldr	r3, [r7, #0]
 8023b02:	005b      	lsls	r3, r3, #1
 8023b04:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 8023b06:	683a      	ldr	r2, [r7, #0]
 8023b08:	4613      	mov	r3, r2
 8023b0a:	005b      	lsls	r3, r3, #1
 8023b0c:	4413      	add	r3, r2
 8023b0e:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8023b10:	687b      	ldr	r3, [r7, #4]
 8023b12:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8023b16:	657b      	str	r3, [r7, #84]	; 0x54
 8023b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023b1a:	653b      	str	r3, [r7, #80]	; 0x50
 8023b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023b1e:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8023b20:	683b      	ldr	r3, [r7, #0]
 8023b22:	00db      	lsls	r3, r3, #3
 8023b24:	68fa      	ldr	r2, [r7, #12]
 8023b26:	4413      	add	r3, r2
 8023b28:	ed93 7a00 	vldr	s14, [r3]
 8023b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023b2e:	edd3 7a00 	vldr	s15, [r3]
 8023b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023b36:	683b      	ldr	r3, [r7, #0]
 8023b38:	00db      	lsls	r3, r3, #3
 8023b3a:	68fa      	ldr	r2, [r7, #12]
 8023b3c:	4413      	add	r3, r2
 8023b3e:	edd3 6a01 	vldr	s13, [r3, #4]
 8023b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023b44:	edd3 7a01 	vldr	s15, [r3, #4]
 8023b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023b50:	edc7 7a04 	vstr	s15, [r7, #16]
 8023b54:	683b      	ldr	r3, [r7, #0]
 8023b56:	00db      	lsls	r3, r3, #3
 8023b58:	68fa      	ldr	r2, [r7, #12]
 8023b5a:	4413      	add	r3, r2
 8023b5c:	ed93 7a00 	vldr	s14, [r3]
 8023b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023b62:	edd3 7a01 	vldr	s15, [r3, #4]
 8023b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023b6a:	683b      	ldr	r3, [r7, #0]
 8023b6c:	00db      	lsls	r3, r3, #3
 8023b6e:	68fa      	ldr	r2, [r7, #12]
 8023b70:	4413      	add	r3, r2
 8023b72:	edd3 6a01 	vldr	s13, [r3, #4]
 8023b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023b78:	edd3 7a00 	vldr	s15, [r3]
 8023b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023b84:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 8023b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023b8a:	00db      	lsls	r3, r3, #3
 8023b8c:	68fa      	ldr	r2, [r7, #12]
 8023b8e:	4413      	add	r3, r2
 8023b90:	ed93 7a00 	vldr	s14, [r3]
 8023b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023b96:	edd3 7a00 	vldr	s15, [r3]
 8023b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023ba0:	00db      	lsls	r3, r3, #3
 8023ba2:	68fa      	ldr	r2, [r7, #12]
 8023ba4:	4413      	add	r3, r2
 8023ba6:	edd3 6a01 	vldr	s13, [r3, #4]
 8023baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023bac:	edd3 7a01 	vldr	s15, [r3, #4]
 8023bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023bb8:	edc7 7a06 	vstr	s15, [r7, #24]
 8023bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023bbe:	00db      	lsls	r3, r3, #3
 8023bc0:	68fa      	ldr	r2, [r7, #12]
 8023bc2:	4413      	add	r3, r2
 8023bc4:	ed93 7a00 	vldr	s14, [r3]
 8023bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023bca:	edd3 7a01 	vldr	s15, [r3, #4]
 8023bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023bd4:	00db      	lsls	r3, r3, #3
 8023bd6:	68fa      	ldr	r2, [r7, #12]
 8023bd8:	4413      	add	r3, r2
 8023bda:	edd3 6a01 	vldr	s13, [r3, #4]
 8023bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023be0:	edd3 7a00 	vldr	s15, [r3]
 8023be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023bec:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 8023bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023bf2:	00db      	lsls	r3, r3, #3
 8023bf4:	68fa      	ldr	r2, [r7, #12]
 8023bf6:	4413      	add	r3, r2
 8023bf8:	ed93 7a00 	vldr	s14, [r3]
 8023bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023bfe:	edd3 7a00 	vldr	s15, [r3]
 8023c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023c08:	00db      	lsls	r3, r3, #3
 8023c0a:	68fa      	ldr	r2, [r7, #12]
 8023c0c:	4413      	add	r3, r2
 8023c0e:	edd3 6a01 	vldr	s13, [r3, #4]
 8023c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023c14:	edd3 7a01 	vldr	s15, [r3, #4]
 8023c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023c20:	edc7 7a08 	vstr	s15, [r7, #32]
 8023c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023c26:	00db      	lsls	r3, r3, #3
 8023c28:	68fa      	ldr	r2, [r7, #12]
 8023c2a:	4413      	add	r3, r2
 8023c2c:	ed93 7a00 	vldr	s14, [r3]
 8023c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023c32:	edd3 7a01 	vldr	s15, [r3, #4]
 8023c36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023c3c:	00db      	lsls	r3, r3, #3
 8023c3e:	68fa      	ldr	r2, [r7, #12]
 8023c40:	4413      	add	r3, r2
 8023c42:	edd3 6a01 	vldr	s13, [r3, #4]
 8023c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023c48:	edd3 7a00 	vldr	s15, [r3]
 8023c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023c54:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 8023c58:	68fb      	ldr	r3, [r7, #12]
 8023c5a:	ed93 7a00 	vldr	s14, [r3]
 8023c5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8023c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023c66:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8023c6a:	68fb      	ldr	r3, [r7, #12]
 8023c6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8023c70:	edd7 7a07 	vldr	s15, [r7, #28]
 8023c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023c78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 8023c7c:	68fb      	ldr	r3, [r7, #12]
 8023c7e:	ed93 7a00 	vldr	s14, [r3]
 8023c82:	edd7 7a06 	vldr	s15, [r7, #24]
 8023c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023c8a:	68fb      	ldr	r3, [r7, #12]
 8023c8c:	edc3 7a00 	vstr	s15, [r3]
 8023c90:	68fb      	ldr	r3, [r7, #12]
 8023c92:	ed93 7a01 	vldr	s14, [r3, #4]
 8023c96:	edd7 7a07 	vldr	s15, [r7, #28]
 8023c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023c9e:	68fb      	ldr	r3, [r7, #12]
 8023ca0:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 8023ca4:	ed97 7a04 	vldr	s14, [r7, #16]
 8023ca8:	edd7 7a08 	vldr	s15, [r7, #32]
 8023cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023cb0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8023cb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8023cb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023cc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 8023cc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8023cc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8023ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023cd0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8023cd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8023cd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023ce0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 8023ce4:	68fb      	ldr	r3, [r7, #12]
 8023ce6:	ed93 7a00 	vldr	s14, [r3]
 8023cea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8023cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023cf0:	00db      	lsls	r3, r3, #3
 8023cf2:	68fa      	ldr	r2, [r7, #12]
 8023cf4:	4413      	add	r3, r2
 8023cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023cfa:	edc3 7a00 	vstr	s15, [r3]
 8023cfe:	68fb      	ldr	r3, [r7, #12]
 8023d00:	ed93 7a01 	vldr	s14, [r3, #4]
 8023d04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8023d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023d0a:	00db      	lsls	r3, r3, #3
 8023d0c:	68fa      	ldr	r2, [r7, #12]
 8023d0e:	4413      	add	r3, r2
 8023d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023d14:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8023d18:	68bb      	ldr	r3, [r7, #8]
 8023d1a:	00db      	lsls	r3, r3, #3
 8023d1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8023d1e:	4413      	add	r3, r2
 8023d20:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 8023d22:	68bb      	ldr	r3, [r7, #8]
 8023d24:	011b      	lsls	r3, r3, #4
 8023d26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8023d28:	4413      	add	r3, r2
 8023d2a:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 8023d2c:	68ba      	ldr	r2, [r7, #8]
 8023d2e:	4613      	mov	r3, r2
 8023d30:	005b      	lsls	r3, r3, #1
 8023d32:	4413      	add	r3, r2
 8023d34:	00db      	lsls	r3, r3, #3
 8023d36:	461a      	mov	r2, r3
 8023d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023d3a:	4413      	add	r3, r2
 8023d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 8023d3e:	68fb      	ldr	r3, [r7, #12]
 8023d40:	ed93 7a00 	vldr	s14, [r3]
 8023d44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8023d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023d4c:	68fb      	ldr	r3, [r7, #12]
 8023d4e:	edc3 7a00 	vstr	s15, [r3]
 8023d52:	68fb      	ldr	r3, [r7, #12]
 8023d54:	ed93 7a01 	vldr	s14, [r3, #4]
 8023d58:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8023d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023d60:	68fb      	ldr	r3, [r7, #12]
 8023d62:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 8023d66:	687b      	ldr	r3, [r7, #4]
 8023d68:	685b      	ldr	r3, [r3, #4]
 8023d6a:	2b00      	cmp	r3, #0
 8023d6c:	d030      	beq.n	8023dd0 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 8023d6e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8023d72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8023d76:	683b      	ldr	r3, [r7, #0]
 8023d78:	00db      	lsls	r3, r3, #3
 8023d7a:	68fa      	ldr	r2, [r7, #12]
 8023d7c:	4413      	add	r3, r2
 8023d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023d82:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 8023d86:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8023d8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8023d8e:	683b      	ldr	r3, [r7, #0]
 8023d90:	00db      	lsls	r3, r3, #3
 8023d92:	68fa      	ldr	r2, [r7, #12]
 8023d94:	4413      	add	r3, r2
 8023d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023d9a:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 8023d9e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8023da2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8023da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023da8:	00db      	lsls	r3, r3, #3
 8023daa:	68fa      	ldr	r2, [r7, #12]
 8023dac:	4413      	add	r3, r2
 8023dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023db2:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 8023db6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8023dba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8023dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023dc0:	00db      	lsls	r3, r3, #3
 8023dc2:	68fa      	ldr	r2, [r7, #12]
 8023dc4:	4413      	add	r3, r2
 8023dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023dca:	edc3 7a01 	vstr	s15, [r3, #4]
 8023dce:	e02f      	b.n	8023e30 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 8023dd0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8023dd4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8023dd8:	683b      	ldr	r3, [r7, #0]
 8023dda:	00db      	lsls	r3, r3, #3
 8023ddc:	68fa      	ldr	r2, [r7, #12]
 8023dde:	4413      	add	r3, r2
 8023de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023de4:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 8023de8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8023dec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8023df0:	683b      	ldr	r3, [r7, #0]
 8023df2:	00db      	lsls	r3, r3, #3
 8023df4:	68fa      	ldr	r2, [r7, #12]
 8023df6:	4413      	add	r3, r2
 8023df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023dfc:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8023e00:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8023e04:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8023e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023e0a:	00db      	lsls	r3, r3, #3
 8023e0c:	68fa      	ldr	r2, [r7, #12]
 8023e0e:	4413      	add	r3, r2
 8023e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023e14:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8023e18:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8023e1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8023e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023e22:	00db      	lsls	r3, r3, #3
 8023e24:	68fa      	ldr	r2, [r7, #12]
 8023e26:	4413      	add	r3, r2
 8023e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023e2c:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8023e30:	68fb      	ldr	r3, [r7, #12]
 8023e32:	3308      	adds	r3, #8
 8023e34:	60fb      	str	r3, [r7, #12]
    }while(--k);
 8023e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023e38:	3b01      	subs	r3, #1
 8023e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8023e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023e3e:	2b00      	cmp	r3, #0
 8023e40:	bf14      	ite	ne
 8023e42:	2301      	movne	r3, #1
 8023e44:	2300      	moveq	r3, #0
 8023e46:	b2db      	uxtb	r3, r3
 8023e48:	2b00      	cmp	r3, #0
 8023e4a:	f47f ae69 	bne.w	8023b20 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 8023e4e:	bf00      	nop
 8023e50:	bf00      	nop
 8023e52:	375c      	adds	r7, #92	; 0x5c
 8023e54:	46bd      	mov	sp, r7
 8023e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e5a:	4770      	bx	lr

08023e5c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 8023e5c:	b5b0      	push	{r4, r5, r7, lr}
 8023e5e:	b094      	sub	sp, #80	; 0x50
 8023e60:	af00      	add	r7, sp, #0
 8023e62:	60f8      	str	r0, [r7, #12]
 8023e64:	60b9      	str	r1, [r7, #8]
 8023e66:	607a      	str	r2, [r7, #4]
 8023e68:	603b      	str	r3, [r7, #0]
     size_t k=m;
 8023e6a:	683b      	ldr	r3, [r7, #0]
 8023e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 8023e6e:	683b      	ldr	r3, [r7, #0]
 8023e70:	005b      	lsls	r3, r3, #1
 8023e72:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 8023e74:	68bb      	ldr	r3, [r7, #8]
 8023e76:	683a      	ldr	r2, [r7, #0]
 8023e78:	fb02 f303 	mul.w	r3, r2, r3
 8023e7c:	6879      	ldr	r1, [r7, #4]
 8023e7e:	3321      	adds	r3, #33	; 0x21
 8023e80:	f107 0210 	add.w	r2, r7, #16
 8023e84:	00db      	lsls	r3, r3, #3
 8023e86:	440b      	add	r3, r1
 8023e88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023e8c:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8023e90:	687b      	ldr	r3, [r7, #4]
 8023e92:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8023e96:	647b      	str	r3, [r7, #68]	; 0x44
 8023e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023e9a:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8023e9c:	683b      	ldr	r3, [r7, #0]
 8023e9e:	00db      	lsls	r3, r3, #3
 8023ea0:	68fa      	ldr	r2, [r7, #12]
 8023ea2:	4413      	add	r3, r2
 8023ea4:	ed93 7a00 	vldr	s14, [r3]
 8023ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023eaa:	edd3 7a00 	vldr	s15, [r3]
 8023eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023eb2:	683b      	ldr	r3, [r7, #0]
 8023eb4:	00db      	lsls	r3, r3, #3
 8023eb6:	68fa      	ldr	r2, [r7, #12]
 8023eb8:	4413      	add	r3, r2
 8023eba:	edd3 6a01 	vldr	s13, [r3, #4]
 8023ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023ec0:	edd3 7a01 	vldr	s15, [r3, #4]
 8023ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023ecc:	edc7 7a08 	vstr	s15, [r7, #32]
 8023ed0:	683b      	ldr	r3, [r7, #0]
 8023ed2:	00db      	lsls	r3, r3, #3
 8023ed4:	68fa      	ldr	r2, [r7, #12]
 8023ed6:	4413      	add	r3, r2
 8023ed8:	ed93 7a00 	vldr	s14, [r3]
 8023edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023ede:	edd3 7a01 	vldr	s15, [r3, #4]
 8023ee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023ee6:	683b      	ldr	r3, [r7, #0]
 8023ee8:	00db      	lsls	r3, r3, #3
 8023eea:	68fa      	ldr	r2, [r7, #12]
 8023eec:	4413      	add	r3, r2
 8023eee:	edd3 6a01 	vldr	s13, [r3, #4]
 8023ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023ef4:	edd3 7a00 	vldr	s15, [r3]
 8023ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023f00:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 8023f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023f06:	00db      	lsls	r3, r3, #3
 8023f08:	68fa      	ldr	r2, [r7, #12]
 8023f0a:	4413      	add	r3, r2
 8023f0c:	ed93 7a00 	vldr	s14, [r3]
 8023f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023f12:	edd3 7a00 	vldr	s15, [r3]
 8023f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023f1c:	00db      	lsls	r3, r3, #3
 8023f1e:	68fa      	ldr	r2, [r7, #12]
 8023f20:	4413      	add	r3, r2
 8023f22:	edd3 6a01 	vldr	s13, [r3, #4]
 8023f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023f28:	edd3 7a01 	vldr	s15, [r3, #4]
 8023f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023f34:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8023f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023f3a:	00db      	lsls	r3, r3, #3
 8023f3c:	68fa      	ldr	r2, [r7, #12]
 8023f3e:	4413      	add	r3, r2
 8023f40:	ed93 7a00 	vldr	s14, [r3]
 8023f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023f46:	edd3 7a01 	vldr	s15, [r3, #4]
 8023f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023f50:	00db      	lsls	r3, r3, #3
 8023f52:	68fa      	ldr	r2, [r7, #12]
 8023f54:	4413      	add	r3, r2
 8023f56:	edd3 6a01 	vldr	s13, [r3, #4]
 8023f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023f5c:	edd3 7a00 	vldr	s15, [r3]
 8023f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023f68:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8023f6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8023f70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8023f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023f78:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8023f7c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8023f80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8023f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023f88:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8023f8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8023f90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8023f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023f98:	edc7 7a06 	vstr	s15, [r7, #24]
 8023f9c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8023fa0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8023fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023fa8:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8023fac:	68bb      	ldr	r3, [r7, #8]
 8023fae:	00db      	lsls	r3, r3, #3
 8023fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8023fb2:	4413      	add	r3, r2
 8023fb4:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 8023fb6:	68bb      	ldr	r3, [r7, #8]
 8023fb8:	011b      	lsls	r3, r3, #4
 8023fba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8023fbc:	4413      	add	r3, r2
 8023fbe:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8023fc0:	68fb      	ldr	r3, [r7, #12]
 8023fc2:	681b      	ldr	r3, [r3, #0]
 8023fc4:	4618      	mov	r0, r3
 8023fc6:	f7dc fabf 	bl	8000548 <__aeabi_f2d>
 8023fca:	4604      	mov	r4, r0
 8023fcc:	460d      	mov	r5, r1
 8023fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023fd0:	4618      	mov	r0, r3
 8023fd2:	f7dc fab9 	bl	8000548 <__aeabi_f2d>
 8023fd6:	f04f 0200 	mov.w	r2, #0
 8023fda:	4b57      	ldr	r3, [pc, #348]	; (8024138 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8023fdc:	f7dc fb0c 	bl	80005f8 <__aeabi_dmul>
 8023fe0:	4602      	mov	r2, r0
 8023fe2:	460b      	mov	r3, r1
 8023fe4:	4620      	mov	r0, r4
 8023fe6:	4629      	mov	r1, r5
 8023fe8:	f7dc f94e 	bl	8000288 <__aeabi_dsub>
 8023fec:	4602      	mov	r2, r0
 8023fee:	460b      	mov	r3, r1
 8023ff0:	4610      	mov	r0, r2
 8023ff2:	4619      	mov	r1, r3
 8023ff4:	683b      	ldr	r3, [r7, #0]
 8023ff6:	00db      	lsls	r3, r3, #3
 8023ff8:	68fa      	ldr	r2, [r7, #12]
 8023ffa:	18d4      	adds	r4, r2, r3
 8023ffc:	f7dc fdf4 	bl	8000be8 <__aeabi_d2f>
 8024000:	4603      	mov	r3, r0
 8024002:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 8024004:	68fb      	ldr	r3, [r7, #12]
 8024006:	685b      	ldr	r3, [r3, #4]
 8024008:	4618      	mov	r0, r3
 802400a:	f7dc fa9d 	bl	8000548 <__aeabi_f2d>
 802400e:	4604      	mov	r4, r0
 8024010:	460d      	mov	r5, r1
 8024012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024014:	4618      	mov	r0, r3
 8024016:	f7dc fa97 	bl	8000548 <__aeabi_f2d>
 802401a:	f04f 0200 	mov.w	r2, #0
 802401e:	4b46      	ldr	r3, [pc, #280]	; (8024138 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8024020:	f7dc faea 	bl	80005f8 <__aeabi_dmul>
 8024024:	4602      	mov	r2, r0
 8024026:	460b      	mov	r3, r1
 8024028:	4620      	mov	r0, r4
 802402a:	4629      	mov	r1, r5
 802402c:	f7dc f92c 	bl	8000288 <__aeabi_dsub>
 8024030:	4602      	mov	r2, r0
 8024032:	460b      	mov	r3, r1
 8024034:	4610      	mov	r0, r2
 8024036:	4619      	mov	r1, r3
 8024038:	683b      	ldr	r3, [r7, #0]
 802403a:	00db      	lsls	r3, r3, #3
 802403c:	68fa      	ldr	r2, [r7, #12]
 802403e:	18d4      	adds	r4, r2, r3
 8024040:	f7dc fdd2 	bl	8000be8 <__aeabi_d2f>
 8024044:	4603      	mov	r3, r0
 8024046:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8024048:	ed97 7a06 	vldr	s14, [r7, #24]
 802404c:	edd7 7a05 	vldr	s15, [r7, #20]
 8024050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024054:	edc7 7a06 	vstr	s15, [r7, #24]
 8024058:	ed97 7a07 	vldr	s14, [r7, #28]
 802405c:	edd7 7a05 	vldr	s15, [r7, #20]
 8024060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024064:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8024068:	68fb      	ldr	r3, [r7, #12]
 802406a:	ed93 7a00 	vldr	s14, [r3]
 802406e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8024072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024076:	68fb      	ldr	r3, [r7, #12]
 8024078:	edc3 7a00 	vstr	s15, [r3]
 802407c:	68fb      	ldr	r3, [r7, #12]
 802407e:	ed93 7a01 	vldr	s14, [r3, #4]
 8024082:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8024086:	ee77 7a27 	vadd.f32	s15, s14, s15
 802408a:	68fb      	ldr	r3, [r7, #12]
 802408c:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8024090:	683b      	ldr	r3, [r7, #0]
 8024092:	00db      	lsls	r3, r3, #3
 8024094:	68fa      	ldr	r2, [r7, #12]
 8024096:	4413      	add	r3, r2
 8024098:	ed93 7a00 	vldr	s14, [r3]
 802409c:	edd7 7a07 	vldr	s15, [r7, #28]
 80240a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80240a2:	00db      	lsls	r3, r3, #3
 80240a4:	68fa      	ldr	r2, [r7, #12]
 80240a6:	4413      	add	r3, r2
 80240a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80240ac:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 80240b0:	683b      	ldr	r3, [r7, #0]
 80240b2:	00db      	lsls	r3, r3, #3
 80240b4:	68fa      	ldr	r2, [r7, #12]
 80240b6:	4413      	add	r3, r2
 80240b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80240bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80240c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80240c2:	00db      	lsls	r3, r3, #3
 80240c4:	68fa      	ldr	r2, [r7, #12]
 80240c6:	4413      	add	r3, r2
 80240c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80240cc:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 80240d0:	683b      	ldr	r3, [r7, #0]
 80240d2:	00db      	lsls	r3, r3, #3
 80240d4:	68fa      	ldr	r2, [r7, #12]
 80240d6:	4413      	add	r3, r2
 80240d8:	ed93 7a00 	vldr	s14, [r3]
 80240dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80240e0:	683b      	ldr	r3, [r7, #0]
 80240e2:	00db      	lsls	r3, r3, #3
 80240e4:	68fa      	ldr	r2, [r7, #12]
 80240e6:	4413      	add	r3, r2
 80240e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80240ec:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 80240f0:	683b      	ldr	r3, [r7, #0]
 80240f2:	00db      	lsls	r3, r3, #3
 80240f4:	68fa      	ldr	r2, [r7, #12]
 80240f6:	4413      	add	r3, r2
 80240f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80240fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8024100:	683b      	ldr	r3, [r7, #0]
 8024102:	00db      	lsls	r3, r3, #3
 8024104:	68fa      	ldr	r2, [r7, #12]
 8024106:	4413      	add	r3, r2
 8024108:	ee77 7a27 	vadd.f32	s15, s14, s15
 802410c:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8024110:	68fb      	ldr	r3, [r7, #12]
 8024112:	3308      	adds	r3, #8
 8024114:	60fb      	str	r3, [r7, #12]
     }while(--k);
 8024116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8024118:	3b01      	subs	r3, #1
 802411a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802411c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802411e:	2b00      	cmp	r3, #0
 8024120:	bf14      	ite	ne
 8024122:	2301      	movne	r3, #1
 8024124:	2300      	moveq	r3, #0
 8024126:	b2db      	uxtb	r3, r3
 8024128:	2b00      	cmp	r3, #0
 802412a:	f47f aeb7 	bne.w	8023e9c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 802412e:	bf00      	nop
 8024130:	bf00      	nop
 8024132:	3750      	adds	r7, #80	; 0x50
 8024134:	46bd      	mov	sp, r7
 8024136:	bdb0      	pop	{r4, r5, r7, pc}
 8024138:	3fe00000 	.word	0x3fe00000

0802413c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 802413c:	b480      	push	{r7}
 802413e:	b0ab      	sub	sp, #172	; 0xac
 8024140:	af00      	add	r7, sp, #0
 8024142:	60f8      	str	r0, [r7, #12]
 8024144:	60b9      	str	r1, [r7, #8]
 8024146:	607a      	str	r2, [r7, #4]
 8024148:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 802414a:	687b      	ldr	r3, [r7, #4]
 802414c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8024150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8024154:	683b      	ldr	r3, [r7, #0]
 8024156:	68ba      	ldr	r2, [r7, #8]
 8024158:	fb02 f303 	mul.w	r3, r2, r3
 802415c:	00db      	lsls	r3, r3, #3
 802415e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8024162:	441a      	add	r2, r3
 8024164:	f107 0318 	add.w	r3, r7, #24
 8024168:	e892 0003 	ldmia.w	r2, {r0, r1}
 802416c:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8024170:	683b      	ldr	r3, [r7, #0]
 8024172:	68ba      	ldr	r2, [r7, #8]
 8024174:	fb02 f303 	mul.w	r3, r2, r3
 8024178:	011b      	lsls	r3, r3, #4
 802417a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802417e:	441a      	add	r2, r3
 8024180:	f107 0310 	add.w	r3, r7, #16
 8024184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024188:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 802418c:	68fb      	ldr	r3, [r7, #12]
 802418e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 8024192:	683b      	ldr	r3, [r7, #0]
 8024194:	00db      	lsls	r3, r3, #3
 8024196:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 802419a:	4413      	add	r3, r2
 802419c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 80241a0:	683b      	ldr	r3, [r7, #0]
 80241a2:	011b      	lsls	r3, r3, #4
 80241a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80241a8:	4413      	add	r3, r2
 80241aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 80241ae:	683a      	ldr	r2, [r7, #0]
 80241b0:	4613      	mov	r3, r2
 80241b2:	005b      	lsls	r3, r3, #1
 80241b4:	4413      	add	r3, r2
 80241b6:	00db      	lsls	r3, r3, #3
 80241b8:	461a      	mov	r2, r3
 80241ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80241be:	4413      	add	r3, r2
 80241c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 80241c4:	683b      	ldr	r3, [r7, #0]
 80241c6:	015b      	lsls	r3, r3, #5
 80241c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80241cc:	4413      	add	r3, r2
 80241ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 80241d2:	687b      	ldr	r3, [r7, #4]
 80241d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80241d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 80241dc:	2300      	movs	r3, #0
 80241de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80241e2:	e2a7      	b.n	8024734 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x5f8>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 80241e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80241e8:	f107 0320 	add.w	r3, r7, #32
 80241ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80241f0:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 80241f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80241f8:	ed93 7a00 	vldr	s14, [r3]
 80241fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8024200:	68ba      	ldr	r2, [r7, #8]
 8024202:	fb02 f303 	mul.w	r3, r2, r3
 8024206:	00db      	lsls	r3, r3, #3
 8024208:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 802420c:	4413      	add	r3, r2
 802420e:	edd3 7a00 	vldr	s15, [r3]
 8024212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802421a:	edd3 6a01 	vldr	s13, [r3, #4]
 802421e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8024222:	68ba      	ldr	r2, [r7, #8]
 8024224:	fb02 f303 	mul.w	r3, r2, r3
 8024228:	00db      	lsls	r3, r3, #3
 802422a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 802422e:	4413      	add	r3, r2
 8024230:	edd3 7a01 	vldr	s15, [r3, #4]
 8024234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024238:	ee77 7a67 	vsub.f32	s15, s14, s15
 802423c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8024240:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8024244:	ed93 7a00 	vldr	s14, [r3]
 8024248:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802424c:	68ba      	ldr	r2, [r7, #8]
 802424e:	fb02 f303 	mul.w	r3, r2, r3
 8024252:	00db      	lsls	r3, r3, #3
 8024254:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8024258:	4413      	add	r3, r2
 802425a:	edd3 7a01 	vldr	s15, [r3, #4]
 802425e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8024266:	edd3 6a01 	vldr	s13, [r3, #4]
 802426a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802426e:	68ba      	ldr	r2, [r7, #8]
 8024270:	fb02 f303 	mul.w	r3, r2, r3
 8024274:	00db      	lsls	r3, r3, #3
 8024276:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 802427a:	4413      	add	r3, r2
 802427c:	edd3 7a00 	vldr	s15, [r3]
 8024280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024288:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 802428c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024290:	ed93 7a00 	vldr	s14, [r3]
 8024294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8024298:	68ba      	ldr	r2, [r7, #8]
 802429a:	fb02 f303 	mul.w	r3, r2, r3
 802429e:	011b      	lsls	r3, r3, #4
 80242a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80242a4:	4413      	add	r3, r2
 80242a6:	edd3 7a00 	vldr	s15, [r3]
 80242aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80242ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80242b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80242b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80242ba:	68ba      	ldr	r2, [r7, #8]
 80242bc:	fb02 f303 	mul.w	r3, r2, r3
 80242c0:	011b      	lsls	r3, r3, #4
 80242c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80242c6:	4413      	add	r3, r2
 80242c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80242cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80242d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80242d4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80242d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80242dc:	ed93 7a00 	vldr	s14, [r3]
 80242e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80242e4:	68ba      	ldr	r2, [r7, #8]
 80242e6:	fb02 f303 	mul.w	r3, r2, r3
 80242ea:	011b      	lsls	r3, r3, #4
 80242ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80242f0:	4413      	add	r3, r2
 80242f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80242f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80242fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80242fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8024302:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8024306:	68ba      	ldr	r2, [r7, #8]
 8024308:	fb02 f303 	mul.w	r3, r2, r3
 802430c:	011b      	lsls	r3, r3, #4
 802430e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8024312:	4413      	add	r3, r2
 8024314:	edd3 7a00 	vldr	s15, [r3]
 8024318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802431c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024320:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8024324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8024328:	ed93 7a00 	vldr	s14, [r3]
 802432c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8024330:	68ba      	ldr	r2, [r7, #8]
 8024332:	fb03 f202 	mul.w	r2, r3, r2
 8024336:	4613      	mov	r3, r2
 8024338:	005b      	lsls	r3, r3, #1
 802433a:	4413      	add	r3, r2
 802433c:	00db      	lsls	r3, r3, #3
 802433e:	461a      	mov	r2, r3
 8024340:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8024344:	4413      	add	r3, r2
 8024346:	edd3 7a00 	vldr	s15, [r3]
 802434a:	ee27 7a27 	vmul.f32	s14, s14, s15
 802434e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8024352:	edd3 6a01 	vldr	s13, [r3, #4]
 8024356:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802435a:	68ba      	ldr	r2, [r7, #8]
 802435c:	fb03 f202 	mul.w	r2, r3, r2
 8024360:	4613      	mov	r3, r2
 8024362:	005b      	lsls	r3, r3, #1
 8024364:	4413      	add	r3, r2
 8024366:	00db      	lsls	r3, r3, #3
 8024368:	461a      	mov	r2, r3
 802436a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802436e:	4413      	add	r3, r2
 8024370:	edd3 7a01 	vldr	s15, [r3, #4]
 8024374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024378:	ee77 7a67 	vsub.f32	s15, s14, s15
 802437c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8024380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8024384:	ed93 7a00 	vldr	s14, [r3]
 8024388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802438c:	68ba      	ldr	r2, [r7, #8]
 802438e:	fb03 f202 	mul.w	r2, r3, r2
 8024392:	4613      	mov	r3, r2
 8024394:	005b      	lsls	r3, r3, #1
 8024396:	4413      	add	r3, r2
 8024398:	00db      	lsls	r3, r3, #3
 802439a:	461a      	mov	r2, r3
 802439c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80243a0:	4413      	add	r3, r2
 80243a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80243a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80243aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80243ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80243b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80243b6:	68ba      	ldr	r2, [r7, #8]
 80243b8:	fb03 f202 	mul.w	r2, r3, r2
 80243bc:	4613      	mov	r3, r2
 80243be:	005b      	lsls	r3, r3, #1
 80243c0:	4413      	add	r3, r2
 80243c2:	00db      	lsls	r3, r3, #3
 80243c4:	461a      	mov	r2, r3
 80243c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80243ca:	4413      	add	r3, r2
 80243cc:	edd3 7a00 	vldr	s15, [r3]
 80243d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80243d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80243d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 80243dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80243e0:	ed93 7a00 	vldr	s14, [r3]
 80243e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80243e8:	68ba      	ldr	r2, [r7, #8]
 80243ea:	fb02 f303 	mul.w	r3, r2, r3
 80243ee:	015b      	lsls	r3, r3, #5
 80243f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80243f4:	4413      	add	r3, r2
 80243f6:	edd3 7a00 	vldr	s15, [r3]
 80243fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80243fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8024402:	edd3 6a01 	vldr	s13, [r3, #4]
 8024406:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802440a:	68ba      	ldr	r2, [r7, #8]
 802440c:	fb02 f303 	mul.w	r3, r2, r3
 8024410:	015b      	lsls	r3, r3, #5
 8024412:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8024416:	4413      	add	r3, r2
 8024418:	edd3 7a01 	vldr	s15, [r3, #4]
 802441c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024424:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8024428:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802442c:	ed93 7a00 	vldr	s14, [r3]
 8024430:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8024434:	68ba      	ldr	r2, [r7, #8]
 8024436:	fb02 f303 	mul.w	r3, r2, r3
 802443a:	015b      	lsls	r3, r3, #5
 802443c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8024440:	4413      	add	r3, r2
 8024442:	edd3 7a01 	vldr	s15, [r3, #4]
 8024446:	ee27 7a27 	vmul.f32	s14, s14, s15
 802444a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802444e:	edd3 6a01 	vldr	s13, [r3, #4]
 8024452:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8024456:	68ba      	ldr	r2, [r7, #8]
 8024458:	fb02 f303 	mul.w	r3, r2, r3
 802445c:	015b      	lsls	r3, r3, #5
 802445e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8024462:	4413      	add	r3, r2
 8024464:	edd3 7a00 	vldr	s15, [r3]
 8024468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802446c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024470:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8024474:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8024478:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 802447c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024480:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8024484:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8024488:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 802448c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024490:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 8024494:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8024498:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 802449c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80244a0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 80244a4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80244a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80244ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80244b0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 80244b4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80244b8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80244bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80244c0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 80244c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80244c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80244cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80244d0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 80244d4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80244d8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80244dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80244e0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 80244e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80244e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80244ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80244f0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 80244f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80244f8:	ed93 7a00 	vldr	s14, [r3]
 80244fc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8024500:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8024504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024508:	ee77 7a27 	vadd.f32	s15, s14, s15
 802450c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8024510:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8024514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8024518:	ed93 7a01 	vldr	s14, [r3, #4]
 802451c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8024520:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8024524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024528:	ee77 7a27 	vadd.f32	s15, s14, s15
 802452c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8024530:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8024534:	ed97 7a08 	vldr	s14, [r7, #32]
 8024538:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 802453c:	edd7 7a06 	vldr	s15, [r7, #24]
 8024540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8024548:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 802454c:	edd7 7a04 	vldr	s15, [r7, #16]
 8024550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024558:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 802455c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8024560:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8024564:	edd7 7a06 	vldr	s15, [r7, #24]
 8024568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802456c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8024570:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8024574:	edd7 7a04 	vldr	s15, [r7, #16]
 8024578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802457c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024580:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 8024584:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8024588:	edd7 7a07 	vldr	s15, [r7, #28]
 802458c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024590:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8024594:	edd7 7a05 	vldr	s15, [r7, #20]
 8024598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802459c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80245a0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 80245a4:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80245a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80245ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80245b0:	eeb1 7a67 	vneg.f32	s14, s15
 80245b4:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80245b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80245bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80245c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80245c4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 80245c8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80245cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80245d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80245d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80245d8:	edc3 7a00 	vstr	s15, [r3]
 80245dc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80245e0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80245e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80245e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80245ec:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 80245f0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80245f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80245f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80245fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8024600:	edc3 7a00 	vstr	s15, [r3]
 8024604:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8024608:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 802460c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024610:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8024614:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8024618:	ed97 7a08 	vldr	s14, [r7, #32]
 802461c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8024620:	edd7 7a04 	vldr	s15, [r7, #16]
 8024624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024628:	ee37 7a27 	vadd.f32	s14, s14, s15
 802462c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8024630:	edd7 7a06 	vldr	s15, [r7, #24]
 8024634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024638:	ee77 7a27 	vadd.f32	s15, s14, s15
 802463c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 8024640:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8024644:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8024648:	edd7 7a04 	vldr	s15, [r7, #16]
 802464c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024650:	ee37 7a27 	vadd.f32	s14, s14, s15
 8024654:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8024658:	edd7 7a06 	vldr	s15, [r7, #24]
 802465c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024664:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8024668:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 802466c:	edd7 7a07 	vldr	s15, [r7, #28]
 8024670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024674:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8024678:	edd7 7a05 	vldr	s15, [r7, #20]
 802467c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024684:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 8024688:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 802468c:	edd7 7a05 	vldr	s15, [r7, #20]
 8024690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024694:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8024698:	edd7 7a07 	vldr	s15, [r7, #28]
 802469c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80246a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80246a4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 80246a8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80246ac:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80246b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80246b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80246b8:	edc3 7a00 	vstr	s15, [r3]
 80246bc:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80246c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80246c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80246c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80246cc:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 80246d0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80246d4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80246d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80246dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80246e0:	edc3 7a00 	vstr	s15, [r3]
 80246e4:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80246e8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80246ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80246f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80246f4:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 80246f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80246fc:	3308      	adds	r3, #8
 80246fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8024702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8024706:	3308      	adds	r3, #8
 8024708:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802470c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024710:	3308      	adds	r3, #8
 8024712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8024716:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802471a:	3308      	adds	r3, #8
 802471c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8024720:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8024724:	3308      	adds	r3, #8
 8024726:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 802472a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802472e:	3301      	adds	r3, #1
 8024730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8024734:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8024738:	683b      	ldr	r3, [r7, #0]
 802473a:	429a      	cmp	r2, r3
 802473c:	f6ff ad52 	blt.w	80241e4 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa8>
    }
}
 8024740:	bf00      	nop
 8024742:	bf00      	nop
 8024744:	37ac      	adds	r7, #172	; 0xac
 8024746:	46bd      	mov	sp, r7
 8024748:	f85d 7b04 	ldr.w	r7, [sp], #4
 802474c:	4770      	bx	lr

0802474e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 802474e:	b580      	push	{r7, lr}
 8024750:	b08e      	sub	sp, #56	; 0x38
 8024752:	af00      	add	r7, sp, #0
 8024754:	60f8      	str	r0, [r7, #12]
 8024756:	60b9      	str	r1, [r7, #8]
 8024758:	607a      	str	r2, [r7, #4]
 802475a:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 802475c:	687b      	ldr	r3, [r7, #4]
 802475e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8024762:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 8024764:	687b      	ldr	r3, [r7, #4]
 8024766:	681b      	ldr	r3, [r3, #0]
 8024768:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 802476a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802476c:	00db      	lsls	r3, r3, #3
 802476e:	4618      	mov	r0, r3
 8024770:	f000 fe82 	bl	8025478 <_Z9ei_mallocj>
 8024774:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 8024776:	2300      	movs	r3, #0
 8024778:	637b      	str	r3, [r7, #52]	; 0x34
 802477a:	e0b4      	b.n	80248e6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x198>
        k=u;
 802477c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802477e:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8024780:	2300      	movs	r3, #0
 8024782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024784:	e013      	b.n	80247ae <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x60>
            scratch[q1] = Fout[ k  ];
 8024786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024788:	00db      	lsls	r3, r3, #3
 802478a:	68fa      	ldr	r2, [r7, #12]
 802478c:	18d1      	adds	r1, r2, r3
 802478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024790:	00db      	lsls	r3, r3, #3
 8024792:	69ba      	ldr	r2, [r7, #24]
 8024794:	4413      	add	r3, r2
 8024796:	460a      	mov	r2, r1
 8024798:	e892 0003 	ldmia.w	r2, {r0, r1}
 802479c:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 80247a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80247a2:	683b      	ldr	r3, [r7, #0]
 80247a4:	4413      	add	r3, r2
 80247a6:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80247a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80247aa:	3301      	adds	r3, #1
 80247ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80247ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80247b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80247b2:	429a      	cmp	r2, r3
 80247b4:	dbe7      	blt.n	8024786 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x38>
        }

        k=u;
 80247b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247b8:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80247ba:	2300      	movs	r3, #0
 80247bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80247be:	e08a      	b.n	80248d6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x188>
            int twidx=0;
 80247c0:	2300      	movs	r3, #0
 80247c2:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 80247c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80247c6:	00db      	lsls	r3, r3, #3
 80247c8:	68fa      	ldr	r2, [r7, #12]
 80247ca:	4413      	add	r3, r2
 80247cc:	69ba      	ldr	r2, [r7, #24]
 80247ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80247d2:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 80247d6:	2301      	movs	r3, #1
 80247d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80247da:	e071      	b.n	80248c0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x172>
                twidx += fstride * k;
 80247dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80247de:	68ba      	ldr	r2, [r7, #8]
 80247e0:	fb03 f202 	mul.w	r2, r3, r2
 80247e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247e6:	4413      	add	r3, r2
 80247e8:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 80247ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80247ec:	69fb      	ldr	r3, [r7, #28]
 80247ee:	429a      	cmp	r2, r3
 80247f0:	db03      	blt.n	80247fa <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xac>
 80247f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80247f4:	69fb      	ldr	r3, [r7, #28]
 80247f6:	1ad3      	subs	r3, r2, r3
 80247f8:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 80247fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80247fc:	00db      	lsls	r3, r3, #3
 80247fe:	69ba      	ldr	r2, [r7, #24]
 8024800:	4413      	add	r3, r2
 8024802:	ed93 7a00 	vldr	s14, [r3]
 8024806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024808:	00db      	lsls	r3, r3, #3
 802480a:	6a3a      	ldr	r2, [r7, #32]
 802480c:	4413      	add	r3, r2
 802480e:	edd3 7a00 	vldr	s15, [r3]
 8024812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024818:	00db      	lsls	r3, r3, #3
 802481a:	69ba      	ldr	r2, [r7, #24]
 802481c:	4413      	add	r3, r2
 802481e:	edd3 6a01 	vldr	s13, [r3, #4]
 8024822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024824:	00db      	lsls	r3, r3, #3
 8024826:	6a3a      	ldr	r2, [r7, #32]
 8024828:	4413      	add	r3, r2
 802482a:	edd3 7a01 	vldr	s15, [r3, #4]
 802482e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024836:	edc7 7a04 	vstr	s15, [r7, #16]
 802483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802483c:	00db      	lsls	r3, r3, #3
 802483e:	69ba      	ldr	r2, [r7, #24]
 8024840:	4413      	add	r3, r2
 8024842:	ed93 7a00 	vldr	s14, [r3]
 8024846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024848:	00db      	lsls	r3, r3, #3
 802484a:	6a3a      	ldr	r2, [r7, #32]
 802484c:	4413      	add	r3, r2
 802484e:	edd3 7a01 	vldr	s15, [r3, #4]
 8024852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024858:	00db      	lsls	r3, r3, #3
 802485a:	69ba      	ldr	r2, [r7, #24]
 802485c:	4413      	add	r3, r2
 802485e:	edd3 6a01 	vldr	s13, [r3, #4]
 8024862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024864:	00db      	lsls	r3, r3, #3
 8024866:	6a3a      	ldr	r2, [r7, #32]
 8024868:	4413      	add	r3, r2
 802486a:	edd3 7a00 	vldr	s15, [r3]
 802486e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8024872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024876:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 802487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802487c:	00db      	lsls	r3, r3, #3
 802487e:	68fa      	ldr	r2, [r7, #12]
 8024880:	4413      	add	r3, r2
 8024882:	ed93 7a00 	vldr	s14, [r3]
 8024886:	edd7 7a04 	vldr	s15, [r7, #16]
 802488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802488c:	00db      	lsls	r3, r3, #3
 802488e:	68fa      	ldr	r2, [r7, #12]
 8024890:	4413      	add	r3, r2
 8024892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024896:	edc3 7a00 	vstr	s15, [r3]
 802489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802489c:	00db      	lsls	r3, r3, #3
 802489e:	68fa      	ldr	r2, [r7, #12]
 80248a0:	4413      	add	r3, r2
 80248a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80248a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80248aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80248ac:	00db      	lsls	r3, r3, #3
 80248ae:	68fa      	ldr	r2, [r7, #12]
 80248b0:	4413      	add	r3, r2
 80248b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80248b6:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 80248ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248bc:	3301      	adds	r3, #1
 80248be:	62bb      	str	r3, [r7, #40]	; 0x28
 80248c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80248c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80248c4:	429a      	cmp	r2, r3
 80248c6:	db89      	blt.n	80247dc <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x8e>
            }
            k += m;
 80248c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80248ca:	683b      	ldr	r3, [r7, #0]
 80248cc:	4413      	add	r3, r2
 80248ce:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80248d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80248d2:	3301      	adds	r3, #1
 80248d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80248d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80248d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80248da:	429a      	cmp	r2, r3
 80248dc:	f6ff af70 	blt.w	80247c0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x72>
    for ( u=0; u<m; ++u ) {
 80248e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80248e2:	3301      	adds	r3, #1
 80248e4:	637b      	str	r3, [r7, #52]	; 0x34
 80248e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80248e8:	683b      	ldr	r3, [r7, #0]
 80248ea:	429a      	cmp	r2, r3
 80248ec:	f6ff af46 	blt.w	802477c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2e>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 80248f0:	69b8      	ldr	r0, [r7, #24]
 80248f2:	f000 fddb 	bl	80254ac <_Z7ei_freePv>
}
 80248f6:	bf00      	nop
 80248f8:	3738      	adds	r7, #56	; 0x38
 80248fa:	46bd      	mov	sp, r7
 80248fc:	bd80      	pop	{r7, pc}
	...

08024900 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 8024900:	b580      	push	{r7, lr}
 8024902:	b08a      	sub	sp, #40	; 0x28
 8024904:	af02      	add	r7, sp, #8
 8024906:	60f8      	str	r0, [r7, #12]
 8024908:	60b9      	str	r1, [r7, #8]
 802490a:	607a      	str	r2, [r7, #4]
 802490c:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 802490e:	68fb      	ldr	r3, [r7, #12]
 8024910:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 8024912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024914:	1d1a      	adds	r2, r3, #4
 8024916:	62ba      	str	r2, [r7, #40]	; 0x28
 8024918:	681b      	ldr	r3, [r3, #0]
 802491a:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 802491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802491e:	1d1a      	adds	r2, r3, #4
 8024920:	62ba      	str	r2, [r7, #40]	; 0x28
 8024922:	681b      	ldr	r3, [r3, #0]
 8024924:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 8024926:	69bb      	ldr	r3, [r7, #24]
 8024928:	697a      	ldr	r2, [r7, #20]
 802492a:	fb02 f303 	mul.w	r3, r2, r3
 802492e:	00db      	lsls	r3, r3, #3
 8024930:	68fa      	ldr	r2, [r7, #12]
 8024932:	4413      	add	r3, r2
 8024934:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 8024936:	697b      	ldr	r3, [r7, #20]
 8024938:	2b01      	cmp	r3, #1
 802493a:	d11a      	bne.n	8024972 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 802493c:	68fb      	ldr	r3, [r7, #12]
 802493e:	68ba      	ldr	r2, [r7, #8]
 8024940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024944:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 8024948:	683b      	ldr	r3, [r7, #0]
 802494a:	687a      	ldr	r2, [r7, #4]
 802494c:	fb02 f303 	mul.w	r3, r2, r3
 8024950:	00db      	lsls	r3, r3, #3
 8024952:	68ba      	ldr	r2, [r7, #8]
 8024954:	4413      	add	r3, r2
 8024956:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 8024958:	68fb      	ldr	r3, [r7, #12]
 802495a:	3308      	adds	r3, #8
 802495c:	60fb      	str	r3, [r7, #12]
 802495e:	68fa      	ldr	r2, [r7, #12]
 8024960:	693b      	ldr	r3, [r7, #16]
 8024962:	429a      	cmp	r2, r3
 8024964:	bf14      	ite	ne
 8024966:	2301      	movne	r3, #1
 8024968:	2300      	moveq	r3, #0
 802496a:	b2db      	uxtb	r3, r3
 802496c:	2b00      	cmp	r3, #0
 802496e:	d1e5      	bne.n	802493c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
 8024970:	e022      	b.n	80249b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xb8>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 8024972:	69bb      	ldr	r3, [r7, #24]
 8024974:	687a      	ldr	r2, [r7, #4]
 8024976:	fb03 f202 	mul.w	r2, r3, r2
 802497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802497c:	9301      	str	r3, [sp, #4]
 802497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024980:	9300      	str	r3, [sp, #0]
 8024982:	683b      	ldr	r3, [r7, #0]
 8024984:	68b9      	ldr	r1, [r7, #8]
 8024986:	68f8      	ldr	r0, [r7, #12]
 8024988:	f7ff ffba 	bl	8024900 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 802498c:	683b      	ldr	r3, [r7, #0]
 802498e:	687a      	ldr	r2, [r7, #4]
 8024990:	fb02 f303 	mul.w	r3, r2, r3
 8024994:	00db      	lsls	r3, r3, #3
 8024996:	68ba      	ldr	r2, [r7, #8]
 8024998:	4413      	add	r3, r2
 802499a:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 802499c:	697b      	ldr	r3, [r7, #20]
 802499e:	00db      	lsls	r3, r3, #3
 80249a0:	68fa      	ldr	r2, [r7, #12]
 80249a2:	4413      	add	r3, r2
 80249a4:	60fb      	str	r3, [r7, #12]
 80249a6:	68fa      	ldr	r2, [r7, #12]
 80249a8:	693b      	ldr	r3, [r7, #16]
 80249aa:	429a      	cmp	r2, r3
 80249ac:	bf14      	ite	ne
 80249ae:	2301      	movne	r3, #1
 80249b0:	2300      	moveq	r3, #0
 80249b2:	b2db      	uxtb	r3, r3
 80249b4:	2b00      	cmp	r3, #0
 80249b6:	d1dc      	bne.n	8024972 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 80249b8:	69fb      	ldr	r3, [r7, #28]
 80249ba:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 80249bc:	69bb      	ldr	r3, [r7, #24]
 80249be:	3b02      	subs	r3, #2
 80249c0:	2b03      	cmp	r3, #3
 80249c2:	d827      	bhi.n	8024a14 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 80249c4:	a201      	add	r2, pc, #4	; (adr r2, 80249cc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 80249c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80249ca:	bf00      	nop
 80249cc:	080249dd 	.word	0x080249dd
 80249d0:	080249eb 	.word	0x080249eb
 80249d4:	080249f9 	.word	0x080249f9
 80249d8:	08024a07 	.word	0x08024a07
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 80249dc:	697b      	ldr	r3, [r7, #20]
 80249de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80249e0:	6879      	ldr	r1, [r7, #4]
 80249e2:	68f8      	ldr	r0, [r7, #12]
 80249e4:	f7ff f806 	bl	80239f4 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 80249e8:	e01d      	b.n	8024a26 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 80249ea:	697b      	ldr	r3, [r7, #20]
 80249ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80249ee:	6879      	ldr	r1, [r7, #4]
 80249f0:	68f8      	ldr	r0, [r7, #12]
 80249f2:	f7ff fa33 	bl	8023e5c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 80249f6:	e016      	b.n	8024a26 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 80249f8:	697b      	ldr	r3, [r7, #20]
 80249fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80249fc:	6879      	ldr	r1, [r7, #4]
 80249fe:	68f8      	ldr	r0, [r7, #12]
 8024a00:	f7ff f875 	bl	8023aee <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 8024a04:	e00f      	b.n	8024a26 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 8024a06:	697b      	ldr	r3, [r7, #20]
 8024a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024a0a:	6879      	ldr	r1, [r7, #4]
 8024a0c:	68f8      	ldr	r0, [r7, #12]
 8024a0e:	f7ff fb95 	bl	802413c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 8024a12:	e008      	b.n	8024a26 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8024a14:	69bb      	ldr	r3, [r7, #24]
 8024a16:	9300      	str	r3, [sp, #0]
 8024a18:	697b      	ldr	r3, [r7, #20]
 8024a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024a1c:	6879      	ldr	r1, [r7, #4]
 8024a1e:	68f8      	ldr	r0, [r7, #12]
 8024a20:	f7ff fe95 	bl	802474e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 8024a24:	bf00      	nop
    }
}
 8024a26:	bf00      	nop
 8024a28:	3720      	adds	r7, #32
 8024a2a:	46bd      	mov	sp, r7
 8024a2c:	bd80      	pop	{r7, pc}
 8024a2e:	bf00      	nop

08024a30 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 8024a30:	b580      	push	{r7, lr}
 8024a32:	b086      	sub	sp, #24
 8024a34:	af00      	add	r7, sp, #0
 8024a36:	6078      	str	r0, [r7, #4]
 8024a38:	6039      	str	r1, [r7, #0]
    int p=4;
 8024a3a:	2304      	movs	r3, #4
 8024a3c:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 8024a3e:	6878      	ldr	r0, [r7, #4]
 8024a40:	f7db fd70 	bl	8000524 <__aeabi_i2d>
 8024a44:	4602      	mov	r2, r0
 8024a46:	460b      	mov	r3, r1
 8024a48:	ec43 2b10 	vmov	d0, r2, r3
 8024a4c:	f005 ff2c 	bl	802a8a8 <sqrt>
 8024a50:	eeb0 7a40 	vmov.f32	s14, s0
 8024a54:	eef0 7a60 	vmov.f32	s15, s1
 8024a58:	eeb0 0a47 	vmov.f32	s0, s14
 8024a5c:	eef0 0a67 	vmov.f32	s1, s15
 8024a60:	f006 fa82 	bl	802af68 <floor>
 8024a64:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8024a68:	e01e      	b.n	8024aa8 <_ZL9kf_factoriPi+0x78>
            switch (p) {
 8024a6a:	697b      	ldr	r3, [r7, #20]
 8024a6c:	2b02      	cmp	r3, #2
 8024a6e:	d005      	beq.n	8024a7c <_ZL9kf_factoriPi+0x4c>
 8024a70:	697b      	ldr	r3, [r7, #20]
 8024a72:	2b04      	cmp	r3, #4
 8024a74:	d105      	bne.n	8024a82 <_ZL9kf_factoriPi+0x52>
                case 4: p = 2; break;
 8024a76:	2302      	movs	r3, #2
 8024a78:	617b      	str	r3, [r7, #20]
 8024a7a:	e006      	b.n	8024a8a <_ZL9kf_factoriPi+0x5a>
                case 2: p = 3; break;
 8024a7c:	2303      	movs	r3, #3
 8024a7e:	617b      	str	r3, [r7, #20]
 8024a80:	e003      	b.n	8024a8a <_ZL9kf_factoriPi+0x5a>
                default: p += 2; break;
 8024a82:	697b      	ldr	r3, [r7, #20]
 8024a84:	3302      	adds	r3, #2
 8024a86:	617b      	str	r3, [r7, #20]
 8024a88:	bf00      	nop
            }
            if (p > floor_sqrt)
 8024a8a:	6978      	ldr	r0, [r7, #20]
 8024a8c:	f7db fd4a 	bl	8000524 <__aeabi_i2d>
 8024a90:	4602      	mov	r2, r0
 8024a92:	460b      	mov	r3, r1
 8024a94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8024a98:	f7dc f820 	bl	8000adc <__aeabi_dcmplt>
 8024a9c:	4603      	mov	r3, r0
 8024a9e:	2b00      	cmp	r3, #0
 8024aa0:	d100      	bne.n	8024aa4 <_ZL9kf_factoriPi+0x74>
 8024aa2:	e001      	b.n	8024aa8 <_ZL9kf_factoriPi+0x78>
                p = n;          /* no more factors, skip to end */
 8024aa4:	687b      	ldr	r3, [r7, #4]
 8024aa6:	617b      	str	r3, [r7, #20]
        while (n % p) {
 8024aa8:	687b      	ldr	r3, [r7, #4]
 8024aaa:	697a      	ldr	r2, [r7, #20]
 8024aac:	fb93 f2f2 	sdiv	r2, r3, r2
 8024ab0:	6979      	ldr	r1, [r7, #20]
 8024ab2:	fb01 f202 	mul.w	r2, r1, r2
 8024ab6:	1a9b      	subs	r3, r3, r2
 8024ab8:	2b00      	cmp	r3, #0
 8024aba:	d1d6      	bne.n	8024a6a <_ZL9kf_factoriPi+0x3a>
        }
        n /= p;
 8024abc:	687a      	ldr	r2, [r7, #4]
 8024abe:	697b      	ldr	r3, [r7, #20]
 8024ac0:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ac4:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 8024ac6:	683b      	ldr	r3, [r7, #0]
 8024ac8:	1d1a      	adds	r2, r3, #4
 8024aca:	603a      	str	r2, [r7, #0]
 8024acc:	697a      	ldr	r2, [r7, #20]
 8024ace:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 8024ad0:	683b      	ldr	r3, [r7, #0]
 8024ad2:	1d1a      	adds	r2, r3, #4
 8024ad4:	603a      	str	r2, [r7, #0]
 8024ad6:	687a      	ldr	r2, [r7, #4]
 8024ad8:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 8024ada:	687b      	ldr	r3, [r7, #4]
 8024adc:	2b01      	cmp	r3, #1
 8024ade:	dce3      	bgt.n	8024aa8 <_ZL9kf_factoriPi+0x78>
}
 8024ae0:	bf00      	nop
 8024ae2:	bf00      	nop
 8024ae4:	3718      	adds	r7, #24
 8024ae6:	46bd      	mov	sp, r7
 8024ae8:	bd80      	pop	{r7, pc}
 8024aea:	0000      	movs	r0, r0
 8024aec:	0000      	movs	r0, r0
	...

08024af0 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 8024af0:	b5b0      	push	{r4, r5, r7, lr}
 8024af2:	b090      	sub	sp, #64	; 0x40
 8024af4:	af00      	add	r7, sp, #0
 8024af6:	60f8      	str	r0, [r7, #12]
 8024af8:	60b9      	str	r1, [r7, #8]
 8024afa:	607a      	str	r2, [r7, #4]
 8024afc:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 8024afe:	2300      	movs	r3, #0
 8024b00:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 8024b02:	68fb      	ldr	r3, [r7, #12]
 8024b04:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 8024b06:	00db      	lsls	r3, r3, #3
 8024b08:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 8024b0a:	683b      	ldr	r3, [r7, #0]
 8024b0c:	2b00      	cmp	r3, #0
 8024b0e:	d104      	bne.n	8024b1a <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8024b10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024b12:	f000 fcb1 	bl	8025478 <_Z9ei_mallocj>
 8024b16:	63f8      	str	r0, [r7, #60]	; 0x3c
 8024b18:	e00c      	b.n	8024b34 <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 8024b1a:	687b      	ldr	r3, [r7, #4]
 8024b1c:	2b00      	cmp	r3, #0
 8024b1e:	d006      	beq.n	8024b2e <kiss_fft_alloc+0x3e>
 8024b20:	683b      	ldr	r3, [r7, #0]
 8024b22:	681b      	ldr	r3, [r3, #0]
 8024b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b26:	429a      	cmp	r2, r3
 8024b28:	d801      	bhi.n	8024b2e <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 8024b2a:	687b      	ldr	r3, [r7, #4]
 8024b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 8024b2e:	683b      	ldr	r3, [r7, #0]
 8024b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b32:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 8024b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b36:	2b00      	cmp	r3, #0
 8024b38:	f000 80a0 	beq.w	8024c7c <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 8024b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b3e:	68fa      	ldr	r2, [r7, #12]
 8024b40:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 8024b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b44:	68ba      	ldr	r2, [r7, #8]
 8024b46:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 8024b48:	68bb      	ldr	r3, [r7, #8]
 8024b4a:	2b00      	cmp	r3, #0
 8024b4c:	d048      	beq.n	8024be0 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 8024b4e:	2300      	movs	r3, #0
 8024b50:	63bb      	str	r3, [r7, #56]	; 0x38
 8024b52:	e040      	b.n	8024bd6 <kiss_fft_alloc+0xe6>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8024b54:	a350      	add	r3, pc, #320	; (adr r3, 8024c98 <kiss_fft_alloc+0x1a8>)
 8024b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 8024b5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8024b60:	f7db fce0 	bl	8000524 <__aeabi_i2d>
 8024b64:	a34e      	add	r3, pc, #312	; (adr r3, 8024ca0 <kiss_fft_alloc+0x1b0>)
 8024b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b6a:	f7db fd45 	bl	80005f8 <__aeabi_dmul>
 8024b6e:	4602      	mov	r2, r0
 8024b70:	460b      	mov	r3, r1
 8024b72:	4614      	mov	r4, r2
 8024b74:	461d      	mov	r5, r3
 8024b76:	68f8      	ldr	r0, [r7, #12]
 8024b78:	f7db fcd4 	bl	8000524 <__aeabi_i2d>
 8024b7c:	4602      	mov	r2, r0
 8024b7e:	460b      	mov	r3, r1
 8024b80:	4620      	mov	r0, r4
 8024b82:	4629      	mov	r1, r5
 8024b84:	f7db fe62 	bl	800084c <__aeabi_ddiv>
 8024b88:	4602      	mov	r2, r0
 8024b8a:	460b      	mov	r3, r1
 8024b8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 8024b90:	ed97 0b04 	vldr	d0, [r7, #16]
 8024b94:	f005 feb4 	bl	802a900 <cos>
 8024b98:	ec51 0b10 	vmov	r0, r1, d0
 8024b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b9e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8024ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024ba4:	00db      	lsls	r3, r3, #3
 8024ba6:	18d4      	adds	r4, r2, r3
 8024ba8:	f7dc f81e 	bl	8000be8 <__aeabi_d2f>
 8024bac:	4603      	mov	r3, r0
 8024bae:	6023      	str	r3, [r4, #0]
 8024bb0:	ed97 0b04 	vldr	d0, [r7, #16]
 8024bb4:	f005 ff30 	bl	802aa18 <sin>
 8024bb8:	ec51 0b10 	vmov	r0, r1, d0
 8024bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024bbe:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8024bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024bc4:	00db      	lsls	r3, r3, #3
 8024bc6:	18d4      	adds	r4, r2, r3
 8024bc8:	f7dc f80e 	bl	8000be8 <__aeabi_d2f>
 8024bcc:	4603      	mov	r3, r0
 8024bce:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8024bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024bd2:	3301      	adds	r3, #1
 8024bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8024bd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024bd8:	68fb      	ldr	r3, [r7, #12]
 8024bda:	429a      	cmp	r2, r3
 8024bdc:	dbba      	blt.n	8024b54 <kiss_fft_alloc+0x64>
 8024bde:	e047      	b.n	8024c70 <kiss_fft_alloc+0x180>
            }
        } else {
            for (i=0;i<nfft;++i) {
 8024be0:	2300      	movs	r3, #0
 8024be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8024be4:	e040      	b.n	8024c68 <kiss_fft_alloc+0x178>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8024be6:	a32c      	add	r3, pc, #176	; (adr r3, 8024c98 <kiss_fft_alloc+0x1a8>)
 8024be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 8024bf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8024bf2:	f7db fc97 	bl	8000524 <__aeabi_i2d>
 8024bf6:	a32c      	add	r3, pc, #176	; (adr r3, 8024ca8 <kiss_fft_alloc+0x1b8>)
 8024bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bfc:	f7db fcfc 	bl	80005f8 <__aeabi_dmul>
 8024c00:	4602      	mov	r2, r0
 8024c02:	460b      	mov	r3, r1
 8024c04:	4614      	mov	r4, r2
 8024c06:	461d      	mov	r5, r3
 8024c08:	68f8      	ldr	r0, [r7, #12]
 8024c0a:	f7db fc8b 	bl	8000524 <__aeabi_i2d>
 8024c0e:	4602      	mov	r2, r0
 8024c10:	460b      	mov	r3, r1
 8024c12:	4620      	mov	r0, r4
 8024c14:	4629      	mov	r1, r5
 8024c16:	f7db fe19 	bl	800084c <__aeabi_ddiv>
 8024c1a:	4602      	mov	r2, r0
 8024c1c:	460b      	mov	r3, r1
 8024c1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 8024c22:	ed97 0b08 	vldr	d0, [r7, #32]
 8024c26:	f005 fe6b 	bl	802a900 <cos>
 8024c2a:	ec51 0b10 	vmov	r0, r1, d0
 8024c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024c30:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8024c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024c36:	00db      	lsls	r3, r3, #3
 8024c38:	18d4      	adds	r4, r2, r3
 8024c3a:	f7db ffd5 	bl	8000be8 <__aeabi_d2f>
 8024c3e:	4603      	mov	r3, r0
 8024c40:	6023      	str	r3, [r4, #0]
 8024c42:	ed97 0b08 	vldr	d0, [r7, #32]
 8024c46:	f005 fee7 	bl	802aa18 <sin>
 8024c4a:	ec51 0b10 	vmov	r0, r1, d0
 8024c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024c50:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8024c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024c56:	00db      	lsls	r3, r3, #3
 8024c58:	18d4      	adds	r4, r2, r3
 8024c5a:	f7db ffc5 	bl	8000be8 <__aeabi_d2f>
 8024c5e:	4603      	mov	r3, r0
 8024c60:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8024c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024c64:	3301      	adds	r3, #1
 8024c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8024c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024c6a:	68fb      	ldr	r3, [r7, #12]
 8024c6c:	429a      	cmp	r2, r3
 8024c6e:	dbba      	blt.n	8024be6 <kiss_fft_alloc+0xf6>
            }
        }

        kf_factor(nfft,st->factors);
 8024c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024c72:	3308      	adds	r3, #8
 8024c74:	4619      	mov	r1, r3
 8024c76:	68f8      	ldr	r0, [r7, #12]
 8024c78:	f7ff feda 	bl	8024a30 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 8024c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024c7e:	2b00      	cmp	r3, #0
 8024c80:	d002      	beq.n	8024c88 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 8024c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024c86:	601a      	str	r2, [r3, #0]
    }

    return st;
 8024c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8024c8a:	4618      	mov	r0, r3
 8024c8c:	3740      	adds	r7, #64	; 0x40
 8024c8e:	46bd      	mov	sp, r7
 8024c90:	bdb0      	pop	{r4, r5, r7, pc}
 8024c92:	bf00      	nop
 8024c94:	f3af 8000 	nop.w
 8024c98:	54442d18 	.word	0x54442d18
 8024c9c:	400921fb 	.word	0x400921fb
 8024ca0:	54442d18 	.word	0x54442d18
 8024ca4:	401921fb 	.word	0x401921fb
 8024ca8:	54442d18 	.word	0x54442d18
 8024cac:	c01921fb 	.word	0xc01921fb

08024cb0 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 8024cb0:	b580      	push	{r7, lr}
 8024cb2:	b088      	sub	sp, #32
 8024cb4:	af02      	add	r7, sp, #8
 8024cb6:	60f8      	str	r0, [r7, #12]
 8024cb8:	60b9      	str	r1, [r7, #8]
 8024cba:	607a      	str	r2, [r7, #4]
 8024cbc:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 8024cbe:	68ba      	ldr	r2, [r7, #8]
 8024cc0:	687b      	ldr	r3, [r7, #4]
 8024cc2:	429a      	cmp	r2, r3
 8024cc4:	d11d      	bne.n	8024d02 <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 8024cc6:	68fb      	ldr	r3, [r7, #12]
 8024cc8:	681b      	ldr	r3, [r3, #0]
 8024cca:	00db      	lsls	r3, r3, #3
 8024ccc:	4618      	mov	r0, r3
 8024cce:	f000 fbd3 	bl	8025478 <_Z9ei_mallocj>
 8024cd2:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 8024cd4:	68fb      	ldr	r3, [r7, #12]
 8024cd6:	3308      	adds	r3, #8
 8024cd8:	68fa      	ldr	r2, [r7, #12]
 8024cda:	9201      	str	r2, [sp, #4]
 8024cdc:	9300      	str	r3, [sp, #0]
 8024cde:	683b      	ldr	r3, [r7, #0]
 8024ce0:	2201      	movs	r2, #1
 8024ce2:	68b9      	ldr	r1, [r7, #8]
 8024ce4:	6978      	ldr	r0, [r7, #20]
 8024ce6:	f7ff fe0b 	bl	8024900 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 8024cea:	68fb      	ldr	r3, [r7, #12]
 8024cec:	681b      	ldr	r3, [r3, #0]
 8024cee:	00db      	lsls	r3, r3, #3
 8024cf0:	461a      	mov	r2, r3
 8024cf2:	6979      	ldr	r1, [r7, #20]
 8024cf4:	6878      	ldr	r0, [r7, #4]
 8024cf6:	f009 fdf8 	bl	802e8ea <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 8024cfa:	6978      	ldr	r0, [r7, #20]
 8024cfc:	f000 fbd6 	bl	80254ac <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 8024d00:	e00a      	b.n	8024d18 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 8024d02:	68fb      	ldr	r3, [r7, #12]
 8024d04:	3308      	adds	r3, #8
 8024d06:	68fa      	ldr	r2, [r7, #12]
 8024d08:	9201      	str	r2, [sp, #4]
 8024d0a:	9300      	str	r3, [sp, #0]
 8024d0c:	683b      	ldr	r3, [r7, #0]
 8024d0e:	2201      	movs	r2, #1
 8024d10:	68b9      	ldr	r1, [r7, #8]
 8024d12:	6878      	ldr	r0, [r7, #4]
 8024d14:	f7ff fdf4 	bl	8024900 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 8024d18:	bf00      	nop
 8024d1a:	3718      	adds	r7, #24
 8024d1c:	46bd      	mov	sp, r7
 8024d1e:	bd80      	pop	{r7, pc}

08024d20 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8024d20:	b580      	push	{r7, lr}
 8024d22:	b084      	sub	sp, #16
 8024d24:	af00      	add	r7, sp, #0
 8024d26:	60f8      	str	r0, [r7, #12]
 8024d28:	60b9      	str	r1, [r7, #8]
 8024d2a:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 8024d2c:	2301      	movs	r3, #1
 8024d2e:	687a      	ldr	r2, [r7, #4]
 8024d30:	68b9      	ldr	r1, [r7, #8]
 8024d32:	68f8      	ldr	r0, [r7, #12]
 8024d34:	f7ff ffbc 	bl	8024cb0 <kiss_fft_stride>
}
 8024d38:	bf00      	nop
 8024d3a:	3710      	adds	r7, #16
 8024d3c:	46bd      	mov	sp, r7
 8024d3e:	bd80      	pop	{r7, pc}

08024d40 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8024d40:	b5b0      	push	{r4, r5, r7, lr}
 8024d42:	b090      	sub	sp, #64	; 0x40
 8024d44:	af02      	add	r7, sp, #8
 8024d46:	60f8      	str	r0, [r7, #12]
 8024d48:	60b9      	str	r1, [r7, #8]
 8024d4a:	607a      	str	r2, [r7, #4]
 8024d4c:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 8024d4e:	2300      	movs	r3, #0
 8024d50:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 8024d52:	2300      	movs	r3, #0
 8024d54:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 8024d56:	68fb      	ldr	r3, [r7, #12]
 8024d58:	f003 0301 	and.w	r3, r3, #1
 8024d5c:	2b00      	cmp	r3, #0
 8024d5e:	d004      	beq.n	8024d6a <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 8024d60:	4885      	ldr	r0, [pc, #532]	; (8024f78 <kiss_fftr_alloc+0x238>)
 8024d62:	f7e3 ff17 	bl	8008b94 <_Z9ei_printfPKcz>
        return NULL;
 8024d66:	2300      	movs	r3, #0
 8024d68:	e0f9      	b.n	8024f5e <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 8024d6a:	68fb      	ldr	r3, [r7, #12]
 8024d6c:	105b      	asrs	r3, r3, #1
 8024d6e:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8024d70:	f107 0314 	add.w	r3, r7, #20
 8024d74:	2200      	movs	r2, #0
 8024d76:	9200      	str	r2, [sp, #0]
 8024d78:	2200      	movs	r2, #0
 8024d7a:	68b9      	ldr	r1, [r7, #8]
 8024d7c:	68f8      	ldr	r0, [r7, #12]
 8024d7e:	f7ff feb7 	bl	8024af0 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 8024d82:	68fa      	ldr	r2, [r7, #12]
 8024d84:	4613      	mov	r3, r2
 8024d86:	005b      	lsls	r3, r3, #1
 8024d88:	4413      	add	r3, r2
 8024d8a:	0fda      	lsrs	r2, r3, #31
 8024d8c:	4413      	add	r3, r2
 8024d8e:	105b      	asrs	r3, r3, #1
 8024d90:	00da      	lsls	r2, r3, #3
 8024d92:	697b      	ldr	r3, [r7, #20]
 8024d94:	4413      	add	r3, r2
 8024d96:	330c      	adds	r3, #12
 8024d98:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 8024d9a:	683b      	ldr	r3, [r7, #0]
 8024d9c:	2b00      	cmp	r3, #0
 8024d9e:	d104      	bne.n	8024daa <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 8024da0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8024da2:	f000 fb69 	bl	8025478 <_Z9ei_mallocj>
 8024da6:	6338      	str	r0, [r7, #48]	; 0x30
 8024da8:	e009      	b.n	8024dbe <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 8024daa:	683b      	ldr	r3, [r7, #0]
 8024dac:	681b      	ldr	r3, [r3, #0]
 8024dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024db0:	429a      	cmp	r2, r3
 8024db2:	d801      	bhi.n	8024db8 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 8024db4:	687b      	ldr	r3, [r7, #4]
 8024db6:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 8024db8:	683b      	ldr	r3, [r7, #0]
 8024dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024dbc:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 8024dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024dc0:	2b00      	cmp	r3, #0
 8024dc2:	d101      	bne.n	8024dc8 <kiss_fftr_alloc+0x88>
        return NULL;
 8024dc4:	2300      	movs	r3, #0
 8024dc6:	e0ca      	b.n	8024f5e <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 8024dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024dca:	f103 020c 	add.w	r2, r3, #12
 8024dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024dd0:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 8024dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024dd4:	681a      	ldr	r2, [r3, #0]
 8024dd6:	697b      	ldr	r3, [r7, #20]
 8024dd8:	441a      	add	r2, r3
 8024dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ddc:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 8024dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024de0:	685a      	ldr	r2, [r3, #4]
 8024de2:	68fb      	ldr	r3, [r7, #12]
 8024de4:	00db      	lsls	r3, r3, #3
 8024de6:	441a      	add	r2, r3
 8024de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024dea:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 8024dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024dee:	681a      	ldr	r2, [r3, #0]
 8024df0:	f107 0314 	add.w	r3, r7, #20
 8024df4:	2100      	movs	r1, #0
 8024df6:	9100      	str	r1, [sp, #0]
 8024df8:	68b9      	ldr	r1, [r7, #8]
 8024dfa:	68f8      	ldr	r0, [r7, #12]
 8024dfc:	f7ff fe78 	bl	8024af0 <kiss_fft_alloc>

    if (inverse_fft) {
 8024e00:	68bb      	ldr	r3, [r7, #8]
 8024e02:	2b00      	cmp	r3, #0
 8024e04:	d052      	beq.n	8024eac <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 8024e06:	2300      	movs	r3, #0
 8024e08:	637b      	str	r3, [r7, #52]	; 0x34
 8024e0a:	e046      	b.n	8024e9a <kiss_fftr_alloc+0x15a>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8024e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024e0e:	3301      	adds	r3, #1
 8024e10:	4618      	mov	r0, r3
 8024e12:	f7db fb87 	bl	8000524 <__aeabi_i2d>
 8024e16:	4604      	mov	r4, r0
 8024e18:	460d      	mov	r5, r1
 8024e1a:	68f8      	ldr	r0, [r7, #12]
 8024e1c:	f7db fb82 	bl	8000524 <__aeabi_i2d>
 8024e20:	4602      	mov	r2, r0
 8024e22:	460b      	mov	r3, r1
 8024e24:	4620      	mov	r0, r4
 8024e26:	4629      	mov	r1, r5
 8024e28:	f7db fd10 	bl	800084c <__aeabi_ddiv>
 8024e2c:	4602      	mov	r2, r0
 8024e2e:	460b      	mov	r3, r1
 8024e30:	4610      	mov	r0, r2
 8024e32:	4619      	mov	r1, r3
 8024e34:	f04f 0200 	mov.w	r2, #0
 8024e38:	4b50      	ldr	r3, [pc, #320]	; (8024f7c <kiss_fftr_alloc+0x23c>)
 8024e3a:	f7db fa27 	bl	800028c <__adddf3>
 8024e3e:	4602      	mov	r2, r0
 8024e40:	460b      	mov	r3, r1
 8024e42:	4610      	mov	r0, r2
 8024e44:	4619      	mov	r1, r3
            double phase =
 8024e46:	a348      	add	r3, pc, #288	; (adr r3, 8024f68 <kiss_fftr_alloc+0x228>)
 8024e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e4c:	f7db fbd4 	bl	80005f8 <__aeabi_dmul>
 8024e50:	4602      	mov	r2, r0
 8024e52:	460b      	mov	r3, r1
 8024e54:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 8024e58:	ed97 0b06 	vldr	d0, [r7, #24]
 8024e5c:	f005 fd50 	bl	802a900 <cos>
 8024e60:	ec51 0b10 	vmov	r0, r1, d0
 8024e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024e66:	689a      	ldr	r2, [r3, #8]
 8024e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024e6a:	00db      	lsls	r3, r3, #3
 8024e6c:	18d4      	adds	r4, r2, r3
 8024e6e:	f7db febb 	bl	8000be8 <__aeabi_d2f>
 8024e72:	4603      	mov	r3, r0
 8024e74:	6023      	str	r3, [r4, #0]
 8024e76:	ed97 0b06 	vldr	d0, [r7, #24]
 8024e7a:	f005 fdcd 	bl	802aa18 <sin>
 8024e7e:	ec51 0b10 	vmov	r0, r1, d0
 8024e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024e84:	689a      	ldr	r2, [r3, #8]
 8024e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024e88:	00db      	lsls	r3, r3, #3
 8024e8a:	18d4      	adds	r4, r2, r3
 8024e8c:	f7db feac 	bl	8000be8 <__aeabi_d2f>
 8024e90:	4603      	mov	r3, r0
 8024e92:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8024e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024e96:	3301      	adds	r3, #1
 8024e98:	637b      	str	r3, [r7, #52]	; 0x34
 8024e9a:	68fb      	ldr	r3, [r7, #12]
 8024e9c:	0fda      	lsrs	r2, r3, #31
 8024e9e:	4413      	add	r3, r2
 8024ea0:	105b      	asrs	r3, r3, #1
 8024ea2:	461a      	mov	r2, r3
 8024ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024ea6:	4293      	cmp	r3, r2
 8024ea8:	dbb0      	blt.n	8024e0c <kiss_fftr_alloc+0xcc>
 8024eaa:	e051      	b.n	8024f50 <kiss_fftr_alloc+0x210>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 8024eac:	2300      	movs	r3, #0
 8024eae:	637b      	str	r3, [r7, #52]	; 0x34
 8024eb0:	e046      	b.n	8024f40 <kiss_fftr_alloc+0x200>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8024eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024eb4:	3301      	adds	r3, #1
 8024eb6:	4618      	mov	r0, r3
 8024eb8:	f7db fb34 	bl	8000524 <__aeabi_i2d>
 8024ebc:	4604      	mov	r4, r0
 8024ebe:	460d      	mov	r5, r1
 8024ec0:	68f8      	ldr	r0, [r7, #12]
 8024ec2:	f7db fb2f 	bl	8000524 <__aeabi_i2d>
 8024ec6:	4602      	mov	r2, r0
 8024ec8:	460b      	mov	r3, r1
 8024eca:	4620      	mov	r0, r4
 8024ecc:	4629      	mov	r1, r5
 8024ece:	f7db fcbd 	bl	800084c <__aeabi_ddiv>
 8024ed2:	4602      	mov	r2, r0
 8024ed4:	460b      	mov	r3, r1
 8024ed6:	4610      	mov	r0, r2
 8024ed8:	4619      	mov	r1, r3
 8024eda:	f04f 0200 	mov.w	r2, #0
 8024ede:	4b27      	ldr	r3, [pc, #156]	; (8024f7c <kiss_fftr_alloc+0x23c>)
 8024ee0:	f7db f9d4 	bl	800028c <__adddf3>
 8024ee4:	4602      	mov	r2, r0
 8024ee6:	460b      	mov	r3, r1
 8024ee8:	4610      	mov	r0, r2
 8024eea:	4619      	mov	r1, r3
            double phase =
 8024eec:	a320      	add	r3, pc, #128	; (adr r3, 8024f70 <kiss_fftr_alloc+0x230>)
 8024eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ef2:	f7db fb81 	bl	80005f8 <__aeabi_dmul>
 8024ef6:	4602      	mov	r2, r0
 8024ef8:	460b      	mov	r3, r1
 8024efa:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 8024efe:	ed97 0b08 	vldr	d0, [r7, #32]
 8024f02:	f005 fcfd 	bl	802a900 <cos>
 8024f06:	ec51 0b10 	vmov	r0, r1, d0
 8024f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024f0c:	689a      	ldr	r2, [r3, #8]
 8024f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024f10:	00db      	lsls	r3, r3, #3
 8024f12:	18d4      	adds	r4, r2, r3
 8024f14:	f7db fe68 	bl	8000be8 <__aeabi_d2f>
 8024f18:	4603      	mov	r3, r0
 8024f1a:	6023      	str	r3, [r4, #0]
 8024f1c:	ed97 0b08 	vldr	d0, [r7, #32]
 8024f20:	f005 fd7a 	bl	802aa18 <sin>
 8024f24:	ec51 0b10 	vmov	r0, r1, d0
 8024f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024f2a:	689a      	ldr	r2, [r3, #8]
 8024f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024f2e:	00db      	lsls	r3, r3, #3
 8024f30:	18d4      	adds	r4, r2, r3
 8024f32:	f7db fe59 	bl	8000be8 <__aeabi_d2f>
 8024f36:	4603      	mov	r3, r0
 8024f38:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8024f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024f3c:	3301      	adds	r3, #1
 8024f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8024f40:	68fb      	ldr	r3, [r7, #12]
 8024f42:	0fda      	lsrs	r2, r3, #31
 8024f44:	4413      	add	r3, r2
 8024f46:	105b      	asrs	r3, r3, #1
 8024f48:	461a      	mov	r2, r3
 8024f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024f4c:	4293      	cmp	r3, r2
 8024f4e:	dbb0      	blt.n	8024eb2 <kiss_fftr_alloc+0x172>
        }
    }

    if (memallocated != NULL) {
 8024f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f52:	2b00      	cmp	r3, #0
 8024f54:	d002      	beq.n	8024f5c <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 8024f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024f5a:	601a      	str	r2, [r3, #0]
    }

    return st;
 8024f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8024f5e:	4618      	mov	r0, r3
 8024f60:	3738      	adds	r7, #56	; 0x38
 8024f62:	46bd      	mov	sp, r7
 8024f64:	bdb0      	pop	{r4, r5, r7, pc}
 8024f66:	bf00      	nop
 8024f68:	54442d18 	.word	0x54442d18
 8024f6c:	400921fb 	.word	0x400921fb
 8024f70:	54442d18 	.word	0x54442d18
 8024f74:	c00921fb 	.word	0xc00921fb
 8024f78:	08031440 	.word	0x08031440
 8024f7c:	3fe00000 	.word	0x3fe00000

08024f80 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 8024f80:	b580      	push	{r7, lr}
 8024f82:	b092      	sub	sp, #72	; 0x48
 8024f84:	af00      	add	r7, sp, #0
 8024f86:	60f8      	str	r0, [r7, #12]
 8024f88:	60b9      	str	r1, [r7, #8]
 8024f8a:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 8024f8c:	68fb      	ldr	r3, [r7, #12]
 8024f8e:	681b      	ldr	r3, [r3, #0]
 8024f90:	685b      	ldr	r3, [r3, #4]
 8024f92:	2b00      	cmp	r3, #0
 8024f94:	d002      	beq.n	8024f9c <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 8024f96:	4888      	ldr	r0, [pc, #544]	; (80251b8 <kiss_fftr+0x238>)
 8024f98:	f7e3 fdfc 	bl	8008b94 <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 8024f9c:	68fb      	ldr	r3, [r7, #12]
 8024f9e:	681b      	ldr	r3, [r3, #0]
 8024fa0:	681b      	ldr	r3, [r3, #0]
 8024fa2:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 8024fa4:	68fb      	ldr	r3, [r7, #12]
 8024fa6:	6818      	ldr	r0, [r3, #0]
 8024fa8:	68fb      	ldr	r3, [r7, #12]
 8024faa:	685b      	ldr	r3, [r3, #4]
 8024fac:	461a      	mov	r2, r3
 8024fae:	68b9      	ldr	r1, [r7, #8]
 8024fb0:	f7ff feb6 	bl	8024d20 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 8024fb4:	68fb      	ldr	r3, [r7, #12]
 8024fb6:	685b      	ldr	r3, [r3, #4]
 8024fb8:	681b      	ldr	r3, [r3, #0]
 8024fba:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 8024fbc:	68fb      	ldr	r3, [r7, #12]
 8024fbe:	685b      	ldr	r3, [r3, #4]
 8024fc0:	685b      	ldr	r3, [r3, #4]
 8024fc2:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 8024fc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8024fc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8024fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024fd0:	687b      	ldr	r3, [r7, #4]
 8024fd2:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 8024fd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8024fda:	edd7 7a05 	vldr	s15, [r7, #20]
 8024fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024fe0:	00db      	lsls	r3, r3, #3
 8024fe2:	687a      	ldr	r2, [r7, #4]
 8024fe4:	4413      	add	r3, r2
 8024fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024fea:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 8024fee:	687b      	ldr	r3, [r7, #4]
 8024ff0:	f04f 0200 	mov.w	r2, #0
 8024ff4:	605a      	str	r2, [r3, #4]
 8024ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024ff8:	00db      	lsls	r3, r3, #3
 8024ffa:	687a      	ldr	r2, [r7, #4]
 8024ffc:	4413      	add	r3, r2
 8024ffe:	687a      	ldr	r2, [r7, #4]
 8025000:	6852      	ldr	r2, [r2, #4]
 8025002:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 8025004:	2301      	movs	r3, #1
 8025006:	647b      	str	r3, [r7, #68]	; 0x44
 8025008:	e0c7      	b.n	802519a <kiss_fftr+0x21a>
        fpk    = st->tmpbuf[k];
 802500a:	68fb      	ldr	r3, [r7, #12]
 802500c:	685a      	ldr	r2, [r3, #4]
 802500e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025010:	00db      	lsls	r3, r3, #3
 8025012:	441a      	add	r2, r3
 8025014:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8025018:	e892 0003 	ldmia.w	r2, {r0, r1}
 802501c:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8025020:	68fb      	ldr	r3, [r7, #12]
 8025022:	685a      	ldr	r2, [r3, #4]
 8025024:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8025026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025028:	1acb      	subs	r3, r1, r3
 802502a:	00db      	lsls	r3, r3, #3
 802502c:	4413      	add	r3, r2
 802502e:	681b      	ldr	r3, [r3, #0]
 8025030:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 8025032:	68fb      	ldr	r3, [r7, #12]
 8025034:	685a      	ldr	r2, [r3, #4]
 8025036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8025038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802503a:	1acb      	subs	r3, r1, r3
 802503c:	00db      	lsls	r3, r3, #3
 802503e:	4413      	add	r3, r2
 8025040:	edd3 7a01 	vldr	s15, [r3, #4]
 8025044:	eef1 7a67 	vneg.f32	s15, s15
 8025048:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 802504c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8025050:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8025054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025058:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 802505c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8025060:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8025064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025068:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 802506c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8025070:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8025074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025078:	edc7 7a08 	vstr	s15, [r7, #32]
 802507c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8025080:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8025084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025088:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 802508c:	ed97 7a08 	vldr	s14, [r7, #32]
 8025090:	68fb      	ldr	r3, [r7, #12]
 8025092:	689a      	ldr	r2, [r3, #8]
 8025094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025096:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802509a:	3b01      	subs	r3, #1
 802509c:	00db      	lsls	r3, r3, #3
 802509e:	4413      	add	r3, r2
 80250a0:	edd3 7a00 	vldr	s15, [r3]
 80250a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80250a8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80250ac:	68fb      	ldr	r3, [r7, #12]
 80250ae:	689a      	ldr	r2, [r3, #8]
 80250b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80250b2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80250b6:	3b01      	subs	r3, #1
 80250b8:	00db      	lsls	r3, r3, #3
 80250ba:	4413      	add	r3, r2
 80250bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80250c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80250c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80250c8:	edc7 7a06 	vstr	s15, [r7, #24]
 80250cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80250d0:	68fb      	ldr	r3, [r7, #12]
 80250d2:	689a      	ldr	r2, [r3, #8]
 80250d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80250d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80250da:	3b01      	subs	r3, #1
 80250dc:	00db      	lsls	r3, r3, #3
 80250de:	4413      	add	r3, r2
 80250e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80250e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80250e8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80250ec:	68fb      	ldr	r3, [r7, #12]
 80250ee:	689a      	ldr	r2, [r3, #8]
 80250f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80250f2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80250f6:	3b01      	subs	r3, #1
 80250f8:	00db      	lsls	r3, r3, #3
 80250fa:	4413      	add	r3, r2
 80250fc:	edd3 7a00 	vldr	s15, [r3]
 8025100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025108:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 802510c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8025110:	edd7 7a06 	vldr	s15, [r7, #24]
 8025114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802511a:	00db      	lsls	r3, r3, #3
 802511c:	687a      	ldr	r2, [r7, #4]
 802511e:	4413      	add	r3, r2
 8025120:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8025124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025128:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 802512c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8025130:	edd7 7a07 	vldr	s15, [r7, #28]
 8025134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802513a:	00db      	lsls	r3, r3, #3
 802513c:	687a      	ldr	r2, [r7, #4]
 802513e:	4413      	add	r3, r2
 8025140:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8025144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025148:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 802514c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8025150:	edd7 7a06 	vldr	s15, [r7, #24]
 8025154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025158:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802515a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802515c:	1ad3      	subs	r3, r2, r3
 802515e:	00db      	lsls	r3, r3, #3
 8025160:	687a      	ldr	r2, [r7, #4]
 8025162:	4413      	add	r3, r2
 8025164:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8025168:	ee67 7a87 	vmul.f32	s15, s15, s14
 802516c:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 8025170:	ed97 7a07 	vldr	s14, [r7, #28]
 8025174:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8025178:	ee77 7a67 	vsub.f32	s15, s14, s15
 802517c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802517e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025180:	1ad3      	subs	r3, r2, r3
 8025182:	00db      	lsls	r3, r3, #3
 8025184:	687a      	ldr	r2, [r7, #4]
 8025186:	4413      	add	r3, r2
 8025188:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802518c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025190:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 8025194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025196:	3301      	adds	r3, #1
 8025198:	647b      	str	r3, [r7, #68]	; 0x44
 802519a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802519c:	0fda      	lsrs	r2, r3, #31
 802519e:	4413      	add	r3, r2
 80251a0:	105b      	asrs	r3, r3, #1
 80251a2:	461a      	mov	r2, r3
 80251a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80251a6:	4293      	cmp	r3, r2
 80251a8:	f77f af2f 	ble.w	802500a <kiss_fftr+0x8a>
    }
}
 80251ac:	bf00      	nop
 80251ae:	bf00      	nop
 80251b0:	3748      	adds	r7, #72	; 0x48
 80251b2:	46bd      	mov	sp, r7
 80251b4:	bd80      	pop	{r7, pc}
 80251b6:	bf00      	nop
 80251b8:	0803145c 	.word	0x0803145c

080251bc <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 80251bc:	b580      	push	{r7, lr}
 80251be:	b082      	sub	sp, #8
 80251c0:	af00      	add	r7, sp, #0
 80251c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80251c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80251ca:	f005 fcb3 	bl	802ab34 <log10f>
 80251ce:	eef0 7a40 	vmov.f32	s15, s0
 80251d2:	eeb0 0a67 	vmov.f32	s0, s15
 80251d6:	3708      	adds	r7, #8
 80251d8:	46bd      	mov	sp, r7
 80251da:	bd80      	pop	{r7, pc}

080251dc <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 80251dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80251de:	b083      	sub	sp, #12
 80251e0:	af00      	add	r7, sp, #0
 80251e2:	ed87 0b00 	vstr	d0, [r7]
 80251e6:	683c      	ldr	r4, [r7, #0]
 80251e8:	687b      	ldr	r3, [r7, #4]
 80251ea:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80251ee:	2301      	movs	r3, #1
 80251f0:	461e      	mov	r6, r3
 80251f2:	f04f 32ff 	mov.w	r2, #4294967295
 80251f6:	4b10      	ldr	r3, [pc, #64]	; (8025238 <_ZSt5isinfd+0x5c>)
 80251f8:	4620      	mov	r0, r4
 80251fa:	4629      	mov	r1, r5
 80251fc:	f7db fc96 	bl	8000b2c <__aeabi_dcmpun>
 8025200:	4603      	mov	r3, r0
 8025202:	2b00      	cmp	r3, #0
 8025204:	d10b      	bne.n	802521e <_ZSt5isinfd+0x42>
 8025206:	f04f 32ff 	mov.w	r2, #4294967295
 802520a:	4b0b      	ldr	r3, [pc, #44]	; (8025238 <_ZSt5isinfd+0x5c>)
 802520c:	4620      	mov	r0, r4
 802520e:	4629      	mov	r1, r5
 8025210:	f7db fc6e 	bl	8000af0 <__aeabi_dcmple>
 8025214:	4603      	mov	r3, r0
 8025216:	2b00      	cmp	r3, #0
 8025218:	d101      	bne.n	802521e <_ZSt5isinfd+0x42>
 802521a:	2300      	movs	r3, #0
 802521c:	461e      	mov	r6, r3
 802521e:	b2f3      	uxtb	r3, r6
 8025220:	f083 0301 	eor.w	r3, r3, #1
 8025224:	b2db      	uxtb	r3, r3
 8025226:	2b00      	cmp	r3, #0
 8025228:	bf14      	ite	ne
 802522a:	2301      	movne	r3, #1
 802522c:	2300      	moveq	r3, #0
 802522e:	b2db      	uxtb	r3, r3
 8025230:	4618      	mov	r0, r3
 8025232:	370c      	adds	r7, #12
 8025234:	46bd      	mov	sp, r7
 8025236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025238:	7fefffff 	.word	0x7fefffff

0802523c <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 802523c:	b480      	push	{r7}
 802523e:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8025240:	2300      	movs	r3, #0
}
 8025242:	4618      	mov	r0, r3
 8025244:	46bd      	mov	sp, r7
 8025246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802524a:	4770      	bx	lr

0802524c <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 802524c:	b5b0      	push	{r4, r5, r7, lr}
 802524e:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8025250:	f7e6 fc46 	bl	800bae0 <HAL_GetTick>
 8025254:	4603      	mov	r3, r0
 8025256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802525a:	fb02 f303 	mul.w	r3, r2, r3
 802525e:	2200      	movs	r2, #0
 8025260:	461c      	mov	r4, r3
 8025262:	4615      	mov	r5, r2
 8025264:	4622      	mov	r2, r4
 8025266:	462b      	mov	r3, r5
}
 8025268:	4610      	mov	r0, r2
 802526a:	4619      	mov	r1, r3
 802526c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08025270 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8025270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025274:	b08c      	sub	sp, #48	; 0x30
 8025276:	af00      	add	r7, sp, #0
 8025278:	ed87 0a01 	vstr	s0, [r7, #4]
        *(c) = '\0';
    }


    ei_printf("%s", s);
}
 802527c:	466b      	mov	r3, sp
 802527e:	4698      	mov	r8, r3
    float n = f;
 8025280:	687b      	ldr	r3, [r7, #4]
 8025282:	62fb      	str	r3, [r7, #44]	; 0x2c
    char s[MAX_NUMBER_STRING_SIZE];
 8025284:	4b78      	ldr	r3, [pc, #480]	; (8025468 <_Z15ei_printf_floatf+0x1f8>)
 8025286:	681e      	ldr	r6, [r3, #0]
 8025288:	1e73      	subs	r3, r6, #1
 802528a:	623b      	str	r3, [r7, #32]
 802528c:	4632      	mov	r2, r6
 802528e:	2300      	movs	r3, #0
 8025290:	4614      	mov	r4, r2
 8025292:	461d      	mov	r5, r3
 8025294:	f04f 0200 	mov.w	r2, #0
 8025298:	f04f 0300 	mov.w	r3, #0
 802529c:	00eb      	lsls	r3, r5, #3
 802529e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80252a2:	00e2      	lsls	r2, r4, #3
 80252a4:	4632      	mov	r2, r6
 80252a6:	2300      	movs	r3, #0
 80252a8:	4610      	mov	r0, r2
 80252aa:	4619      	mov	r1, r3
 80252ac:	f04f 0200 	mov.w	r2, #0
 80252b0:	f04f 0300 	mov.w	r3, #0
 80252b4:	00cb      	lsls	r3, r1, #3
 80252b6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80252ba:	00c2      	lsls	r2, r0, #3
 80252bc:	4633      	mov	r3, r6
 80252be:	3307      	adds	r3, #7
 80252c0:	08db      	lsrs	r3, r3, #3
 80252c2:	00db      	lsls	r3, r3, #3
 80252c4:	ebad 0d03 	sub.w	sp, sp, r3
 80252c8:	466b      	mov	r3, sp
 80252ca:	3300      	adds	r3, #0
 80252cc:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 80252ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80252d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80252d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252da:	d106      	bne.n	80252ea <_Z15ei_printf_floatf+0x7a>
        strcpy(s, "0");
 80252dc:	69fb      	ldr	r3, [r7, #28]
 80252de:	4963      	ldr	r1, [pc, #396]	; (802546c <_Z15ei_printf_floatf+0x1fc>)
 80252e0:	461a      	mov	r2, r3
 80252e2:	460b      	mov	r3, r1
 80252e4:	881b      	ldrh	r3, [r3, #0]
 80252e6:	8013      	strh	r3, [r2, #0]
 80252e8:	e0ad      	b.n	8025446 <_Z15ei_printf_floatf+0x1d6>
        char *c = s;
 80252ea:	69fb      	ldr	r3, [r7, #28]
 80252ec:	627b      	str	r3, [r7, #36]	; 0x24
        int neg = (n < 0);
 80252ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80252f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80252f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252fa:	bf4c      	ite	mi
 80252fc:	2301      	movmi	r3, #1
 80252fe:	2300      	movpl	r3, #0
 8025300:	b2db      	uxtb	r3, r3
 8025302:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8025304:	69bb      	ldr	r3, [r7, #24]
 8025306:	2b00      	cmp	r3, #0
 8025308:	d005      	beq.n	8025316 <_Z15ei_printf_floatf+0xa6>
            n = -n;
 802530a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 802530e:	eef1 7a67 	vneg.f32	s15, s15
 8025312:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        m = log10(n);
 8025316:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 802531a:	f7ff ff4f 	bl	80251bc <_ZSt5log10f>
 802531e:	eef0 7a40 	vmov.f32	s15, s0
 8025322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025326:	ee17 3a90 	vmov	r3, s15
 802532a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 802532c:	69bb      	ldr	r3, [r7, #24]
 802532e:	2b00      	cmp	r3, #0
 8025330:	d004      	beq.n	802533c <_Z15ei_printf_floatf+0xcc>
            *(c++) = '-';
 8025332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025334:	1c5a      	adds	r2, r3, #1
 8025336:	627a      	str	r2, [r7, #36]	; 0x24
 8025338:	222d      	movs	r2, #45	; 0x2d
 802533a:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 802533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802533e:	2b00      	cmp	r3, #0
 8025340:	dc70      	bgt.n	8025424 <_Z15ei_printf_floatf+0x1b4>
            m = 0;
 8025342:	2300      	movs	r3, #0
 8025344:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8025346:	e06d      	b.n	8025424 <_Z15ei_printf_floatf+0x1b4>
            double weight = pow(10.0, m);
 8025348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802534a:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8025460 <_Z15ei_printf_floatf+0x1f0>
 802534e:	f000 f8b8 	bl	80254c2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8025352:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8025356:	f04f 0200 	mov.w	r2, #0
 802535a:	f04f 0300 	mov.w	r3, #0
 802535e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8025362:	f7db fbd9 	bl	8000b18 <__aeabi_dcmpgt>
 8025366:	4603      	mov	r3, r0
 8025368:	2b00      	cmp	r3, #0
 802536a:	d00b      	beq.n	8025384 <_Z15ei_printf_floatf+0x114>
 802536c:	ed97 0b04 	vldr	d0, [r7, #16]
 8025370:	f7ff ff34 	bl	80251dc <_ZSt5isinfd>
 8025374:	4603      	mov	r3, r0
 8025376:	f083 0301 	eor.w	r3, r3, #1
 802537a:	b2db      	uxtb	r3, r3
 802537c:	2b00      	cmp	r3, #0
 802537e:	d001      	beq.n	8025384 <_Z15ei_printf_floatf+0x114>
 8025380:	2301      	movs	r3, #1
 8025382:	e000      	b.n	8025386 <_Z15ei_printf_floatf+0x116>
 8025384:	2300      	movs	r3, #0
 8025386:	2b00      	cmp	r3, #0
 8025388:	d03a      	beq.n	8025400 <_Z15ei_printf_floatf+0x190>
                digit = floor(n / weight);
 802538a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802538c:	f7db f8dc 	bl	8000548 <__aeabi_f2d>
 8025390:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8025394:	f7db fa5a 	bl	800084c <__aeabi_ddiv>
 8025398:	4602      	mov	r2, r0
 802539a:	460b      	mov	r3, r1
 802539c:	ec43 2b17 	vmov	d7, r2, r3
 80253a0:	eeb0 0a47 	vmov.f32	s0, s14
 80253a4:	eef0 0a67 	vmov.f32	s1, s15
 80253a8:	f005 fdde 	bl	802af68 <floor>
 80253ac:	ec53 2b10 	vmov	r2, r3, d0
 80253b0:	4610      	mov	r0, r2
 80253b2:	4619      	mov	r1, r3
 80253b4:	f7db fbd0 	bl	8000b58 <__aeabi_d2iz>
 80253b8:	4603      	mov	r3, r0
 80253ba:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 80253bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80253be:	f7db f8c3 	bl	8000548 <__aeabi_f2d>
 80253c2:	4604      	mov	r4, r0
 80253c4:	460d      	mov	r5, r1
 80253c6:	68f8      	ldr	r0, [r7, #12]
 80253c8:	f7db f8ac 	bl	8000524 <__aeabi_i2d>
 80253cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80253d0:	f7db f912 	bl	80005f8 <__aeabi_dmul>
 80253d4:	4602      	mov	r2, r0
 80253d6:	460b      	mov	r3, r1
 80253d8:	4620      	mov	r0, r4
 80253da:	4629      	mov	r1, r5
 80253dc:	f7da ff54 	bl	8000288 <__aeabi_dsub>
 80253e0:	4602      	mov	r2, r0
 80253e2:	460b      	mov	r3, r1
 80253e4:	4610      	mov	r0, r2
 80253e6:	4619      	mov	r1, r3
 80253e8:	f7db fbfe 	bl	8000be8 <__aeabi_d2f>
 80253ec:	4603      	mov	r3, r0
 80253ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                *(c++) = '0' + digit;
 80253f0:	68fb      	ldr	r3, [r7, #12]
 80253f2:	b2da      	uxtb	r2, r3
 80253f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80253f6:	1c59      	adds	r1, r3, #1
 80253f8:	6279      	str	r1, [r7, #36]	; 0x24
 80253fa:	3230      	adds	r2, #48	; 0x30
 80253fc:	b2d2      	uxtb	r2, r2
 80253fe:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8025400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025402:	2b00      	cmp	r3, #0
 8025404:	d10b      	bne.n	802541e <_Z15ei_printf_floatf+0x1ae>
 8025406:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 802540a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025412:	dd04      	ble.n	802541e <_Z15ei_printf_floatf+0x1ae>
                *(c++) = '.';
 8025414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025416:	1c5a      	adds	r2, r3, #1
 8025418:	627a      	str	r2, [r7, #36]	; 0x24
 802541a:	222e      	movs	r2, #46	; 0x2e
 802541c:	701a      	strb	r2, [r3, #0]
            m--;
 802541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025420:	3b01      	subs	r3, #1
 8025422:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8025424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025426:	f7db f88f 	bl	8000548 <__aeabi_f2d>
 802542a:	4b11      	ldr	r3, [pc, #68]	; (8025470 <_Z15ei_printf_floatf+0x200>)
 802542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025430:	f7db fb72 	bl	8000b18 <__aeabi_dcmpgt>
 8025434:	4603      	mov	r3, r0
 8025436:	2b00      	cmp	r3, #0
 8025438:	d186      	bne.n	8025348 <_Z15ei_printf_floatf+0xd8>
 802543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802543c:	2b00      	cmp	r3, #0
 802543e:	da83      	bge.n	8025348 <_Z15ei_printf_floatf+0xd8>
        *(c) = '\0';
 8025440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025442:	2200      	movs	r2, #0
 8025444:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8025446:	69f9      	ldr	r1, [r7, #28]
 8025448:	480a      	ldr	r0, [pc, #40]	; (8025474 <_Z15ei_printf_floatf+0x204>)
 802544a:	f7e3 fba3 	bl	8008b94 <_Z9ei_printfPKcz>
 802544e:	46c5      	mov	sp, r8
}
 8025450:	bf00      	nop
 8025452:	3730      	adds	r7, #48	; 0x30
 8025454:	46bd      	mov	sp, r7
 8025456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802545a:	bf00      	nop
 802545c:	f3af 8000 	nop.w
 8025460:	00000000 	.word	0x00000000
 8025464:	40240000 	.word	0x40240000
 8025468:	20000078 	.word	0x20000078
 802546c:	08031484 	.word	0x08031484
 8025470:	20000070 	.word	0x20000070
 8025474:	08031488 	.word	0x08031488

08025478 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 8025478:	b580      	push	{r7, lr}
 802547a:	b082      	sub	sp, #8
 802547c:	af00      	add	r7, sp, #0
 802547e:	6078      	str	r0, [r7, #4]
    return malloc(size);
 8025480:	6878      	ldr	r0, [r7, #4]
 8025482:	f008 fabb 	bl	802d9fc <malloc>
 8025486:	4603      	mov	r3, r0
}
 8025488:	4618      	mov	r0, r3
 802548a:	3708      	adds	r7, #8
 802548c:	46bd      	mov	sp, r7
 802548e:	bd80      	pop	{r7, pc}

08025490 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8025490:	b580      	push	{r7, lr}
 8025492:	b082      	sub	sp, #8
 8025494:	af00      	add	r7, sp, #0
 8025496:	6078      	str	r0, [r7, #4]
 8025498:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 802549a:	6839      	ldr	r1, [r7, #0]
 802549c:	6878      	ldr	r0, [r7, #4]
 802549e:	f008 fa8f 	bl	802d9c0 <calloc>
 80254a2:	4603      	mov	r3, r0
}
 80254a4:	4618      	mov	r0, r3
 80254a6:	3708      	adds	r7, #8
 80254a8:	46bd      	mov	sp, r7
 80254aa:	bd80      	pop	{r7, pc}

080254ac <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 80254ac:	b580      	push	{r7, lr}
 80254ae:	b082      	sub	sp, #8
 80254b0:	af00      	add	r7, sp, #0
 80254b2:	6078      	str	r0, [r7, #4]
    free(ptr);
 80254b4:	6878      	ldr	r0, [r7, #4]
 80254b6:	f008 faa9 	bl	802da0c <free>
}
 80254ba:	bf00      	nop
 80254bc:	3708      	adds	r7, #8
 80254be:	46bd      	mov	sp, r7
 80254c0:	bd80      	pop	{r7, pc}

080254c2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80254c2:	b580      	push	{r7, lr}
 80254c4:	b084      	sub	sp, #16
 80254c6:	af00      	add	r7, sp, #0
 80254c8:	ed87 0b02 	vstr	d0, [r7, #8]
 80254cc:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 80254ce:	6878      	ldr	r0, [r7, #4]
 80254d0:	f7db f828 	bl	8000524 <__aeabi_i2d>
 80254d4:	4602      	mov	r2, r0
 80254d6:	460b      	mov	r3, r1
 80254d8:	ec43 2b11 	vmov	d1, r2, r3
 80254dc:	ed97 0b02 	vldr	d0, [r7, #8]
 80254e0:	f005 f972 	bl	802a7c8 <pow>
 80254e4:	eeb0 7a40 	vmov.f32	s14, s0
 80254e8:	eef0 7a60 	vmov.f32	s15, s1
    }
 80254ec:	eeb0 0a47 	vmov.f32	s0, s14
 80254f0:	eef0 0a67 	vmov.f32	s1, s15
 80254f4:	3710      	adds	r7, #16
 80254f6:	46bd      	mov	sp, r7
 80254f8:	bd80      	pop	{r7, pc}
	...

080254fc <TfLiteTypeGetName>:
TfLiteStatus TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor) {
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 80254fc:	b480      	push	{r7}
 80254fe:	b083      	sub	sp, #12
 8025500:	af00      	add	r7, sp, #0
 8025502:	4603      	mov	r3, r0
 8025504:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8025506:	79fb      	ldrb	r3, [r7, #7]
 8025508:	2b12      	cmp	r3, #18
 802550a:	d84f      	bhi.n	80255ac <TfLiteTypeGetName+0xb0>
 802550c:	a201      	add	r2, pc, #4	; (adr r2, 8025514 <TfLiteTypeGetName+0x18>)
 802550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025512:	bf00      	nop
 8025514:	08025561 	.word	0x08025561
 8025518:	08025565 	.word	0x08025565
 802551c:	08025571 	.word	0x08025571
 8025520:	08025579 	.word	0x08025579
 8025524:	08025581 	.word	0x08025581
 8025528:	08025595 	.word	0x08025595
 802552c:	08025589 	.word	0x08025589
 8025530:	0802556d 	.word	0x0802556d
 8025534:	0802558d 	.word	0x0802558d
 8025538:	0802557d 	.word	0x0802557d
 802553c:	08025599 	.word	0x08025599
 8025540:	0802559d 	.word	0x0802559d
 8025544:	08025591 	.word	0x08025591
 8025548:	08025585 	.word	0x08025585
 802554c:	080255a1 	.word	0x080255a1
 8025550:	080255a5 	.word	0x080255a5
 8025554:	08025575 	.word	0x08025575
 8025558:	08025569 	.word	0x08025569
 802555c:	080255a9 	.word	0x080255a9
    case kTfLiteNoType:
      return "NOTYPE";
 8025560:	4b16      	ldr	r3, [pc, #88]	; (80255bc <TfLiteTypeGetName+0xc0>)
 8025562:	e024      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8025564:	4b16      	ldr	r3, [pc, #88]	; (80255c0 <TfLiteTypeGetName+0xc4>)
 8025566:	e022      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt16:
      return "UINT16";
 8025568:	4b16      	ldr	r3, [pc, #88]	; (80255c4 <TfLiteTypeGetName+0xc8>)
 802556a:	e020      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteInt16:
      return "INT16";
 802556c:	4b16      	ldr	r3, [pc, #88]	; (80255c8 <TfLiteTypeGetName+0xcc>)
 802556e:	e01e      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteInt32:
      return "INT32";
 8025570:	4b16      	ldr	r3, [pc, #88]	; (80255cc <TfLiteTypeGetName+0xd0>)
 8025572:	e01c      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt32:
      return "UINT32";
 8025574:	4b16      	ldr	r3, [pc, #88]	; (80255d0 <TfLiteTypeGetName+0xd4>)
 8025576:	e01a      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt8:
      return "UINT8";
 8025578:	4b16      	ldr	r3, [pc, #88]	; (80255d4 <TfLiteTypeGetName+0xd8>)
 802557a:	e018      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteInt8:
      return "INT8";
 802557c:	4b16      	ldr	r3, [pc, #88]	; (80255d8 <TfLiteTypeGetName+0xdc>)
 802557e:	e016      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteInt64:
      return "INT64";
 8025580:	4b16      	ldr	r3, [pc, #88]	; (80255dc <TfLiteTypeGetName+0xe0>)
 8025582:	e014      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt64:
      return "UINT64";
 8025584:	4b16      	ldr	r3, [pc, #88]	; (80255e0 <TfLiteTypeGetName+0xe4>)
 8025586:	e012      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteBool:
      return "BOOL";
 8025588:	4b16      	ldr	r3, [pc, #88]	; (80255e4 <TfLiteTypeGetName+0xe8>)
 802558a:	e010      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 802558c:	4b16      	ldr	r3, [pc, #88]	; (80255e8 <TfLiteTypeGetName+0xec>)
 802558e:	e00e      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8025590:	4b16      	ldr	r3, [pc, #88]	; (80255ec <TfLiteTypeGetName+0xf0>)
 8025592:	e00c      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteString:
      return "STRING";
 8025594:	4b16      	ldr	r3, [pc, #88]	; (80255f0 <TfLiteTypeGetName+0xf4>)
 8025596:	e00a      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8025598:	4b16      	ldr	r3, [pc, #88]	; (80255f4 <TfLiteTypeGetName+0xf8>)
 802559a:	e008      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat64:
      return "FLOAT64";
 802559c:	4b16      	ldr	r3, [pc, #88]	; (80255f8 <TfLiteTypeGetName+0xfc>)
 802559e:	e006      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteResource:
      return "RESOURCE";
 80255a0:	4b16      	ldr	r3, [pc, #88]	; (80255fc <TfLiteTypeGetName+0x100>)
 80255a2:	e004      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteVariant:
      return "VARIANT";
 80255a4:	4b16      	ldr	r3, [pc, #88]	; (8025600 <TfLiteTypeGetName+0x104>)
 80255a6:	e002      	b.n	80255ae <TfLiteTypeGetName+0xb2>
    case kTfLiteInt4:
      return "INT4";
 80255a8:	4b16      	ldr	r3, [pc, #88]	; (8025604 <TfLiteTypeGetName+0x108>)
 80255aa:	e000      	b.n	80255ae <TfLiteTypeGetName+0xb2>
  }
  return "Unknown type";
 80255ac:	4b16      	ldr	r3, [pc, #88]	; (8025608 <TfLiteTypeGetName+0x10c>)
}
 80255ae:	4618      	mov	r0, r3
 80255b0:	370c      	adds	r7, #12
 80255b2:	46bd      	mov	sp, r7
 80255b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255b8:	4770      	bx	lr
 80255ba:	bf00      	nop
 80255bc:	0803148c 	.word	0x0803148c
 80255c0:	08031494 	.word	0x08031494
 80255c4:	0803149c 	.word	0x0803149c
 80255c8:	080314a4 	.word	0x080314a4
 80255cc:	080314ac 	.word	0x080314ac
 80255d0:	080314b4 	.word	0x080314b4
 80255d4:	080314bc 	.word	0x080314bc
 80255d8:	080314c4 	.word	0x080314c4
 80255dc:	080314cc 	.word	0x080314cc
 80255e0:	080314d4 	.word	0x080314d4
 80255e4:	080314dc 	.word	0x080314dc
 80255e8:	080314e4 	.word	0x080314e4
 80255ec:	080314f0 	.word	0x080314f0
 80255f0:	080314fc 	.word	0x080314fc
 80255f4:	08031504 	.word	0x08031504
 80255f8:	0803150c 	.word	0x0803150c
 80255fc:	08031514 	.word	0x08031514
 8025600:	08031520 	.word	0x08031520
 8025604:	08031528 	.word	0x08031528
 8025608:	08031530 	.word	0x08031530

0802560c <_ZN6tflite12RuntimeShapeC1Ev>:
  // RuntimeShape in TFLM supports up to 5 dimensions.
  // The name kMaxSmallSize comes from the same file of the upstream
  // tensorflow lite repo and need to be kept the same for max reuse.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape() : size_(0) {}
 802560c:	b480      	push	{r7}
 802560e:	b083      	sub	sp, #12
 8025610:	af00      	add	r7, sp, #0
 8025612:	6078      	str	r0, [r7, #4]
 8025614:	687b      	ldr	r3, [r7, #4]
 8025616:	2200      	movs	r2, #0
 8025618:	601a      	str	r2, [r3, #0]
 802561a:	687b      	ldr	r3, [r7, #4]
 802561c:	4618      	mov	r0, r3
 802561e:	370c      	adds	r7, #12
 8025620:	46bd      	mov	sp, r7
 8025622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025626:	4770      	bx	lr

08025628 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 8025628:	b580      	push	{r7, lr}
 802562a:	b084      	sub	sp, #16
 802562c:	af00      	add	r7, sp, #0
 802562e:	60f8      	str	r0, [r7, #12]
 8025630:	60b9      	str	r1, [r7, #8]
 8025632:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 8025634:	68fb      	ldr	r3, [r7, #12]
 8025636:	68ba      	ldr	r2, [r7, #8]
 8025638:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 802563a:	687a      	ldr	r2, [r7, #4]
 802563c:	68b9      	ldr	r1, [r7, #8]
 802563e:	68f8      	ldr	r0, [r7, #12]
 8025640:	f000 f828 	bl	8025694 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8025644:	68fb      	ldr	r3, [r7, #12]
 8025646:	4618      	mov	r0, r3
 8025648:	3710      	adds	r7, #16
 802564a:	46bd      	mov	sp, r7
 802564c:	bd80      	pop	{r7, pc}

0802564e <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 802564e:	b480      	push	{r7}
 8025650:	b083      	sub	sp, #12
 8025652:	af00      	add	r7, sp, #0
 8025654:	6078      	str	r0, [r7, #4]
 8025656:	687b      	ldr	r3, [r7, #4]
 8025658:	4618      	mov	r0, r3
 802565a:	370c      	adds	r7, #12
 802565c:	46bd      	mov	sp, r7
 802565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025662:	4770      	bx	lr

08025664 <_ZN6tflite12RuntimeShape8DimsDataEv>:

  static RuntimeShape ExtendedShape(int new_shape_size,
                                    const RuntimeShape& shape) {
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
 8025664:	b480      	push	{r7}
 8025666:	b083      	sub	sp, #12
 8025668:	af00      	add	r7, sp, #0
 802566a:	6078      	str	r0, [r7, #4]
 802566c:	687b      	ldr	r3, [r7, #4]
 802566e:	3304      	adds	r3, #4
 8025670:	4618      	mov	r0, r3
 8025672:	370c      	adds	r7, #12
 8025674:	46bd      	mov	sp, r7
 8025676:	f85d 7b04 	ldr.w	r7, [sp], #4
 802567a:	4770      	bx	lr

0802567c <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  const int32_t* DimsData() const { return dims_; }
 802567c:	b480      	push	{r7}
 802567e:	b083      	sub	sp, #12
 8025680:	af00      	add	r7, sp, #0
 8025682:	6078      	str	r0, [r7, #4]
 8025684:	687b      	ldr	r3, [r7, #4]
 8025686:	3304      	adds	r3, #4
 8025688:	4618      	mov	r0, r3
 802568a:	370c      	adds	r7, #12
 802568c:	46bd      	mov	sp, r7
 802568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025692:	4770      	bx	lr

08025694 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8025694:	b580      	push	{r7, lr}
 8025696:	b086      	sub	sp, #24
 8025698:	af00      	add	r7, sp, #0
 802569a:	60f8      	str	r0, [r7, #12]
 802569c:	60b9      	str	r1, [r7, #8]
 802569e:	607a      	str	r2, [r7, #4]
    size_ = dimensions_count;
 80256a0:	68fb      	ldr	r3, [r7, #12]
 80256a2:	68ba      	ldr	r2, [r7, #8]
 80256a4:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 80256a6:	68f8      	ldr	r0, [r7, #12]
 80256a8:	f7ff ffdc 	bl	8025664 <_ZN6tflite12RuntimeShape8DimsDataEv>
 80256ac:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80256ae:	68bb      	ldr	r3, [r7, #8]
 80256b0:	009b      	lsls	r3, r3, #2
 80256b2:	461a      	mov	r2, r3
 80256b4:	6879      	ldr	r1, [r7, #4]
 80256b6:	6978      	ldr	r0, [r7, #20]
 80256b8:	f009 f917 	bl	802e8ea <memcpy>
  }
 80256bc:	bf00      	nop
 80256be:	3718      	adds	r7, #24
 80256c0:	46bd      	mov	sp, r7
 80256c2:	bd80      	pop	{r7, pc}

080256c4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 80256c4:	b580      	push	{r7, lr}
 80256c6:	b086      	sub	sp, #24
 80256c8:	af00      	add	r7, sp, #0
 80256ca:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 80256cc:	2301      	movs	r3, #1
 80256ce:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 80256d0:	6878      	ldr	r0, [r7, #4]
 80256d2:	f7ff ffd3 	bl	802567c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 80256d6:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 80256d8:	2300      	movs	r3, #0
 80256da:	613b      	str	r3, [r7, #16]
 80256dc:	e00b      	b.n	80256f6 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 80256de:	693b      	ldr	r3, [r7, #16]
 80256e0:	009b      	lsls	r3, r3, #2
 80256e2:	68fa      	ldr	r2, [r7, #12]
 80256e4:	4413      	add	r3, r2
 80256e6:	681a      	ldr	r2, [r3, #0]
 80256e8:	697b      	ldr	r3, [r7, #20]
 80256ea:	fb02 f303 	mul.w	r3, r2, r3
 80256ee:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 80256f0:	693b      	ldr	r3, [r7, #16]
 80256f2:	3301      	adds	r3, #1
 80256f4:	613b      	str	r3, [r7, #16]
 80256f6:	687b      	ldr	r3, [r7, #4]
 80256f8:	681b      	ldr	r3, [r3, #0]
 80256fa:	693a      	ldr	r2, [r7, #16]
 80256fc:	429a      	cmp	r2, r3
 80256fe:	dbee      	blt.n	80256de <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 8025700:	697b      	ldr	r3, [r7, #20]
  }
 8025702:	4618      	mov	r0, r3
 8025704:	3718      	adds	r7, #24
 8025706:	46bd      	mov	sp, r7
 8025708:	bd80      	pop	{r7, pc}

0802570a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 802570a:	b580      	push	{r7, lr}
 802570c:	b086      	sub	sp, #24
 802570e:	af00      	add	r7, sp, #0
 8025710:	6078      	str	r0, [r7, #4]
 8025712:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8025714:	683b      	ldr	r3, [r7, #0]
 8025716:	2b00      	cmp	r3, #0
 8025718:	d103      	bne.n	8025722 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 802571a:	6878      	ldr	r0, [r7, #4]
 802571c:	f7ff ff76 	bl	802560c <_ZN6tflite12RuntimeShapeC1Ev>
 8025720:	e00d      	b.n	802573e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8025722:	683b      	ldr	r3, [r7, #0]
 8025724:	689b      	ldr	r3, [r3, #8]
 8025726:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8025728:	697b      	ldr	r3, [r7, #20]
 802572a:	681b      	ldr	r3, [r3, #0]
 802572c:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 802572e:	697b      	ldr	r3, [r7, #20]
 8025730:	3304      	adds	r3, #4
 8025732:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8025734:	68fa      	ldr	r2, [r7, #12]
 8025736:	6939      	ldr	r1, [r7, #16]
 8025738:	6878      	ldr	r0, [r7, #4]
 802573a:	f7ff ff75 	bl	8025628 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 802573e:	6878      	ldr	r0, [r7, #4]
 8025740:	3718      	adds	r7, #24
 8025742:	46bd      	mov	sp, r7
 8025744:	bd80      	pop	{r7, pc}

08025746 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8025746:	b480      	push	{r7}
 8025748:	b083      	sub	sp, #12
 802574a:	af00      	add	r7, sp, #0
 802574c:	6078      	str	r0, [r7, #4]
 802574e:	687b      	ldr	r3, [r7, #4]
 8025750:	689b      	ldr	r3, [r3, #8]
 8025752:	681b      	ldr	r3, [r3, #0]
 8025754:	4618      	mov	r0, r3
 8025756:	370c      	adds	r7, #12
 8025758:	46bd      	mov	sp, r7
 802575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802575e:	4770      	bx	lr

08025760 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 8025760:	b480      	push	{r7}
 8025762:	b083      	sub	sp, #12
 8025764:	af00      	add	r7, sp, #0
 8025766:	6078      	str	r0, [r7, #4]
 8025768:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 802576a:	687b      	ldr	r3, [r7, #4]
 802576c:	689a      	ldr	r2, [r3, #8]
 802576e:	683b      	ldr	r3, [r7, #0]
 8025770:	009b      	lsls	r3, r3, #2
 8025772:	4413      	add	r3, r2
 8025774:	685b      	ldr	r3, [r3, #4]
}
 8025776:	4618      	mov	r0, r3
 8025778:	370c      	adds	r7, #12
 802577a:	46bd      	mov	sp, r7
 802577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025780:	4770      	bx	lr

08025782 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
 8025782:	b480      	push	{r7}
 8025784:	b083      	sub	sp, #12
 8025786:	af00      	add	r7, sp, #0
 8025788:	6078      	str	r0, [r7, #4]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 802578a:	687b      	ldr	r3, [r7, #4]
 802578c:	681b      	ldr	r3, [r3, #0]
 802578e:	2b00      	cmp	r3, #0
 8025790:	d003      	beq.n	802579a <_ZN6tflite9NumInputsEPK10TfLiteNode+0x18>
 8025792:	687b      	ldr	r3, [r7, #4]
 8025794:	681b      	ldr	r3, [r3, #0]
 8025796:	681b      	ldr	r3, [r3, #0]
 8025798:	e000      	b.n	802579c <_ZN6tflite9NumInputsEPK10TfLiteNode+0x1a>
 802579a:	2300      	movs	r3, #0
}
 802579c:	4618      	mov	r0, r3
 802579e:	370c      	adds	r7, #12
 80257a0:	46bd      	mov	sp, r7
 80257a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257a6:	4770      	bx	lr

080257a8 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) {
 80257a8:	b480      	push	{r7}
 80257aa:	b083      	sub	sp, #12
 80257ac:	af00      	add	r7, sp, #0
 80257ae:	6078      	str	r0, [r7, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 80257b0:	687b      	ldr	r3, [r7, #4]
 80257b2:	685b      	ldr	r3, [r3, #4]
 80257b4:	2b00      	cmp	r3, #0
 80257b6:	d003      	beq.n	80257c0 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x18>
 80257b8:	687b      	ldr	r3, [r7, #4]
 80257ba:	685b      	ldr	r3, [r3, #4]
 80257bc:	681b      	ldr	r3, [r3, #0]
 80257be:	e000      	b.n	80257c2 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x1a>
 80257c0:	2300      	movs	r3, #0
}
 80257c2:	4618      	mov	r0, r3
 80257c4:	370c      	adds	r7, #12
 80257c6:	46bd      	mov	sp, r7
 80257c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257cc:	4770      	bx	lr

080257ce <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
 80257ce:	b480      	push	{r7}
 80257d0:	b087      	sub	sp, #28
 80257d2:	af00      	add	r7, sp, #0
 80257d4:	60f8      	str	r0, [r7, #12]
 80257d6:	60b9      	str	r1, [r7, #8]
 80257d8:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_elements; i += 2) {
 80257da:	2300      	movs	r3, #0
 80257dc:	617b      	str	r3, [r7, #20]
 80257de:	e028      	b.n	8025832 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x64>
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
 80257e0:	697b      	ldr	r3, [r7, #20]
 80257e2:	0fda      	lsrs	r2, r3, #31
 80257e4:	4413      	add	r3, r2
 80257e6:	105b      	asrs	r3, r3, #1
 80257e8:	461a      	mov	r2, r3
 80257ea:	68fb      	ldr	r3, [r7, #12]
 80257ec:	4413      	add	r3, r2
 80257ee:	f993 3000 	ldrsb.w	r3, [r3]
 80257f2:	011b      	lsls	r3, r3, #4
 80257f4:	b25a      	sxtb	r2, r3
 80257f6:	697b      	ldr	r3, [r7, #20]
 80257f8:	6879      	ldr	r1, [r7, #4]
 80257fa:	440b      	add	r3, r1
 80257fc:	1112      	asrs	r2, r2, #4
 80257fe:	b252      	sxtb	r2, r2
 8025800:	701a      	strb	r2, [r3, #0]
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
 8025802:	697b      	ldr	r3, [r7, #20]
 8025804:	3301      	adds	r3, #1
 8025806:	68ba      	ldr	r2, [r7, #8]
 8025808:	429a      	cmp	r2, r3
 802580a:	d017      	beq.n	802583c <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x6e>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 802580c:	697b      	ldr	r3, [r7, #20]
 802580e:	0fda      	lsrs	r2, r3, #31
 8025810:	4413      	add	r3, r2
 8025812:	105b      	asrs	r3, r3, #1
 8025814:	461a      	mov	r2, r3
 8025816:	68fb      	ldr	r3, [r7, #12]
 8025818:	4413      	add	r3, r2
 802581a:	f993 2000 	ldrsb.w	r2, [r3]
 802581e:	697b      	ldr	r3, [r7, #20]
 8025820:	3301      	adds	r3, #1
 8025822:	6879      	ldr	r1, [r7, #4]
 8025824:	440b      	add	r3, r1
 8025826:	1112      	asrs	r2, r2, #4
 8025828:	b252      	sxtb	r2, r2
 802582a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < num_elements; i += 2) {
 802582c:	697b      	ldr	r3, [r7, #20]
 802582e:	3302      	adds	r3, #2
 8025830:	617b      	str	r3, [r7, #20]
 8025832:	697a      	ldr	r2, [r7, #20]
 8025834:	68bb      	ldr	r3, [r7, #8]
 8025836:	429a      	cmp	r2, r3
 8025838:	dbd2      	blt.n	80257e0 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x12>
  }
}
 802583a:	e000      	b.n	802583e <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x70>
    if (i + 1 == num_elements) break;
 802583c:	bf00      	nop
}
 802583e:	bf00      	nop
 8025840:	371c      	adds	r7, #28
 8025842:	46bd      	mov	sp, r7
 8025844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025848:	4770      	bx	lr

0802584a <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 802584a:	b480      	push	{r7}
 802584c:	af00      	add	r7, sp, #0
 802584e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025852:	4618      	mov	r0, r3
 8025854:	46bd      	mov	sp, r7
 8025856:	f85d 7b04 	ldr.w	r7, [sp], #4
 802585a:	4770      	bx	lr

0802585c <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 802585c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8025860:	b088      	sub	sp, #32
 8025862:	af00      	add	r7, sp, #0
 8025864:	ed87 0b02 	vstr	d0, [r7, #8]
 8025868:	6078      	str	r0, [r7, #4]
 802586a:	6039      	str	r1, [r7, #0]
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 802586c:	f04f 0200 	mov.w	r2, #0
 8025870:	f04f 0300 	mov.w	r3, #0
 8025874:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025878:	f7db f926 	bl	8000ac8 <__aeabi_dcmpeq>
 802587c:	4603      	mov	r3, r0
 802587e:	2b00      	cmp	r3, #0
 8025880:	d006      	beq.n	8025890 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 8025882:	687b      	ldr	r3, [r7, #4]
 8025884:	2200      	movs	r2, #0
 8025886:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8025888:	683b      	ldr	r3, [r7, #0]
 802588a:	2200      	movs	r2, #0
 802588c:	601a      	str	r2, [r3, #0]
    return;
 802588e:	e068      	b.n	8025962 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8025890:	6838      	ldr	r0, [r7, #0]
 8025892:	ed97 0b02 	vldr	d0, [r7, #8]
 8025896:	f005 f887 	bl	802a9a8 <frexp>
 802589a:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 802589e:	f04f 0200 	mov.w	r2, #0
 80258a2:	4b32      	ldr	r3, [pc, #200]	; (802596c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 80258a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80258a8:	f7da fea6 	bl	80005f8 <__aeabi_dmul>
 80258ac:	4602      	mov	r2, r0
 80258ae:	460b      	mov	r3, r1
 80258b0:	ec43 2b17 	vmov	d7, r2, r3
 80258b4:	eeb0 0a47 	vmov.f32	s0, s14
 80258b8:	eef0 0a67 	vmov.f32	s1, s15
 80258bc:	f000 f947 	bl	8025b4e <_ZN6tflite11TfLiteRoundIdEET_S1_>
 80258c0:	ec53 2b10 	vmov	r2, r3, d0
 80258c4:	4610      	mov	r0, r2
 80258c6:	4619      	mov	r1, r3
 80258c8:	f7db fa46 	bl	8000d58 <__aeabi_d2lz>
 80258cc:	4602      	mov	r2, r0
 80258ce:	460b      	mov	r3, r1
 80258d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 80258d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80258d8:	4925      	ldr	r1, [pc, #148]	; (8025970 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 80258da:	428a      	cmp	r2, r1
 80258dc:	f173 0300 	sbcs.w	r3, r3, #0
 80258e0:	db01      	blt.n	80258e6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 80258e2:	f008 f841 	bl	802d968 <abort>
  if (q_fixed == (1LL << 31)) {
 80258e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80258ea:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80258ee:	430b      	orrs	r3, r1
 80258f0:	d118      	bne.n	8025924 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 80258f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80258f6:	0fd9      	lsrs	r1, r3, #31
 80258f8:	2000      	movs	r0, #0
 80258fa:	468a      	mov	sl, r1
 80258fc:	4683      	mov	fp, r0
 80258fe:	eb1a 0402 	adds.w	r4, sl, r2
 8025902:	eb4b 0503 	adc.w	r5, fp, r3
 8025906:	f04f 0200 	mov.w	r2, #0
 802590a:	f04f 0300 	mov.w	r3, #0
 802590e:	0862      	lsrs	r2, r4, #1
 8025910:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8025914:	106b      	asrs	r3, r5, #1
 8025916:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 802591a:	683b      	ldr	r3, [r7, #0]
 802591c:	681b      	ldr	r3, [r3, #0]
 802591e:	1c5a      	adds	r2, r3, #1
 8025920:	683b      	ldr	r3, [r7, #0]
 8025922:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8025924:	f7ff ff91 	bl	802584a <_ZNSt14numeric_limitsIlE3maxEv>
 8025928:	4603      	mov	r3, r0
 802592a:	17da      	asrs	r2, r3, #31
 802592c:	4698      	mov	r8, r3
 802592e:	4691      	mov	r9, r2
 8025930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8025934:	4590      	cmp	r8, r2
 8025936:	eb79 0303 	sbcs.w	r3, r9, r3
 802593a:	da01      	bge.n	8025940 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 802593c:	f008 f814 	bl	802d968 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8025940:	683b      	ldr	r3, [r7, #0]
 8025942:	681b      	ldr	r3, [r3, #0]
 8025944:	f113 0f1f 	cmn.w	r3, #31
 8025948:	da08      	bge.n	802595c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 802594a:	683b      	ldr	r3, [r7, #0]
 802594c:	2200      	movs	r2, #0
 802594e:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8025950:	f04f 0200 	mov.w	r2, #0
 8025954:	f04f 0300 	mov.w	r3, #0
 8025958:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 802595c:	69ba      	ldr	r2, [r7, #24]
 802595e:	687b      	ldr	r3, [r7, #4]
 8025960:	601a      	str	r2, [r3, #0]
}
 8025962:	3720      	adds	r7, #32
 8025964:	46bd      	mov	sp, r7
 8025966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802596a:	bf00      	nop
 802596c:	41e00000 	.word	0x41e00000
 8025970:	80000001 	.word	0x80000001

08025974 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8025974:	b580      	push	{r7, lr}
 8025976:	b084      	sub	sp, #16
 8025978:	af00      	add	r7, sp, #0
 802597a:	ed87 0b02 	vstr	d0, [r7, #8]
 802597e:	6078      	str	r0, [r7, #4]
 8025980:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8025982:	f04f 0200 	mov.w	r2, #0
 8025986:	4b0d      	ldr	r3, [pc, #52]	; (80259bc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 8025988:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802598c:	f7db f8c4 	bl	8000b18 <__aeabi_dcmpgt>
 8025990:	4603      	mov	r3, r0
 8025992:	2b00      	cmp	r3, #0
 8025994:	d101      	bne.n	802599a <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8025996:	f007 ffe7 	bl	802d968 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 802599a:	6839      	ldr	r1, [r7, #0]
 802599c:	6878      	ldr	r0, [r7, #4]
 802599e:	ed97 0b02 	vldr	d0, [r7, #8]
 80259a2:	f7ff ff5b 	bl	802585c <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 80259a6:	683b      	ldr	r3, [r7, #0]
 80259a8:	681b      	ldr	r3, [r3, #0]
 80259aa:	2b00      	cmp	r3, #0
 80259ac:	da01      	bge.n	80259b2 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 80259ae:	f007 ffdb 	bl	802d968 <abort>
}
 80259b2:	bf00      	nop
 80259b4:	3710      	adds	r7, #16
 80259b6:	46bd      	mov	sp, r7
 80259b8:	bd80      	pop	{r7, pc}
 80259ba:	bf00      	nop
 80259bc:	3ff00000 	.word	0x3ff00000

080259c0 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80259c0:	b580      	push	{r7, lr}
 80259c2:	b082      	sub	sp, #8
 80259c4:	af00      	add	r7, sp, #0
 80259c6:	6078      	str	r0, [r7, #4]
 80259c8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80259ca:	683b      	ldr	r3, [r7, #0]
 80259cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80259d0:	687b      	ldr	r3, [r7, #4]
 80259d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259d6:	f7db f881 	bl	8000adc <__aeabi_dcmplt>
 80259da:	4603      	mov	r3, r0
 80259dc:	2b00      	cmp	r3, #0
 80259de:	d001      	beq.n	80259e4 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 80259e0:	683b      	ldr	r3, [r7, #0]
 80259e2:	e000      	b.n	80259e6 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 80259e4:	687b      	ldr	r3, [r7, #4]
    }
 80259e6:	4618      	mov	r0, r3
 80259e8:	3708      	adds	r7, #8
 80259ea:	46bd      	mov	sp, r7
 80259ec:	bd80      	pop	{r7, pc}
	...

080259f0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 80259f0:	b5b0      	push	{r4, r5, r7, lr}
 80259f2:	b08e      	sub	sp, #56	; 0x38
 80259f4:	af00      	add	r7, sp, #0
 80259f6:	ed87 0b06 	vstr	d0, [r7, #24]
 80259fa:	ed87 1b04 	vstr	d1, [r7, #16]
 80259fe:	60f8      	str	r0, [r7, #12]
 8025a00:	60b9      	str	r1, [r7, #8]
 8025a02:	607a      	str	r2, [r7, #4]
  // this generates a Q(input_integer_bits).(31-input_integer_bits)
  // representation.
#if TFLITE_SINGLE_ROUNDING
  const double max_real_multiplier = (1LL << 30) - 1.0;
#else
  const double max_real_multiplier = (1LL << 31) - 1.0;
 8025a04:	a31c      	add	r3, pc, #112	; (adr r3, 8025a78 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 8025a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
      0) {
    input_beta_real_multiplier = max_real_multiplier;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier =
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
 8025a0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8025a12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8025a16:	f7da fdef 	bl	80005f8 <__aeabi_dmul>
 8025a1a:	4602      	mov	r2, r0
 8025a1c:	460b      	mov	r3, r1
 8025a1e:	4614      	mov	r4, r2
 8025a20:	461d      	mov	r5, r3
 8025a22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8025a26:	68fb      	ldr	r3, [r7, #12]
 8025a28:	fa22 f303 	lsr.w	r3, r2, r3
 8025a2c:	4618      	mov	r0, r3
 8025a2e:	f7da fd79 	bl	8000524 <__aeabi_i2d>
 8025a32:	4602      	mov	r2, r0
 8025a34:	460b      	mov	r3, r1
 8025a36:	4620      	mov	r0, r4
 8025a38:	4629      	mov	r1, r5
 8025a3a:	f7da fddd 	bl	80005f8 <__aeabi_dmul>
 8025a3e:	4602      	mov	r2, r0
 8025a40:	460b      	mov	r3, r1
 8025a42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8025a46:	f107 0220 	add.w	r2, r7, #32
 8025a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025a4e:	4611      	mov	r1, r2
 8025a50:	4618      	mov	r0, r3
 8025a52:	f7ff ffb5 	bl	80259c0 <_ZSt3minIdERKT_S2_S2_>
 8025a56:	4603      	mov	r3, r0
                       max_real_multiplier);
 8025a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8025a60:	6879      	ldr	r1, [r7, #4]
 8025a62:	68b8      	ldr	r0, [r7, #8]
 8025a64:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8025a68:	f7ff ff84 	bl	8025974 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 8025a6c:	bf00      	nop
 8025a6e:	3738      	adds	r7, #56	; 0x38
 8025a70:	46bd      	mov	sp, r7
 8025a72:	bdb0      	pop	{r4, r5, r7, pc}
 8025a74:	f3af 8000 	nop.w
 8025a78:	ffc00000 	.word	0xffc00000
 8025a7c:	41dfffff 	.word	0x41dfffff

08025a80 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8025a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a84:	b087      	sub	sp, #28
 8025a86:	af00      	add	r7, sp, #0
 8025a88:	60f8      	str	r0, [r7, #12]
 8025a8a:	60b9      	str	r1, [r7, #8]
 8025a8c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8025a8e:	2201      	movs	r2, #1
 8025a90:	68fb      	ldr	r3, [r7, #12]
 8025a92:	fa02 f303 	lsl.w	r3, r2, r3
 8025a96:	3b01      	subs	r3, #1
 8025a98:	4618      	mov	r0, r3
 8025a9a:	f7da fd43 	bl	8000524 <__aeabi_i2d>
 8025a9e:	4682      	mov	sl, r0
 8025aa0:	468b      	mov	fp, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
 8025aa2:	687a      	ldr	r2, [r7, #4]
 8025aa4:	68fb      	ldr	r3, [r7, #12]
 8025aa6:	1ad1      	subs	r1, r2, r3
 8025aa8:	f04f 0201 	mov.w	r2, #1
 8025aac:	f04f 0300 	mov.w	r3, #0
 8025ab0:	f1a1 0620 	sub.w	r6, r1, #32
 8025ab4:	f1c1 0020 	rsb	r0, r1, #32
 8025ab8:	fa03 f901 	lsl.w	r9, r3, r1
 8025abc:	fa02 f606 	lsl.w	r6, r2, r6
 8025ac0:	ea49 0906 	orr.w	r9, r9, r6
 8025ac4:	fa22 f000 	lsr.w	r0, r2, r0
 8025ac8:	ea49 0900 	orr.w	r9, r9, r0
 8025acc:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8025ad0:	4640      	mov	r0, r8
 8025ad2:	4649      	mov	r1, r9
 8025ad4:	f7da fd62 	bl	800059c <__aeabi_l2d>
 8025ad8:	4602      	mov	r2, r0
 8025ada:	460b      	mov	r3, r1
 8025adc:	4650      	mov	r0, sl
 8025ade:	4659      	mov	r1, fp
 8025ae0:	f7da fd8a 	bl	80005f8 <__aeabi_dmul>
 8025ae4:	4602      	mov	r2, r0
 8025ae6:	460b      	mov	r3, r1
 8025ae8:	4690      	mov	r8, r2
 8025aea:	4699      	mov	r9, r3
      (1LL << input_left_shift);
 8025aec:	f04f 0201 	mov.w	r2, #1
 8025af0:	f04f 0300 	mov.w	r3, #0
 8025af4:	68b9      	ldr	r1, [r7, #8]
 8025af6:	f1a1 0620 	sub.w	r6, r1, #32
 8025afa:	f1c1 0020 	rsb	r0, r1, #32
 8025afe:	fa03 f501 	lsl.w	r5, r3, r1
 8025b02:	fa02 f606 	lsl.w	r6, r2, r6
 8025b06:	4335      	orrs	r5, r6
 8025b08:	fa22 f000 	lsr.w	r0, r2, r0
 8025b0c:	4305      	orrs	r5, r0
 8025b0e:	fa02 f401 	lsl.w	r4, r2, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
 8025b12:	4620      	mov	r0, r4
 8025b14:	4629      	mov	r1, r5
 8025b16:	f7da fd41 	bl	800059c <__aeabi_l2d>
 8025b1a:	4602      	mov	r2, r0
 8025b1c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8025b1e:	4640      	mov	r0, r8
 8025b20:	4649      	mov	r1, r9
 8025b22:	f7da fe93 	bl	800084c <__aeabi_ddiv>
 8025b26:	4602      	mov	r2, r0
 8025b28:	460b      	mov	r3, r1
 8025b2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8025b2e:	ed97 0b04 	vldr	d0, [r7, #16]
 8025b32:	f005 fa19 	bl	802af68 <floor>
 8025b36:	ec53 2b10 	vmov	r2, r3, d0
 8025b3a:	4610      	mov	r0, r2
 8025b3c:	4619      	mov	r1, r3
 8025b3e:	f7db f80b 	bl	8000b58 <__aeabi_d2iz>
 8025b42:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 8025b44:	4618      	mov	r0, r3
 8025b46:	371c      	adds	r7, #28
 8025b48:	46bd      	mov	sp, r7
 8025b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025b4e <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8025b4e:	b580      	push	{r7, lr}
 8025b50:	b082      	sub	sp, #8
 8025b52:	af00      	add	r7, sp, #0
 8025b54:	ed87 0b00 	vstr	d0, [r7]
 8025b58:	ed97 0b00 	vldr	d0, [r7]
 8025b5c:	f005 fa84 	bl	802b068 <round>
 8025b60:	eeb0 7a40 	vmov.f32	s14, s0
 8025b64:	eef0 7a60 	vmov.f32	s15, s1
 8025b68:	eeb0 0a47 	vmov.f32	s0, s14
 8025b6c:	eef0 0a67 	vmov.f32	s1, s15
 8025b70:	3708      	adds	r7, #8
 8025b72:	46bd      	mov	sp, r7
 8025b74:	bd80      	pop	{r7, pc}

08025b76 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8025b76:	b580      	push	{r7, lr}
 8025b78:	b082      	sub	sp, #8
 8025b7a:	af00      	add	r7, sp, #0
 8025b7c:	ed87 0a01 	vstr	s0, [r7, #4]
 8025b80:	ed97 0a01 	vldr	s0, [r7, #4]
 8025b84:	f7db fbb5 	bl	80012f2 <_ZSt5roundf>
 8025b88:	eef0 7a40 	vmov.f32	s15, s0
 8025b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8025b90:	3708      	adds	r7, #8
 8025b92:	46bd      	mov	sp, r7
 8025b94:	bd80      	pop	{r7, pc}

08025b96 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8025b96:	b480      	push	{r7}
 8025b98:	b083      	sub	sp, #12
 8025b9a:	af00      	add	r7, sp, #0
 8025b9c:	ed87 0b00 	vstr	d0, [r7]
 8025ba0:	683a      	ldr	r2, [r7, #0]
 8025ba2:	6879      	ldr	r1, [r7, #4]
 8025ba4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025ba8:	ec43 2b17 	vmov	d7, r2, r3
 8025bac:	eeb0 0a47 	vmov.f32	s0, s14
 8025bb0:	eef0 0a67 	vmov.f32	s1, s15
 8025bb4:	370c      	adds	r7, #12
 8025bb6:	46bd      	mov	sp, r7
 8025bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bbc:	4770      	bx	lr
	...

08025bc0 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8025bc0:	b480      	push	{r7}
 8025bc2:	af00      	add	r7, sp, #0
 8025bc4:	4b02      	ldr	r3, [pc, #8]	; (8025bd0 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8025bc6:	4618      	mov	r0, r3
 8025bc8:	46bd      	mov	sp, r7
 8025bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bce:	4770      	bx	lr
 8025bd0:	ffff8000 	.word	0xffff8000

08025bd4 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8025bd4:	b480      	push	{r7}
 8025bd6:	af00      	add	r7, sp, #0
 8025bd8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025bdc:	4618      	mov	r0, r3
 8025bde:	46bd      	mov	sp, r7
 8025be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025be4:	4770      	bx	lr

08025be6 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8025be6:	b480      	push	{r7}
 8025be8:	af00      	add	r7, sp, #0
 8025bea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8025bee:	4618      	mov	r0, r3
 8025bf0:	46bd      	mov	sp, r7
 8025bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bf6:	4770      	bx	lr

08025bf8 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8025bf8:	b480      	push	{r7}
 8025bfa:	af00      	add	r7, sp, #0
 8025bfc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8025c00:	4618      	mov	r0, r3
 8025c02:	46bd      	mov	sp, r7
 8025c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c08:	4770      	bx	lr

08025c0a <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8025c0a:	b480      	push	{r7}
 8025c0c:	af00      	add	r7, sp, #0
 8025c0e:	237f      	movs	r3, #127	; 0x7f
 8025c10:	4618      	mov	r0, r3
 8025c12:	46bd      	mov	sp, r7
 8025c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c18:	4770      	bx	lr

08025c1a <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8025c1a:	b480      	push	{r7}
 8025c1c:	af00      	add	r7, sp, #0
 8025c1e:	2300      	movs	r3, #0
 8025c20:	4618      	mov	r0, r3
 8025c22:	46bd      	mov	sp, r7
 8025c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c28:	4770      	bx	lr

08025c2a <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8025c2a:	b480      	push	{r7}
 8025c2c:	af00      	add	r7, sp, #0
 8025c2e:	23ff      	movs	r3, #255	; 0xff
 8025c30:	4618      	mov	r0, r3
 8025c32:	46bd      	mov	sp, r7
 8025c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c38:	4770      	bx	lr
	...

08025c3c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int32_t* per_channel_shift,
    int num_channels) {
 8025c3c:	b5b0      	push	{r4, r5, r7, lr}
 8025c3e:	b09a      	sub	sp, #104	; 0x68
 8025c40:	af04      	add	r7, sp, #16
 8025c42:	60f8      	str	r0, [r7, #12]
 8025c44:	60b9      	str	r1, [r7, #8]
 8025c46:	607a      	str	r2, [r7, #4]
 8025c48:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 8025c4a:	68bb      	ldr	r3, [r7, #8]
 8025c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8025c50:	2b01      	cmp	r3, #1
 8025c52:	d013      	beq.n	8025c7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x40>
 8025c54:	68fb      	ldr	r3, [r7, #12]
 8025c56:	691c      	ldr	r4, [r3, #16]
 8025c58:	68bb      	ldr	r3, [r7, #8]
 8025c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8025c5e:	461a      	mov	r2, r3
 8025c60:	2301      	movs	r3, #1
 8025c62:	9303      	str	r3, [sp, #12]
 8025c64:	9202      	str	r2, [sp, #8]
 8025c66:	4b96      	ldr	r3, [pc, #600]	; (8025ec0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x284>)
 8025c68:	9301      	str	r3, [sp, #4]
 8025c6a:	4b96      	ldr	r3, [pc, #600]	; (8025ec4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x288>)
 8025c6c:	9300      	str	r3, [sp, #0]
 8025c6e:	23d7      	movs	r3, #215	; 0xd7
 8025c70:	4a95      	ldr	r2, [pc, #596]	; (8025ec8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 8025c72:	4996      	ldr	r1, [pc, #600]	; (8025ecc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x290>)
 8025c74:	68f8      	ldr	r0, [r7, #12]
 8025c76:	47a0      	blx	r4
 8025c78:	2301      	movs	r3, #1
 8025c7a:	e16b      	b.n	8025f54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x318>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8025c7c:	687b      	ldr	r3, [r7, #4]
 8025c7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8025c82:	2b01      	cmp	r3, #1
 8025c84:	d013      	beq.n	8025cae <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x72>
 8025c86:	68fb      	ldr	r3, [r7, #12]
 8025c88:	691c      	ldr	r4, [r3, #16]
 8025c8a:	687b      	ldr	r3, [r7, #4]
 8025c8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8025c90:	461a      	mov	r2, r3
 8025c92:	2301      	movs	r3, #1
 8025c94:	9303      	str	r3, [sp, #12]
 8025c96:	9202      	str	r2, [sp, #8]
 8025c98:	4b89      	ldr	r3, [pc, #548]	; (8025ec0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x284>)
 8025c9a:	9301      	str	r3, [sp, #4]
 8025c9c:	4b8c      	ldr	r3, [pc, #560]	; (8025ed0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 8025c9e:	9300      	str	r3, [sp, #0]
 8025ca0:	23d9      	movs	r3, #217	; 0xd9
 8025ca2:	4a89      	ldr	r2, [pc, #548]	; (8025ec8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 8025ca4:	4989      	ldr	r1, [pc, #548]	; (8025ecc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x290>)
 8025ca6:	68f8      	ldr	r0, [r7, #12]
 8025ca8:	47a0      	blx	r4
 8025caa:	2301      	movs	r3, #1
 8025cac:	e152      	b.n	8025f54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x318>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 8025cae:	687b      	ldr	r3, [r7, #4]
 8025cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025cb2:	653b      	str	r3, [r7, #80]	; 0x50
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 8025cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025cb6:	2b00      	cmp	r3, #0
 8025cb8:	d10a      	bne.n	8025cd0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x94>
 8025cba:	68fb      	ldr	r3, [r7, #12]
 8025cbc:	691c      	ldr	r4, [r3, #16]
 8025cbe:	4b85      	ldr	r3, [pc, #532]	; (8025ed4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 8025cc0:	9300      	str	r3, [sp, #0]
 8025cc2:	23e4      	movs	r3, #228	; 0xe4
 8025cc4:	4a80      	ldr	r2, [pc, #512]	; (8025ec8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 8025cc6:	4984      	ldr	r1, [pc, #528]	; (8025ed8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x29c>)
 8025cc8:	68f8      	ldr	r0, [r7, #12]
 8025cca:	47a0      	blx	r4
 8025ccc:	2301      	movs	r3, #1
 8025cce:	e141      	b.n	8025f54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x318>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8025cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025cd2:	681b      	ldr	r3, [r3, #0]
 8025cd4:	2b00      	cmp	r3, #0
 8025cd6:	d10a      	bne.n	8025cee <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xb2>
 8025cd8:	68fb      	ldr	r3, [r7, #12]
 8025cda:	691c      	ldr	r4, [r3, #16]
 8025cdc:	4b7f      	ldr	r3, [pc, #508]	; (8025edc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a0>)
 8025cde:	9300      	str	r3, [sp, #0]
 8025ce0:	23e5      	movs	r3, #229	; 0xe5
 8025ce2:	4a79      	ldr	r2, [pc, #484]	; (8025ec8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 8025ce4:	497c      	ldr	r1, [pc, #496]	; (8025ed8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x29c>)
 8025ce6:	68f8      	ldr	r0, [r7, #12]
 8025ce8:	47a0      	blx	r4
 8025cea:	2301      	movs	r3, #1
 8025cec:	e132      	b.n	8025f54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x318>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 8025cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025cf0:	681b      	ldr	r3, [r3, #0]
 8025cf2:	681b      	ldr	r3, [r3, #0]
 8025cf4:	2b01      	cmp	r3, #1
 8025cf6:	bfcc      	ite	gt
 8025cf8:	2301      	movgt	r3, #1
 8025cfa:	2300      	movle	r3, #0
 8025cfc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if (is_per_channel) {
 8025d00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025d04:	2b00      	cmp	r3, #0
 8025d06:	d063      	beq.n	8025dd0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x194>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 8025d08:	68bb      	ldr	r3, [r7, #8]
 8025d0a:	781b      	ldrb	r3, [r3, #0]
 8025d0c:	2b09      	cmp	r3, #9
 8025d0e:	d00e      	beq.n	8025d2e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 8025d10:	68bb      	ldr	r3, [r7, #8]
 8025d12:	781b      	ldrb	r3, [r3, #0]
 8025d14:	2b07      	cmp	r3, #7
 8025d16:	d00a      	beq.n	8025d2e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 8025d18:	68fb      	ldr	r3, [r7, #12]
 8025d1a:	691c      	ldr	r4, [r3, #16]
 8025d1c:	4b70      	ldr	r3, [pc, #448]	; (8025ee0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 8025d1e:	9300      	str	r3, [sp, #0]
 8025d20:	23e9      	movs	r3, #233	; 0xe9
 8025d22:	4a69      	ldr	r2, [pc, #420]	; (8025ec8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 8025d24:	496c      	ldr	r1, [pc, #432]	; (8025ed8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x29c>)
 8025d26:	68f8      	ldr	r0, [r7, #12]
 8025d28:	47a0      	blx	r4
 8025d2a:	2301      	movs	r3, #1
 8025d2c:	e112      	b.n	8025f54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x318>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE(context,
 8025d2e:	687b      	ldr	r3, [r7, #4]
 8025d30:	781b      	ldrb	r3, [r3, #0]
 8025d32:	2b09      	cmp	r3, #9
 8025d34:	d00e      	beq.n	8025d54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x118>
 8025d36:	687b      	ldr	r3, [r7, #4]
 8025d38:	781b      	ldrb	r3, [r3, #0]
 8025d3a:	2b12      	cmp	r3, #18
 8025d3c:	d00a      	beq.n	8025d54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x118>
 8025d3e:	68fb      	ldr	r3, [r7, #12]
 8025d40:	691c      	ldr	r4, [r3, #16]
 8025d42:	4b68      	ldr	r3, [pc, #416]	; (8025ee4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a8>)
 8025d44:	9300      	str	r3, [sp, #0]
 8025d46:	23eb      	movs	r3, #235	; 0xeb
 8025d48:	4a5f      	ldr	r2, [pc, #380]	; (8025ec8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 8025d4a:	4963      	ldr	r1, [pc, #396]	; (8025ed8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x29c>)
 8025d4c:	68f8      	ldr	r0, [r7, #12]
 8025d4e:	47a0      	blx	r4
 8025d50:	2301      	movs	r3, #1
 8025d52:	e0ff      	b.n	8025f54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x318>
                   filter->type == kTfLiteInt8 || filter->type == kTfLiteInt4);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 8025d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d56:	681b      	ldr	r3, [r3, #0]
 8025d58:	681b      	ldr	r3, [r3, #0]
 8025d5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025d5e:	429a      	cmp	r2, r3
 8025d60:	d013      	beq.n	8025d8a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x14e>
 8025d62:	68fb      	ldr	r3, [r7, #12]
 8025d64:	691c      	ldr	r4, [r3, #16]
 8025d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d68:	681b      	ldr	r3, [r3, #0]
 8025d6a:	681b      	ldr	r3, [r3, #0]
 8025d6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025d70:	9203      	str	r2, [sp, #12]
 8025d72:	9302      	str	r3, [sp, #8]
 8025d74:	4b5c      	ldr	r3, [pc, #368]	; (8025ee8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2ac>)
 8025d76:	9301      	str	r3, [sp, #4]
 8025d78:	4b5c      	ldr	r3, [pc, #368]	; (8025eec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b0>)
 8025d7a:	9300      	str	r3, [sp, #0]
 8025d7c:	23ed      	movs	r3, #237	; 0xed
 8025d7e:	4a52      	ldr	r2, [pc, #328]	; (8025ec8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 8025d80:	4952      	ldr	r1, [pc, #328]	; (8025ecc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x290>)
 8025d82:	68f8      	ldr	r0, [r7, #12]
 8025d84:	47a0      	blx	r4
 8025d86:	2301      	movs	r3, #1
 8025d88:	e0e4      	b.n	8025f54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x318>
    TF_LITE_ENSURE_EQ(
 8025d8a:	687b      	ldr	r3, [r7, #4]
 8025d8c:	689a      	ldr	r2, [r3, #8]
 8025d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d90:	689b      	ldr	r3, [r3, #8]
 8025d92:	009b      	lsls	r3, r3, #2
 8025d94:	4413      	add	r3, r2
 8025d96:	685b      	ldr	r3, [r3, #4]
 8025d98:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025d9c:	429a      	cmp	r2, r3
 8025d9e:	d017      	beq.n	8025dd0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x194>
 8025da0:	68fb      	ldr	r3, [r7, #12]
 8025da2:	691c      	ldr	r4, [r3, #16]
 8025da4:	687b      	ldr	r3, [r7, #4]
 8025da6:	689a      	ldr	r2, [r3, #8]
 8025da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025daa:	689b      	ldr	r3, [r3, #8]
 8025dac:	009b      	lsls	r3, r3, #2
 8025dae:	4413      	add	r3, r2
 8025db0:	685b      	ldr	r3, [r3, #4]
 8025db2:	9303      	str	r3, [sp, #12]
 8025db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025db8:	9302      	str	r3, [sp, #8]
 8025dba:	4b4d      	ldr	r3, [pc, #308]	; (8025ef0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b4>)
 8025dbc:	9301      	str	r3, [sp, #4]
 8025dbe:	4b4a      	ldr	r3, [pc, #296]	; (8025ee8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2ac>)
 8025dc0:	9300      	str	r3, [sp, #0]
 8025dc2:	23ee      	movs	r3, #238	; 0xee
 8025dc4:	4a40      	ldr	r2, [pc, #256]	; (8025ec8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 8025dc6:	4941      	ldr	r1, [pc, #260]	; (8025ecc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x290>)
 8025dc8:	68f8      	ldr	r0, [r7, #12]
 8025dca:	47a0      	blx	r4
 8025dcc:	2301      	movs	r3, #1
 8025dce:	e0c1      	b.n	8025f54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x318>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 8025dd0:	68bb      	ldr	r3, [r7, #8]
 8025dd2:	68db      	ldr	r3, [r3, #12]
 8025dd4:	64bb      	str	r3, [r7, #72]	; 0x48
  const float output_scale = output->params.scale;
 8025dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8025dd8:	68db      	ldr	r3, [r3, #12]
 8025dda:	647b      	str	r3, [r7, #68]	; 0x44
  const float* filter_scales = affine_quantization->scale->data;
 8025ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025dde:	681b      	ldr	r3, [r3, #0]
 8025de0:	3304      	adds	r3, #4
 8025de2:	643b      	str	r3, [r7, #64]	; 0x40
  for (int i = 0; i < num_channels; ++i) {
 8025de4:	2300      	movs	r3, #0
 8025de6:	657b      	str	r3, [r7, #84]	; 0x54
 8025de8:	e046      	b.n	8025e78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x23c>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 8025dea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025dee:	2b00      	cmp	r3, #0
 8025df0:	d005      	beq.n	8025dfe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1c2>
 8025df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025df4:	009b      	lsls	r3, r3, #2
 8025df6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8025df8:	4413      	add	r3, r2
 8025dfa:	681b      	ldr	r3, [r3, #0]
 8025dfc:	e001      	b.n	8025e02 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1c6>
 8025dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025e00:	681b      	ldr	r3, [r3, #0]
 8025e02:	63bb      	str	r3, [r7, #56]	; 0x38
    const double filter_scale = static_cast<double>(scale);
 8025e04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025e06:	f7da fb9f 	bl	8000548 <__aeabi_f2d>
 8025e0a:	4602      	mov	r2, r0
 8025e0c:	460b      	mov	r3, r1
 8025e0e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    const double effective_output_scale = static_cast<double>(input_scale) *
 8025e12:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8025e14:	f7da fb98 	bl	8000548 <__aeabi_f2d>
 8025e18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8025e1c:	f7da fbec 	bl	80005f8 <__aeabi_dmul>
 8025e20:	4602      	mov	r2, r0
 8025e22:	460b      	mov	r3, r1
 8025e24:	4614      	mov	r4, r2
 8025e26:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 8025e28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8025e2a:	f7da fb8d 	bl	8000548 <__aeabi_f2d>
 8025e2e:	4602      	mov	r2, r0
 8025e30:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 8025e32:	4620      	mov	r0, r4
 8025e34:	4629      	mov	r1, r5
 8025e36:	f7da fd09 	bl	800084c <__aeabi_ddiv>
 8025e3a:	4602      	mov	r2, r0
 8025e3c:	460b      	mov	r3, r1
 8025e3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8025e42:	f107 0220 	add.w	r2, r7, #32
 8025e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8025e4a:	4611      	mov	r1, r2
 8025e4c:	4618      	mov	r0, r3
 8025e4e:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8025e52:	f7ff fd03 	bl	802585c <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 8025e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025e58:	009b      	lsls	r3, r3, #2
 8025e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8025e5e:	4413      	add	r3, r2
 8025e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025e62:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 8025e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025e66:	009b      	lsls	r3, r3, #2
 8025e68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8025e6c:	4413      	add	r3, r2
 8025e6e:	6a3a      	ldr	r2, [r7, #32]
 8025e70:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 8025e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025e74:	3301      	adds	r3, #1
 8025e76:	657b      	str	r3, [r7, #84]	; 0x54
 8025e78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025e7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025e7e:	429a      	cmp	r2, r3
 8025e80:	dbb3      	blt.n	8025dea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1ae>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 8025e82:	68bb      	ldr	r3, [r7, #8]
 8025e84:	781b      	ldrb	r3, [r3, #0]
 8025e86:	2b03      	cmp	r3, #3
 8025e88:	d144      	bne.n	8025f14 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2d8>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 8025e8a:	f04f 0200 	mov.w	r2, #0
 8025e8e:	f04f 0300 	mov.w	r3, #0
 8025e92:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8025e96:	f107 0318 	add.w	r3, r7, #24
 8025e9a:	9301      	str	r3, [sp, #4]
 8025e9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8025e9e:	9300      	str	r3, [sp, #0]
 8025ea0:	683b      	ldr	r3, [r7, #0]
 8025ea2:	687a      	ldr	r2, [r7, #4]
 8025ea4:	68b9      	ldr	r1, [r7, #8]
 8025ea6:	68f8      	ldr	r0, [r7, #12]
 8025ea8:	f000 f85a 	bl	8025f60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8025eac:	4603      	mov	r3, r0
 8025eae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8025eb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8025eb6:	2b00      	cmp	r3, #0
 8025eb8:	d01c      	beq.n	8025ef4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b8>
 8025eba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8025ebe:	e049      	b.n	8025f54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x318>
 8025ec0:	08031658 	.word	0x08031658
 8025ec4:	08031674 	.word	0x08031674
 8025ec8:	080315a0 	.word	0x080315a0
 8025ecc:	0803163c 	.word	0x0803163c
 8025ed0:	08031690 	.word	0x08031690
 8025ed4:	080316c4 	.word	0x080316c4
 8025ed8:	080316ac 	.word	0x080316ac
 8025edc:	080316d8 	.word	0x080316d8
 8025ee0:	080316f4 	.word	0x080316f4
 8025ee4:	08031730 	.word	0x08031730
 8025ee8:	0803176c 	.word	0x0803176c
 8025eec:	0803177c 	.word	0x0803177c
 8025ef0:	080317a0 	.word	0x080317a0
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 8025ef4:	ed97 7b06 	vldr	d7, [r7, #24]
 8025ef8:	f107 0314 	add.w	r3, r7, #20
 8025efc:	4619      	mov	r1, r3
 8025efe:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8025f00:	eeb0 0a47 	vmov.f32	s0, s14
 8025f04:	eef0 0a67 	vmov.f32	s1, s15
 8025f08:	f7ff fca8 	bl	802585c <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 8025f0c:	697b      	ldr	r3, [r7, #20]
 8025f0e:	425a      	negs	r2, r3
 8025f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025f12:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8025f14:	68bb      	ldr	r3, [r7, #8]
 8025f16:	781b      	ldrb	r3, [r3, #0]
 8025f18:	2b09      	cmp	r3, #9
 8025f1a:	d007      	beq.n	8025f2c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f0>
 8025f1c:	68bb      	ldr	r3, [r7, #8]
 8025f1e:	781b      	ldrb	r3, [r3, #0]
 8025f20:	2b03      	cmp	r3, #3
 8025f22:	d003      	beq.n	8025f2c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f0>
      input->type == kTfLiteInt16) {
 8025f24:	68bb      	ldr	r3, [r7, #8]
 8025f26:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8025f28:	2b07      	cmp	r3, #7
 8025f2a:	d112      	bne.n	8025f52 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x316>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8025f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025f2e:	7819      	ldrb	r1, [r3, #0]
 8025f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025f32:	9300      	str	r3, [sp, #0]
 8025f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8025f36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8025f38:	68f8      	ldr	r0, [r7, #12]
 8025f3a:	f000 fa03 	bl	8026344 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8025f3e:	4603      	mov	r3, r0
 8025f40:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8025f44:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8025f48:	2b00      	cmp	r3, #0
 8025f4a:	d002      	beq.n	8025f52 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x316>
 8025f4c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8025f50:	e000      	b.n	8025f54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x318>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 8025f52:	2300      	movs	r3, #0
}
 8025f54:	4618      	mov	r0, r3
 8025f56:	3758      	adds	r7, #88	; 0x58
 8025f58:	46bd      	mov	sp, r7
 8025f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8025f5c:	0000      	movs	r0, r0
	...

08025f60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8025f60:	b5b0      	push	{r4, r5, r7, lr}
 8025f62:	b08e      	sub	sp, #56	; 0x38
 8025f64:	af02      	add	r7, sp, #8
 8025f66:	60f8      	str	r0, [r7, #12]
 8025f68:	60b9      	str	r1, [r7, #8]
 8025f6a:	607a      	str	r2, [r7, #4]
 8025f6c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8025f6e:	68bb      	ldr	r3, [r7, #8]
 8025f70:	68db      	ldr	r3, [r3, #12]
 8025f72:	4618      	mov	r0, r3
 8025f74:	f7da fae8 	bl	8000548 <__aeabi_f2d>
 8025f78:	4604      	mov	r4, r0
 8025f7a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8025f7c:	687b      	ldr	r3, [r7, #4]
 8025f7e:	68db      	ldr	r3, [r3, #12]
 8025f80:	4618      	mov	r0, r3
 8025f82:	f7da fae1 	bl	8000548 <__aeabi_f2d>
 8025f86:	4602      	mov	r2, r0
 8025f88:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8025f8a:	4620      	mov	r0, r4
 8025f8c:	4629      	mov	r1, r5
 8025f8e:	f7da fb33 	bl	80005f8 <__aeabi_dmul>
 8025f92:	4602      	mov	r2, r0
 8025f94:	460b      	mov	r3, r1
 8025f96:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8025f9a:	683b      	ldr	r3, [r7, #0]
 8025f9c:	2b00      	cmp	r3, #0
 8025f9e:	d04b      	beq.n	8026038 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8025fa0:	683b      	ldr	r3, [r7, #0]
 8025fa2:	68db      	ldr	r3, [r3, #12]
 8025fa4:	4618      	mov	r0, r3
 8025fa6:	f7da facf 	bl	8000548 <__aeabi_f2d>
 8025faa:	4602      	mov	r2, r0
 8025fac:	460b      	mov	r3, r1
 8025fae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8025fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8025fb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8025fba:	f7da f965 	bl	8000288 <__aeabi_dsub>
 8025fbe:	4602      	mov	r2, r0
 8025fc0:	460b      	mov	r3, r1
 8025fc2:	ec43 2b17 	vmov	d7, r2, r3
 8025fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8025fca:	eef0 0a67 	vmov.f32	s1, s15
 8025fce:	f7ff fde2 	bl	8025b96 <_ZSt3absd>
 8025fd2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8025fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025fd8:	68db      	ldr	r3, [r3, #12]
 8025fda:	4618      	mov	r0, r3
 8025fdc:	f7da fab4 	bl	8000548 <__aeabi_f2d>
 8025fe0:	4602      	mov	r2, r0
 8025fe2:	460b      	mov	r3, r1
 8025fe4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8025fe8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8025fec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8025ff0:	f7da fc2c 	bl	800084c <__aeabi_ddiv>
 8025ff4:	4602      	mov	r2, r0
 8025ff6:	460b      	mov	r3, r1
 8025ff8:	4610      	mov	r0, r2
 8025ffa:	4619      	mov	r1, r3
 8025ffc:	2301      	movs	r3, #1
 8025ffe:	461c      	mov	r4, r3
 8026000:	a318      	add	r3, pc, #96	; (adr r3, 8026064 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8026002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026006:	f7da fd73 	bl	8000af0 <__aeabi_dcmple>
 802600a:	4603      	mov	r3, r0
 802600c:	2b00      	cmp	r3, #0
 802600e:	d101      	bne.n	8026014 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8026010:	2300      	movs	r3, #0
 8026012:	461c      	mov	r4, r3
 8026014:	b2e3      	uxtb	r3, r4
 8026016:	f083 0301 	eor.w	r3, r3, #1
 802601a:	b2db      	uxtb	r3, r3
 802601c:	2b00      	cmp	r3, #0
 802601e:	d00b      	beq.n	8026038 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8026020:	68fb      	ldr	r3, [r7, #12]
 8026022:	691c      	ldr	r4, [r3, #16]
 8026024:	4b0c      	ldr	r3, [pc, #48]	; (8026058 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8026026:	9300      	str	r3, [sp, #0]
 8026028:	f44f 739e 	mov.w	r3, #316	; 0x13c
 802602c:	4a0b      	ldr	r2, [pc, #44]	; (802605c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 802602e:	490c      	ldr	r1, [pc, #48]	; (8026060 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8026030:	68f8      	ldr	r0, [r7, #12]
 8026032:	47a0      	blx	r4
 8026034:	2301      	movs	r3, #1
 8026036:	e009      	b.n	802604c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8026038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802603a:	9300      	str	r3, [sp, #0]
 802603c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802603e:	687a      	ldr	r2, [r7, #4]
 8026040:	68b9      	ldr	r1, [r7, #8]
 8026042:	68f8      	ldr	r0, [r7, #12]
 8026044:	f000 f812 	bl	802606c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8026048:	4603      	mov	r3, r0
                                          multiplier);
 802604a:	bf00      	nop
}
 802604c:	4618      	mov	r0, r3
 802604e:	3730      	adds	r7, #48	; 0x30
 8026050:	46bd      	mov	sp, r7
 8026052:	bdb0      	pop	{r4, r5, r7, pc}
 8026054:	f3af 8000 	nop.w
 8026058:	080317e0 	.word	0x080317e0
 802605c:	080315a0 	.word	0x080315a0
 8026060:	080316ac 	.word	0x080316ac
 8026064:	47ae147b 	.word	0x47ae147b
 8026068:	3f947ae1 	.word	0x3f947ae1

0802606c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 802606c:	b590      	push	{r4, r7, lr}
 802606e:	b089      	sub	sp, #36	; 0x24
 8026070:	af02      	add	r7, sp, #8
 8026072:	60f8      	str	r0, [r7, #12]
 8026074:	60b9      	str	r1, [r7, #8]
 8026076:	607a      	str	r2, [r7, #4]
 8026078:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 802607a:	68bb      	ldr	r3, [r7, #8]
 802607c:	ed93 7a03 	vldr	s14, [r3, #12]
 8026080:	687b      	ldr	r3, [r7, #4]
 8026082:	edd3 7a03 	vldr	s15, [r3, #12]
 8026086:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 802608a:	ee17 0a90 	vmov	r0, s15
 802608e:	f7da fa5b 	bl	8000548 <__aeabi_f2d>
 8026092:	4602      	mov	r2, r0
 8026094:	460b      	mov	r3, r1
 8026096:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 802609a:	2301      	movs	r3, #1
 802609c:	461c      	mov	r4, r3
 802609e:	f04f 0200 	mov.w	r2, #0
 80260a2:	f04f 0300 	mov.w	r3, #0
 80260a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80260aa:	f7da fd2b 	bl	8000b04 <__aeabi_dcmpge>
 80260ae:	4603      	mov	r3, r0
 80260b0:	2b00      	cmp	r3, #0
 80260b2:	d101      	bne.n	80260b8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 80260b4:	2300      	movs	r3, #0
 80260b6:	461c      	mov	r4, r3
 80260b8:	b2e3      	uxtb	r3, r4
 80260ba:	f083 0301 	eor.w	r3, r3, #1
 80260be:	b2db      	uxtb	r3, r3
 80260c0:	2b00      	cmp	r3, #0
 80260c2:	d00b      	beq.n	80260dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 80260c4:	68fb      	ldr	r3, [r7, #12]
 80260c6:	691c      	ldr	r4, [r3, #16]
 80260c8:	4b0f      	ldr	r3, [pc, #60]	; (8026108 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 80260ca:	9300      	str	r3, [sp, #0]
 80260cc:	f240 1349 	movw	r3, #329	; 0x149
 80260d0:	4a0e      	ldr	r2, [pc, #56]	; (802610c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 80260d2:	490f      	ldr	r1, [pc, #60]	; (8026110 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 80260d4:	68f8      	ldr	r0, [r7, #12]
 80260d6:	47a0      	blx	r4
 80260d8:	2301      	movs	r3, #1
 80260da:	e010      	b.n	80260fe <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80260dc:	683b      	ldr	r3, [r7, #0]
 80260de:	68db      	ldr	r3, [r3, #12]
 80260e0:	4618      	mov	r0, r3
 80260e2:	f7da fa31 	bl	8000548 <__aeabi_f2d>
 80260e6:	4602      	mov	r2, r0
 80260e8:	460b      	mov	r3, r1
 80260ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80260ee:	f7da fbad 	bl	800084c <__aeabi_ddiv>
 80260f2:	4602      	mov	r2, r0
 80260f4:	460b      	mov	r3, r1
 80260f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80260f8:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 80260fc:	2300      	movs	r3, #0
}
 80260fe:	4618      	mov	r0, r3
 8026100:	371c      	adds	r7, #28
 8026102:	46bd      	mov	sp, r7
 8026104:	bd90      	pop	{r4, r7, pc}
 8026106:	bf00      	nop
 8026108:	08031804 	.word	0x08031804
 802610c:	080315a0 	.word	0x080315a0
 8026110:	080316ac 	.word	0x080316ac

08026114 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 8026114:	b590      	push	{r4, r7, lr}
 8026116:	b08b      	sub	sp, #44	; 0x2c
 8026118:	af02      	add	r7, sp, #8
 802611a:	6178      	str	r0, [r7, #20]
 802611c:	ed87 0a04 	vstr	s0, [r7, #16]
 8026120:	60f9      	str	r1, [r7, #12]
 8026122:	edc7 0a02 	vstr	s1, [r7, #8]
 8026126:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8026128:	ed97 7a02 	vldr	s14, [r7, #8]
 802612c:	edd7 7a04 	vldr	s15, [r7, #16]
 8026130:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8026134:	eeb0 0a66 	vmov.f32	s0, s13
 8026138:	f7ff fd1d 	bl	8025b76 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802613c:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8026140:	f7ff fd51 	bl	8025be6 <_ZNSt14numeric_limitsIlE3minEv>
 8026144:	ee07 0a90 	vmov	s15, r0
 8026148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802614c:	ed97 7a07 	vldr	s14, [r7, #28]
 8026150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8026154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026158:	db0e      	blt.n	8026178 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 802615a:	f7ff fb76 	bl	802584a <_ZNSt14numeric_limitsIlE3maxEv>
 802615e:	ee07 0a90 	vmov	s15, r0
 8026162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8026166:	ed97 7a07 	vldr	s14, [r7, #28]
 802616a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802616e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026172:	d801      	bhi.n	8026178 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 8026174:	2301      	movs	r3, #1
 8026176:	e000      	b.n	802617a <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 8026178:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 802617a:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 802617c:	7efb      	ldrb	r3, [r7, #27]
 802617e:	f083 0301 	eor.w	r3, r3, #1
 8026182:	b2db      	uxtb	r3, r3
 8026184:	2b00      	cmp	r3, #0
 8026186:	d00b      	beq.n	80261a0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 8026188:	697b      	ldr	r3, [r7, #20]
 802618a:	691c      	ldr	r4, [r3, #16]
 802618c:	4b0c      	ldr	r3, [pc, #48]	; (80261c0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 802618e:	9300      	str	r3, [sp, #0]
 8026190:	f240 1357 	movw	r3, #343	; 0x157
 8026194:	4a0b      	ldr	r2, [pc, #44]	; (80261c4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 8026196:	490c      	ldr	r1, [pc, #48]	; (80261c8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 8026198:	6978      	ldr	r0, [r7, #20]
 802619a:	47a0      	blx	r4
 802619c:	2301      	movs	r3, #1
 802619e:	e00a      	b.n	80261b6 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 80261a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80261a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80261a8:	ee17 2a90 	vmov	r2, s15
 80261ac:	68fb      	ldr	r3, [r7, #12]
 80261ae:	441a      	add	r2, r3
 80261b0:	687b      	ldr	r3, [r7, #4]
 80261b2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80261b4:	2300      	movs	r3, #0
}
 80261b6:	4618      	mov	r0, r3
 80261b8:	3724      	adds	r7, #36	; 0x24
 80261ba:	46bd      	mov	sp, r7
 80261bc:	bd90      	pop	{r4, r7, pc}
 80261be:	bf00      	nop
 80261c0:	08031820 	.word	0x08031820
 80261c4:	080315a0 	.word	0x080315a0
 80261c8:	080316ac 	.word	0x080316ac

080261cc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 80261cc:	b580      	push	{r7, lr}
 80261ce:	b08a      	sub	sp, #40	; 0x28
 80261d0:	af00      	add	r7, sp, #0
 80261d2:	60f8      	str	r0, [r7, #12]
 80261d4:	607a      	str	r2, [r7, #4]
 80261d6:	603b      	str	r3, [r7, #0]
 80261d8:	460b      	mov	r3, r1
 80261da:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 80261dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261de:	68db      	ldr	r3, [r3, #12]
 80261e0:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 80261e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261e4:	691b      	ldr	r3, [r3, #16]
 80261e6:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 80261e8:	7afb      	ldrb	r3, [r7, #11]
 80261ea:	2b01      	cmp	r3, #1
 80261ec:	d120      	bne.n	8026230 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 80261ee:	f107 0314 	add.w	r3, r7, #20
 80261f2:	461a      	mov	r2, r3
 80261f4:	eddf 0a52 	vldr	s1, [pc, #328]	; 8026340 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 80261f8:	6a39      	ldr	r1, [r7, #32]
 80261fa:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80261fe:	68f8      	ldr	r0, [r7, #12]
 8026200:	f7ff ff88 	bl	8026114 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8026204:	4603      	mov	r3, r0
 8026206:	76fb      	strb	r3, [r7, #27]
 8026208:	7efb      	ldrb	r3, [r7, #27]
 802620a:	2b00      	cmp	r3, #0
 802620c:	d001      	beq.n	8026212 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 802620e:	7efb      	ldrb	r3, [r7, #27]
 8026210:	e091      	b.n	8026336 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8026212:	f107 0214 	add.w	r2, r7, #20
 8026216:	1d3b      	adds	r3, r7, #4
 8026218:	4611      	mov	r1, r2
 802621a:	4618      	mov	r0, r3
 802621c:	f7e2 fefe 	bl	800901c <_ZSt3maxIlERKT_S2_S2_>
 8026220:	4603      	mov	r3, r0
 8026222:	681a      	ldr	r2, [r3, #0]
 8026224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026226:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8026228:	683a      	ldr	r2, [r7, #0]
 802622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802622c:	601a      	str	r2, [r3, #0]
 802622e:	e081      	b.n	8026334 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8026230:	7afb      	ldrb	r3, [r7, #11]
 8026232:	2b03      	cmp	r3, #3
 8026234:	d13a      	bne.n	80262ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 8026236:	f107 0314 	add.w	r3, r7, #20
 802623a:	461a      	mov	r2, r3
 802623c:	eddf 0a40 	vldr	s1, [pc, #256]	; 8026340 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8026240:	6a39      	ldr	r1, [r7, #32]
 8026242:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8026246:	68f8      	ldr	r0, [r7, #12]
 8026248:	f7ff ff64 	bl	8026114 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 802624c:	4603      	mov	r3, r0
 802624e:	777b      	strb	r3, [r7, #29]
 8026250:	7f7b      	ldrb	r3, [r7, #29]
 8026252:	2b00      	cmp	r3, #0
 8026254:	d001      	beq.n	802625a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 8026256:	7f7b      	ldrb	r3, [r7, #29]
 8026258:	e06d      	b.n	8026336 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 802625a:	f107 0214 	add.w	r2, r7, #20
 802625e:	1d3b      	adds	r3, r7, #4
 8026260:	4611      	mov	r1, r2
 8026262:	4618      	mov	r0, r3
 8026264:	f7e2 feda 	bl	800901c <_ZSt3maxIlERKT_S2_S2_>
 8026268:	4603      	mov	r3, r0
 802626a:	681a      	ldr	r2, [r3, #0]
 802626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802626e:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8026270:	f107 0314 	add.w	r3, r7, #20
 8026274:	461a      	mov	r2, r3
 8026276:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 802627a:	6a39      	ldr	r1, [r7, #32]
 802627c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8026280:	68f8      	ldr	r0, [r7, #12]
 8026282:	f7ff ff47 	bl	8026114 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8026286:	4603      	mov	r3, r0
 8026288:	773b      	strb	r3, [r7, #28]
 802628a:	7f3b      	ldrb	r3, [r7, #28]
 802628c:	2b00      	cmp	r3, #0
 802628e:	d001      	beq.n	8026294 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 8026290:	7f3b      	ldrb	r3, [r7, #28]
 8026292:	e050      	b.n	8026336 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8026294:	f107 0214 	add.w	r2, r7, #20
 8026298:	463b      	mov	r3, r7
 802629a:	4611      	mov	r1, r2
 802629c:	4618      	mov	r0, r3
 802629e:	f7e2 fea9 	bl	8008ff4 <_ZSt3minIlERKT_S2_S2_>
 80262a2:	4603      	mov	r3, r0
 80262a4:	681a      	ldr	r2, [r3, #0]
 80262a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80262a8:	601a      	str	r2, [r3, #0]
 80262aa:	e043      	b.n	8026334 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 80262ac:	7afb      	ldrb	r3, [r7, #11]
 80262ae:	2b02      	cmp	r3, #2
 80262b0:	d13a      	bne.n	8026328 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 80262b2:	f107 0314 	add.w	r3, r7, #20
 80262b6:	461a      	mov	r2, r3
 80262b8:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80262bc:	6a39      	ldr	r1, [r7, #32]
 80262be:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80262c2:	68f8      	ldr	r0, [r7, #12]
 80262c4:	f7ff ff26 	bl	8026114 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80262c8:	4603      	mov	r3, r0
 80262ca:	77fb      	strb	r3, [r7, #31]
 80262cc:	7ffb      	ldrb	r3, [r7, #31]
 80262ce:	2b00      	cmp	r3, #0
 80262d0:	d001      	beq.n	80262d6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 80262d2:	7ffb      	ldrb	r3, [r7, #31]
 80262d4:	e02f      	b.n	8026336 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 80262d6:	f107 0214 	add.w	r2, r7, #20
 80262da:	1d3b      	adds	r3, r7, #4
 80262dc:	4611      	mov	r1, r2
 80262de:	4618      	mov	r0, r3
 80262e0:	f7e2 fe9c 	bl	800901c <_ZSt3maxIlERKT_S2_S2_>
 80262e4:	4603      	mov	r3, r0
 80262e6:	681a      	ldr	r2, [r3, #0]
 80262e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80262ea:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 80262ec:	f107 0314 	add.w	r3, r7, #20
 80262f0:	461a      	mov	r2, r3
 80262f2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80262f6:	6a39      	ldr	r1, [r7, #32]
 80262f8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80262fc:	68f8      	ldr	r0, [r7, #12]
 80262fe:	f7ff ff09 	bl	8026114 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8026302:	4603      	mov	r3, r0
 8026304:	77bb      	strb	r3, [r7, #30]
 8026306:	7fbb      	ldrb	r3, [r7, #30]
 8026308:	2b00      	cmp	r3, #0
 802630a:	d001      	beq.n	8026310 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 802630c:	7fbb      	ldrb	r3, [r7, #30]
 802630e:	e012      	b.n	8026336 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8026310:	f107 0214 	add.w	r2, r7, #20
 8026314:	463b      	mov	r3, r7
 8026316:	4611      	mov	r1, r2
 8026318:	4618      	mov	r0, r3
 802631a:	f7e2 fe6b 	bl	8008ff4 <_ZSt3minIlERKT_S2_S2_>
 802631e:	4603      	mov	r3, r0
 8026320:	681a      	ldr	r2, [r3, #0]
 8026322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026324:	601a      	str	r2, [r3, #0]
 8026326:	e005      	b.n	8026334 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8026328:	687a      	ldr	r2, [r7, #4]
 802632a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802632c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 802632e:	683a      	ldr	r2, [r7, #0]
 8026330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026332:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 8026334:	2300      	movs	r3, #0
}
 8026336:	4618      	mov	r0, r3
 8026338:	3728      	adds	r7, #40	; 0x28
 802633a:	46bd      	mov	sp, r7
 802633c:	bd80      	pop	{r7, pc}
 802633e:	bf00      	nop
 8026340:	00000000 	.word	0x00000000

08026344 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8026344:	b590      	push	{r4, r7, lr}
 8026346:	b08b      	sub	sp, #44	; 0x2c
 8026348:	af04      	add	r7, sp, #16
 802634a:	60f8      	str	r0, [r7, #12]
 802634c:	607a      	str	r2, [r7, #4]
 802634e:	603b      	str	r3, [r7, #0]
 8026350:	460b      	mov	r3, r1
 8026352:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8026354:	2300      	movs	r3, #0
 8026356:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8026358:	2300      	movs	r3, #0
 802635a:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 802635c:	687b      	ldr	r3, [r7, #4]
 802635e:	781b      	ldrb	r3, [r3, #0]
 8026360:	2b03      	cmp	r3, #3
 8026362:	d108      	bne.n	8026376 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8026364:	f7ff fc59 	bl	8025c1a <_ZNSt14numeric_limitsIhE3minEv>
 8026368:	4603      	mov	r3, r0
 802636a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 802636c:	f7ff fc5d 	bl	8025c2a <_ZNSt14numeric_limitsIhE3maxEv>
 8026370:	4603      	mov	r3, r0
 8026372:	613b      	str	r3, [r7, #16]
 8026374:	e025      	b.n	80263c2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8026376:	687b      	ldr	r3, [r7, #4]
 8026378:	781b      	ldrb	r3, [r3, #0]
 802637a:	2b09      	cmp	r3, #9
 802637c:	d108      	bne.n	8026390 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 802637e:	f7ff fc3b 	bl	8025bf8 <_ZNSt14numeric_limitsIaE3minEv>
 8026382:	4603      	mov	r3, r0
 8026384:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8026386:	f7ff fc40 	bl	8025c0a <_ZNSt14numeric_limitsIaE3maxEv>
 802638a:	4603      	mov	r3, r0
 802638c:	613b      	str	r3, [r7, #16]
 802638e:	e018      	b.n	80263c2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8026390:	687b      	ldr	r3, [r7, #4]
 8026392:	781b      	ldrb	r3, [r3, #0]
 8026394:	2b07      	cmp	r3, #7
 8026396:	d108      	bne.n	80263aa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8026398:	f7ff fc12 	bl	8025bc0 <_ZNSt14numeric_limitsIsE3minEv>
 802639c:	4603      	mov	r3, r0
 802639e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80263a0:	f7ff fc18 	bl	8025bd4 <_ZNSt14numeric_limitsIsE3maxEv>
 80263a4:	4603      	mov	r3, r0
 80263a6:	613b      	str	r3, [r7, #16]
 80263a8:	e00b      	b.n	80263c2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80263aa:	68fb      	ldr	r3, [r7, #12]
 80263ac:	691c      	ldr	r4, [r3, #16]
 80263ae:	4b0e      	ldr	r3, [pc, #56]	; (80263e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80263b0:	9300      	str	r3, [sp, #0]
 80263b2:	f240 138f 	movw	r3, #399	; 0x18f
 80263b6:	4a0d      	ldr	r2, [pc, #52]	; (80263ec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 80263b8:	490d      	ldr	r1, [pc, #52]	; (80263f0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 80263ba:	68f8      	ldr	r0, [r7, #12]
 80263bc:	47a0      	blx	r4
 80263be:	2301      	movs	r3, #1
 80263c0:	e00d      	b.n	80263de <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 80263c2:	7af9      	ldrb	r1, [r7, #11]
 80263c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80263c6:	9302      	str	r3, [sp, #8]
 80263c8:	683b      	ldr	r3, [r7, #0]
 80263ca:	9301      	str	r3, [sp, #4]
 80263cc:	687b      	ldr	r3, [r7, #4]
 80263ce:	9300      	str	r3, [sp, #0]
 80263d0:	693b      	ldr	r3, [r7, #16]
 80263d2:	697a      	ldr	r2, [r7, #20]
 80263d4:	68f8      	ldr	r0, [r7, #12]
 80263d6:	f7ff fef9 	bl	80261cc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 80263da:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 80263dc:	bf00      	nop
}
 80263de:	4618      	mov	r0, r3
 80263e0:	371c      	adds	r7, #28
 80263e2:	46bd      	mov	sp, r7
 80263e4:	bd90      	pop	{r4, r7, pc}
 80263e6:	bf00      	nop
 80263e8:	08031848 	.word	0x08031848
 80263ec:	080315a0 	.word	0x080315a0
 80263f0:	080316ac 	.word	0x080316ac

080263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:
  int32_t DimensionsCount() const { return size_; }
 80263f4:	b480      	push	{r7}
 80263f6:	b083      	sub	sp, #12
 80263f8:	af00      	add	r7, sp, #0
 80263fa:	6078      	str	r0, [r7, #4]
 80263fc:	687b      	ldr	r3, [r7, #4]
 80263fe:	681b      	ldr	r3, [r3, #0]
 8026400:	4618      	mov	r0, r3
 8026402:	370c      	adds	r7, #12
 8026404:	46bd      	mov	sp, r7
 8026406:	f85d 7b04 	ldr.w	r7, [sp], #4
 802640a:	4770      	bx	lr

0802640c <_ZN6tflite14AlignPointerUpEPhj>:
#include "edge-impulse-sdk/tensorflow/lite/micro/flatbuffer_conversions_bridge.h"
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 802640c:	b480      	push	{r7}
 802640e:	b085      	sub	sp, #20
 8026410:	af00      	add	r7, sp, #0
 8026412:	6078      	str	r0, [r7, #4]
 8026414:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8026416:	687b      	ldr	r3, [r7, #4]
 8026418:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 802641a:	683a      	ldr	r2, [r7, #0]
 802641c:	68fb      	ldr	r3, [r7, #12]
 802641e:	4413      	add	r3, r2
 8026420:	1e5a      	subs	r2, r3, #1
 8026422:	683b      	ldr	r3, [r7, #0]
 8026424:	fbb2 f3f3 	udiv	r3, r2, r3
 8026428:	683a      	ldr	r2, [r7, #0]
 802642a:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 802642e:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8026430:	68bb      	ldr	r3, [r7, #8]
}
 8026432:	4618      	mov	r0, r3
 8026434:	3714      	adds	r7, #20
 8026436:	46bd      	mov	sp, r7
 8026438:	f85d 7b04 	ldr.w	r7, [sp], #4
 802643c:	4770      	bx	lr
	...

08026440 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8026440:	b480      	push	{r7}
 8026442:	b083      	sub	sp, #12
 8026444:	af00      	add	r7, sp, #0
 8026446:	4603      	mov	r3, r0
 8026448:	6039      	str	r1, [r7, #0]
 802644a:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 802644c:	79fb      	ldrb	r3, [r7, #7]
 802644e:	3b01      	subs	r3, #1
 8026450:	2b11      	cmp	r3, #17
 8026452:	d863      	bhi.n	802651c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xdc>
 8026454:	a201      	add	r2, pc, #4	; (adr r2, 802645c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8026456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802645a:	bf00      	nop
 802645c:	080264ad 	.word	0x080264ad
 8026460:	080264c5 	.word	0x080264c5
 8026464:	080264d5 	.word	0x080264d5
 8026468:	080264e5 	.word	0x080264e5
 802646c:	0802651d 	.word	0x0802651d
 8026470:	080264f5 	.word	0x080264f5
 8026474:	080264bd 	.word	0x080264bd
 8026478:	08026505 	.word	0x08026505
 802647c:	080264dd 	.word	0x080264dd
 8026480:	080264a5 	.word	0x080264a5
 8026484:	080264b5 	.word	0x080264b5
 8026488:	0802650d 	.word	0x0802650d
 802648c:	080264ed 	.word	0x080264ed
 8026490:	080264fd 	.word	0x080264fd
 8026494:	0802651d 	.word	0x0802651d
 8026498:	080264cd 	.word	0x080264cd
 802649c:	0802651d 	.word	0x0802651d
 80264a0:	08026515 	.word	0x08026515
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 80264a4:	683b      	ldr	r3, [r7, #0]
 80264a6:	2202      	movs	r2, #2
 80264a8:	601a      	str	r2, [r3, #0]
      break;
 80264aa:	e039      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteFloat32:
      *size = sizeof(float);
 80264ac:	683b      	ldr	r3, [r7, #0]
 80264ae:	2204      	movs	r2, #4
 80264b0:	601a      	str	r2, [r3, #0]
      break;
 80264b2:	e035      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteFloat64:
      *size = sizeof(double);
 80264b4:	683b      	ldr	r3, [r7, #0]
 80264b6:	2208      	movs	r2, #8
 80264b8:	601a      	str	r2, [r3, #0]
      break;
 80264ba:	e031      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 80264bc:	683b      	ldr	r3, [r7, #0]
 80264be:	2202      	movs	r2, #2
 80264c0:	601a      	str	r2, [r3, #0]
      break;
 80264c2:	e02d      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 80264c4:	683b      	ldr	r3, [r7, #0]
 80264c6:	2204      	movs	r2, #4
 80264c8:	601a      	str	r2, [r3, #0]
      break;
 80264ca:	e029      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 80264cc:	683b      	ldr	r3, [r7, #0]
 80264ce:	2204      	movs	r2, #4
 80264d0:	601a      	str	r2, [r3, #0]
      break;
 80264d2:	e025      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 80264d4:	683b      	ldr	r3, [r7, #0]
 80264d6:	2201      	movs	r2, #1
 80264d8:	601a      	str	r2, [r3, #0]
      break;
 80264da:	e021      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 80264dc:	683b      	ldr	r3, [r7, #0]
 80264de:	2201      	movs	r2, #1
 80264e0:	601a      	str	r2, [r3, #0]
      break;
 80264e2:	e01d      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 80264e4:	683b      	ldr	r3, [r7, #0]
 80264e6:	2208      	movs	r2, #8
 80264e8:	601a      	str	r2, [r3, #0]
      break;
 80264ea:	e019      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 80264ec:	683b      	ldr	r3, [r7, #0]
 80264ee:	2208      	movs	r2, #8
 80264f0:	601a      	str	r2, [r3, #0]
      break;
 80264f2:	e015      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteBool:
      *size = sizeof(bool);
 80264f4:	683b      	ldr	r3, [r7, #0]
 80264f6:	2201      	movs	r2, #1
 80264f8:	601a      	str	r2, [r3, #0]
      break;
 80264fa:	e011      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteResource:
      *size = sizeof(int32_t);
 80264fc:	683b      	ldr	r3, [r7, #0]
 80264fe:	2204      	movs	r2, #4
 8026500:	601a      	str	r2, [r3, #0]
      break;
 8026502:	e00d      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8026504:	683b      	ldr	r3, [r7, #0]
 8026506:	2208      	movs	r2, #8
 8026508:	601a      	str	r2, [r3, #0]
      break;
 802650a:	e009      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 802650c:	683b      	ldr	r3, [r7, #0]
 802650e:	2210      	movs	r2, #16
 8026510:	601a      	str	r2, [r3, #0]
      break;
 8026512:	e005      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    case kTfLiteInt4:
      *size = sizeof(int8_t);
 8026514:	683b      	ldr	r3, [r7, #0]
 8026516:	2201      	movs	r2, #1
 8026518:	601a      	str	r2, [r3, #0]
      break;
 802651a:	e001      	b.n	8026520 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe0>
    default:
      return kTfLiteError;
 802651c:	2301      	movs	r3, #1
 802651e:	e000      	b.n	8026522 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe2>
  }
  return kTfLiteOk;
 8026520:	2300      	movs	r3, #0
}
 8026522:	4618      	mov	r0, r3
 8026524:	370c      	adds	r7, #12
 8026526:	46bd      	mov	sp, r7
 8026528:	f85d 7b04 	ldr.w	r7, [sp], #4
 802652c:	4770      	bx	lr
 802652e:	bf00      	nop

08026530 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
      bytes, MicroArenaBufferAlignment());
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8026530:	b580      	push	{r7, lr}
 8026532:	b088      	sub	sp, #32
 8026534:	af00      	add	r7, sp, #0
 8026536:	60f8      	str	r0, [r7, #12]
 8026538:	60b9      	str	r1, [r7, #8]
 802653a:	607a      	str	r2, [r7, #4]
 802653c:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 802653e:	68f8      	ldr	r0, [r7, #12]
 8026540:	f000 f854 	bl	80265ec <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8026544:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8026546:	2300      	movs	r3, #0
 8026548:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 802654a:	2300      	movs	r3, #0
 802654c:	61bb      	str	r3, [r7, #24]
 802654e:	e011      	b.n	8026574 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8026550:	69ba      	ldr	r2, [r7, #24]
 8026552:	4613      	mov	r3, r2
 8026554:	005b      	lsls	r3, r3, #1
 8026556:	4413      	add	r3, r2
 8026558:	009b      	lsls	r3, r3, #2
 802655a:	461a      	mov	r2, r3
 802655c:	697b      	ldr	r3, [r7, #20]
 802655e:	4413      	add	r3, r2
 8026560:	685b      	ldr	r3, [r3, #4]
 8026562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026566:	d102      	bne.n	802656e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 8026568:	69fb      	ldr	r3, [r7, #28]
 802656a:	3301      	adds	r3, #1
 802656c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 802656e:	69bb      	ldr	r3, [r7, #24]
 8026570:	3301      	adds	r3, #1
 8026572:	61bb      	str	r3, [r7, #24]
 8026574:	68fb      	ldr	r3, [r7, #12]
 8026576:	699b      	ldr	r3, [r3, #24]
 8026578:	69ba      	ldr	r2, [r7, #24]
 802657a:	429a      	cmp	r2, r3
 802657c:	d3e8      	bcc.n	8026550 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x20>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 802657e:	69fb      	ldr	r3, [r7, #28]
 8026580:	2b0b      	cmp	r3, #11
 8026582:	d905      	bls.n	8026590 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x60>
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 8026584:	4917      	ldr	r1, [pc, #92]	; (80265e4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb4>)
 8026586:	4818      	ldr	r0, [pc, #96]	; (80265e8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb8>)
 8026588:	f000 f83f 	bl	802660a <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>
                kMaxScratchBuffersPerOp);
    return kTfLiteError;
 802658c:	2301      	movs	r3, #1
 802658e:	e024      	b.n	80265da <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xaa>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8026590:	68fb      	ldr	r3, [r7, #12]
 8026592:	699a      	ldr	r2, [r3, #24]
 8026594:	4613      	mov	r3, r2
 8026596:	005b      	lsls	r3, r3, #1
 8026598:	4413      	add	r3, r2
 802659a:	009b      	lsls	r3, r3, #2
 802659c:	461a      	mov	r2, r3
  internal::ScratchBufferRequest* current_request =
 802659e:	697b      	ldr	r3, [r7, #20]
 80265a0:	4413      	add	r3, r2
 80265a2:	613b      	str	r3, [r7, #16]
  *current_request = {};
 80265a4:	693b      	ldr	r3, [r7, #16]
 80265a6:	461a      	mov	r2, r3
 80265a8:	2300      	movs	r3, #0
 80265aa:	6013      	str	r3, [r2, #0]
 80265ac:	6053      	str	r3, [r2, #4]
 80265ae:	6093      	str	r3, [r2, #8]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 80265b0:	693b      	ldr	r3, [r7, #16]
 80265b2:	68ba      	ldr	r2, [r7, #8]
 80265b4:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 80265b6:	693b      	ldr	r3, [r7, #16]
 80265b8:	f04f 32ff 	mov.w	r2, #4294967295
 80265bc:	605a      	str	r2, [r3, #4]
  current_request->subgraph_idx = subgraph_idx;
 80265be:	693b      	ldr	r3, [r7, #16]
 80265c0:	687a      	ldr	r2, [r7, #4]
 80265c2:	609a      	str	r2, [r3, #8]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 80265c4:	68fb      	ldr	r3, [r7, #12]
 80265c6:	699b      	ldr	r3, [r3, #24]
 80265c8:	461a      	mov	r2, r3
 80265ca:	683b      	ldr	r3, [r7, #0]
 80265cc:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 80265ce:	68fb      	ldr	r3, [r7, #12]
 80265d0:	699b      	ldr	r3, [r3, #24]
 80265d2:	1c5a      	adds	r2, r3, #1
 80265d4:	68fb      	ldr	r3, [r7, #12]
 80265d6:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 80265d8:	2300      	movs	r3, #0
}
 80265da:	4618      	mov	r0, r3
 80265dc:	3720      	adds	r7, #32
 80265de:	46bd      	mov	sp, r7
 80265e0:	bd80      	pop	{r7, pc}
 80265e2:	bf00      	nop
 80265e4:	08033fe4 	.word	0x08033fe4
 80265e8:	08031a2c 	.word	0x08031a2c

080265ec <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:
  }

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 80265ec:	b580      	push	{r7, lr}
 80265ee:	b082      	sub	sp, #8
 80265f0:	af00      	add	r7, sp, #0
 80265f2:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 80265f4:	687b      	ldr	r3, [r7, #4]
 80265f6:	69db      	ldr	r3, [r3, #28]
 80265f8:	2104      	movs	r1, #4
 80265fa:	4618      	mov	r0, r3
 80265fc:	f7ff ff06 	bl	802640c <_ZN6tflite14AlignPointerUpEPhj>
 8026600:	4603      	mov	r3, r0
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}
 8026602:	4618      	mov	r0, r3
 8026604:	3708      	adds	r7, #8
 8026606:	46bd      	mov	sp, r7
 8026608:	bd80      	pop	{r7, pc}

0802660a <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>:
namespace tflite {

// From
// https://stackoverflow.com/questions/23235910/variadic-unused-function-macro
template <typename... Args>
void Unused(Args&&... args) {
 802660a:	b480      	push	{r7}
 802660c:	b083      	sub	sp, #12
 802660e:	af00      	add	r7, sp, #0
 8026610:	6078      	str	r0, [r7, #4]
 8026612:	6039      	str	r1, [r7, #0]
  (void)(sizeof...(args));
}
 8026614:	bf00      	nop
 8026616:	370c      	adds	r7, #12
 8026618:	46bd      	mov	sp, r7
 802661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802661e:	4770      	bx	lr

08026620 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8026620:	b480      	push	{r7}
 8026622:	b083      	sub	sp, #12
 8026624:	af00      	add	r7, sp, #0
 8026626:	6078      	str	r0, [r7, #4]
 8026628:	687b      	ldr	r3, [r7, #4]
 802662a:	695b      	ldr	r3, [r3, #20]
 802662c:	4618      	mov	r0, r3
 802662e:	370c      	adds	r7, #12
 8026630:	46bd      	mov	sp, r7
 8026632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026636:	4770      	bx	lr

08026638 <_ZN6tflite10MicroGraph14GetAllocationsEv>:
    current_subgraph_index_ = subgraph_idx;
  }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8026638:	b480      	push	{r7}
 802663a:	b083      	sub	sp, #12
 802663c:	af00      	add	r7, sp, #0
 802663e:	6078      	str	r0, [r7, #4]
 8026640:	687b      	ldr	r3, [r7, #4]
 8026642:	691b      	ldr	r3, [r3, #16]
 8026644:	4618      	mov	r0, r3
 8026646:	370c      	adds	r7, #12
 8026648:	46bd      	mov	sp, r7
 802664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802664e:	4770      	bx	lr

08026650 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
#include <cstdint>

#include "edge-impulse-sdk/tensorflow/lite/micro/micro_log.h"

namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
 8026650:	b480      	push	{r7}
 8026652:	b085      	sub	sp, #20
 8026654:	af00      	add	r7, sp, #0
 8026656:	60f8      	str	r0, [r7, #12]
 8026658:	60b9      	str	r1, [r7, #8]
 802665a:	607a      	str	r2, [r7, #4]
 802665c:	603b      	str	r3, [r7, #0]
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 802665e:	4a0c      	ldr	r2, [pc, #48]	; (8026690 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x40>)
 8026660:	68fb      	ldr	r3, [r7, #12]
 8026662:	601a      	str	r2, [r3, #0]
 8026664:	68fb      	ldr	r3, [r7, #12]
 8026666:	68ba      	ldr	r2, [r7, #8]
 8026668:	605a      	str	r2, [r3, #4]
 802666a:	68fb      	ldr	r3, [r7, #12]
 802666c:	683a      	ldr	r2, [r7, #0]
 802666e:	609a      	str	r2, [r3, #8]
 8026670:	68fb      	ldr	r3, [r7, #12]
 8026672:	687a      	ldr	r2, [r7, #4]
 8026674:	60da      	str	r2, [r3, #12]
 8026676:	68fb      	ldr	r3, [r7, #12]
 8026678:	2200      	movs	r2, #0
 802667a:	611a      	str	r2, [r3, #16]
 802667c:	68fb      	ldr	r3, [r7, #12]
 802667e:	2200      	movs	r2, #0
 8026680:	615a      	str	r2, [r3, #20]
 8026682:	68fb      	ldr	r3, [r7, #12]
 8026684:	4618      	mov	r0, r3
 8026686:	3714      	adds	r7, #20
 8026688:	46bd      	mov	sp, r7
 802668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802668e:	4770      	bx	lr
 8026690:	08033ff0 	.word	0x08033ff0

08026694 <_ZN6tflite12MicroContextD1Ev>:

MicroContext::~MicroContext() {}
 8026694:	b480      	push	{r7}
 8026696:	b083      	sub	sp, #12
 8026698:	af00      	add	r7, sp, #0
 802669a:	6078      	str	r0, [r7, #4]
 802669c:	4a04      	ldr	r2, [pc, #16]	; (80266b0 <_ZN6tflite12MicroContextD1Ev+0x1c>)
 802669e:	687b      	ldr	r3, [r7, #4]
 80266a0:	601a      	str	r2, [r3, #0]
 80266a2:	687b      	ldr	r3, [r7, #4]
 80266a4:	4618      	mov	r0, r3
 80266a6:	370c      	adds	r7, #12
 80266a8:	46bd      	mov	sp, r7
 80266aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ae:	4770      	bx	lr
 80266b0:	08033ff0 	.word	0x08033ff0

080266b4 <_ZN6tflite12MicroContextD0Ev>:
 80266b4:	b580      	push	{r7, lr}
 80266b6:	b082      	sub	sp, #8
 80266b8:	af00      	add	r7, sp, #0
 80266ba:	6078      	str	r0, [r7, #4]
 80266bc:	6878      	ldr	r0, [r7, #4]
 80266be:	f7ff ffe9 	bl	8026694 <_ZN6tflite12MicroContextD1Ev>
 80266c2:	2118      	movs	r1, #24
 80266c4:	6878      	ldr	r0, [r7, #4]
 80266c6:	f003 ff93 	bl	802a5f0 <_ZdlPvj>
 80266ca:	687b      	ldr	r3, [r7, #4]
 80266cc:	4618      	mov	r0, r3
 80266ce:	3708      	adds	r7, #8
 80266d0:	46bd      	mov	sp, r7
 80266d2:	bd80      	pop	{r7, pc}

080266d4 <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
 80266d4:	b580      	push	{r7, lr}
 80266d6:	b082      	sub	sp, #8
 80266d8:	af00      	add	r7, sp, #0
 80266da:	6078      	str	r0, [r7, #4]
 80266dc:	6039      	str	r1, [r7, #0]
  return allocator_.AllocatePersistentBuffer(bytes);
 80266de:	687b      	ldr	r3, [r7, #4]
 80266e0:	685a      	ldr	r2, [r3, #4]
 80266e2:	687b      	ldr	r3, [r7, #4]
 80266e4:	685b      	ldr	r3, [r3, #4]
 80266e6:	681b      	ldr	r3, [r3, #0]
 80266e8:	3314      	adds	r3, #20
 80266ea:	681b      	ldr	r3, [r3, #0]
 80266ec:	6839      	ldr	r1, [r7, #0]
 80266ee:	4610      	mov	r0, r2
 80266f0:	4798      	blx	r3
 80266f2:	4603      	mov	r3, r0
}
 80266f4:	4618      	mov	r0, r3
 80266f6:	3708      	adds	r7, #8
 80266f8:	46bd      	mov	sp, r7
 80266fa:	bd80      	pop	{r7, pc}

080266fc <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroContext::RequestScratchBufferInArena(size_t bytes,
                                                       int* buffer_idx) {
 80266fc:	b590      	push	{r4, r7, lr}
 80266fe:	b085      	sub	sp, #20
 8026700:	af00      	add	r7, sp, #0
 8026702:	60f8      	str	r0, [r7, #12]
 8026704:	60b9      	str	r1, [r7, #8]
 8026706:	607a      	str	r2, [r7, #4]
  return allocator_.RequestScratchBufferInArena(
 8026708:	68fb      	ldr	r3, [r7, #12]
 802670a:	685c      	ldr	r4, [r3, #4]
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 802670c:	68fb      	ldr	r3, [r7, #12]
 802670e:	689b      	ldr	r3, [r3, #8]
  return allocator_.RequestScratchBufferInArena(
 8026710:	4618      	mov	r0, r3
 8026712:	f7ff ff85 	bl	8026620 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8026716:	4602      	mov	r2, r0
 8026718:	687b      	ldr	r3, [r7, #4]
 802671a:	68b9      	ldr	r1, [r7, #8]
 802671c:	4620      	mov	r0, r4
 802671e:	f7ff ff07 	bl	8026530 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 8026722:	4603      	mov	r3, r0
}
 8026724:	4618      	mov	r0, r3
 8026726:	3714      	adds	r7, #20
 8026728:	46bd      	mov	sp, r7
 802672a:	bd90      	pop	{r4, r7, pc}

0802672c <_ZN6tflite12MicroContext16GetScratchBufferEi>:

void* MicroContext::GetScratchBuffer(int buffer_idx) {
 802672c:	b480      	push	{r7}
 802672e:	b085      	sub	sp, #20
 8026730:	af00      	add	r7, sp, #0
 8026732:	6078      	str	r0, [r7, #4]
 8026734:	6039      	str	r1, [r7, #0]
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
 8026736:	687b      	ldr	r3, [r7, #4]
 8026738:	691a      	ldr	r2, [r3, #16]
 802673a:	683b      	ldr	r3, [r7, #0]
 802673c:	009b      	lsls	r3, r3, #2
 802673e:	4413      	add	r3, r2
 8026740:	60fb      	str	r3, [r7, #12]
  return handle->data;
 8026742:	68fb      	ldr	r3, [r7, #12]
 8026744:	681b      	ldr	r3, [r3, #0]
}
 8026746:	4618      	mov	r0, r3
 8026748:	3714      	adds	r7, #20
 802674a:	46bd      	mov	sp, r7
 802674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026750:	4770      	bx	lr

08026752 <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 8026752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026756:	b084      	sub	sp, #16
 8026758:	af02      	add	r7, sp, #8
 802675a:	6078      	str	r0, [r7, #4]
 802675c:	6039      	str	r1, [r7, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 802675e:	687b      	ldr	r3, [r7, #4]
 8026760:	685d      	ldr	r5, [r3, #4]
 8026762:	687b      	ldr	r3, [r7, #4]
 8026764:	685b      	ldr	r3, [r3, #4]
 8026766:	681b      	ldr	r3, [r3, #0]
 8026768:	3304      	adds	r3, #4
 802676a:	681c      	ldr	r4, [r3, #0]
 802676c:	687b      	ldr	r3, [r7, #4]
 802676e:	68de      	ldr	r6, [r3, #12]
 8026770:	687b      	ldr	r3, [r7, #4]
 8026772:	689b      	ldr	r3, [r3, #8]
 8026774:	4618      	mov	r0, r3
 8026776:	f7ff ff5f 	bl	8026638 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 802677a:	4680      	mov	r8, r0
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 802677c:	687b      	ldr	r3, [r7, #4]
 802677e:	689b      	ldr	r3, [r3, #8]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 8026780:	4618      	mov	r0, r3
 8026782:	f7ff ff4d 	bl	8026620 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8026786:	4603      	mov	r3, r0
 8026788:	9300      	str	r3, [sp, #0]
 802678a:	683b      	ldr	r3, [r7, #0]
 802678c:	4642      	mov	r2, r8
 802678e:	4631      	mov	r1, r6
 8026790:	4628      	mov	r0, r5
 8026792:	47a0      	blx	r4
 8026794:	4603      	mov	r3, r0
}
 8026796:	4618      	mov	r0, r3
 8026798:	3708      	adds	r7, #8
 802679a:	46bd      	mov	sp, r7
 802679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080267a0 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:

int MicroContext::GetTensorIndex(int index, int max_size,
                                 const int* tensor_indices) {
 80267a0:	b480      	push	{r7}
 80267a2:	b087      	sub	sp, #28
 80267a4:	af00      	add	r7, sp, #0
 80267a6:	60f8      	str	r0, [r7, #12]
 80267a8:	60b9      	str	r1, [r7, #8]
 80267aa:	607a      	str	r2, [r7, #4]
 80267ac:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 80267ae:	68bb      	ldr	r3, [r7, #8]
 80267b0:	2b00      	cmp	r3, #0
 80267b2:	db0f      	blt.n	80267d4 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
 80267b4:	68ba      	ldr	r2, [r7, #8]
 80267b6:	687b      	ldr	r3, [r7, #4]
 80267b8:	429a      	cmp	r2, r3
 80267ba:	da0b      	bge.n	80267d4 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 80267bc:	68bb      	ldr	r3, [r7, #8]
 80267be:	009b      	lsls	r3, r3, #2
 80267c0:	683a      	ldr	r2, [r7, #0]
 80267c2:	4413      	add	r3, r2
 80267c4:	681b      	ldr	r3, [r3, #0]
 80267c6:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 80267c8:	697b      	ldr	r3, [r7, #20]
 80267ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80267ce:	d001      	beq.n	80267d4 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
      return tensor_index;
 80267d0:	697b      	ldr	r3, [r7, #20]
 80267d2:	e001      	b.n	80267d8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x38>
    }
  }
  return -1;
 80267d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80267d8:	4618      	mov	r0, r3
 80267da:	371c      	adds	r7, #28
 80267dc:	46bd      	mov	sp, r7
 80267de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267e2:	4770      	bx	lr

080267e4 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
 80267e4:	b580      	push	{r7, lr}
 80267e6:	b086      	sub	sp, #24
 80267e8:	af00      	add	r7, sp, #0
 80267ea:	60f8      	str	r0, [r7, #12]
 80267ec:	60b9      	str	r1, [r7, #8]
 80267ee:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 80267f0:	68bb      	ldr	r3, [r7, #8]
 80267f2:	681b      	ldr	r3, [r3, #0]
 80267f4:	681a      	ldr	r2, [r3, #0]
 80267f6:	68bb      	ldr	r3, [r7, #8]
 80267f8:	681b      	ldr	r3, [r3, #0]
 80267fa:	3304      	adds	r3, #4
 80267fc:	6879      	ldr	r1, [r7, #4]
 80267fe:	68f8      	ldr	r0, [r7, #12]
 8026800:	f7ff ffce 	bl	80267a0 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 8026804:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8026806:	697b      	ldr	r3, [r7, #20]
 8026808:	2b00      	cmp	r3, #0
 802680a:	da01      	bge.n	8026810 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 802680c:	2300      	movs	r3, #0
 802680e:	e008      	b.n	8026822 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8026810:	68fb      	ldr	r3, [r7, #12]
 8026812:	681b      	ldr	r3, [r3, #0]
 8026814:	3314      	adds	r3, #20
 8026816:	681b      	ldr	r3, [r3, #0]
 8026818:	6979      	ldr	r1, [r7, #20]
 802681a:	68f8      	ldr	r0, [r7, #12]
 802681c:	4798      	blx	r3
 802681e:	4603      	mov	r3, r0
 8026820:	bf00      	nop
}
 8026822:	4618      	mov	r0, r3
 8026824:	3718      	adds	r7, #24
 8026826:	46bd      	mov	sp, r7
 8026828:	bd80      	pop	{r7, pc}

0802682a <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
 802682a:	b580      	push	{r7, lr}
 802682c:	b086      	sub	sp, #24
 802682e:	af00      	add	r7, sp, #0
 8026830:	60f8      	str	r0, [r7, #12]
 8026832:	60b9      	str	r1, [r7, #8]
 8026834:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 8026836:	68bb      	ldr	r3, [r7, #8]
 8026838:	685b      	ldr	r3, [r3, #4]
 802683a:	681a      	ldr	r2, [r3, #0]
 802683c:	68bb      	ldr	r3, [r7, #8]
 802683e:	685b      	ldr	r3, [r3, #4]
 8026840:	3304      	adds	r3, #4
 8026842:	6879      	ldr	r1, [r7, #4]
 8026844:	68f8      	ldr	r0, [r7, #12]
 8026846:	f7ff ffab 	bl	80267a0 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 802684a:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 802684c:	697b      	ldr	r3, [r7, #20]
 802684e:	2b00      	cmp	r3, #0
 8026850:	da01      	bge.n	8026856 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8026852:	2300      	movs	r3, #0
 8026854:	e008      	b.n	8026868 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8026856:	68fb      	ldr	r3, [r7, #12]
 8026858:	681b      	ldr	r3, [r3, #0]
 802685a:	3314      	adds	r3, #20
 802685c:	681b      	ldr	r3, [r3, #0]
 802685e:	6979      	ldr	r1, [r7, #20]
 8026860:	68f8      	ldr	r0, [r7, #12]
 8026862:	4798      	blx	r3
 8026864:	4603      	mov	r3, r0
 8026866:	bf00      	nop
}
 8026868:	4618      	mov	r0, r3
 802686a:	3718      	adds	r7, #24
 802686c:	46bd      	mov	sp, r7
 802686e:	bd80      	pop	{r7, pc}

08026870 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempIntermediateTensor(
    const TfLiteNode* node, int index) {
 8026870:	b580      	push	{r7, lr}
 8026872:	b086      	sub	sp, #24
 8026874:	af00      	add	r7, sp, #0
 8026876:	60f8      	str	r0, [r7, #12]
 8026878:	60b9      	str	r1, [r7, #8]
 802687a:	607a      	str	r2, [r7, #4]
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 802687c:	68bb      	ldr	r3, [r7, #8]
 802687e:	689b      	ldr	r3, [r3, #8]
 8026880:	681a      	ldr	r2, [r3, #0]
                                          node->intermediates->data);
 8026882:	68bb      	ldr	r3, [r7, #8]
 8026884:	689b      	ldr	r3, [r3, #8]
 8026886:	3304      	adds	r3, #4
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 8026888:	6879      	ldr	r1, [r7, #4]
 802688a:	68f8      	ldr	r0, [r7, #12]
 802688c:	f7ff ff88 	bl	80267a0 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 8026890:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8026892:	697b      	ldr	r3, [r7, #20]
 8026894:	2b00      	cmp	r3, #0
 8026896:	da01      	bge.n	802689c <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8026898:	2300      	movs	r3, #0
 802689a:	e008      	b.n	80268ae <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 802689c:	68fb      	ldr	r3, [r7, #12]
 802689e:	681b      	ldr	r3, [r3, #0]
 80268a0:	3314      	adds	r3, #20
 80268a2:	681b      	ldr	r3, [r3, #0]
 80268a4:	6979      	ldr	r1, [r7, #20]
 80268a6:	68f8      	ldr	r0, [r7, #12]
 80268a8:	4798      	blx	r3
 80268aa:	4603      	mov	r3, r0
 80268ac:	bf00      	nop
}
 80268ae:	4618      	mov	r0, r3
 80268b0:	3718      	adds	r7, #24
 80268b2:	46bd      	mov	sp, r7
 80268b4:	bd80      	pop	{r7, pc}

080268b6 <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 80268b6:	b580      	push	{r7, lr}
 80268b8:	b082      	sub	sp, #8
 80268ba:	af00      	add	r7, sp, #0
 80268bc:	6078      	str	r0, [r7, #4]
 80268be:	6039      	str	r1, [r7, #0]
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 80268c0:	687b      	ldr	r3, [r7, #4]
 80268c2:	685a      	ldr	r2, [r3, #4]
 80268c4:	687b      	ldr	r3, [r7, #4]
 80268c6:	685b      	ldr	r3, [r3, #4]
 80268c8:	681b      	ldr	r3, [r3, #0]
 80268ca:	3308      	adds	r3, #8
 80268cc:	681b      	ldr	r3, [r3, #0]
 80268ce:	6839      	ldr	r1, [r7, #0]
 80268d0:	4610      	mov	r0, r2
 80268d2:	4798      	blx	r3
 80268d4:	bf00      	nop
}
 80268d6:	3708      	adds	r7, #8
 80268d8:	46bd      	mov	sp, r7
 80268da:	bd80      	pop	{r7, pc}

080268dc <_ZN6tflite12MicroContext13GetEvalTensorEi>:

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
 80268dc:	b590      	push	{r4, r7, lr}
 80268de:	b083      	sub	sp, #12
 80268e0:	af00      	add	r7, sp, #0
 80268e2:	6078      	str	r0, [r7, #4]
 80268e4:	6039      	str	r1, [r7, #0]
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 80268e6:	687b      	ldr	r3, [r7, #4]
 80268e8:	689b      	ldr	r3, [r3, #8]
 80268ea:	4618      	mov	r0, r3
 80268ec:	f7ff fea4 	bl	8026638 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80268f0:	4604      	mov	r4, r0
 80268f2:	687b      	ldr	r3, [r7, #4]
 80268f4:	689b      	ldr	r3, [r3, #8]
 80268f6:	4618      	mov	r0, r3
 80268f8:	f7ff fe92 	bl	8026620 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 80268fc:	4603      	mov	r3, r0
 80268fe:	00db      	lsls	r3, r3, #3
 8026900:	4423      	add	r3, r4
              .tensors[tensor_idx];
 8026902:	6859      	ldr	r1, [r3, #4]
 8026904:	683a      	ldr	r2, [r7, #0]
 8026906:	4613      	mov	r3, r2
 8026908:	005b      	lsls	r3, r3, #1
 802690a:	4413      	add	r3, r2
 802690c:	009b      	lsls	r3, r3, #2
 802690e:	440b      	add	r3, r1
}
 8026910:	4618      	mov	r0, r3
 8026912:	370c      	adds	r7, #12
 8026914:	46bd      	mov	sp, r7
 8026916:	bd90      	pop	{r4, r7, pc}

08026918 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 8026918:	b40e      	push	{r1, r2, r3}
 802691a:	b580      	push	{r7, lr}
 802691c:	b085      	sub	sp, #20
 802691e:	af00      	add	r7, sp, #0
 8026920:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8026922:	f107 0320 	add.w	r3, r7, #32
 8026926:	60fb      	str	r3, [r7, #12]
  Log(format, args);
 8026928:	68f9      	ldr	r1, [r7, #12]
 802692a:	69f8      	ldr	r0, [r7, #28]
 802692c:	f000 f81e 	bl	802696c <_Z3LogPKcSt9__va_list>
  va_end(args);
}
 8026930:	bf00      	nop
 8026932:	3714      	adds	r7, #20
 8026934:	46bd      	mov	sp, r7
 8026936:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802693a:	b003      	add	sp, #12
 802693c:	4770      	bx	lr

0802693e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>:
  void* external_context_payload_ = nullptr;

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
 802693e:	b480      	push	{r7}
 8026940:	b083      	sub	sp, #12
 8026942:	af00      	add	r7, sp, #0
 8026944:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<MicroContext*>(context->impl_);
 8026946:	687b      	ldr	r3, [r7, #4]
 8026948:	689b      	ldr	r3, [r3, #8]
}
 802694a:	4618      	mov	r0, r3
 802694c:	370c      	adds	r7, #12
 802694e:	46bd      	mov	sp, r7
 8026950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026954:	4770      	bx	lr

08026956 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>:
void Unused(Args&&... args) {
 8026956:	b480      	push	{r7}
 8026958:	b083      	sub	sp, #12
 802695a:	af00      	add	r7, sp, #0
 802695c:	6078      	str	r0, [r7, #4]
 802695e:	6039      	str	r1, [r7, #0]
}
 8026960:	bf00      	nop
 8026962:	370c      	adds	r7, #12
 8026964:	46bd      	mov	sp, r7
 8026966:	f85d 7b04 	ldr.w	r7, [sp], #4
 802696a:	4770      	bx	lr

0802696c <_Z3LogPKcSt9__va_list>:
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
#include "edge-impulse-sdk/tensorflow/lite/micro/debug_log.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_string.h"
#endif

void Log(const char* format, va_list args) {
 802696c:	b480      	push	{r7}
 802696e:	b083      	sub	sp, #12
 8026970:	af00      	add	r7, sp, #0
 8026972:	6078      	str	r0, [r7, #4]
 8026974:	6039      	str	r1, [r7, #0]
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
 8026976:	bf00      	nop
 8026978:	370c      	adds	r7, #12
 802697a:	46bd      	mov	sp, r7
 802697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026980:	4770      	bx	lr

08026982 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "edge-impulse-sdk/tensorflow/lite/micro/memory_helpers.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_log.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 8026982:	b480      	push	{r7}
 8026984:	b085      	sub	sp, #20
 8026986:	af00      	add	r7, sp, #0
 8026988:	6078      	str	r0, [r7, #4]
  int result = 1;
 802698a:	2301      	movs	r3, #1
 802698c:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 802698e:	2300      	movs	r3, #0
 8026990:	60bb      	str	r3, [r7, #8]
 8026992:	e00b      	b.n	80269ac <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x2a>
    result *= dims.data[i];
 8026994:	687a      	ldr	r2, [r7, #4]
 8026996:	68bb      	ldr	r3, [r7, #8]
 8026998:	009b      	lsls	r3, r3, #2
 802699a:	4413      	add	r3, r2
 802699c:	685a      	ldr	r2, [r3, #4]
 802699e:	68fb      	ldr	r3, [r7, #12]
 80269a0:	fb02 f303 	mul.w	r3, r2, r3
 80269a4:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 80269a6:	68bb      	ldr	r3, [r7, #8]
 80269a8:	3301      	adds	r3, #1
 80269aa:	60bb      	str	r3, [r7, #8]
 80269ac:	687b      	ldr	r3, [r7, #4]
 80269ae:	681b      	ldr	r3, [r3, #0]
 80269b0:	68ba      	ldr	r2, [r7, #8]
 80269b2:	429a      	cmp	r2, r3
 80269b4:	dbee      	blt.n	8026994 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x12>
  }
  return result;
 80269b6:	68fb      	ldr	r3, [r7, #12]
}
 80269b8:	4618      	mov	r0, r3
 80269ba:	3714      	adds	r7, #20
 80269bc:	46bd      	mov	sp, r7
 80269be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269c2:	4770      	bx	lr

080269c4 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 80269c4:	b4b0      	push	{r4, r5, r7}
 80269c6:	b087      	sub	sp, #28
 80269c8:	af00      	add	r7, sp, #0
 80269ca:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 80269cc:	f04f 0001 	mov.w	r0, #1
 80269d0:	f04f 0100 	mov.w	r1, #0
 80269d4:	e9c7 0104 	strd	r0, r1, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 80269d8:	2100      	movs	r1, #0
 80269da:	60f9      	str	r1, [r7, #12]
 80269dc:	e01a      	b.n	8026a14 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x50>
    count *= dims->data[i];
 80269de:	6878      	ldr	r0, [r7, #4]
 80269e0:	68f9      	ldr	r1, [r7, #12]
 80269e2:	0089      	lsls	r1, r1, #2
 80269e4:	4401      	add	r1, r0
 80269e6:	6849      	ldr	r1, [r1, #4]
 80269e8:	17c8      	asrs	r0, r1, #31
 80269ea:	460c      	mov	r4, r1
 80269ec:	4605      	mov	r5, r0
 80269ee:	6979      	ldr	r1, [r7, #20]
 80269f0:	fb04 f001 	mul.w	r0, r4, r1
 80269f4:	6939      	ldr	r1, [r7, #16]
 80269f6:	fb05 f101 	mul.w	r1, r5, r1
 80269fa:	4401      	add	r1, r0
 80269fc:	6938      	ldr	r0, [r7, #16]
 80269fe:	fba0 2304 	umull	r2, r3, r0, r4
 8026a02:	4419      	add	r1, r3
 8026a04:	460b      	mov	r3, r1
 8026a06:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8026a0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8026a0e:	68f9      	ldr	r1, [r7, #12]
 8026a10:	3101      	adds	r1, #1
 8026a12:	60f9      	str	r1, [r7, #12]
 8026a14:	6879      	ldr	r1, [r7, #4]
 8026a16:	6809      	ldr	r1, [r1, #0]
 8026a18:	68f8      	ldr	r0, [r7, #12]
 8026a1a:	4288      	cmp	r0, r1
 8026a1c:	dbdf      	blt.n	80269de <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x1a>
  }
  return count;
 8026a1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8026a22:	4610      	mov	r0, r2
 8026a24:	4619      	mov	r1, r3
 8026a26:	371c      	adds	r7, #28
 8026a28:	46bd      	mov	sp, r7
 8026a2a:	bcb0      	pop	{r4, r5, r7}
 8026a2c:	4770      	bx	lr

08026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8026a2e:	b580      	push	{r7, lr}
 8026a30:	b082      	sub	sp, #8
 8026a32:	af00      	add	r7, sp, #0
 8026a34:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8026a36:	687b      	ldr	r3, [r7, #4]
 8026a38:	2b00      	cmp	r3, #0
 8026a3a:	d101      	bne.n	8026a40 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8026a3c:	f006 ff94 	bl	802d968 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	681b      	ldr	r3, [r3, #0]
}
 8026a44:	4618      	mov	r0, r3
 8026a46:	3708      	adds	r7, #8
 8026a48:	46bd      	mov	sp, r7
 8026a4a:	bd80      	pop	{r7, pc}

08026a4c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8026a4c:	b580      	push	{r7, lr}
 8026a4e:	b082      	sub	sp, #8
 8026a50:	af00      	add	r7, sp, #0
 8026a52:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8026a54:	687b      	ldr	r3, [r7, #4]
 8026a56:	2b00      	cmp	r3, #0
 8026a58:	d101      	bne.n	8026a5e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x12>
 8026a5a:	f006 ff85 	bl	802d968 <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8026a5e:	687b      	ldr	r3, [r7, #4]
 8026a60:	681b      	ldr	r3, [r3, #0]
}
 8026a62:	4618      	mov	r0, r3
 8026a64:	3708      	adds	r7, #8
 8026a66:	46bd      	mov	sp, r7
 8026a68:	bd80      	pop	{r7, pc}

08026a6a <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 8026a6a:	b580      	push	{r7, lr}
 8026a6c:	b082      	sub	sp, #8
 8026a6e:	af00      	add	r7, sp, #0
 8026a70:	6078      	str	r0, [r7, #4]
 8026a72:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8026a74:	683b      	ldr	r3, [r7, #0]
 8026a76:	2b00      	cmp	r3, #0
 8026a78:	da01      	bge.n	8026a7e <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8026a7a:	f006 ff75 	bl	802d968 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8026a7e:	687b      	ldr	r3, [r7, #4]
 8026a80:	681b      	ldr	r3, [r3, #0]
 8026a82:	683a      	ldr	r2, [r7, #0]
 8026a84:	429a      	cmp	r2, r3
 8026a86:	db01      	blt.n	8026a8c <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8026a88:	f006 ff6e 	bl	802d968 <abort>
    return dims_[i];
 8026a8c:	687a      	ldr	r2, [r7, #4]
 8026a8e:	683b      	ldr	r3, [r7, #0]
 8026a90:	009b      	lsls	r3, r3, #2
 8026a92:	4413      	add	r3, r2
 8026a94:	685b      	ldr	r3, [r3, #4]
  }
 8026a96:	4618      	mov	r0, r3
 8026a98:	3708      	adds	r7, #8
 8026a9a:	46bd      	mov	sp, r7
 8026a9c:	bd80      	pop	{r7, pc}
	...

08026aa0 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8026aa0:	b480      	push	{r7}
 8026aa2:	af00      	add	r7, sp, #0
 8026aa4:	4b04      	ldr	r3, [pc, #16]	; (8026ab8 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8026aa6:	ee07 3a90 	vmov	s15, r3
 8026aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8026aae:	46bd      	mov	sp, r7
 8026ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ab4:	4770      	bx	lr
 8026ab6:	bf00      	nop
 8026ab8:	7f7fffff 	.word	0x7f7fffff

08026abc <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8026abc:	b480      	push	{r7}
 8026abe:	af00      	add	r7, sp, #0
 8026ac0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8026ac4:	ee07 3a90 	vmov	s15, r3
 8026ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8026acc:	46bd      	mov	sp, r7
 8026ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ad2:	4770      	bx	lr

08026ad4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8026ad4:	b580      	push	{r7, lr}
 8026ad6:	b084      	sub	sp, #16
 8026ad8:	af00      	add	r7, sp, #0
 8026ada:	4603      	mov	r3, r0
 8026adc:	60b9      	str	r1, [r7, #8]
 8026ade:	607a      	str	r2, [r7, #4]
 8026ae0:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8026ae2:	7bfb      	ldrb	r3, [r7, #15]
 8026ae4:	2b01      	cmp	r3, #1
 8026ae6:	d10b      	bne.n	8026b00 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8026ae8:	68bb      	ldr	r3, [r7, #8]
 8026aea:	f04f 0200 	mov.w	r2, #0
 8026aee:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8026af0:	f7ff ffd6 	bl	8026aa0 <_ZNSt14numeric_limitsIfE3maxEv>
 8026af4:	eef0 7a40 	vmov.f32	s15, s0
 8026af8:	687b      	ldr	r3, [r7, #4]
 8026afa:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8026afe:	e023      	b.n	8026b48 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8026b00:	7bfb      	ldrb	r3, [r7, #15]
 8026b02:	2b03      	cmp	r3, #3
 8026b04:	d107      	bne.n	8026b16 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8026b06:	68bb      	ldr	r3, [r7, #8]
 8026b08:	f04f 0200 	mov.w	r2, #0
 8026b0c:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8026b0e:	687b      	ldr	r3, [r7, #4]
 8026b10:	4a0f      	ldr	r2, [pc, #60]	; (8026b50 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8026b12:	601a      	str	r2, [r3, #0]
}
 8026b14:	e018      	b.n	8026b48 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8026b16:	7bfb      	ldrb	r3, [r7, #15]
 8026b18:	2b02      	cmp	r3, #2
 8026b1a:	d107      	bne.n	8026b2c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8026b1c:	68bb      	ldr	r3, [r7, #8]
 8026b1e:	4a0d      	ldr	r2, [pc, #52]	; (8026b54 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8026b20:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8026b22:	687b      	ldr	r3, [r7, #4]
 8026b24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8026b28:	601a      	str	r2, [r3, #0]
}
 8026b2a:	e00d      	b.n	8026b48 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8026b2c:	f7ff ffc6 	bl	8026abc <_ZNSt14numeric_limitsIfE6lowestEv>
 8026b30:	eef0 7a40 	vmov.f32	s15, s0
 8026b34:	68bb      	ldr	r3, [r7, #8]
 8026b36:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8026b3a:	f7ff ffb1 	bl	8026aa0 <_ZNSt14numeric_limitsIfE3maxEv>
 8026b3e:	eef0 7a40 	vmov.f32	s15, s0
 8026b42:	687b      	ldr	r3, [r7, #4]
 8026b44:	edc3 7a00 	vstr	s15, [r3]
}
 8026b48:	bf00      	nop
 8026b4a:	3710      	adds	r7, #16
 8026b4c:	46bd      	mov	sp, r7
 8026b4e:	bd80      	pop	{r7, pc}
 8026b50:	40c00000 	.word	0x40c00000
 8026b54:	bf800000 	.word	0xbf800000

08026b58 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8026b58:	b580      	push	{r7, lr}
 8026b5a:	b082      	sub	sp, #8
 8026b5c:	af00      	add	r7, sp, #0
 8026b5e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8026b60:	687b      	ldr	r3, [r7, #4]
 8026b62:	2b00      	cmp	r3, #0
 8026b64:	d101      	bne.n	8026b6a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 8026b66:	f006 feff 	bl	802d968 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8026b6a:	687b      	ldr	r3, [r7, #4]
 8026b6c:	681b      	ldr	r3, [r3, #0]
}
 8026b6e:	4618      	mov	r0, r3
 8026b70:	3708      	adds	r7, #8
 8026b72:	46bd      	mov	sp, r7
 8026b74:	bd80      	pop	{r7, pc}

08026b76 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8026b76:	b580      	push	{r7, lr}
 8026b78:	b082      	sub	sp, #8
 8026b7a:	af00      	add	r7, sp, #0
 8026b7c:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8026b7e:	687b      	ldr	r3, [r7, #4]
 8026b80:	2b00      	cmp	r3, #0
 8026b82:	d101      	bne.n	8026b88 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x12>
 8026b84:	f006 fef0 	bl	802d968 <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8026b88:	687b      	ldr	r3, [r7, #4]
 8026b8a:	681b      	ldr	r3, [r3, #0]
}
 8026b8c:	4618      	mov	r0, r3
 8026b8e:	3708      	adds	r7, #8
 8026b90:	46bd      	mov	sp, r7
 8026b92:	bd80      	pop	{r7, pc}

08026b94 <_ZN6tflite6UnusedIJRA28_KcPS1_R10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8026b94:	b480      	push	{r7}
 8026b96:	b085      	sub	sp, #20
 8026b98:	af00      	add	r7, sp, #0
 8026b9a:	60f8      	str	r0, [r7, #12]
 8026b9c:	60b9      	str	r1, [r7, #8]
 8026b9e:	607a      	str	r2, [r7, #4]
}
 8026ba0:	bf00      	nop
 8026ba2:	3714      	adds	r7, #20
 8026ba4:	46bd      	mov	sp, r7
 8026ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026baa:	4770      	bx	lr

08026bac <_ZN6tflite11NumElementsEPK12TfLiteTensor>:
inline int64_t NumElements(const TfLiteTensor* t) {
 8026bac:	b580      	push	{r7, lr}
 8026bae:	b082      	sub	sp, #8
 8026bb0:	af00      	add	r7, sp, #0
 8026bb2:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 8026bb4:	687b      	ldr	r3, [r7, #4]
 8026bb6:	689b      	ldr	r3, [r3, #8]
 8026bb8:	4618      	mov	r0, r3
 8026bba:	f7ff ff03 	bl	80269c4 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 8026bbe:	4602      	mov	r2, r0
 8026bc0:	460b      	mov	r3, r1
}
 8026bc2:	4610      	mov	r0, r2
 8026bc4:	4619      	mov	r1, r3
 8026bc6:	3708      	adds	r7, #8
 8026bc8:	46bd      	mov	sp, r7
 8026bca:	bd80      	pop	{r7, pc}

08026bcc <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8026bcc:	b480      	push	{r7}
 8026bce:	b085      	sub	sp, #20
 8026bd0:	af00      	add	r7, sp, #0
 8026bd2:	60f8      	str	r0, [r7, #12]
 8026bd4:	60b9      	str	r1, [r7, #8]
 8026bd6:	607a      	str	r2, [r7, #4]
}
 8026bd8:	bf00      	nop
 8026bda:	3714      	adds	r7, #20
 8026bdc:	46bd      	mov	sp, r7
 8026bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026be2:	4770      	bx	lr

08026be4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8026be4:	b590      	push	{r4, r7, lr}
 8026be6:	b087      	sub	sp, #28
 8026be8:	af00      	add	r7, sp, #0
 8026bea:	60f8      	str	r0, [r7, #12]
 8026bec:	60b9      	str	r1, [r7, #8]
 8026bee:	607a      	str	r2, [r7, #4]
 8026bf0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8026bf2:	68b9      	ldr	r1, [r7, #8]
 8026bf4:	68f8      	ldr	r0, [r7, #12]
 8026bf6:	f7ff ff38 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8026bfa:	4604      	mov	r4, r0
 8026bfc:	6839      	ldr	r1, [r7, #0]
 8026bfe:	6878      	ldr	r0, [r7, #4]
 8026c00:	f7ff ff33 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8026c04:	4603      	mov	r3, r0
 8026c06:	429c      	cmp	r4, r3
 8026c08:	d001      	beq.n	8026c0e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8026c0a:	f006 fead 	bl	802d968 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8026c0e:	68b9      	ldr	r1, [r7, #8]
 8026c10:	68f8      	ldr	r0, [r7, #12]
 8026c12:	f7ff ff2a 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8026c16:	4603      	mov	r3, r0
 8026c18:	613b      	str	r3, [r7, #16]
 8026c1a:	6839      	ldr	r1, [r7, #0]
 8026c1c:	6878      	ldr	r0, [r7, #4]
 8026c1e:	f7ff ff24 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8026c22:	4603      	mov	r3, r0
 8026c24:	617b      	str	r3, [r7, #20]
 8026c26:	f107 0214 	add.w	r2, r7, #20
 8026c2a:	f107 0310 	add.w	r3, r7, #16
 8026c2e:	4611      	mov	r1, r2
 8026c30:	4618      	mov	r0, r3
 8026c32:	f7e2 f9df 	bl	8008ff4 <_ZSt3minIlERKT_S2_S2_>
 8026c36:	4603      	mov	r3, r0
 8026c38:	681b      	ldr	r3, [r3, #0]
}
 8026c3a:	4618      	mov	r0, r3
 8026c3c:	371c      	adds	r7, #28
 8026c3e:	46bd      	mov	sp, r7
 8026c40:	bd90      	pop	{r4, r7, pc}

08026c42 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8026c42:	b580      	push	{r7, lr}
 8026c44:	b084      	sub	sp, #16
 8026c46:	af00      	add	r7, sp, #0
 8026c48:	60f8      	str	r0, [r7, #12]
 8026c4a:	60b9      	str	r1, [r7, #8]
 8026c4c:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8026c4e:	68fb      	ldr	r3, [r7, #12]
 8026c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026c52:	2b00      	cmp	r3, #0
 8026c54:	d101      	bne.n	8026c5a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8026c56:	f006 fe87 	bl	802d968 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8026c5a:	68fb      	ldr	r3, [r7, #12]
 8026c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026c5e:	213c      	movs	r1, #60	; 0x3c
 8026c60:	68f8      	ldr	r0, [r7, #12]
 8026c62:	4798      	blx	r3
 8026c64:	4603      	mov	r3, r0
}
 8026c66:	4618      	mov	r0, r3
 8026c68:	3710      	adds	r7, #16
 8026c6a:	46bd      	mov	sp, r7
 8026c6c:	bd80      	pop	{r7, pc}
	...

08026c70 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8026c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026c72:	b0bf      	sub	sp, #252	; 0xfc
 8026c74:	af08      	add	r7, sp, #32
 8026c76:	60f8      	str	r0, [r7, #12]
 8026c78:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 8026c7a:	68bb      	ldr	r3, [r7, #8]
 8026c7c:	691b      	ldr	r3, [r3, #16]
 8026c7e:	2b00      	cmp	r3, #0
 8026c80:	d101      	bne.n	8026c86 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8026c82:	f006 fe71 	bl	802d968 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8026c86:	68bb      	ldr	r3, [r7, #8]
 8026c88:	695b      	ldr	r3, [r3, #20]
 8026c8a:	2b00      	cmp	r3, #0
 8026c8c:	d101      	bne.n	8026c92 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8026c8e:	f006 fe6b 	bl	802d968 <abort>

  int32_t buf_size = 0;
 8026c92:	2300      	movs	r3, #0
 8026c94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  const auto& params =
 8026c98:	68bb      	ldr	r3, [r7, #8]
 8026c9a:	695b      	ldr	r3, [r3, #20]
 8026c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);
 8026ca0:	68bb      	ldr	r3, [r7, #8]
 8026ca2:	691b      	ldr	r3, [r3, #16]
 8026ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  MicroContext* micro_context = GetMicroContext(context);
 8026ca8:	68f8      	ldr	r0, [r7, #12]
 8026caa:	f7ff fe48 	bl	802693e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8026cae:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 8026cb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8026cb6:	681b      	ldr	r3, [r3, #0]
 8026cb8:	3318      	adds	r3, #24
 8026cba:	681b      	ldr	r3, [r3, #0]
 8026cbc:	4aae      	ldr	r2, [pc, #696]	; (8026f78 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 8026cbe:	6812      	ldr	r2, [r2, #0]
 8026cc0:	68b9      	ldr	r1, [r7, #8]
 8026cc2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8026cc6:	4798      	blx	r3
 8026cc8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  TF_LITE_ENSURE(context, input != nullptr);
 8026ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026cd0:	2b00      	cmp	r3, #0
 8026cd2:	d10a      	bne.n	8026cea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x7a>
 8026cd4:	68fb      	ldr	r3, [r7, #12]
 8026cd6:	691c      	ldr	r4, [r3, #16]
 8026cd8:	4ba8      	ldr	r3, [pc, #672]	; (8026f7c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
 8026cda:	9300      	str	r3, [sp, #0]
 8026cdc:	2341      	movs	r3, #65	; 0x41
 8026cde:	4aa8      	ldr	r2, [pc, #672]	; (8026f80 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
 8026ce0:	49a8      	ldr	r1, [pc, #672]	; (8026f84 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
 8026ce2:	68f8      	ldr	r0, [r7, #12]
 8026ce4:	47a0      	blx	r4
 8026ce6:	2401      	movs	r4, #1
 8026ce8:	e1de      	b.n	80270a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x438>
  TfLiteTensor* filter =
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
 8026cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8026cee:	681b      	ldr	r3, [r3, #0]
 8026cf0:	3318      	adds	r3, #24
 8026cf2:	681b      	ldr	r3, [r3, #0]
 8026cf4:	4aa4      	ldr	r2, [pc, #656]	; (8026f88 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 8026cf6:	6812      	ldr	r2, [r2, #0]
 8026cf8:	68b9      	ldr	r1, [r7, #8]
 8026cfa:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8026cfe:	4798      	blx	r3
 8026d00:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
  TF_LITE_ENSURE(context, filter != nullptr);
 8026d04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8026d08:	2b00      	cmp	r3, #0
 8026d0a:	d10a      	bne.n	8026d22 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb2>
 8026d0c:	68fb      	ldr	r3, [r7, #12]
 8026d0e:	691c      	ldr	r4, [r3, #16]
 8026d10:	4b9e      	ldr	r3, [pc, #632]	; (8026f8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x31c>)
 8026d12:	9300      	str	r3, [sp, #0]
 8026d14:	2344      	movs	r3, #68	; 0x44
 8026d16:	4a9a      	ldr	r2, [pc, #616]	; (8026f80 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
 8026d18:	499a      	ldr	r1, [pc, #616]	; (8026f84 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
 8026d1a:	68f8      	ldr	r0, [r7, #12]
 8026d1c:	47a0      	blx	r4
 8026d1e:	2401      	movs	r4, #1
 8026d20:	e1c2      	b.n	80270a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x438>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 8026d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8026d26:	681b      	ldr	r3, [r3, #0]
 8026d28:	331c      	adds	r3, #28
 8026d2a:	681b      	ldr	r3, [r3, #0]
 8026d2c:	4a98      	ldr	r2, [pc, #608]	; (8026f90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
 8026d2e:	6812      	ldr	r2, [r2, #0]
 8026d30:	68b9      	ldr	r1, [r7, #8]
 8026d32:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8026d36:	4798      	blx	r3
 8026d38:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  TF_LITE_ENSURE(context, output != nullptr);
 8026d3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8026d40:	2b00      	cmp	r3, #0
 8026d42:	d10a      	bne.n	8026d5a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xea>
 8026d44:	68fb      	ldr	r3, [r7, #12]
 8026d46:	691c      	ldr	r4, [r3, #16]
 8026d48:	4b92      	ldr	r3, [pc, #584]	; (8026f94 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 8026d4a:	9300      	str	r3, [sp, #0]
 8026d4c:	2347      	movs	r3, #71	; 0x47
 8026d4e:	4a8c      	ldr	r2, [pc, #560]	; (8026f80 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
 8026d50:	498c      	ldr	r1, [pc, #560]	; (8026f84 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
 8026d52:	68f8      	ldr	r0, [r7, #12]
 8026d54:	47a0      	blx	r4
 8026d56:	2401      	movs	r4, #1
 8026d58:	e1a6      	b.n	80270a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x438>

  RuntimeShape input_shape = GetTensorShape(input);
 8026d5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8026d5e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8026d62:	4618      	mov	r0, r3
 8026d64:	f7fe fcd1 	bl	802570a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 8026d68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8026d6c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8026d70:	4618      	mov	r0, r3
 8026d72:	f7fe fcca 	bl	802570a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 8026d76:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8026d7a:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8026d7e:	2300      	movs	r3, #0
 8026d80:	2100      	movs	r1, #0
 8026d82:	f7ff ff2f 	bl	8026be4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8026d86:	4603      	mov	r3, r0
 8026d88:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.h = input->dims->data[1];
 8026d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026d8e:	689b      	ldr	r3, [r3, #8]
 8026d90:	689b      	ldr	r3, [r3, #8]
 8026d92:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.w = input->dims->data[2];
 8026d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026d98:	689b      	ldr	r3, [r3, #8]
 8026d9a:	68db      	ldr	r3, [r3, #12]
 8026d9c:	663b      	str	r3, [r7, #96]	; 0x60
  input_dims.c = input_shape.Dims(3);
 8026d9e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8026da2:	2103      	movs	r1, #3
 8026da4:	4618      	mov	r0, r3
 8026da6:	f7ff fe60 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8026daa:	4603      	mov	r3, r0
 8026dac:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 8026dae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8026db2:	2103      	movs	r1, #3
 8026db4:	4618      	mov	r0, r3
 8026db6:	f7ff fe58 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8026dba:	4603      	mov	r3, r0
 8026dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.h = filter->dims->data[1];
 8026dbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8026dc2:	689b      	ldr	r3, [r3, #8]
 8026dc4:	689b      	ldr	r3, [r3, #8]
 8026dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 8026dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8026dcc:	689b      	ldr	r3, [r3, #8]
 8026dce:	68db      	ldr	r3, [r3, #12]
 8026dd0:	653b      	str	r3, [r7, #80]	; 0x50
  filter_dims.c = input_dims.c;
 8026dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026dd4:	657b      	str	r3, [r7, #84]	; 0x54

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 8026dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 8026dda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8026dde:	689b      	ldr	r3, [r3, #8]
 8026de0:	689b      	ldr	r3, [r3, #8]
 8026de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
 8026de4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8026de8:	689b      	ldr	r3, [r3, #8]
 8026dea:	68db      	ldr	r3, [r3, #12]
 8026dec:	643b      	str	r3, [r7, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
 8026dee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8026df2:	2103      	movs	r1, #3
 8026df4:	4618      	mov	r0, r3
 8026df6:	f7ff fe38 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8026dfa:	4603      	mov	r3, r0
 8026dfc:	647b      	str	r3, [r7, #68]	; 0x44

  if (filter->type == kTfLiteInt4) {
 8026dfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8026e02:	781b      	ldrb	r3, [r3, #0]
 8026e04:	2b12      	cmp	r3, #18
 8026e06:	d121      	bne.n	8026e4c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1dc>
    int filter_size =
        RuntimeShape(filter->dims->size,
 8026e08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8026e0c:	689b      	ldr	r3, [r3, #8]
 8026e0e:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 8026e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8026e14:	689b      	ldr	r3, [r3, #8]
 8026e16:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 8026e18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8026e1c:	4618      	mov	r0, r3
 8026e1e:	f7fe fc03 	bl	8025628 <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 8026e22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8026e26:	4618      	mov	r0, r3
 8026e28:	f7fe fc4c 	bl	80256c4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8026e2c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        RuntimeShape(filter->dims->size,
 8026e30:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8026e34:	4618      	mov	r0, r3
 8026e36:	f7fe fc0a 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(
 8026e3a:	68fb      	ldr	r3, [r7, #12]
 8026e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026e3e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8026e42:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8026e46:	3234      	adds	r2, #52	; 0x34
 8026e48:	68f8      	ldr	r0, [r7, #12]
 8026e4a:	4798      	blx	r3
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8026e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026e50:	781b      	ldrb	r3, [r3, #0]
 8026e52:	2b09      	cmp	r3, #9
 8026e54:	d004      	beq.n	8026e60 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8026e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026e5a:	781b      	ldrb	r3, [r3, #0]
 8026e5c:	2b07      	cmp	r3, #7
 8026e5e:	d121      	bne.n	8026ea4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x234>
    const int num_channels = filter->dims->data[kConvQuantizedDimension];
 8026e60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8026e64:	689a      	ldr	r2, [r3, #8]
 8026e66:	4b4c      	ldr	r3, [pc, #304]	; (8026f98 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8026e68:	681b      	ldr	r3, [r3, #0]
 8026e6a:	009b      	lsls	r3, r3, #2
 8026e6c:	4413      	add	r3, r2
 8026e6e:	685b      	ldr	r3, [r3, #4]
 8026e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    data->reference_op_data.per_channel_output_multiplier =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8026e74:	68fb      	ldr	r3, [r7, #12]
 8026e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            context, num_channels * sizeof(int32_t)));
 8026e78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8026e7c:	0092      	lsls	r2, r2, #2
 8026e7e:	4611      	mov	r1, r2
 8026e80:	68f8      	ldr	r0, [r7, #12]
 8026e82:	4798      	blx	r3
 8026e84:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_multiplier =
 8026e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026e8a:	625a      	str	r2, [r3, #36]	; 0x24
    data->reference_op_data.per_channel_output_shift =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8026e8c:	68fb      	ldr	r3, [r7, #12]
 8026e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            context, num_channels * sizeof(int32_t)));
 8026e90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8026e94:	0092      	lsls	r2, r2, #2
 8026e96:	4611      	mov	r1, r2
 8026e98:	68f8      	ldr	r0, [r7, #12]
 8026e9a:	4798      	blx	r3
 8026e9c:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_shift =
 8026e9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026ea2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 8026ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ea6:	607b      	str	r3, [r7, #4]
 8026ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026eaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8026eac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8026eae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8026eb0:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8026eb2:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
 8026eb6:	782d      	ldrb	r5, [r5, #0]
 8026eb8:	f8d7 60cc 	ldr.w	r6, [r7, #204]	; 0xcc
 8026ebc:	9606      	str	r6, [sp, #24]
 8026ebe:	9505      	str	r5, [sp, #20]
 8026ec0:	9404      	str	r4, [sp, #16]
 8026ec2:	9003      	str	r0, [sp, #12]
 8026ec4:	9102      	str	r1, [sp, #8]
 8026ec6:	9201      	str	r2, [sp, #4]
 8026ec8:	9300      	str	r3, [sp, #0]
 8026eca:	687b      	ldr	r3, [r7, #4]
 8026ecc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8026ed0:	68b9      	ldr	r1, [r7, #8]
 8026ed2:	68f8      	ldr	r0, [r7, #12]
 8026ed4:	f000 fdd0 	bl	8027a78 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 8026ed8:	4603      	mov	r3, r0
 8026eda:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8026ede:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	d002      	beq.n	8026eec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>
 8026ee6:	f897 40b3 	ldrb.w	r4, [r7, #179]	; 0xb3
 8026eea:	e0d3      	b.n	8027094 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x424>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8026eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026ef0:	781b      	ldrb	r3, [r3, #0]
 8026ef2:	2b09      	cmp	r3, #9
 8026ef4:	d005      	beq.n	8026f02 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x292>
 8026ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026efa:	781b      	ldrb	r3, [r3, #0]
 8026efc:	2b07      	cmp	r3, #7
 8026efe:	f040 80aa 	bne.w	8027056 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>
    // Initialize cmsis_nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 8026f02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026f06:	691b      	ldr	r3, [r3, #16]
 8026f08:	425b      	negs	r3, r3
 8026f0a:	613b      	str	r3, [r7, #16]
    conv_params.output_offset = output->params.zero_point;
 8026f0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8026f10:	691b      	ldr	r3, [r3, #16]
 8026f12:	617b      	str	r3, [r7, #20]
    conv_params.stride.h = params.stride_height;
 8026f14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026f18:	689b      	ldr	r3, [r3, #8]
 8026f1a:	61fb      	str	r3, [r7, #28]
    conv_params.stride.w = params.stride_width;
 8026f1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026f20:	685b      	ldr	r3, [r3, #4]
 8026f22:	61bb      	str	r3, [r7, #24]
    conv_params.dilation.h = params.dilation_height_factor;
 8026f24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026f28:	695b      	ldr	r3, [r3, #20]
 8026f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.dilation.w = params.dilation_width_factor;
 8026f2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8026f30:	691b      	ldr	r3, [r3, #16]
 8026f32:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.padding.h = data->reference_op_data.padding.height;
 8026f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026f38:	685b      	ldr	r3, [r3, #4]
 8026f3a:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.padding.w = data->reference_op_data.padding.width;
 8026f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026f40:	681b      	ldr	r3, [r3, #0]
 8026f42:	623b      	str	r3, [r7, #32]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 8026f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026f4a:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 8026f4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8026f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026f52:	637b      	str	r3, [r7, #52]	; 0x34

    if (input->type == kTfLiteInt8) {
 8026f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026f58:	781b      	ldrb	r3, [r3, #0]
 8026f5a:	2b09      	cmp	r3, #9
 8026f5c:	d11e      	bne.n	8026f9c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>
      buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 8026f5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8026f62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8026f66:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8026f6a:	f107 0010 	add.w	r0, r7, #16
 8026f6e:	f7ed fabf 	bl	80144f0 <arm_convolve_wrapper_s8_get_buffer_size>
 8026f72:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8026f76:	e052      	b.n	802701e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3ae>
 8026f78:	0803401c 	.word	0x0803401c
 8026f7c:	080321ac 	.word	0x080321ac
 8026f80:	08032100 	.word	0x08032100
 8026f84:	08032194 	.word	0x08032194
 8026f88:	08034020 	.word	0x08034020
 8026f8c:	080321c0 	.word	0x080321c0
 8026f90:	08034028 	.word	0x08034028
 8026f94:	080321d4 	.word	0x080321d4
 8026f98:	0803402c 	.word	0x0803402c
          &conv_params, &input_dims, &filter_dims, &output_dims);
    } else if (input->type == kTfLiteInt16) {
 8026f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026fa0:	781b      	ldrb	r3, [r3, #0]
 8026fa2:	2b07      	cmp	r3, #7
 8026fa4:	d13b      	bne.n	802701e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3ae>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 8026fa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026faa:	691b      	ldr	r3, [r3, #16]
 8026fac:	2b00      	cmp	r3, #0
 8026fae:	d012      	beq.n	8026fd6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x366>
 8026fb0:	68fb      	ldr	r3, [r7, #12]
 8026fb2:	691c      	ldr	r4, [r3, #16]
 8026fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026fb8:	691b      	ldr	r3, [r3, #16]
 8026fba:	2200      	movs	r2, #0
 8026fbc:	9203      	str	r2, [sp, #12]
 8026fbe:	9302      	str	r3, [sp, #8]
 8026fc0:	4b3c      	ldr	r3, [pc, #240]	; (80270b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x444>)
 8026fc2:	9301      	str	r3, [sp, #4]
 8026fc4:	4b3c      	ldr	r3, [pc, #240]	; (80270b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x448>)
 8026fc6:	9300      	str	r3, [sp, #0]
 8026fc8:	238b      	movs	r3, #139	; 0x8b
 8026fca:	4a3c      	ldr	r2, [pc, #240]	; (80270bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44c>)
 8026fcc:	493c      	ldr	r1, [pc, #240]	; (80270c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x450>)
 8026fce:	68f8      	ldr	r0, [r7, #12]
 8026fd0:	47a0      	blx	r4
 8026fd2:	2401      	movs	r4, #1
 8026fd4:	e05e      	b.n	8027094 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x424>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8026fd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8026fda:	691b      	ldr	r3, [r3, #16]
 8026fdc:	2b00      	cmp	r3, #0
 8026fde:	d012      	beq.n	8027006 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x396>
 8026fe0:	68fb      	ldr	r3, [r7, #12]
 8026fe2:	691c      	ldr	r4, [r3, #16]
 8026fe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8026fe8:	691b      	ldr	r3, [r3, #16]
 8026fea:	2200      	movs	r2, #0
 8026fec:	9203      	str	r2, [sp, #12]
 8026fee:	9302      	str	r3, [sp, #8]
 8026ff0:	4b30      	ldr	r3, [pc, #192]	; (80270b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x444>)
 8026ff2:	9301      	str	r3, [sp, #4]
 8026ff4:	4b33      	ldr	r3, [pc, #204]	; (80270c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x454>)
 8026ff6:	9300      	str	r3, [sp, #0]
 8026ff8:	238c      	movs	r3, #140	; 0x8c
 8026ffa:	4a30      	ldr	r2, [pc, #192]	; (80270bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44c>)
 8026ffc:	4930      	ldr	r1, [pc, #192]	; (80270c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x450>)
 8026ffe:	68f8      	ldr	r0, [r7, #12]
 8027000:	47a0      	blx	r4
 8027002:	2401      	movs	r4, #1
 8027004:	e046      	b.n	8027094 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x424>
      buf_size = arm_convolve_wrapper_s16_get_buffer_size(
 8027006:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802700a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 802700e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8027012:	f107 0010 	add.w	r0, r7, #16
 8027016:	f7ed f9c2 	bl	801439e <arm_convolve_wrapper_s16_get_buffer_size>
 802701a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
          &conv_params, &input_dims, &filter_dims, &output_dims);
    }

    if (buf_size > 0) {
 802701e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8027022:	2b00      	cmp	r3, #0
 8027024:	dd12      	ble.n	802704c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3dc>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8027026:	68fb      	ldr	r3, [r7, #12]
 8027028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802702a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 802702e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8027032:	3238      	adds	r2, #56	; 0x38
 8027034:	68f8      	ldr	r0, [r7, #12]
 8027036:	4798      	blx	r3
 8027038:	4603      	mov	r3, r0
 802703a:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 802703e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8027042:	2b00      	cmp	r3, #0
 8027044:	d007      	beq.n	8027056 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>
 8027046:	f897 40b2 	ldrb.w	r4, [r7, #178]	; 0xb2
 802704a:	e023      	b.n	8027094 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x424>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 802704c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027050:	f04f 32ff 	mov.w	r2, #4294967295
 8027054:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  micro_context->DeallocateTempTfLiteTensor(output);
 8027056:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802705a:	681b      	ldr	r3, [r3, #0]
 802705c:	3324      	adds	r3, #36	; 0x24
 802705e:	681b      	ldr	r3, [r3, #0]
 8027060:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8027064:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8027068:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 802706a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802706e:	681b      	ldr	r3, [r3, #0]
 8027070:	3324      	adds	r3, #36	; 0x24
 8027072:	681b      	ldr	r3, [r3, #0]
 8027074:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8027078:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 802707c:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 802707e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8027082:	681b      	ldr	r3, [r3, #0]
 8027084:	3324      	adds	r3, #36	; 0x24
 8027086:	681b      	ldr	r3, [r3, #0]
 8027088:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 802708c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8027090:	4798      	blx	r3

  return kTfLiteOk;
 8027092:	2400      	movs	r4, #0
}
 8027094:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8027098:	4618      	mov	r0, r3
 802709a:	f7fe fad8 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 802709e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80270a2:	4618      	mov	r0, r3
 80270a4:	f7fe fad3 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 80270a8:	4623      	mov	r3, r4
 80270aa:	4618      	mov	r0, r3
 80270ac:	37dc      	adds	r7, #220	; 0xdc
 80270ae:	46bd      	mov	sp, r7
 80270b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80270b2:	bf00      	nop
 80270b4:	08032204 	.word	0x08032204
 80270b8:	08032208 	.word	0x08032208
 80270bc:	08032100 	.word	0x08032100
 80270c0:	080321e8 	.word	0x080321e8
 80270c4:	08032224 	.word	0x08032224

080270c8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>:
                                     const TfLiteConvParams& params,
                                     const OpData& data,
                                     const TfLiteEvalTensor* input,
                                     const TfLiteEvalTensor* filter,
                                     const TfLiteEvalTensor* bias,
                                     TfLiteEvalTensor* output) {
 80270c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80270ca:	b0c9      	sub	sp, #292	; 0x124
 80270cc:	af08      	add	r7, sp, #32
 80270ce:	6178      	str	r0, [r7, #20]
 80270d0:	6139      	str	r1, [r7, #16]
 80270d2:	60fa      	str	r2, [r7, #12]
 80270d4:	60bb      	str	r3, [r7, #8]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 80270d6:	68fb      	ldr	r3, [r7, #12]
 80270d8:	695b      	ldr	r3, [r3, #20]
 80270da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 80270de:	68fb      	ldr	r3, [r7, #12]
 80270e0:	691b      	ldr	r3, [r3, #16]
 80270e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  // Initialize cmsis_nn convolution parameters
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
 80270e6:	68bb      	ldr	r3, [r7, #8]
 80270e8:	691b      	ldr	r3, [r3, #16]
 80270ea:	425b      	negs	r3, r3
 80270ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  conv_params.output_offset = data.reference_op_data.output_zero_point;
 80270f0:	68bb      	ldr	r3, [r7, #8]
 80270f2:	699b      	ldr	r3, [r3, #24]
 80270f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  conv_params.stride.h = params.stride_height;
 80270f8:	68fb      	ldr	r3, [r7, #12]
 80270fa:	689b      	ldr	r3, [r3, #8]
 80270fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  conv_params.stride.w = params.stride_width;
 8027100:	68fb      	ldr	r3, [r7, #12]
 8027102:	685b      	ldr	r3, [r3, #4]
 8027104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  conv_params.padding.h = data.reference_op_data.padding.height;
 8027108:	68bb      	ldr	r3, [r7, #8]
 802710a:	685b      	ldr	r3, [r3, #4]
 802710c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  conv_params.padding.w = data.reference_op_data.padding.width;
 8027110:	68bb      	ldr	r3, [r7, #8]
 8027112:	681b      	ldr	r3, [r3, #0]
 8027114:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  conv_params.activation.min = data.reference_op_data.output_activation_min;
 8027118:	68bb      	ldr	r3, [r7, #8]
 802711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802711c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  conv_params.activation.max = data.reference_op_data.output_activation_max;
 8027120:	68bb      	ldr	r3, [r7, #8]
 8027122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027124:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

  // Initialize cmsis_nn per channel quantization parameters
  cmsis_nn_per_channel_quant_params quant_params;
  quant_params.multiplier = const_cast<int32_t*>(
      data.reference_op_data.per_channel_output_multiplier);
 8027128:	68bb      	ldr	r3, [r7, #8]
 802712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  quant_params.multiplier = const_cast<int32_t*>(
 802712c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  quant_params.shift =
      const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 8027130:	68bb      	ldr	r3, [r7, #8]
 8027132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  quant_params.shift =
 8027134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8027138:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802713c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8027140:	4618      	mov	r0, r3
 8027142:	f001 fc14 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8027146:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802714a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 802714e:	4618      	mov	r0, r3
 8027150:	f001 fc0d 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8027154:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8027158:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 802715c:	4618      	mov	r0, r3
 802715e:	f001 fc06 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8027162:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027166:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 802716a:	4618      	mov	r0, r3
 802716c:	f001 fbff 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  // Consistency check.
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8027170:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8027174:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8027178:	429a      	cmp	r2, r3
 802717a:	dd01      	ble.n	8027180 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0xb8>
 802717c:	f006 fbf4 	bl	802d968 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8027180:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8027184:	4618      	mov	r0, r3
 8027186:	f7ff f935 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802718a:	4603      	mov	r3, r0
 802718c:	2b04      	cmp	r3, #4
 802718e:	d001      	beq.n	8027194 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0xcc>
 8027190:	f006 fbea 	bl	802d968 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8027194:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027198:	4618      	mov	r0, r3
 802719a:	f7ff f92b 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802719e:	4603      	mov	r3, r0
 80271a0:	2b04      	cmp	r3, #4
 80271a2:	d001      	beq.n	80271a8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0xe0>
 80271a4:	f006 fbe0 	bl	802d968 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80271a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80271ac:	4618      	mov	r0, r3
 80271ae:	f7ff f921 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80271b2:	4603      	mov	r3, r0
 80271b4:	2b04      	cmp	r3, #4
 80271b6:	d001      	beq.n	80271bc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0xf4>
 80271b8:	f006 fbd6 	bl	802d968 <abort>
  const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 80271bc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80271c0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80271c4:	2300      	movs	r3, #0
 80271c6:	2100      	movs	r1, #0
 80271c8:	f7ff fd0c 	bl	8026be4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80271cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80271d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80271d4:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80271d8:	2303      	movs	r3, #3
 80271da:	2103      	movs	r1, #3
 80271dc:	f7ff fd02 	bl	8026be4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80271e0:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80271e4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80271e8:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80271ec:	2303      	movs	r3, #3
 80271ee:	2100      	movs	r1, #0
 80271f0:	f7ff fcf8 	bl	8026be4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80271f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
 80271f8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80271fc:	f000 fb52 	bl	80278a4 <_ZN6tflite5micro21GetOptionalTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8027200:	4603      	mov	r3, r0
 8027202:	2b00      	cmp	r3, #0
 8027204:	bf14      	ite	ne
 8027206:	2301      	movne	r3, #1
 8027208:	2300      	moveq	r3, #0
 802720a:	b2db      	uxtb	r3, r3
 802720c:	2b00      	cmp	r3, #0
 802720e:	d00b      	beq.n	8027228 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x160>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8027210:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027214:	4618      	mov	r0, r3
 8027216:	f7fe fa55 	bl	80256c4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 802721a:	4602      	mov	r2, r0
 802721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8027220:	4293      	cmp	r3, r2
 8027222:	d001      	beq.n	8027228 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x160>
 8027224:	f006 fba0 	bl	802d968 <abort>
  }

  // Initialize cmsis_nn dimensions
  // Input
  cmsis_nn_dims input_dims;
  input_dims.n = batch_size;
 8027228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802722c:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 802722e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8027232:	2101      	movs	r1, #1
 8027234:	4618      	mov	r0, r3
 8027236:	f7ff fc18 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 802723a:	4603      	mov	r3, r0
 802723c:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 802723e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8027242:	2102      	movs	r1, #2
 8027244:	4618      	mov	r0, r3
 8027246:	f7ff fc10 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 802724a:	4603      	mov	r3, r0
 802724c:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = input_depth;
 802724e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8027252:	663b      	str	r3, [r7, #96]	; 0x60

  // Filter
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_depth;
 8027254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8027258:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = filter_shape.Dims(1);
 802725a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802725e:	2101      	movs	r1, #1
 8027260:	4618      	mov	r0, r3
 8027262:	f7ff fc02 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8027266:	4603      	mov	r3, r0
 8027268:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = filter_shape.Dims(2);
 802726a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802726e:	2102      	movs	r1, #2
 8027270:	4618      	mov	r0, r3
 8027272:	f7ff fbfa 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8027276:	4603      	mov	r3, r0
 8027278:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = input_depth;
 802727a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802727e:	653b      	str	r3, [r7, #80]	; 0x50

  // Bias
  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 8027280:	2301      	movs	r3, #1
 8027282:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 8027284:	2301      	movs	r3, #1
 8027286:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 8027288:	2301      	movs	r3, #1
 802728a:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 802728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8027290:	643b      	str	r3, [r7, #64]	; 0x40

  // Output
  cmsis_nn_dims output_dims;
  output_dims.n = batch_size;
 8027292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8027296:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = output_shape.Dims(1);
 8027298:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802729c:	2101      	movs	r1, #1
 802729e:	4618      	mov	r0, r3
 80272a0:	f7ff fbe3 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 80272a4:	4603      	mov	r3, r0
 80272a6:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = output_shape.Dims(2);
 80272a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80272ac:	2102      	movs	r1, #2
 80272ae:	4618      	mov	r0, r3
 80272b0:	f7ff fbdb 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 80272b4:	4603      	mov	r3, r0
 80272b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 80272b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80272bc:	633b      	str	r3, [r7, #48]	; 0x30

  // Initialize cmsis_nn context
  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 80272be:	2300      	movs	r3, #0
 80272c0:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 80272c2:	2300      	movs	r3, #0
 80272c4:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 80272c6:	68bb      	ldr	r3, [r7, #8]
 80272c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80272ca:	2b00      	cmp	r3, #0
 80272cc:	db08      	blt.n	80272e0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x218>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80272ce:	697b      	ldr	r3, [r7, #20]
 80272d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80272d2:	68ba      	ldr	r2, [r7, #8]
 80272d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80272d6:	4611      	mov	r1, r2
 80272d8:	6978      	ldr	r0, [r7, #20]
 80272da:	4798      	blx	r3
 80272dc:	4603      	mov	r3, r0
 80272de:	61fb      	str	r3, [r7, #28]
    // arm_convolve_wrapper_s8_get_buffer_size
  }

  // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
  // the parameters passed
  TFLITE_DCHECK_EQ(
 80272e0:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80272e4:	f7ff fba3 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80272e8:	4605      	mov	r5, r0
 80272ea:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80272ee:	f7ff fb9e 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80272f2:	4606      	mov	r6, r0
 80272f4:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80272f8:	f000 fae5 	bl	80278c6 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80272fc:	6078      	str	r0, [r7, #4]
 80272fe:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8027302:	f7ff fba3 	bl	8026a4c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8027306:	4603      	mov	r3, r0
 8027308:	f107 0454 	add.w	r4, r7, #84	; 0x54
 802730c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8027310:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8027314:	f107 001c 	add.w	r0, r7, #28
 8027318:	9306      	str	r3, [sp, #24]
 802731a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802731e:	9305      	str	r3, [sp, #20]
 8027320:	687b      	ldr	r3, [r7, #4]
 8027322:	9304      	str	r3, [sp, #16]
 8027324:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8027328:	9303      	str	r3, [sp, #12]
 802732a:	9602      	str	r6, [sp, #8]
 802732c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8027330:	9301      	str	r3, [sp, #4]
 8027332:	9500      	str	r5, [sp, #0]
 8027334:	4623      	mov	r3, r4
 8027336:	f7ed f85d 	bl	80143f4 <arm_convolve_wrapper_s8>
 802733a:	4603      	mov	r3, r0
 802733c:	2b00      	cmp	r3, #0
 802733e:	d001      	beq.n	8027344 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x27c>
 8027340:	f006 fb12 	bl	802d968 <abort>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetOptionalTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
 8027344:	2400      	movs	r4, #0
}
 8027346:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802734a:	4618      	mov	r0, r3
 802734c:	f7fe f97f 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 8027350:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8027354:	4618      	mov	r0, r3
 8027356:	f7fe f97a 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 802735a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802735e:	4618      	mov	r0, r3
 8027360:	f7fe f975 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 8027364:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027368:	4618      	mov	r0, r3
 802736a:	f7fe f970 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 802736e:	4623      	mov	r3, r4
}
 8027370:	4618      	mov	r0, r3
 8027372:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8027376:	46bd      	mov	sp, r7
 8027378:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802737a <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedPerChannel16x8(
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output) {
 802737a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802737c:	b0c9      	sub	sp, #292	; 0x124
 802737e:	af08      	add	r7, sp, #32
 8027380:	6178      	str	r0, [r7, #20]
 8027382:	6139      	str	r1, [r7, #16]
 8027384:	60fa      	str	r2, [r7, #12]
 8027386:	60bb      	str	r3, [r7, #8]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 8027388:	68fb      	ldr	r3, [r7, #12]
 802738a:	695b      	ldr	r3, [r3, #20]
 802738c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 8027390:	68fb      	ldr	r3, [r7, #12]
 8027392:	691b      	ldr	r3, [r3, #16]
 8027394:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  // Initialize cmsis_nn convolution parameters
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
 8027398:	68bb      	ldr	r3, [r7, #8]
 802739a:	691b      	ldr	r3, [r3, #16]
 802739c:	425b      	negs	r3, r3
 802739e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  conv_params.output_offset = data.reference_op_data.output_zero_point;
 80273a2:	68bb      	ldr	r3, [r7, #8]
 80273a4:	699b      	ldr	r3, [r3, #24]
 80273a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  conv_params.stride.h = params.stride_height;
 80273aa:	68fb      	ldr	r3, [r7, #12]
 80273ac:	689b      	ldr	r3, [r3, #8]
 80273ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  conv_params.stride.w = params.stride_width;
 80273b2:	68fb      	ldr	r3, [r7, #12]
 80273b4:	685b      	ldr	r3, [r3, #4]
 80273b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  conv_params.padding.h = data.reference_op_data.padding.height;
 80273ba:	68bb      	ldr	r3, [r7, #8]
 80273bc:	685b      	ldr	r3, [r3, #4]
 80273be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  conv_params.padding.w = data.reference_op_data.padding.width;
 80273c2:	68bb      	ldr	r3, [r7, #8]
 80273c4:	681b      	ldr	r3, [r3, #0]
 80273c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  conv_params.activation.min = data.reference_op_data.output_activation_min;
 80273ca:	68bb      	ldr	r3, [r7, #8]
 80273cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80273ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  conv_params.activation.max = data.reference_op_data.output_activation_max;
 80273d2:	68bb      	ldr	r3, [r7, #8]
 80273d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80273d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

  // Initialize cmsis_nn per channel quantization parameters
  cmsis_nn_per_channel_quant_params quant_params;
  quant_params.multiplier = const_cast<int32_t*>(
      data.reference_op_data.per_channel_output_multiplier);
 80273da:	68bb      	ldr	r3, [r7, #8]
 80273dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  quant_params.multiplier = const_cast<int32_t*>(
 80273de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  quant_params.shift =
      const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 80273e2:	68bb      	ldr	r3, [r7, #8]
 80273e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  quant_params.shift =
 80273e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80273ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80273ee:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80273f2:	4618      	mov	r0, r3
 80273f4:	f001 fabb 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80273f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80273fc:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8027400:	4618      	mov	r0, r3
 8027402:	f001 fab4 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8027406:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802740a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 802740e:	4618      	mov	r0, r3
 8027410:	f001 faad 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8027414:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027418:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 802741c:	4618      	mov	r0, r3
 802741e:	f001 faa6 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  // Consistency check.
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8027422:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8027426:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 802742a:	429a      	cmp	r2, r3
 802742c:	dd01      	ble.n	8027432 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0xb8>
 802742e:	f006 fa9b 	bl	802d968 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8027432:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8027436:	4618      	mov	r0, r3
 8027438:	f7fe ffdc 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802743c:	4603      	mov	r3, r0
 802743e:	2b04      	cmp	r3, #4
 8027440:	d001      	beq.n	8027446 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0xcc>
 8027442:	f006 fa91 	bl	802d968 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8027446:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802744a:	4618      	mov	r0, r3
 802744c:	f7fe ffd2 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8027450:	4603      	mov	r3, r0
 8027452:	2b04      	cmp	r3, #4
 8027454:	d001      	beq.n	802745a <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0xe0>
 8027456:	f006 fa87 	bl	802d968 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 802745a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802745e:	4618      	mov	r0, r3
 8027460:	f7fe ffc8 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8027464:	4603      	mov	r3, r0
 8027466:	2b04      	cmp	r3, #4
 8027468:	d001      	beq.n	802746e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0xf4>
 802746a:	f006 fa7d 	bl	802d968 <abort>
  const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 802746e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8027472:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8027476:	2300      	movs	r3, #0
 8027478:	2100      	movs	r1, #0
 802747a:	f7ff fbb3 	bl	8026be4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802747e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8027482:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027486:	f107 0094 	add.w	r0, r7, #148	; 0x94
 802748a:	2303      	movs	r3, #3
 802748c:	2103      	movs	r1, #3
 802748e:	f7ff fba9 	bl	8026be4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8027492:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8027496:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802749a:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 802749e:	2303      	movs	r3, #3
 80274a0:	2100      	movs	r1, #0
 80274a2:	f7ff fb9f 	bl	8026be4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80274a6:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
 80274aa:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80274ae:	f000 f9f9 	bl	80278a4 <_ZN6tflite5micro21GetOptionalTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80274b2:	4603      	mov	r3, r0
 80274b4:	2b00      	cmp	r3, #0
 80274b6:	bf14      	ite	ne
 80274b8:	2301      	movne	r3, #1
 80274ba:	2300      	moveq	r3, #0
 80274bc:	b2db      	uxtb	r3, r3
 80274be:	2b00      	cmp	r3, #0
 80274c0:	d00b      	beq.n	80274da <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x160>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80274c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80274c6:	4618      	mov	r0, r3
 80274c8:	f7fe f8fc 	bl	80256c4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80274cc:	4602      	mov	r2, r0
 80274ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80274d2:	4293      	cmp	r3, r2
 80274d4:	d001      	beq.n	80274da <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x160>
 80274d6:	f006 fa47 	bl	802d968 <abort>
  }

  // Initialize cmsis_nn dimensions
  // Input
  cmsis_nn_dims input_dims;
  input_dims.n = batch_size;
 80274da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80274de:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 80274e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80274e4:	2101      	movs	r1, #1
 80274e6:	4618      	mov	r0, r3
 80274e8:	f7ff fabf 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 80274ec:	4603      	mov	r3, r0
 80274ee:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 80274f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80274f4:	2102      	movs	r1, #2
 80274f6:	4618      	mov	r0, r3
 80274f8:	f7ff fab7 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 80274fc:	4603      	mov	r3, r0
 80274fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = input_depth;
 8027500:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8027504:	663b      	str	r3, [r7, #96]	; 0x60

  // Filter
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_depth;
 8027506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802750a:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = filter_shape.Dims(1);
 802750c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027510:	2101      	movs	r1, #1
 8027512:	4618      	mov	r0, r3
 8027514:	f7ff faa9 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8027518:	4603      	mov	r3, r0
 802751a:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = filter_shape.Dims(2);
 802751c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027520:	2102      	movs	r1, #2
 8027522:	4618      	mov	r0, r3
 8027524:	f7ff faa1 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8027528:	4603      	mov	r3, r0
 802752a:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = input_depth;
 802752c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8027530:	653b      	str	r3, [r7, #80]	; 0x50

  // Bias
  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 8027532:	2301      	movs	r3, #1
 8027534:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 8027536:	2301      	movs	r3, #1
 8027538:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 802753a:	2301      	movs	r3, #1
 802753c:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 802753e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8027542:	643b      	str	r3, [r7, #64]	; 0x40

  // Output
  cmsis_nn_dims output_dims;
  output_dims.n = batch_size;
 8027544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8027548:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = output_shape.Dims(1);
 802754a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802754e:	2101      	movs	r1, #1
 8027550:	4618      	mov	r0, r3
 8027552:	f7ff fa8a 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8027556:	4603      	mov	r3, r0
 8027558:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = output_shape.Dims(2);
 802755a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802755e:	2102      	movs	r1, #2
 8027560:	4618      	mov	r0, r3
 8027562:	f7ff fa82 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8027566:	4603      	mov	r3, r0
 8027568:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 802756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802756e:	633b      	str	r3, [r7, #48]	; 0x30

  // Initialize cmsis_nn context
  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8027570:	2300      	movs	r3, #0
 8027572:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 8027574:	2300      	movs	r3, #0
 8027576:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 8027578:	68bb      	ldr	r3, [r7, #8]
 802757a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802757c:	2b00      	cmp	r3, #0
 802757e:	db08      	blt.n	8027592 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x218>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8027580:	697b      	ldr	r3, [r7, #20]
 8027582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027584:	68ba      	ldr	r2, [r7, #8]
 8027586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8027588:	4611      	mov	r1, r2
 802758a:	6978      	ldr	r0, [r7, #20]
 802758c:	4798      	blx	r3
 802758e:	4603      	mov	r3, r0
 8027590:	61fb      	str	r3, [r7, #28]
    // Note: ctx.size is currently not used in cmsis_nn.
    // The buffer should be allocated in the Prepare function through
    // arm_convolve_wrapper_s8_get_buffer_size
  }

  TFLITE_DCHECK_EQ(
 8027592:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8027596:	f7ff fadf 	bl	8026b58 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 802759a:	4605      	mov	r5, r0
 802759c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80275a0:	f7ff fa45 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80275a4:	4606      	mov	r6, r0
 80275a6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80275aa:	f000 f99d 	bl	80278e8 <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor>
 80275ae:	6078      	str	r0, [r7, #4]
 80275b0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80275b4:	f7ff fadf 	bl	8026b76 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 80275b8:	4603      	mov	r3, r0
 80275ba:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80275be:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80275c2:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80275c6:	f107 001c 	add.w	r0, r7, #28
 80275ca:	9306      	str	r3, [sp, #24]
 80275cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80275d0:	9305      	str	r3, [sp, #20]
 80275d2:	687b      	ldr	r3, [r7, #4]
 80275d4:	9304      	str	r3, [sp, #16]
 80275d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80275da:	9303      	str	r3, [sp, #12]
 80275dc:	9602      	str	r6, [sp, #8]
 80275de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80275e2:	9301      	str	r3, [sp, #4]
 80275e4:	9500      	str	r5, [sp, #0]
 80275e6:	4623      	mov	r3, r4
 80275e8:	f7ec fe8e 	bl	8014308 <arm_convolve_wrapper_s16>
 80275ec:	4603      	mov	r3, r0
 80275ee:	2b00      	cmp	r3, #0
 80275f0:	d001      	beq.n	80275f6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x27c>
 80275f2:	f006 f9b9 	bl	802d968 <abort>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetOptionalTensorData<int64_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int16_t>(output)),
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
 80275f6:	2400      	movs	r4, #0
}
 80275f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80275fc:	4618      	mov	r0, r3
 80275fe:	f7fe f826 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 8027602:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8027606:	4618      	mov	r0, r3
 8027608:	f7fe f821 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 802760c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8027610:	4618      	mov	r0, r3
 8027612:	f7fe f81c 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 8027616:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802761a:	4618      	mov	r0, r3
 802761c:	f7fe f817 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 8027620:	4623      	mov	r3, r4
}
 8027622:	4618      	mov	r0, r3
 8027624:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8027628:	46bd      	mov	sp, r7
 802762a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802762c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

  return EvalQuantizedPerChannel16x8(context, node, params, data, input, filter,
                                     bias, output);
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 802762c:	b590      	push	{r4, r7, lr}
 802762e:	b0bf      	sub	sp, #252	; 0xfc
 8027630:	af04      	add	r7, sp, #16
 8027632:	6078      	str	r0, [r7, #4]
 8027634:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 8027636:	4b84      	ldr	r3, [pc, #528]	; (8027848 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21c>)
 8027638:	681b      	ldr	r3, [r3, #0]
 802763a:	461a      	mov	r2, r3
 802763c:	6839      	ldr	r1, [r7, #0]
 802763e:	6878      	ldr	r0, [r7, #4]
 8027640:	f001 f965 	bl	802890e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8027644:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 8027648:	4b80      	ldr	r3, [pc, #512]	; (802784c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x220>)
 802764a:	681b      	ldr	r3, [r3, #0]
 802764c:	461a      	mov	r2, r3
 802764e:	6839      	ldr	r1, [r7, #0]
 8027650:	6878      	ldr	r0, [r7, #4]
 8027652:	f001 f95c 	bl	802890e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8027656:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 802765a:	6838      	ldr	r0, [r7, #0]
 802765c:	f7fe f891 	bl	8025782 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8027660:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 8027662:	2b03      	cmp	r3, #3
 8027664:	d108      	bne.n	8027678 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4c>
 8027666:	4b7a      	ldr	r3, [pc, #488]	; (8027850 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>)
 8027668:	681b      	ldr	r3, [r3, #0]
 802766a:	461a      	mov	r2, r3
 802766c:	6839      	ldr	r1, [r7, #0]
 802766e:	6878      	ldr	r0, [r7, #4]
 8027670:	f001 f94d 	bl	802890e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8027674:	4603      	mov	r3, r0
 8027676:	e000      	b.n	802767a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e>
 8027678:	2300      	movs	r3, #0
          : nullptr;
 802767a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 802767e:	4b75      	ldr	r3, [pc, #468]	; (8027854 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x228>)
 8027680:	681b      	ldr	r3, [r3, #0]
 8027682:	461a      	mov	r2, r3
 8027684:	6839      	ldr	r1, [r7, #0]
 8027686:	6878      	ldr	r0, [r7, #4]
 8027688:	f001 f951 	bl	802892e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802768c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

  TFLITE_DCHECK(node->builtin_data != nullptr);
 8027690:	683b      	ldr	r3, [r7, #0]
 8027692:	695b      	ldr	r3, [r3, #20]
 8027694:	2b00      	cmp	r3, #0
 8027696:	d101      	bne.n	802769c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
 8027698:	f006 f966 	bl	802d968 <abort>
  const auto& params =
 802769c:	683b      	ldr	r3, [r7, #0]
 802769e:	695b      	ldr	r3, [r3, #20]
 80276a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 80276a4:	683b      	ldr	r3, [r7, #0]
 80276a6:	691b      	ldr	r3, [r3, #16]
 80276a8:	2b00      	cmp	r3, #0
 80276aa:	d101      	bne.n	80276b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
 80276ac:	f006 f95c 	bl	802d968 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80276b0:	683b      	ldr	r3, [r7, #0]
 80276b2:	691b      	ldr	r3, [r3, #16]
 80276b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 80276b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80276bc:	7a1a      	ldrb	r2, [r3, #8]
 80276be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80276c2:	7a1b      	ldrb	r3, [r3, #8]
 80276c4:	429a      	cmp	r2, r3
 80276c6:	d016      	beq.n	80276f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xca>
 80276c8:	687b      	ldr	r3, [r7, #4]
 80276ca:	691c      	ldr	r4, [r3, #16]
 80276cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80276d0:	7a1b      	ldrb	r3, [r3, #8]
 80276d2:	461a      	mov	r2, r3
 80276d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80276d8:	7a1b      	ldrb	r3, [r3, #8]
 80276da:	9303      	str	r3, [sp, #12]
 80276dc:	9202      	str	r2, [sp, #8]
 80276de:	4b5e      	ldr	r3, [pc, #376]	; (8027858 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 80276e0:	9301      	str	r3, [sp, #4]
 80276e2:	4b5e      	ldr	r3, [pc, #376]	; (802785c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>)
 80276e4:	9300      	str	r3, [sp, #0]
 80276e6:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80276ea:	4a5d      	ldr	r2, [pc, #372]	; (8027860 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x234>)
 80276ec:	495d      	ldr	r1, [pc, #372]	; (8027864 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x238>)
 80276ee:	6878      	ldr	r0, [r7, #4]
 80276f0:	47a0      	blx	r4
 80276f2:	2301      	movs	r3, #1
 80276f4:	e0a4      	b.n	8027840 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x214>
  TF_LITE_ENSURE_MSG(
 80276f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80276fa:	7a1a      	ldrb	r2, [r3, #8]
 80276fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8027700:	7a1b      	ldrb	r3, [r3, #8]
 8027702:	429a      	cmp	r2, r3
 8027704:	d01a      	beq.n	802773c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x110>
 8027706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802770a:	7a1b      	ldrb	r3, [r3, #8]
 802770c:	2b07      	cmp	r3, #7
 802770e:	d104      	bne.n	802771a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xee>
 8027710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8027714:	7a1b      	ldrb	r3, [r3, #8]
 8027716:	2b09      	cmp	r3, #9
 8027718:	d010      	beq.n	802773c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x110>
 802771a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802771e:	7a1b      	ldrb	r3, [r3, #8]
 8027720:	2b09      	cmp	r3, #9
 8027722:	d104      	bne.n	802772e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
 8027724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8027728:	7a1b      	ldrb	r3, [r3, #8]
 802772a:	2b12      	cmp	r3, #18
 802772c:	d006      	beq.n	802773c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x110>
 802772e:	687b      	ldr	r3, [r7, #4]
 8027730:	691b      	ldr	r3, [r3, #16]
 8027732:	494d      	ldr	r1, [pc, #308]	; (8027868 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
 8027734:	6878      	ldr	r0, [r7, #4]
 8027736:	4798      	blx	r3
 8027738:	2301      	movs	r3, #1
 802773a:	e081      	b.n	8027840 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x214>
          (input->type == kTfLiteInt16 && filter->type == kTfLiteInt8) ||
          (input->type == kTfLiteInt8 && filter->type == kTfLiteInt4),
      "Hybrid models are not supported on TFLite Micro.");

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
      context, data.reference_op_data.filter_buffer_index, filter);
 802773c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
 8027742:	f107 0008 	add.w	r0, r7, #8
 8027746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802774a:	6879      	ldr	r1, [r7, #4]
 802774c:	f001 f931 	bl	80289b2 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>

  switch (input->type) {  // Already know in/out types are same.
 8027750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027754:	7a1b      	ldrb	r3, [r3, #8]
 8027756:	2b09      	cmp	r3, #9
 8027758:	d01a      	beq.n	8027790 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x164>
 802775a:	2b09      	cmp	r3, #9
 802775c:	dc5c      	bgt.n	8027818 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>
 802775e:	2b01      	cmp	r3, #1
 8027760:	d002      	beq.n	8027768 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13c>
 8027762:	2b07      	cmp	r3, #7
 8027764:	d042      	beq.n	80277ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
 8027766:	e057      	b.n	8027818 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>
    case kTfLiteFloat32: {
#if EI_TFLITE_DISABLE_CONV_2D_IN_F32
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8027768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802776c:	7a1b      	ldrb	r3, [r3, #8]
 802776e:	4618      	mov	r0, r3
 8027770:	f7fd fec4 	bl	80254fc <TfLiteTypeGetName>
 8027774:	4603      	mov	r3, r0
 8027776:	617b      	str	r3, [r7, #20]
 8027778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802777c:	f103 0208 	add.w	r2, r3, #8
 8027780:	f107 0314 	add.w	r3, r7, #20
 8027784:	4619      	mov	r1, r3
 8027786:	4839      	ldr	r0, [pc, #228]	; (802786c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
 8027788:	f7ff fa20 	bl	8026bcc <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 802778c:	2301      	movs	r3, #1
 802778e:	e057      	b.n	8027840 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x214>
#if EI_TFLITE_DISABLE_CONV_2D_IN_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
      switch (filter_int8.type) {
 8027790:	7c3b      	ldrb	r3, [r7, #16]
 8027792:	2b09      	cmp	r3, #9
 8027794:	d115      	bne.n	80277c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x196>
        case kTfLiteInt8: {
          return EvalQuantizedPerChannel(context, node, params, data, input,
 8027796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802779a:	9303      	str	r3, [sp, #12]
 802779c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80277a0:	9302      	str	r3, [sp, #8]
 80277a2:	f107 0308 	add.w	r3, r7, #8
 80277a6:	9301      	str	r3, [sp, #4]
 80277a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80277ac:	9300      	str	r3, [sp, #0]
 80277ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80277b2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80277b6:	6839      	ldr	r1, [r7, #0]
 80277b8:	6878      	ldr	r0, [r7, #4]
 80277ba:	f7ff fc85 	bl	80270c8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>
 80277be:	4603      	mov	r3, r0
                                         &filter_int8, bias, output);
 80277c0:	e03e      	b.n	8027840 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x214>
        }

        default: {
          MicroPrintf("Filter type %s (%d) not supported.",
 80277c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80277c6:	7a1b      	ldrb	r3, [r3, #8]
 80277c8:	4618      	mov	r0, r3
 80277ca:	f7fd fe97 	bl	80254fc <TfLiteTypeGetName>
 80277ce:	4603      	mov	r3, r0
 80277d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80277d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80277d8:	f103 0208 	add.w	r2, r3, #8
 80277dc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80277e0:	4619      	mov	r1, r3
 80277e2:	4823      	ldr	r0, [pc, #140]	; (8027870 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
 80277e4:	f000 f891 	bl	802790a <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                      TfLiteTypeGetName(filter->type), filter->type);
          return kTfLiteError;
 80277e8:	2301      	movs	r3, #1
 80277ea:	e029      	b.n	8027840 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x214>
        }
      }

      break;
    case kTfLiteInt16:
      return EvalQuantizedPerChannel16x8(context, node, params, data, input,
 80277ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80277f0:	9303      	str	r3, [sp, #12]
 80277f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80277f6:	9302      	str	r3, [sp, #8]
 80277f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80277fc:	9301      	str	r3, [sp, #4]
 80277fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027802:	9300      	str	r3, [sp, #0]
 8027804:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027808:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 802780c:	6839      	ldr	r1, [r7, #0]
 802780e:	6878      	ldr	r0, [r7, #4]
 8027810:	f7ff fdb3 	bl	802737a <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>
 8027814:	4603      	mov	r3, r0
                                         filter, bias, output);
 8027816:	e013      	b.n	8027840 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x214>
      break;
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8027818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802781c:	7a1b      	ldrb	r3, [r3, #8]
 802781e:	4618      	mov	r0, r3
 8027820:	f7fd fe6c 	bl	80254fc <TfLiteTypeGetName>
 8027824:	4603      	mov	r3, r0
 8027826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802782a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802782e:	f103 0208 	add.w	r2, r3, #8
 8027832:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8027836:	4619      	mov	r1, r3
 8027838:	480c      	ldr	r0, [pc, #48]	; (802786c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
 802783a:	f7ff f9c7 	bl	8026bcc <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 802783e:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 8027840:	4618      	mov	r0, r3
 8027842:	37ec      	adds	r7, #236	; 0xec
 8027844:	46bd      	mov	sp, r7
 8027846:	bd90      	pop	{r4, r7, pc}
 8027848:	0803401c 	.word	0x0803401c
 802784c:	08034020 	.word	0x08034020
 8027850:	08034024 	.word	0x08034024
 8027854:	08034028 	.word	0x08034028
 8027858:	08032240 	.word	0x08032240
 802785c:	08032250 	.word	0x08032250
 8027860:	08032100 	.word	0x08032100
 8027864:	080321e8 	.word	0x080321e8
 8027868:	0803225c 	.word	0x0803225c
 802786c:	08032320 	.word	0x08032320
 8027870:	0803233c 	.word	0x0803233c

08027874 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 8027874:	b580      	push	{r7, lr}
 8027876:	b084      	sub	sp, #16
 8027878:	af02      	add	r7, sp, #8
 802787a:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 802787c:	6878      	ldr	r0, [r7, #4]
 802787e:	2300      	movs	r3, #0
 8027880:	9300      	str	r3, [sp, #0]
 8027882:	4b05      	ldr	r3, [pc, #20]	; (8027898 <_ZN6tflite16Register_CONV_2DEv+0x24>)
 8027884:	4a05      	ldr	r2, [pc, #20]	; (802789c <_ZN6tflite16Register_CONV_2DEv+0x28>)
 8027886:	4906      	ldr	r1, [pc, #24]	; (80278a0 <_ZN6tflite16Register_CONV_2DEv+0x2c>)
 8027888:	f000 ffe8 	bl	802885c <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 802788c:	bf00      	nop
}
 802788e:	6878      	ldr	r0, [r7, #4]
 8027890:	3708      	adds	r7, #8
 8027892:	46bd      	mov	sp, r7
 8027894:	bd80      	pop	{r7, pc}
 8027896:	bf00      	nop
 8027898:	0802762d 	.word	0x0802762d
 802789c:	08026c71 	.word	0x08026c71
 80278a0:	08026c43 	.word	0x08026c43

080278a4 <_ZN6tflite5micro21GetOptionalTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
  return tensor == nullptr ? nullptr : reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 80278a4:	b480      	push	{r7}
 80278a6:	b083      	sub	sp, #12
 80278a8:	af00      	add	r7, sp, #0
 80278aa:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 80278ac:	687b      	ldr	r3, [r7, #4]
 80278ae:	2b00      	cmp	r3, #0
 80278b0:	d002      	beq.n	80278b8 <_ZN6tflite5micro21GetOptionalTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x14>
 80278b2:	687b      	ldr	r3, [r7, #4]
 80278b4:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 80278b6:	e000      	b.n	80278ba <_ZN6tflite5micro21GetOptionalTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 80278b8:	2300      	movs	r3, #0
}
 80278ba:	4618      	mov	r0, r3
 80278bc:	370c      	adds	r7, #12
 80278be:	46bd      	mov	sp, r7
 80278c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278c4:	4770      	bx	lr

080278c6 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 80278c6:	b480      	push	{r7}
 80278c8:	b083      	sub	sp, #12
 80278ca:	af00      	add	r7, sp, #0
 80278cc:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 80278ce:	687b      	ldr	r3, [r7, #4]
 80278d0:	2b00      	cmp	r3, #0
 80278d2:	d002      	beq.n	80278da <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x14>
 80278d4:	687b      	ldr	r3, [r7, #4]
 80278d6:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 80278d8:	e000      	b.n	80278dc <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 80278da:	2300      	movs	r3, #0
}
 80278dc:	4618      	mov	r0, r3
 80278de:	370c      	adds	r7, #12
 80278e0:	46bd      	mov	sp, r7
 80278e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278e6:	4770      	bx	lr

080278e8 <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 80278e8:	b480      	push	{r7}
 80278ea:	b083      	sub	sp, #12
 80278ec:	af00      	add	r7, sp, #0
 80278ee:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 80278f0:	687b      	ldr	r3, [r7, #4]
 80278f2:	2b00      	cmp	r3, #0
 80278f4:	d002      	beq.n	80278fc <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x14>
 80278f6:	687b      	ldr	r3, [r7, #4]
 80278f8:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 80278fa:	e000      	b.n	80278fe <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 80278fc:	2300      	movs	r3, #0
}
 80278fe:	4618      	mov	r0, r3
 8027900:	370c      	adds	r7, #12
 8027902:	46bd      	mov	sp, r7
 8027904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027908:	4770      	bx	lr

0802790a <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 802790a:	b480      	push	{r7}
 802790c:	b085      	sub	sp, #20
 802790e:	af00      	add	r7, sp, #0
 8027910:	60f8      	str	r0, [r7, #12]
 8027912:	60b9      	str	r1, [r7, #8]
 8027914:	607a      	str	r2, [r7, #4]
}
 8027916:	bf00      	nop
 8027918:	3714      	adds	r7, #20
 802791a:	46bd      	mov	sp, r7
 802791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027920:	4770      	bx	lr

08027922 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8027922:	b480      	push	{r7}
 8027924:	b087      	sub	sp, #28
 8027926:	af00      	add	r7, sp, #0
 8027928:	60f8      	str	r0, [r7, #12]
 802792a:	60b9      	str	r1, [r7, #8]
 802792c:	607a      	str	r2, [r7, #4]
 802792e:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8027930:	683b      	ldr	r3, [r7, #0]
 8027932:	3b01      	subs	r3, #1
 8027934:	68ba      	ldr	r2, [r7, #8]
 8027936:	fb02 f303 	mul.w	r3, r2, r3
 802793a:	3301      	adds	r3, #1
 802793c:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 802793e:	6a3b      	ldr	r3, [r7, #32]
 8027940:	3b01      	subs	r3, #1
 8027942:	68fa      	ldr	r2, [r7, #12]
 8027944:	fb03 f202 	mul.w	r2, r3, r2
 8027948:	697b      	ldr	r3, [r7, #20]
 802794a:	441a      	add	r2, r3
  int total_padding =
 802794c:	687b      	ldr	r3, [r7, #4]
 802794e:	1ad3      	subs	r3, r2, r3
 8027950:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8027952:	693b      	ldr	r3, [r7, #16]
 8027954:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027958:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 802795a:	693b      	ldr	r3, [r7, #16]
 802795c:	2b00      	cmp	r3, #0
 802795e:	f003 0301 	and.w	r3, r3, #1
 8027962:	bfb8      	it	lt
 8027964:	425b      	neglt	r3, r3
 8027966:	461a      	mov	r2, r3
 8027968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802796a:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 802796c:	693b      	ldr	r3, [r7, #16]
 802796e:	0fda      	lsrs	r2, r3, #31
 8027970:	4413      	add	r3, r2
 8027972:	105b      	asrs	r3, r3, #1
}
 8027974:	4618      	mov	r0, r3
 8027976:	371c      	adds	r7, #28
 8027978:	46bd      	mov	sp, r7
 802797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802797e:	4770      	bx	lr

08027980 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8027980:	b480      	push	{r7}
 8027982:	b087      	sub	sp, #28
 8027984:	af00      	add	r7, sp, #0
 8027986:	60b9      	str	r1, [r7, #8]
 8027988:	607a      	str	r2, [r7, #4]
 802798a:	603b      	str	r3, [r7, #0]
 802798c:	4603      	mov	r3, r0
 802798e:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8027990:	687b      	ldr	r3, [r7, #4]
 8027992:	3b01      	subs	r3, #1
 8027994:	6a3a      	ldr	r2, [r7, #32]
 8027996:	fb02 f303 	mul.w	r3, r2, r3
 802799a:	3301      	adds	r3, #1
 802799c:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 802799e:	683b      	ldr	r3, [r7, #0]
 80279a0:	2b00      	cmp	r3, #0
 80279a2:	d101      	bne.n	80279a8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 80279a4:	2300      	movs	r3, #0
 80279a6:	e017      	b.n	80279d8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 80279a8:	7bfb      	ldrb	r3, [r7, #15]
 80279aa:	2b01      	cmp	r3, #1
 80279ac:	d002      	beq.n	80279b4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 80279ae:	2b02      	cmp	r3, #2
 80279b0:	d008      	beq.n	80279c4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 80279b2:	e010      	b.n	80279d6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 80279b4:	68ba      	ldr	r2, [r7, #8]
 80279b6:	683b      	ldr	r3, [r7, #0]
 80279b8:	4413      	add	r3, r2
 80279ba:	1e5a      	subs	r2, r3, #1
 80279bc:	683b      	ldr	r3, [r7, #0]
 80279be:	fb92 f3f3 	sdiv	r3, r2, r3
 80279c2:	e009      	b.n	80279d8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 80279c4:	68ba      	ldr	r2, [r7, #8]
 80279c6:	683b      	ldr	r3, [r7, #0]
 80279c8:	441a      	add	r2, r3
 80279ca:	697b      	ldr	r3, [r7, #20]
 80279cc:	1ad2      	subs	r2, r2, r3
 80279ce:	683b      	ldr	r3, [r7, #0]
 80279d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80279d4:	e000      	b.n	80279d8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 80279d6:	2300      	movs	r3, #0
  }
}
 80279d8:	4618      	mov	r0, r3
 80279da:	371c      	adds	r7, #28
 80279dc:	46bd      	mov	sp, r7
 80279de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279e2:	4770      	bx	lr

080279e4 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 80279e4:	b580      	push	{r7, lr}
 80279e6:	b088      	sub	sp, #32
 80279e8:	af02      	add	r7, sp, #8
 80279ea:	60f8      	str	r0, [r7, #12]
 80279ec:	60b9      	str	r1, [r7, #8]
 80279ee:	607a      	str	r2, [r7, #4]
 80279f0:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 80279f2:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 80279f6:	6a3b      	ldr	r3, [r7, #32]
 80279f8:	9300      	str	r3, [sp, #0]
 80279fa:	687b      	ldr	r3, [r7, #4]
 80279fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80279fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8027a00:	f7ff ffbe 	bl	8027980 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8027a04:	4602      	mov	r2, r0
 8027a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027a08:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8027a0a:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8027a0e:	683b      	ldr	r3, [r7, #0]
 8027a10:	9300      	str	r3, [sp, #0]
 8027a12:	68bb      	ldr	r3, [r7, #8]
 8027a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8027a18:	f7ff ffb2 	bl	8027980 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8027a1c:	4602      	mov	r2, r0
 8027a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027a20:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8027a22:	2300      	movs	r3, #0
 8027a24:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8027a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027a28:	681b      	ldr	r3, [r3, #0]
 8027a2a:	f107 0214 	add.w	r2, r7, #20
 8027a2e:	9201      	str	r2, [sp, #4]
 8027a30:	9300      	str	r3, [sp, #0]
 8027a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027a36:	6839      	ldr	r1, [r7, #0]
 8027a38:	68b8      	ldr	r0, [r7, #8]
 8027a3a:	f7ff ff72 	bl	8027922 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8027a3e:	4602      	mov	r2, r0
  padding_values.height =
 8027a40:	68fb      	ldr	r3, [r7, #12]
 8027a42:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8027a44:	697a      	ldr	r2, [r7, #20]
 8027a46:	68fb      	ldr	r3, [r7, #12]
 8027a48:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8027a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027a4c:	681b      	ldr	r3, [r3, #0]
 8027a4e:	f107 0214 	add.w	r2, r7, #20
 8027a52:	9201      	str	r2, [sp, #4]
 8027a54:	9300      	str	r3, [sp, #0]
 8027a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027a5a:	6a39      	ldr	r1, [r7, #32]
 8027a5c:	6878      	ldr	r0, [r7, #4]
 8027a5e:	f7ff ff60 	bl	8027922 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8027a62:	4602      	mov	r2, r0
  padding_values.width =
 8027a64:	68fb      	ldr	r3, [r7, #12]
 8027a66:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 8027a68:	697a      	ldr	r2, [r7, #20]
 8027a6a:	68fb      	ldr	r3, [r7, #12]
 8027a6c:	609a      	str	r2, [r3, #8]
  return padding_values;
 8027a6e:	bf00      	nop
}
 8027a70:	68f8      	ldr	r0, [r7, #12]
 8027a72:	3718      	adds	r7, #24
 8027a74:	46bd      	mov	sp, r7
 8027a76:	bd80      	pop	{r7, pc}

08027a78 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 8027a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027a7a:	b09d      	sub	sp, #116	; 0x74
 8027a7c:	af0a      	add	r7, sp, #40	; 0x28
 8027a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8027a80:	6239      	str	r1, [r7, #32]
 8027a82:	61fa      	str	r2, [r7, #28]
 8027a84:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8027a86:	6a3b      	ldr	r3, [r7, #32]
 8027a88:	681b      	ldr	r3, [r3, #0]
 8027a8a:	681b      	ldr	r3, [r3, #0]
 8027a8c:	2b03      	cmp	r3, #3
 8027a8e:	bf0c      	ite	eq
 8027a90:	2301      	moveq	r3, #1
 8027a92:	2300      	movne	r3, #0
 8027a94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8027a98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8027a9c:	f083 0301 	eor.w	r3, r3, #1
 8027aa0:	b2db      	uxtb	r3, r3
 8027aa2:	2b00      	cmp	r3, #0
 8027aa4:	d00f      	beq.n	8027ac6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8027aa6:	6a3b      	ldr	r3, [r7, #32]
 8027aa8:	681b      	ldr	r3, [r3, #0]
 8027aaa:	681b      	ldr	r3, [r3, #0]
 8027aac:	2b02      	cmp	r3, #2
 8027aae:	d00a      	beq.n	8027ac6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8027ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027ab2:	691c      	ldr	r4, [r3, #16]
 8027ab4:	4b7e      	ldr	r3, [pc, #504]	; (8027cb0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x238>)
 8027ab6:	9300      	str	r3, [sp, #0]
 8027ab8:	2352      	movs	r3, #82	; 0x52
 8027aba:	4a7e      	ldr	r2, [pc, #504]	; (8027cb4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x23c>)
 8027abc:	497e      	ldr	r1, [pc, #504]	; (8027cb8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x240>)
 8027abe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027ac0:	47a0      	blx	r4
 8027ac2:	2301      	movs	r3, #1
 8027ac4:	e0f0      	b.n	8027ca8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8027ac6:	6a3b      	ldr	r3, [r7, #32]
 8027ac8:	685b      	ldr	r3, [r3, #4]
 8027aca:	681b      	ldr	r3, [r3, #0]
 8027acc:	2b01      	cmp	r3, #1
 8027ace:	d012      	beq.n	8027af6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 8027ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027ad2:	691c      	ldr	r4, [r3, #16]
 8027ad4:	6a3b      	ldr	r3, [r7, #32]
 8027ad6:	685b      	ldr	r3, [r3, #4]
 8027ad8:	681b      	ldr	r3, [r3, #0]
 8027ada:	2201      	movs	r2, #1
 8027adc:	9203      	str	r2, [sp, #12]
 8027ade:	9302      	str	r3, [sp, #8]
 8027ae0:	4b76      	ldr	r3, [pc, #472]	; (8027cbc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x244>)
 8027ae2:	9301      	str	r3, [sp, #4]
 8027ae4:	4b76      	ldr	r3, [pc, #472]	; (8027cc0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x248>)
 8027ae6:	9300      	str	r3, [sp, #0]
 8027ae8:	2353      	movs	r3, #83	; 0x53
 8027aea:	4a72      	ldr	r2, [pc, #456]	; (8027cb4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x23c>)
 8027aec:	4975      	ldr	r1, [pc, #468]	; (8027cc4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x24c>)
 8027aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027af0:	47a0      	blx	r4
 8027af2:	2301      	movs	r3, #1
 8027af4:	e0d8      	b.n	8027ca8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 8027af6:	69fb      	ldr	r3, [r7, #28]
 8027af8:	781b      	ldrb	r3, [r3, #0]
 8027afa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 8027afe:	69fb      	ldr	r3, [r7, #28]
 8027b00:	6899      	ldr	r1, [r3, #8]
 8027b02:	69fb      	ldr	r3, [r7, #28]
 8027b04:	685c      	ldr	r4, [r3, #4]
 8027b06:	69fb      	ldr	r3, [r7, #28]
 8027b08:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 8027b0a:	69fb      	ldr	r3, [r7, #28]
 8027b0c:	691b      	ldr	r3, [r3, #16]
  data->padding = ComputePaddingHeightWidth(
 8027b0e:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8027b10:	f107 0008 	add.w	r0, r7, #8
 8027b14:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027b18:	9207      	str	r2, [sp, #28]
 8027b1a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8027b1e:	9206      	str	r2, [sp, #24]
 8027b20:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8027b24:	9205      	str	r2, [sp, #20]
 8027b26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8027b28:	9204      	str	r2, [sp, #16]
 8027b2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8027b2c:	9203      	str	r2, [sp, #12]
 8027b2e:	69ba      	ldr	r2, [r7, #24]
 8027b30:	9202      	str	r2, [sp, #8]
 8027b32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8027b34:	9201      	str	r2, [sp, #4]
 8027b36:	9300      	str	r3, [sp, #0]
 8027b38:	462b      	mov	r3, r5
 8027b3a:	4622      	mov	r2, r4
 8027b3c:	f7ff ff52 	bl	80279e4 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8027b40:	4634      	mov	r4, r6
 8027b42:	f107 0308 	add.w	r3, r7, #8
 8027b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      padding, &out_height, &out_width);

  MicroContext* micro_context = GetMicroContext(context);
 8027b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027b4e:	f7fe fef6 	bl	802693e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8027b52:	6438      	str	r0, [r7, #64]	; 0x40

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 8027b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027b56:	681b      	ldr	r3, [r3, #0]
 8027b58:	3318      	adds	r3, #24
 8027b5a:	681b      	ldr	r3, [r3, #0]
 8027b5c:	2200      	movs	r2, #0
 8027b5e:	6a39      	ldr	r1, [r7, #32]
 8027b60:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027b62:	4798      	blx	r3
 8027b64:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, input != nullptr);
 8027b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027b68:	2b00      	cmp	r3, #0
 8027b6a:	d10a      	bne.n	8027b82 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10a>
 8027b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027b6e:	691c      	ldr	r4, [r3, #16]
 8027b70:	4b55      	ldr	r3, [pc, #340]	; (8027cc8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x250>)
 8027b72:	9300      	str	r3, [sp, #0]
 8027b74:	2360      	movs	r3, #96	; 0x60
 8027b76:	4a4f      	ldr	r2, [pc, #316]	; (8027cb4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x23c>)
 8027b78:	494f      	ldr	r1, [pc, #316]	; (8027cb8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x240>)
 8027b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027b7c:	47a0      	blx	r4
 8027b7e:	2301      	movs	r3, #1
 8027b80:	e092      	b.n	8027ca8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>
  TfLiteTensor* filter =
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
 8027b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027b84:	681b      	ldr	r3, [r3, #0]
 8027b86:	3318      	adds	r3, #24
 8027b88:	681b      	ldr	r3, [r3, #0]
 8027b8a:	2201      	movs	r2, #1
 8027b8c:	6a39      	ldr	r1, [r7, #32]
 8027b8e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027b90:	4798      	blx	r3
 8027b92:	63b8      	str	r0, [r7, #56]	; 0x38
  TF_LITE_ENSURE(context, filter != nullptr);
 8027b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027b96:	2b00      	cmp	r3, #0
 8027b98:	d10a      	bne.n	8027bb0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x138>
 8027b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027b9c:	691c      	ldr	r4, [r3, #16]
 8027b9e:	4b4b      	ldr	r3, [pc, #300]	; (8027ccc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x254>)
 8027ba0:	9300      	str	r3, [sp, #0]
 8027ba2:	2363      	movs	r3, #99	; 0x63
 8027ba4:	4a43      	ldr	r2, [pc, #268]	; (8027cb4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x23c>)
 8027ba6:	4944      	ldr	r1, [pc, #272]	; (8027cb8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x240>)
 8027ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027baa:	47a0      	blx	r4
 8027bac:	2301      	movs	r3, #1
 8027bae:	e07b      	b.n	8027ca8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
 8027bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027bb2:	681b      	ldr	r3, [r3, #0]
 8027bb4:	3318      	adds	r3, #24
 8027bb6:	681b      	ldr	r3, [r3, #0]
 8027bb8:	2202      	movs	r2, #2
 8027bba:	6a39      	ldr	r1, [r7, #32]
 8027bbc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027bbe:	4798      	blx	r3
 8027bc0:	6378      	str	r0, [r7, #52]	; 0x34
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 8027bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027bc4:	681b      	ldr	r3, [r3, #0]
 8027bc6:	331c      	adds	r3, #28
 8027bc8:	681b      	ldr	r3, [r3, #0]
 8027bca:	2200      	movs	r2, #0
 8027bcc:	6a39      	ldr	r1, [r7, #32]
 8027bce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027bd0:	4798      	blx	r3
 8027bd2:	6338      	str	r0, [r7, #48]	; 0x30
  TF_LITE_ENSURE(context, output != nullptr);
 8027bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027bd6:	2b00      	cmp	r3, #0
 8027bd8:	d10a      	bne.n	8027bf0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x178>
 8027bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027bdc:	691c      	ldr	r4, [r3, #16]
 8027bde:	4b3c      	ldr	r3, [pc, #240]	; (8027cd0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x258>)
 8027be0:	9300      	str	r3, [sp, #0]
 8027be2:	2368      	movs	r3, #104	; 0x68
 8027be4:	4a33      	ldr	r2, [pc, #204]	; (8027cb4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x23c>)
 8027be6:	4934      	ldr	r1, [pc, #208]	; (8027cb8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x240>)
 8027be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027bea:	47a0      	blx	r4
 8027bec:	2301      	movs	r3, #1
 8027bee:	e05b      	b.n	8027ca8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8027bf0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8027bf4:	2b01      	cmp	r3, #1
 8027bf6:	d02e      	beq.n	8027c56 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1de>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 8027bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027bfa:	689b      	ldr	r3, [r3, #8]
 8027bfc:	685b      	ldr	r3, [r3, #4]
 8027bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8027c00:	69fb      	ldr	r3, [r7, #28]
 8027c02:	330c      	adds	r3, #12
 8027c04:	607b      	str	r3, [r7, #4]
 8027c06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8027c08:	321c      	adds	r2, #28
 8027c0a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8027c0c:	3120      	adds	r1, #32
 8027c0e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8027c10:	302c      	adds	r0, #44	; 0x2c
 8027c12:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8027c14:	3430      	adds	r4, #48	; 0x30
 8027c16:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8027c18:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8027c1a:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8027c1c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8027c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027c20:	9308      	str	r3, [sp, #32]
 8027c22:	9607      	str	r6, [sp, #28]
 8027c24:	9506      	str	r5, [sp, #24]
 8027c26:	9405      	str	r4, [sp, #20]
 8027c28:	9004      	str	r0, [sp, #16]
 8027c2a:	9103      	str	r1, [sp, #12]
 8027c2c:	9202      	str	r2, [sp, #8]
 8027c2e:	687b      	ldr	r3, [r7, #4]
 8027c30:	9301      	str	r3, [sp, #4]
 8027c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027c34:	9300      	str	r3, [sp, #0]
 8027c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027c3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8027c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027c3e:	f7fd fffd 	bl	8025c3c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 8027c42:	4603      	mov	r3, r0
 8027c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8027c48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8027c4c:	2b00      	cmp	r3, #0
 8027c4e:	d002      	beq.n	8027c56 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1de>
 8027c50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8027c54:	e028      	b.n	8027ca8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 8027c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027c58:	691a      	ldr	r2, [r3, #16]
 8027c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027c5c:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 8027c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027c60:	691a      	ldr	r2, [r3, #16]
 8027c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027c64:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 8027c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027c68:	691a      	ldr	r2, [r3, #16]
 8027c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027c6c:	619a      	str	r2, [r3, #24]

  micro_context->DeallocateTempTfLiteTensor(input);
 8027c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027c70:	681b      	ldr	r3, [r3, #0]
 8027c72:	3324      	adds	r3, #36	; 0x24
 8027c74:	681b      	ldr	r3, [r3, #0]
 8027c76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8027c78:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027c7a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 8027c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027c7e:	681b      	ldr	r3, [r3, #0]
 8027c80:	3324      	adds	r3, #36	; 0x24
 8027c82:	681b      	ldr	r3, [r3, #0]
 8027c84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8027c86:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027c88:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8027c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027c8c:	681b      	ldr	r3, [r3, #0]
 8027c8e:	3324      	adds	r3, #36	; 0x24
 8027c90:	681b      	ldr	r3, [r3, #0]
 8027c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8027c94:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027c96:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(bias);
 8027c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027c9a:	681b      	ldr	r3, [r3, #0]
 8027c9c:	3324      	adds	r3, #36	; 0x24
 8027c9e:	681b      	ldr	r3, [r3, #0]
 8027ca0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8027ca2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027ca4:	4798      	blx	r3

  return kTfLiteOk;
 8027ca6:	2300      	movs	r3, #0
}
 8027ca8:	4618      	mov	r0, r3
 8027caa:	374c      	adds	r7, #76	; 0x4c
 8027cac:	46bd      	mov	sp, r7
 8027cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027cb0:	08032414 	.word	0x08032414
 8027cb4:	08032360 	.word	0x08032360
 8027cb8:	080323fc 	.word	0x080323fc
 8027cbc:	08032454 	.word	0x08032454
 8027cc0:	08032458 	.word	0x08032458
 8027cc4:	08032438 	.word	0x08032438
 8027cc8:	0803246c 	.word	0x0803246c
 8027ccc:	08032480 	.word	0x08032480
 8027cd0:	08032494 	.word	0x08032494

08027cd4 <_ZN6tflite6UnusedIJRA41_KcPS1_EEEvDpOT_>:
void Unused(Args&&... args) {
 8027cd4:	b480      	push	{r7}
 8027cd6:	b083      	sub	sp, #12
 8027cd8:	af00      	add	r7, sp, #0
 8027cda:	6078      	str	r0, [r7, #4]
 8027cdc:	6039      	str	r1, [r7, #0]
}
 8027cde:	bf00      	nop
 8027ce0:	370c      	adds	r7, #12
 8027ce2:	46bd      	mov	sp, r7
 8027ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ce8:	4770      	bx	lr

08027cea <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8027cea:	b580      	push	{r7, lr}
 8027cec:	b086      	sub	sp, #24
 8027cee:	af00      	add	r7, sp, #0
 8027cf0:	6078      	str	r0, [r7, #4]
 8027cf2:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8027cf4:	6878      	ldr	r0, [r7, #4]
 8027cf6:	f7fe fb7d 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8027cfa:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8027cfc:	683b      	ldr	r3, [r7, #0]
 8027cfe:	2b00      	cmp	r3, #0
 8027d00:	db03      	blt.n	8027d0a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8027d02:	683a      	ldr	r2, [r7, #0]
 8027d04:	68fb      	ldr	r3, [r7, #12]
 8027d06:	429a      	cmp	r2, r3
 8027d08:	db01      	blt.n	8027d0e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8027d0a:	f005 fe2d 	bl	802d968 <abort>
  const auto* dims_data = shape.DimsData();
 8027d0e:	6878      	ldr	r0, [r7, #4]
 8027d10:	f7fd fcb4 	bl	802567c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8027d14:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8027d16:	2301      	movs	r3, #1
 8027d18:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8027d1a:	2300      	movs	r3, #0
 8027d1c:	613b      	str	r3, [r7, #16]
 8027d1e:	e011      	b.n	8027d44 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8027d20:	693a      	ldr	r2, [r7, #16]
 8027d22:	683b      	ldr	r3, [r7, #0]
 8027d24:	429a      	cmp	r2, r3
 8027d26:	d005      	beq.n	8027d34 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 8027d28:	693b      	ldr	r3, [r7, #16]
 8027d2a:	009b      	lsls	r3, r3, #2
 8027d2c:	68ba      	ldr	r2, [r7, #8]
 8027d2e:	4413      	add	r3, r2
 8027d30:	681b      	ldr	r3, [r3, #0]
 8027d32:	e000      	b.n	8027d36 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 8027d34:	2301      	movs	r3, #1
 8027d36:	697a      	ldr	r2, [r7, #20]
 8027d38:	fb02 f303 	mul.w	r3, r2, r3
 8027d3c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8027d3e:	693b      	ldr	r3, [r7, #16]
 8027d40:	3301      	adds	r3, #1
 8027d42:	613b      	str	r3, [r7, #16]
 8027d44:	693a      	ldr	r2, [r7, #16]
 8027d46:	68fb      	ldr	r3, [r7, #12]
 8027d48:	429a      	cmp	r2, r3
 8027d4a:	dbe9      	blt.n	8027d20 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 8027d4c:	697b      	ldr	r3, [r7, #20]
}
 8027d4e:	4618      	mov	r0, r3
 8027d50:	3718      	adds	r7, #24
 8027d52:	46bd      	mov	sp, r7
 8027d54:	bd80      	pop	{r7, pc}

08027d56 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t batches;
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8027d56:	b580      	push	{r7, lr}
 8027d58:	b084      	sub	sp, #16
 8027d5a:	af00      	add	r7, sp, #0
 8027d5c:	60f8      	str	r0, [r7, #12]
 8027d5e:	60b9      	str	r1, [r7, #8]
 8027d60:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8027d62:	68fb      	ldr	r3, [r7, #12]
 8027d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027d66:	2b00      	cmp	r3, #0
 8027d68:	d101      	bne.n	8027d6e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8027d6a:	f005 fdfd 	bl	802d968 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8027d6e:	68fb      	ldr	r3, [r7, #12]
 8027d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027d72:	213c      	movs	r1, #60	; 0x3c
 8027d74:	68f8      	ldr	r0, [r7, #12]
 8027d76:	4798      	blx	r3
 8027d78:	4603      	mov	r3, r0
}
 8027d7a:	4618      	mov	r0, r3
 8027d7c:	3710      	adds	r7, #16
 8027d7e:	46bd      	mov	sp, r7
 8027d80:	bd80      	pop	{r7, pc}
	...

08027d84 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8027d84:	b5b0      	push	{r4, r5, r7, lr}
 8027d86:	b0b4      	sub	sp, #208	; 0xd0
 8027d88:	af04      	add	r7, sp, #16
 8027d8a:	6078      	str	r0, [r7, #4]
 8027d8c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8027d8e:	683b      	ldr	r3, [r7, #0]
 8027d90:	691b      	ldr	r3, [r3, #16]
 8027d92:	2b00      	cmp	r3, #0
 8027d94:	d101      	bne.n	8027d9a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8027d96:	f005 fde7 	bl	802d968 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8027d9a:	683b      	ldr	r3, [r7, #0]
 8027d9c:	695b      	ldr	r3, [r3, #20]
 8027d9e:	2b00      	cmp	r3, #0
 8027da0:	d101      	bne.n	8027da6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8027da2:	f005 fde1 	bl	802d968 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8027da6:	683b      	ldr	r3, [r7, #0]
 8027da8:	691b      	ldr	r3, [r3, #16]
 8027daa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const auto params =
 8027dae:	683b      	ldr	r3, [r7, #0]
 8027db0:	695b      	ldr	r3, [r3, #20]
 8027db2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
 8027db6:	6878      	ldr	r0, [r7, #4]
 8027db8:	f7fe fdc1 	bl	802693e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8027dbc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 8027dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8027dc4:	681b      	ldr	r3, [r3, #0]
 8027dc6:	3318      	adds	r3, #24
 8027dc8:	681b      	ldr	r3, [r3, #0]
 8027dca:	4ab6      	ldr	r2, [pc, #728]	; (80280a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
 8027dcc:	6812      	ldr	r2, [r2, #0]
 8027dce:	6839      	ldr	r1, [r7, #0]
 8027dd0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8027dd4:	4798      	blx	r3
 8027dd6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  TF_LITE_ENSURE(context, input != nullptr);
 8027dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8027dde:	2b00      	cmp	r3, #0
 8027de0:	d10a      	bne.n	8027df8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x74>
 8027de2:	687b      	ldr	r3, [r7, #4]
 8027de4:	691c      	ldr	r4, [r3, #16]
 8027de6:	4bb0      	ldr	r3, [pc, #704]	; (80280a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 8027de8:	9300      	str	r3, [sp, #0]
 8027dea:	2347      	movs	r3, #71	; 0x47
 8027dec:	4aaf      	ldr	r2, [pc, #700]	; (80280ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8027dee:	49b0      	ldr	r1, [pc, #704]	; (80280b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8027df0:	6878      	ldr	r0, [r7, #4]
 8027df2:	47a0      	blx	r4
 8027df4:	2401      	movs	r4, #1
 8027df6:	e1f0      	b.n	80281da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x456>
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 8027df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8027dfc:	681b      	ldr	r3, [r3, #0]
 8027dfe:	3318      	adds	r3, #24
 8027e00:	681b      	ldr	r3, [r3, #0]
 8027e02:	4aac      	ldr	r2, [pc, #688]	; (80280b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8027e04:	6812      	ldr	r2, [r2, #0]
 8027e06:	6839      	ldr	r1, [r7, #0]
 8027e08:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8027e0c:	4798      	blx	r3
 8027e0e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 8027e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8027e16:	2b00      	cmp	r3, #0
 8027e18:	d10a      	bne.n	8027e30 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 8027e1a:	687b      	ldr	r3, [r7, #4]
 8027e1c:	691c      	ldr	r4, [r3, #16]
 8027e1e:	4ba6      	ldr	r3, [pc, #664]	; (80280b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
 8027e20:	9300      	str	r3, [sp, #0]
 8027e22:	234a      	movs	r3, #74	; 0x4a
 8027e24:	4aa1      	ldr	r2, [pc, #644]	; (80280ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8027e26:	49a2      	ldr	r1, [pc, #648]	; (80280b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8027e28:	6878      	ldr	r0, [r7, #4]
 8027e2a:	47a0      	blx	r4
 8027e2c:	2401      	movs	r4, #1
 8027e2e:	e1d4      	b.n	80281da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x456>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 8027e30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8027e34:	681b      	ldr	r3, [r3, #0]
 8027e36:	3318      	adds	r3, #24
 8027e38:	681b      	ldr	r3, [r3, #0]
 8027e3a:	4aa0      	ldr	r2, [pc, #640]	; (80280bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
 8027e3c:	6812      	ldr	r2, [r2, #0]
 8027e3e:	6839      	ldr	r1, [r7, #0]
 8027e40:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8027e44:	4798      	blx	r3
 8027e46:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 8027e4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8027e4e:	681b      	ldr	r3, [r3, #0]
 8027e50:	331c      	adds	r3, #28
 8027e52:	681b      	ldr	r3, [r3, #0]
 8027e54:	4a9a      	ldr	r2, [pc, #616]	; (80280c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
 8027e56:	6812      	ldr	r2, [r2, #0]
 8027e58:	6839      	ldr	r1, [r7, #0]
 8027e5a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8027e5e:	4798      	blx	r3
 8027e60:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
      node, kFullyConnectedOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 8027e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8027e68:	2b00      	cmp	r3, #0
 8027e6a:	d10a      	bne.n	8027e82 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 8027e6c:	687b      	ldr	r3, [r7, #4]
 8027e6e:	691c      	ldr	r4, [r3, #16]
 8027e70:	4b94      	ldr	r3, [pc, #592]	; (80280c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
 8027e72:	9300      	str	r3, [sp, #0]
 8027e74:	234f      	movs	r3, #79	; 0x4f
 8027e76:	4a8d      	ldr	r2, [pc, #564]	; (80280ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8027e78:	498d      	ldr	r1, [pc, #564]	; (80280b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8027e7a:	6878      	ldr	r0, [r7, #4]
 8027e7c:	47a0      	blx	r4
 8027e7e:	2401      	movs	r4, #1
 8027e80:	e1ab      	b.n	80281da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x456>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8027e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8027e86:	781a      	ldrb	r2, [r3, #0]
 8027e88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8027e8c:	781b      	ldrb	r3, [r3, #0]
 8027e8e:	429a      	cmp	r2, r3
 8027e90:	d01c      	beq.n	8027ecc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 8027e92:	687b      	ldr	r3, [r7, #4]
 8027e94:	691c      	ldr	r4, [r3, #16]
 8027e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8027e9a:	781b      	ldrb	r3, [r3, #0]
 8027e9c:	4618      	mov	r0, r3
 8027e9e:	f7fd fb2d 	bl	80254fc <TfLiteTypeGetName>
 8027ea2:	4605      	mov	r5, r0
 8027ea4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8027ea8:	781b      	ldrb	r3, [r3, #0]
 8027eaa:	4618      	mov	r0, r3
 8027eac:	f7fd fb26 	bl	80254fc <TfLiteTypeGetName>
 8027eb0:	4603      	mov	r3, r0
 8027eb2:	9303      	str	r3, [sp, #12]
 8027eb4:	9502      	str	r5, [sp, #8]
 8027eb6:	4b84      	ldr	r3, [pc, #528]	; (80280c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
 8027eb8:	9301      	str	r3, [sp, #4]
 8027eba:	4b84      	ldr	r3, [pc, #528]	; (80280cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
 8027ebc:	9300      	str	r3, [sp, #0]
 8027ebe:	2351      	movs	r3, #81	; 0x51
 8027ec0:	4a7a      	ldr	r2, [pc, #488]	; (80280ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8027ec2:	4983      	ldr	r1, [pc, #524]	; (80280d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
 8027ec4:	6878      	ldr	r0, [r7, #4]
 8027ec6:	47a0      	blx	r4
 8027ec8:	2401      	movs	r4, #1
 8027eca:	e186      	b.n	80281da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x456>

  const RuntimeShape filter_shape = GetTensorShape(filter);
 8027ecc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8027ed0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8027ed4:	4618      	mov	r0, r3
 8027ed6:	f7fd fc18 	bl	802570a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8027eda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027ede:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8027ee2:	4618      	mov	r0, r3
 8027ee4:	f7fd fc11 	bl	802570a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8027ee8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8027eec:	4618      	mov	r0, r3
 8027eee:	f7fe fa81 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8027ef2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  const int output_dim_count = output_shape.DimensionsCount();
 8027ef6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027efa:	4618      	mov	r0, r3
 8027efc:	f7fe fa7a 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8027f00:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  cmsis_nn_dims filter_dims;
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8027f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8027f08:	1e5a      	subs	r2, r3, #1
 8027f0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8027f0e:	4611      	mov	r1, r2
 8027f10:	4618      	mov	r0, r3
 8027f12:	f7fe fdaa 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8027f16:	4603      	mov	r3, r0
 8027f18:	633b      	str	r3, [r7, #48]	; 0x30
  filter_dims.h = 1;
 8027f1a:	2301      	movs	r3, #1
 8027f1c:	637b      	str	r3, [r7, #52]	; 0x34
  filter_dims.w = 1;
 8027f1e:	2301      	movs	r3, #1
 8027f20:	63bb      	str	r3, [r7, #56]	; 0x38
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 8027f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8027f26:	1e5a      	subs	r2, r3, #1
 8027f28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027f2c:	4611      	mov	r1, r2
 8027f2e:	4618      	mov	r0, r3
 8027f30:	f7fe fd9b 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8027f34:	4603      	mov	r3, r0
 8027f36:	63fb      	str	r3, [r7, #60]	; 0x3c

  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8027f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8027f3c:	1e5a      	subs	r2, r3, #1
 8027f3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8027f42:	4611      	mov	r1, r2
 8027f44:	4618      	mov	r0, r3
 8027f46:	f7fe fd90 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8027f4a:	4602      	mov	r2, r0
 8027f4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027f50:	635a      	str	r2, [r3, #52]	; 0x34
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8027f52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8027f56:	1e5a      	subs	r2, r3, #1
 8027f58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027f5c:	4611      	mov	r1, r2
 8027f5e:	4618      	mov	r0, r3
 8027f60:	f7ff fec3 	bl	8027cea <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8027f64:	4602      	mov	r2, r0
 8027f66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027f6a:	631a      	str	r2, [r3, #48]	; 0x30
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 8027f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8027f70:	1e5a      	subs	r2, r3, #1
 8027f72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027f76:	4611      	mov	r1, r2
 8027f78:	4618      	mov	r0, r3
 8027f7a:	f7fe fd76 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8027f7e:	4602      	mov	r2, r0
 8027f80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027f84:	639a      	str	r2, [r3, #56]	; 0x38

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8027f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8027f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 8027f90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8027f94:	7819      	ldrb	r1, [r3, #0]
 8027f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8027f9a:	781a      	ldrb	r2, [r3, #0]
 8027f9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027fa0:	9303      	str	r3, [sp, #12]
 8027fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8027fa6:	9302      	str	r3, [sp, #8]
 8027fa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8027fac:	9301      	str	r3, [sp, #4]
 8027fae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8027fb2:	9300      	str	r3, [sp, #0]
 8027fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8027fb8:	6878      	ldr	r0, [r7, #4]
 8027fba:	f000 fbd7 	bl	802876c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 8027fbe:	4603      	mov	r3, r0
 8027fc0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8027fc4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8027fc8:	2b00      	cmp	r3, #0
 8027fca:	d002      	beq.n	8027fd2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24e>
 8027fcc:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8027fd0:	e0f9      	b.n	80281c6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x442>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  int32_t buf_size = 0;
 8027fd2:	2300      	movs	r3, #0
 8027fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (input->type == kTfLiteInt16) {
 8027fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8027fdc:	781b      	ldrb	r3, [r3, #0]
 8027fde:	2b07      	cmp	r3, #7
 8027fe0:	d10f      	bne.n	8028002 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27e>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I16
        MicroPrintf("Filter data type %s currently not supported.",
 8027fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8027fe6:	781b      	ldrb	r3, [r3, #0]
 8027fe8:	4618      	mov	r0, r3
 8027fea:	f7fd fa87 	bl	80254fc <TfLiteTypeGetName>
 8027fee:	4603      	mov	r3, r0
 8027ff0:	673b      	str	r3, [r7, #112]	; 0x70
 8027ff2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8027ff6:	4619      	mov	r1, r3
 8027ff8:	4836      	ldr	r0, [pc, #216]	; (80280d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
 8027ffa:	f7fe fcac 	bl	8026956 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8027ffe:	2401      	movs	r4, #1
 8028000:	e0e1      	b.n	80281c6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x442>
#endif
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
  } else if (input->type == kTfLiteInt8) {
 8028002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8028006:	781b      	ldrb	r3, [r3, #0]
 8028008:	2b09      	cmp	r3, #9
 802800a:	d171      	bne.n	80280f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36c>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I8
        MicroPrintf("Filter data type %s currently not supported.",
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
#endif
    const RuntimeShape input_shape = GetTensorShape(input);
 802800c:	f107 0318 	add.w	r3, r7, #24
 8028010:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8028014:	4618      	mov	r0, r3
 8028016:	f7fd fb78 	bl	802570a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_GE(output_dim_count, 2);
 802801a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802801e:	2b01      	cmp	r3, #1
 8028020:	dc01      	bgt.n	8028026 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a2>
 8028022:	f005 fca1 	bl	802d968 <abort>
    TFLITE_DCHECK_LE(output_dim_count, 4);
 8028026:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802802a:	2b04      	cmp	r3, #4
 802802c:	dd01      	ble.n	8028032 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ae>
 802802e:	f005 fc9b 	bl	802d968 <abort>

#if EI_TFLITE_DISABLE_CONV_2D_IN_I8
    buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
#else
    if (output_dim_count > 2 && data->accum_depth % 4 == 0) {
 8028032:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8028036:	2b02      	cmp	r3, #2
 8028038:	dd4e      	ble.n	80280d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>
 802803a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802803e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028040:	f003 0303 	and.w	r3, r3, #3
 8028044:	2b00      	cmp	r3, #0
 8028046:	d147      	bne.n	80280d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>
      data->per_channel_output_multiplier =
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8028048:	687b      	ldr	r3, [r7, #4]
 802804a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
              context, data->output_depth * sizeof(int32_t)));
 802804c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8028050:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8028052:	0092      	lsls	r2, r2, #2
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8028054:	4611      	mov	r1, r2
 8028056:	6878      	ldr	r0, [r7, #4]
 8028058:	4798      	blx	r3
 802805a:	4602      	mov	r2, r0
      data->per_channel_output_multiplier =
 802805c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8028060:	625a      	str	r2, [r3, #36]	; 0x24
      data->per_channel_output_shift =
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8028062:	687b      	ldr	r3, [r7, #4]
 8028064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
              context, data->output_depth * sizeof(int32_t)));
 8028066:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802806a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802806c:	0092      	lsls	r2, r2, #2
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 802806e:	4611      	mov	r1, r2
 8028070:	6878      	ldr	r0, [r7, #4]
 8028072:	4798      	blx	r3
 8028074:	4602      	mov	r2, r0
      data->per_channel_output_shift =
 8028076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802807a:	629a      	str	r2, [r3, #40]	; 0x28

      cmsis_nn_dims input_dims;
      input_dims.n = data->batches;
 802807c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8028080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028082:	60bb      	str	r3, [r7, #8]
      input_dims.h = 1;
 8028084:	2301      	movs	r3, #1
 8028086:	60fb      	str	r3, [r7, #12]
      input_dims.w = 1;
 8028088:	2301      	movs	r3, #1
 802808a:	613b      	str	r3, [r7, #16]
      input_dims.c = data->accum_depth;
 802808c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8028090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028092:	617b      	str	r3, [r7, #20]

      buf_size = arm_convolve_1x1_s8_fast_get_buffer_size(&input_dims);
 8028094:	f107 0308 	add.w	r3, r7, #8
 8028098:	4618      	mov	r0, r3
 802809a:	f7ea fc54 	bl	8012946 <arm_convolve_1x1_s8_fast_get_buffer_size>
 802809e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
    } else {
 80280a2:	e020      	b.n	80280e6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x362>
 80280a4:	08034030 	.word	0x08034030
 80280a8:	08032614 	.word	0x08032614
 80280ac:	0803255c 	.word	0x0803255c
 80280b0:	080325fc 	.word	0x080325fc
 80280b4:	08034034 	.word	0x08034034
 80280b8:	08032628 	.word	0x08032628
 80280bc:	08034038 	.word	0x08034038
 80280c0:	0803403c 	.word	0x0803403c
 80280c4:	0803263c 	.word	0x0803263c
 80280c8:	0803266c 	.word	0x0803266c
 80280cc:	0803267c 	.word	0x0803267c
 80280d0:	08032650 	.word	0x08032650
 80280d4:	08032688 	.word	0x08032688
      buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
 80280d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80280dc:	4618      	mov	r0, r3
 80280de:	f7ee fa3b 	bl	8016558 <arm_fully_connected_s8_get_buffer_size>
 80280e2:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
    }
#endif
  }
 80280e6:	f107 0318 	add.w	r3, r7, #24
 80280ea:	4618      	mov	r0, r3
 80280ec:	f7fd faaf 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>

  if (filter->type == kTfLiteInt4) {
 80280f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80280f4:	781b      	ldrb	r3, [r3, #0]
 80280f6:	2b12      	cmp	r3, #18
 80280f8:	d121      	bne.n	802813e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3ba>
    int filter_size =
        RuntimeShape(filter->dims->size,
 80280fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80280fe:	689b      	ldr	r3, [r3, #8]
 8028100:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 8028102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8028106:	689b      	ldr	r3, [r3, #8]
 8028108:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 802810a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 802810e:	4618      	mov	r0, r3
 8028110:	f7fd fa8a 	bl	8025628 <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 8028114:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8028118:	4618      	mov	r0, r3
 802811a:	f7fd fad3 	bl	80256c4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 802811e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        RuntimeShape(filter->dims->size,
 8028122:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8028126:	4618      	mov	r0, r3
 8028128:	f7fd fa91 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(
 802812c:	687b      	ldr	r3, [r7, #4]
 802812e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028130:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8028134:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8028138:	3220      	adds	r2, #32
 802813a:	6878      	ldr	r0, [r7, #4]
 802813c:	4798      	blx	r3
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (buf_size > 0) {
 802813e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8028142:	2b00      	cmp	r3, #0
 8028144:	dd12      	ble.n	802816c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e8>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8028146:	687b      	ldr	r3, [r7, #4]
 8028148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802814a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 802814e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8028152:	322c      	adds	r2, #44	; 0x2c
 8028154:	6878      	ldr	r0, [r7, #4]
 8028156:	4798      	blx	r3
 8028158:	4603      	mov	r3, r0
 802815a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 802815e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8028162:	2b00      	cmp	r3, #0
 8028164:	d002      	beq.n	802816c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e8>
 8028166:	f897 408f 	ldrb.w	r4, [r7, #143]	; 0x8f
 802816a:	e02c      	b.n	80281c6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x442>
        context, buf_size, &data->buffer_idx));
  }

  micro_context->DeallocateTempTfLiteTensor(output);
 802816c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8028170:	681b      	ldr	r3, [r3, #0]
 8028172:	3324      	adds	r3, #36	; 0x24
 8028174:	681b      	ldr	r3, [r3, #0]
 8028176:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 802817a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 802817e:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 8028180:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8028184:	681b      	ldr	r3, [r3, #0]
 8028186:	3324      	adds	r3, #36	; 0x24
 8028188:	681b      	ldr	r3, [r3, #0]
 802818a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 802818e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8028192:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 8028194:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8028198:	681b      	ldr	r3, [r3, #0]
 802819a:	3324      	adds	r3, #36	; 0x24
 802819c:	681b      	ldr	r3, [r3, #0]
 802819e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80281a2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80281a6:	4798      	blx	r3
  if (bias != nullptr) {
 80281a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80281ac:	2b00      	cmp	r3, #0
 80281ae:	d009      	beq.n	80281c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x440>
    micro_context->DeallocateTempTfLiteTensor(bias);
 80281b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80281b4:	681b      	ldr	r3, [r3, #0]
 80281b6:	3324      	adds	r3, #36	; 0x24
 80281b8:	681b      	ldr	r3, [r3, #0]
 80281ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80281be:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80281c2:	4798      	blx	r3
  }

  return kTfLiteOk;
 80281c4:	2400      	movs	r4, #0
}
 80281c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80281ca:	4618      	mov	r0, r3
 80281cc:	f7fd fa3f 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 80281d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80281d4:	4618      	mov	r0, r3
 80281d6:	f7fd fa3a 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 80281da:	4623      	mov	r3, r4
 80281dc:	4618      	mov	r0, r3
 80281de:	37c0      	adds	r7, #192	; 0xc0
 80281e0:	46bd      	mov	sp, r7
 80281e2:	bdb0      	pop	{r4, r5, r7, pc}

080281e4 <_ZN6tflite12_GLOBAL__N_120PopulateCommonParamsEP13TfLiteContextP32cmsis_nn_per_tensor_quant_paramsP13cmsis_nn_dimsS6_S6_S6_P16cmsis_nn_contextRKNS0_6OpDataE>:
                          cmsis_nn_per_tensor_quant_params* const quant_params,
                          cmsis_nn_dims* const input_dims,
                          cmsis_nn_dims* const filter_dims,
                          cmsis_nn_dims* const bias_dims,
                          cmsis_nn_dims* const output_dims,
                          cmsis_nn_context* const ctx, const OpData& data) {
 80281e4:	b580      	push	{r7, lr}
 80281e6:	b084      	sub	sp, #16
 80281e8:	af00      	add	r7, sp, #0
 80281ea:	60f8      	str	r0, [r7, #12]
 80281ec:	60b9      	str	r1, [r7, #8]
 80281ee:	607a      	str	r2, [r7, #4]
 80281f0:	603b      	str	r3, [r7, #0]
  quant_params->multiplier = data.reference_op_data.output_multiplier;
 80281f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80281f4:	681a      	ldr	r2, [r3, #0]
 80281f6:	68bb      	ldr	r3, [r7, #8]
 80281f8:	601a      	str	r2, [r3, #0]
  quant_params->shift = data.reference_op_data.output_shift;
 80281fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80281fc:	685a      	ldr	r2, [r3, #4]
 80281fe:	68bb      	ldr	r3, [r7, #8]
 8028200:	605a      	str	r2, [r3, #4]

  input_dims->n = data.batches;
 8028202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028206:	687b      	ldr	r3, [r7, #4]
 8028208:	601a      	str	r2, [r3, #0]
  input_dims->h = 1;
 802820a:	687b      	ldr	r3, [r7, #4]
 802820c:	2201      	movs	r2, #1
 802820e:	605a      	str	r2, [r3, #4]
  input_dims->w = 1;
 8028210:	687b      	ldr	r3, [r7, #4]
 8028212:	2201      	movs	r2, #1
 8028214:	609a      	str	r2, [r3, #8]
  input_dims->c = data.accum_depth;
 8028216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802821a:	687b      	ldr	r3, [r7, #4]
 802821c:	60da      	str	r2, [r3, #12]

  filter_dims->n = data.accum_depth;
 802821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028222:	683b      	ldr	r3, [r7, #0]
 8028224:	601a      	str	r2, [r3, #0]
  filter_dims->h = 1;
 8028226:	683b      	ldr	r3, [r7, #0]
 8028228:	2201      	movs	r2, #1
 802822a:	605a      	str	r2, [r3, #4]
  filter_dims->w = 1;
 802822c:	683b      	ldr	r3, [r7, #0]
 802822e:	2201      	movs	r2, #1
 8028230:	609a      	str	r2, [r3, #8]
  filter_dims->c = data.output_depth;
 8028232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028236:	683b      	ldr	r3, [r7, #0]
 8028238:	60da      	str	r2, [r3, #12]

  bias_dims->n = 1;
 802823a:	69bb      	ldr	r3, [r7, #24]
 802823c:	2201      	movs	r2, #1
 802823e:	601a      	str	r2, [r3, #0]
  bias_dims->h = 1;
 8028240:	69bb      	ldr	r3, [r7, #24]
 8028242:	2201      	movs	r2, #1
 8028244:	605a      	str	r2, [r3, #4]
  bias_dims->w = 1;
 8028246:	69bb      	ldr	r3, [r7, #24]
 8028248:	2201      	movs	r2, #1
 802824a:	609a      	str	r2, [r3, #8]
  bias_dims->c = data.output_depth;
 802824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802824e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028250:	69bb      	ldr	r3, [r7, #24]
 8028252:	60da      	str	r2, [r3, #12]

  output_dims->n = data.batches;
 8028254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028258:	69fb      	ldr	r3, [r7, #28]
 802825a:	601a      	str	r2, [r3, #0]
  output_dims->h = 1;
 802825c:	69fb      	ldr	r3, [r7, #28]
 802825e:	2201      	movs	r2, #1
 8028260:	605a      	str	r2, [r3, #4]
  output_dims->w = 1;
 8028262:	69fb      	ldr	r3, [r7, #28]
 8028264:	2201      	movs	r2, #1
 8028266:	609a      	str	r2, [r3, #8]
  output_dims->c = data.output_depth;
 8028268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802826a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802826c:	69fb      	ldr	r3, [r7, #28]
 802826e:	60da      	str	r2, [r3, #12]

  ctx->buf = nullptr;
 8028270:	6a3b      	ldr	r3, [r7, #32]
 8028272:	2200      	movs	r2, #0
 8028274:	601a      	str	r2, [r3, #0]
  ctx->size = 0;
 8028276:	6a3b      	ldr	r3, [r7, #32]
 8028278:	2200      	movs	r2, #0
 802827a:	605a      	str	r2, [r3, #4]
  if (data.buffer_idx > -1) {
 802827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028280:	2b00      	cmp	r3, #0
 8028282:	db09      	blt.n	8028298 <_ZN6tflite12_GLOBAL__N_120PopulateCommonParamsEP13TfLiteContextP32cmsis_nn_per_tensor_quant_paramsP13cmsis_nn_dimsS6_S6_S6_P16cmsis_nn_contextRKNS0_6OpDataE+0xb4>
    ctx->buf = context->GetScratchBuffer(context, data.buffer_idx);
 8028284:	68fb      	ldr	r3, [r7, #12]
 8028286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802828a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 802828c:	4611      	mov	r1, r2
 802828e:	68f8      	ldr	r0, [r7, #12]
 8028290:	4798      	blx	r3
 8028292:	4602      	mov	r2, r0
 8028294:	6a3b      	ldr	r3, [r7, #32]
 8028296:	601a      	str	r2, [r3, #0]
  }
}
 8028298:	bf00      	nop
 802829a:	3710      	adds	r7, #16
 802829c:	46bd      	mov	sp, r7
 802829e:	bd80      	pop	{r7, pc}

080282a0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 80282a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80282a2:	b0bd      	sub	sp, #244	; 0xf4
 80282a4:	af08      	add	r7, sp, #32
 80282a6:	6178      	str	r0, [r7, #20]
 80282a8:	6139      	str	r1, [r7, #16]
 80282aa:	60fa      	str	r2, [r7, #12]
 80282ac:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80282ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80282b2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80282b6:	4618      	mov	r0, r3
 80282b8:	f000 fb59 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int output_dim_count = output_shape.DimensionsCount();
 80282bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80282c0:	4618      	mov	r0, r3
 80282c2:	f7fe f897 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80282c6:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  TFLITE_DCHECK_GE(output_dim_count, 2);
 80282ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80282ce:	2b01      	cmp	r3, #1
 80282d0:	dc01      	bgt.n	80282d6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x36>
 80282d2:	f005 fb49 	bl	802d968 <abort>
  TFLITE_DCHECK_LE(output_dim_count, 4);
 80282d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80282da:	2b04      	cmp	r3, #4
 80282dc:	dd01      	ble.n	80282e2 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x42>
 80282de:	f005 fb43 	bl	802d968 <abort>
  cmsis_nn_dims filter_dims;
  cmsis_nn_dims bias_dims;
  cmsis_nn_dims output_dims;
  cmsis_nn_context ctx;

  PopulateCommonParams(context, &quant_params, &input_dims, &filter_dims,
 80282e2:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80282e6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80282ea:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80282ee:	68fb      	ldr	r3, [r7, #12]
 80282f0:	9303      	str	r3, [sp, #12]
 80282f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80282f6:	9302      	str	r3, [sp, #8]
 80282f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80282fc:	9301      	str	r3, [sp, #4]
 80282fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8028302:	9300      	str	r3, [sp, #0]
 8028304:	4603      	mov	r3, r0
 8028306:	6978      	ldr	r0, [r7, #20]
 8028308:	f7ff ff6c 	bl	80281e4 <_ZN6tflite12_GLOBAL__N_120PopulateCommonParamsEP13TfLiteContextP32cmsis_nn_per_tensor_quant_paramsP13cmsis_nn_dimsS6_S6_S6_P16cmsis_nn_contextRKNS0_6OpDataE>
                       &bias_dims, &output_dims, &ctx, data);

  const int32_t* bias_data =
      tflite::micro::GetOptionalTensorData<int32_t>(bias);
 802830c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8028310:	f7ff fad9 	bl	80278c6 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8028314:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims, bias_data,
            &output_dims, tflite::micro::GetTensorData<int8_t>(output)),
        ARM_CMSIS_NN_SUCCESS);
#else

  if (output_dim_count > 2 && data.accum_depth % 4 == 0) {
 8028318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802831c:	2b02      	cmp	r3, #2
 802831e:	f340 80b2 	ble.w	8028486 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x1e6>
 8028322:	68fb      	ldr	r3, [r7, #12]
 8028324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028326:	f003 0303 	and.w	r3, r3, #3
 802832a:	2b00      	cmp	r3, #0
 802832c:	f040 80ab 	bne.w	8028486 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x1e6>
    cmsis_nn_conv_params conv_params;
    conv_params.dilation.h = 1;
 8028330:	2301      	movs	r3, #1
 8028332:	637b      	str	r3, [r7, #52]	; 0x34
    conv_params.dilation.w = 1;
 8028334:	2301      	movs	r3, #1
 8028336:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 8028338:	68fb      	ldr	r3, [r7, #12]
 802833a:	695b      	ldr	r3, [r3, #20]
 802833c:	425b      	negs	r3, r3
 802833e:	61bb      	str	r3, [r7, #24]
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 8028340:	68fb      	ldr	r3, [r7, #12]
 8028342:	69db      	ldr	r3, [r3, #28]
 8028344:	61fb      	str	r3, [r7, #28]
    conv_params.stride.h = 1;
 8028346:	2301      	movs	r3, #1
 8028348:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.stride.w = 1;
 802834a:	2301      	movs	r3, #1
 802834c:	623b      	str	r3, [r7, #32]
    conv_params.padding.h = 0;
 802834e:	2300      	movs	r3, #0
 8028350:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.padding.w = 0;
 8028352:	2300      	movs	r3, #0
 8028354:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 8028356:	68fb      	ldr	r3, [r7, #12]
 8028358:	689b      	ldr	r3, [r3, #8]
 802835a:	63bb      	str	r3, [r7, #56]	; 0x38
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 802835c:	68fb      	ldr	r3, [r7, #12]
 802835e:	68db      	ldr	r3, [r3, #12]
 8028360:	63fb      	str	r3, [r7, #60]	; 0x3c

    cmsis_nn_per_channel_quant_params per_channel_quant_params;
    per_channel_quant_params.multiplier =
        const_cast<int32_t*>(data.per_channel_output_multiplier);
 8028362:	68fb      	ldr	r3, [r7, #12]
 8028364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    per_channel_quant_params.multiplier =
 8028366:	657b      	str	r3, [r7, #84]	; 0x54
    per_channel_quant_params.shift =
        const_cast<int32_t*>(data.per_channel_output_shift);
 8028368:	68fb      	ldr	r3, [r7, #12]
 802836a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    per_channel_quant_params.shift =
 802836c:	65bb      	str	r3, [r7, #88]	; 0x58

    for (int i = 0; i < data.output_depth; i++) {
 802836e:	2300      	movs	r3, #0
 8028370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8028374:	e014      	b.n	80283a0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x100>
      per_channel_quant_params.multiplier[i] = quant_params.multiplier;
 8028376:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028378:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802837c:	009b      	lsls	r3, r3, #2
 802837e:	4413      	add	r3, r2
 8028380:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8028384:	601a      	str	r2, [r3, #0]
      per_channel_quant_params.shift[i] = quant_params.shift;
 8028386:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8028388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802838c:	009b      	lsls	r3, r3, #2
 802838e:	4413      	add	r3, r2
 8028390:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8028394:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < data.output_depth; i++) {
 8028396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802839a:	3301      	adds	r3, #1
 802839c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80283a0:	68fb      	ldr	r3, [r7, #12]
 80283a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80283a4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80283a8:	429a      	cmp	r2, r3
 80283aa:	dbe4      	blt.n	8028376 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0xd6>
    }

    TF_LITE_ENSURE_EQ(
 80283ac:	68b8      	ldr	r0, [r7, #8]
 80283ae:	f7fe fb3e 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80283b2:	4605      	mov	r5, r0
 80283b4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80283b8:	f7fe fb39 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80283bc:	4606      	mov	r6, r0
 80283be:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80283c2:	f7fe fb43 	bl	8026a4c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80283c6:	4603      	mov	r3, r0
 80283c8:	f107 0494 	add.w	r4, r7, #148	; 0x94
 80283cc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80283d0:	f107 0118 	add.w	r1, r7, #24
 80283d4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80283d8:	9306      	str	r3, [sp, #24]
 80283da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80283de:	9305      	str	r3, [sp, #20]
 80283e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80283e4:	9304      	str	r3, [sp, #16]
 80283e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80283ea:	9303      	str	r3, [sp, #12]
 80283ec:	9602      	str	r6, [sp, #8]
 80283ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80283f2:	9301      	str	r3, [sp, #4]
 80283f4:	9500      	str	r5, [sp, #0]
 80283f6:	4623      	mov	r3, r4
 80283f8:	f7ea fa57 	bl	80128aa <arm_convolve_1x1_s8_fast>
 80283fc:	4603      	mov	r3, r0
 80283fe:	2b00      	cmp	r3, #0
 8028400:	bf14      	ite	ne
 8028402:	2301      	movne	r3, #1
 8028404:	2300      	moveq	r3, #0
 8028406:	b2db      	uxtb	r3, r3
 8028408:	2b00      	cmp	r3, #0
 802840a:	f000 80b7 	beq.w	802857c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x2dc>
 802840e:	697b      	ldr	r3, [r7, #20]
 8028410:	691c      	ldr	r4, [r3, #16]
 8028412:	68b8      	ldr	r0, [r7, #8]
 8028414:	f7fe fb0b 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8028418:	4606      	mov	r6, r0
 802841a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 802841e:	f7fe fb06 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8028422:	6078      	str	r0, [r7, #4]
 8028424:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8028428:	f7fe fb10 	bl	8026a4c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802842c:	4603      	mov	r3, r0
 802842e:	f107 0594 	add.w	r5, r7, #148	; 0x94
 8028432:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8028436:	f107 0118 	add.w	r1, r7, #24
 802843a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 802843e:	9306      	str	r3, [sp, #24]
 8028440:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8028444:	9305      	str	r3, [sp, #20]
 8028446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 802844a:	9304      	str	r3, [sp, #16]
 802844c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8028450:	9303      	str	r3, [sp, #12]
 8028452:	687b      	ldr	r3, [r7, #4]
 8028454:	9302      	str	r3, [sp, #8]
 8028456:	f107 0384 	add.w	r3, r7, #132	; 0x84
 802845a:	9301      	str	r3, [sp, #4]
 802845c:	9600      	str	r6, [sp, #0]
 802845e:	462b      	mov	r3, r5
 8028460:	f7ea fa23 	bl	80128aa <arm_convolve_1x1_s8_fast>
 8028464:	4603      	mov	r3, r0
 8028466:	461a      	mov	r2, r3
 8028468:	2300      	movs	r3, #0
 802846a:	9303      	str	r3, [sp, #12]
 802846c:	9202      	str	r2, [sp, #8]
 802846e:	4b49      	ldr	r3, [pc, #292]	; (8028594 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x2f4>)
 8028470:	9301      	str	r3, [sp, #4]
 8028472:	4b49      	ldr	r3, [pc, #292]	; (8028598 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x2f8>)
 8028474:	9300      	str	r3, [sp, #0]
 8028476:	f44f 738a 	mov.w	r3, #276	; 0x114
 802847a:	4a48      	ldr	r2, [pc, #288]	; (802859c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x2fc>)
 802847c:	4948      	ldr	r1, [pc, #288]	; (80285a0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x300>)
 802847e:	6978      	ldr	r0, [r7, #20]
 8028480:	47a0      	blx	r4
 8028482:	2401      	movs	r4, #1
 8028484:	e07c      	b.n	8028580 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x2e0>
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims, bias_data,
            &output_dims, tflite::micro::GetTensorData<int8_t>(output)),
        ARM_CMSIS_NN_SUCCESS);
  } else {
    cmsis_nn_fc_params fc_params;
    fc_params.input_offset = -data.reference_op_data.input_zero_point;
 8028486:	68fb      	ldr	r3, [r7, #12]
 8028488:	695b      	ldr	r3, [r3, #20]
 802848a:	425b      	negs	r3, r3
 802848c:	643b      	str	r3, [r7, #64]	; 0x40
    fc_params.output_offset = data.reference_op_data.output_zero_point;
 802848e:	68fb      	ldr	r3, [r7, #12]
 8028490:	69db      	ldr	r3, [r3, #28]
 8028492:	64bb      	str	r3, [r7, #72]	; 0x48
    fc_params.filter_offset = 0;
 8028494:	2300      	movs	r3, #0
 8028496:	647b      	str	r3, [r7, #68]	; 0x44
    fc_params.activation.min = data.reference_op_data.output_activation_min;
 8028498:	68fb      	ldr	r3, [r7, #12]
 802849a:	689b      	ldr	r3, [r3, #8]
 802849c:	64fb      	str	r3, [r7, #76]	; 0x4c
    fc_params.activation.max = data.reference_op_data.output_activation_max;
 802849e:	68fb      	ldr	r3, [r7, #12]
 80284a0:	68db      	ldr	r3, [r3, #12]
 80284a2:	653b      	str	r3, [r7, #80]	; 0x50

    TF_LITE_ENSURE_EQ(
 80284a4:	68b8      	ldr	r0, [r7, #8]
 80284a6:	f7fe fac2 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80284aa:	4605      	mov	r5, r0
 80284ac:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80284b0:	f7fe fabd 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80284b4:	4606      	mov	r6, r0
 80284b6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80284ba:	f7fe fac7 	bl	8026a4c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80284be:	4603      	mov	r3, r0
 80284c0:	f107 0494 	add.w	r4, r7, #148	; 0x94
 80284c4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80284c8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80284cc:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80284d0:	9306      	str	r3, [sp, #24]
 80284d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80284d6:	9305      	str	r3, [sp, #20]
 80284d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80284dc:	9304      	str	r3, [sp, #16]
 80284de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80284e2:	9303      	str	r3, [sp, #12]
 80284e4:	9602      	str	r6, [sp, #8]
 80284e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80284ea:	9301      	str	r3, [sp, #4]
 80284ec:	9500      	str	r5, [sp, #0]
 80284ee:	4623      	mov	r3, r4
 80284f0:	f7ed ffea 	bl	80164c8 <arm_fully_connected_s8>
 80284f4:	4603      	mov	r3, r0
 80284f6:	2b00      	cmp	r3, #0
 80284f8:	bf14      	ite	ne
 80284fa:	2301      	movne	r3, #1
 80284fc:	2300      	moveq	r3, #0
 80284fe:	b2db      	uxtb	r3, r3
 8028500:	2b00      	cmp	r3, #0
 8028502:	d03c      	beq.n	802857e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x2de>
 8028504:	697b      	ldr	r3, [r7, #20]
 8028506:	691c      	ldr	r4, [r3, #16]
 8028508:	68b8      	ldr	r0, [r7, #8]
 802850a:	f7fe fa90 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802850e:	4606      	mov	r6, r0
 8028510:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8028514:	f7fe fa8b 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8028518:	6078      	str	r0, [r7, #4]
 802851a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 802851e:	f7fe fa95 	bl	8026a4c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8028522:	4603      	mov	r3, r0
 8028524:	f107 0594 	add.w	r5, r7, #148	; 0x94
 8028528:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 802852c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8028530:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8028534:	9306      	str	r3, [sp, #24]
 8028536:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802853a:	9305      	str	r3, [sp, #20]
 802853c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8028540:	9304      	str	r3, [sp, #16]
 8028542:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8028546:	9303      	str	r3, [sp, #12]
 8028548:	687b      	ldr	r3, [r7, #4]
 802854a:	9302      	str	r3, [sp, #8]
 802854c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8028550:	9301      	str	r3, [sp, #4]
 8028552:	9600      	str	r6, [sp, #0]
 8028554:	462b      	mov	r3, r5
 8028556:	f7ed ffb7 	bl	80164c8 <arm_fully_connected_s8>
 802855a:	4603      	mov	r3, r0
 802855c:	461a      	mov	r2, r3
 802855e:	2300      	movs	r3, #0
 8028560:	9303      	str	r3, [sp, #12]
 8028562:	9202      	str	r2, [sp, #8]
 8028564:	4b0b      	ldr	r3, [pc, #44]	; (8028594 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x2f4>)
 8028566:	9301      	str	r3, [sp, #4]
 8028568:	4b0e      	ldr	r3, [pc, #56]	; (80285a4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x304>)
 802856a:	9300      	str	r3, [sp, #0]
 802856c:	f44f 7392 	mov.w	r3, #292	; 0x124
 8028570:	4a0a      	ldr	r2, [pc, #40]	; (802859c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x2fc>)
 8028572:	490b      	ldr	r1, [pc, #44]	; (80285a0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x300>)
 8028574:	6978      	ldr	r0, [r7, #20]
 8028576:	47a0      	blx	r4
 8028578:	2401      	movs	r4, #1
 802857a:	e001      	b.n	8028580 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x2e0>
  } else {
 802857c:	bf00      	nop
            &output_dims, tflite::micro::GetTensorData<int8_t>(output)),
        ARM_CMSIS_NN_SUCCESS);
  }
#endif

  return kTfLiteOk;
 802857e:	2400      	movs	r4, #0
}
 8028580:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8028584:	4618      	mov	r0, r3
 8028586:	f7fd f862 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 802858a:	4623      	mov	r3, r4
 802858c:	4618      	mov	r0, r3
 802858e:	37d4      	adds	r7, #212	; 0xd4
 8028590:	46bd      	mov	sp, r7
 8028592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028594:	080326d4 	.word	0x080326d4
 8028598:	080326ec 	.word	0x080326ec
 802859c:	0803255c 	.word	0x0803255c
 80285a0:	080326b8 	.word	0x080326b8
 80285a4:	08032800 	.word	0x08032800

080285a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80285a8:	b580      	push	{r7, lr}
 80285aa:	b0b6      	sub	sp, #216	; 0xd8
 80285ac:	af04      	add	r7, sp, #16
 80285ae:	6078      	str	r0, [r7, #4]
 80285b0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80285b2:	683b      	ldr	r3, [r7, #0]
 80285b4:	695b      	ldr	r3, [r3, #20]
 80285b6:	2b00      	cmp	r3, #0
 80285b8:	d101      	bne.n	80285be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80285ba:	f005 f9d5 	bl	802d968 <abort>
  const auto* params =
 80285be:	683b      	ldr	r3, [r7, #0]
 80285c0:	695b      	ldr	r3, [r3, #20]
 80285c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 80285c6:	4b56      	ldr	r3, [pc, #344]	; (8028720 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>)
 80285c8:	681b      	ldr	r3, [r3, #0]
 80285ca:	461a      	mov	r2, r3
 80285cc:	6839      	ldr	r1, [r7, #0]
 80285ce:	6878      	ldr	r0, [r7, #4]
 80285d0:	f000 f99d 	bl	802890e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80285d4:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 80285d8:	4b52      	ldr	r3, [pc, #328]	; (8028724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17c>)
 80285da:	681b      	ldr	r3, [r3, #0]
 80285dc:	461a      	mov	r2, r3
 80285de:	6839      	ldr	r1, [r7, #0]
 80285e0:	6878      	ldr	r0, [r7, #4]
 80285e2:	f000 f994 	bl	802890e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80285e6:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 80285ea:	4b4f      	ldr	r3, [pc, #316]	; (8028728 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>)
 80285ec:	681b      	ldr	r3, [r3, #0]
 80285ee:	461a      	mov	r2, r3
 80285f0:	6839      	ldr	r1, [r7, #0]
 80285f2:	6878      	ldr	r0, [r7, #4]
 80285f4:	f000 f98b 	bl	802890e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80285f8:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 80285fc:	4b4b      	ldr	r3, [pc, #300]	; (802872c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x184>)
 80285fe:	681b      	ldr	r3, [r3, #0]
 8028600:	461a      	mov	r2, r3
 8028602:	6839      	ldr	r1, [r7, #0]
 8028604:	6878      	ldr	r0, [r7, #4]
 8028606:	f000 f992 	bl	802892e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802860a:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

  TFLITE_DCHECK(node->user_data != nullptr);
 802860e:	683b      	ldr	r3, [r7, #0]
 8028610:	691b      	ldr	r3, [r3, #16]
 8028612:	2b00      	cmp	r3, #0
 8028614:	d101      	bne.n	802861a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 8028616:	f005 f9a7 	bl	802d968 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 802861a:	683b      	ldr	r3, [r7, #0]
 802861c:	691b      	ldr	r3, [r3, #16]
 802861e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
      context, data.reference_op_data.filter_buffer_index, filter);
 8028622:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8028626:	6a1a      	ldr	r2, [r3, #32]
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
 8028628:	f107 000c 	add.w	r0, r7, #12
 802862c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8028630:	6879      	ldr	r1, [r7, #4]
 8028632:	f000 f9be 	bl	80289b2 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8028636:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 802863a:	7a1b      	ldrb	r3, [r3, #8]
 802863c:	2b09      	cmp	r3, #9
 802863e:	d01a      	beq.n	8028676 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
 8028640:	2b09      	cmp	r3, #9
 8028642:	dc54      	bgt.n	80286ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x146>
 8028644:	2b01      	cmp	r3, #1
 8028646:	d002      	beq.n	802864e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa6>
 8028648:	2b07      	cmp	r3, #7
 802864a:	d03f      	beq.n	80286cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x124>
 802864c:	e04f      	b.n	80286ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x146>
    case kTfLiteFloat32: {
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      MicroPrintf("Type %s (%d) not supported.",
 802864e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8028652:	7a1b      	ldrb	r3, [r3, #8]
 8028654:	4618      	mov	r0, r3
 8028656:	f7fc ff51 	bl	80254fc <TfLiteTypeGetName>
 802865a:	4603      	mov	r3, r0
 802865c:	61bb      	str	r3, [r7, #24]
 802865e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8028662:	f103 0208 	add.w	r2, r3, #8
 8028666:	f107 0318 	add.w	r3, r7, #24
 802866a:	4619      	mov	r1, r3
 802866c:	4830      	ldr	r0, [pc, #192]	; (8028730 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>)
 802866e:	f7fe faad 	bl	8026bcc <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8028672:	2301      	movs	r3, #1
 8028674:	e04f      	b.n	8028716 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16e>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<float>(output));
      break;
    }
    case kTfLiteInt8: {
      switch (filter_int8.type) {
 8028676:	7d3b      	ldrb	r3, [r7, #20]
 8028678:	2b09      	cmp	r3, #9
 802867a:	d112      	bne.n	80286a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I8
        MicroPrintf("Filter data type %s currently not supported.",
                              TfLiteTypeGetName(filter->type));
        return kTfLiteError;
#endif
          return EvalQuantizedInt8(context, node, data, input, &filter_int8,
 802867c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8028680:	9302      	str	r3, [sp, #8]
 8028682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8028686:	9301      	str	r3, [sp, #4]
 8028688:	f107 030c 	add.w	r3, r7, #12
 802868c:	9300      	str	r3, [sp, #0]
 802868e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8028692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8028696:	6839      	ldr	r1, [r7, #0]
 8028698:	6878      	ldr	r0, [r7, #4]
 802869a:	f7ff fe01 	bl	80282a0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 802869e:	4603      	mov	r3, r0
                                   bias, output);
 80286a0:	e039      	b.n	8028716 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16e>
        default:
          MicroPrintf("Filter Type %s (%d) not supported.",
 80286a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80286a6:	7a1b      	ldrb	r3, [r3, #8]
 80286a8:	4618      	mov	r0, r3
 80286aa:	f7fc ff27 	bl	80254fc <TfLiteTypeGetName>
 80286ae:	4603      	mov	r3, r0
 80286b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80286b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80286b8:	f103 0208 	add.w	r2, r3, #8
 80286bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80286c0:	4619      	mov	r1, r3
 80286c2:	481c      	ldr	r0, [pc, #112]	; (8028734 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18c>)
 80286c4:	f7ff f921 	bl	802790a <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                      TfLiteTypeGetName(filter->type), filter->type);
          return kTfLiteError;
 80286c8:	2301      	movs	r3, #1
 80286ca:	e024      	b.n	8028716 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16e>
      }
      break;
    }
    case kTfLiteInt16: {
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I16
        MicroPrintf("Filter data type %s currently not supported.",
 80286cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80286d0:	7a1b      	ldrb	r3, [r3, #8]
 80286d2:	4618      	mov	r0, r3
 80286d4:	f7fc ff12 	bl	80254fc <TfLiteTypeGetName>
 80286d8:	4603      	mov	r3, r0
 80286da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80286de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80286e2:	4619      	mov	r1, r3
 80286e4:	4814      	ldr	r0, [pc, #80]	; (8028738 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x190>)
 80286e6:	f7fe f936 	bl	8026956 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(filter->type));
        return kTfLiteError;
 80286ea:	2301      	movs	r3, #1
 80286ec:	e013      	b.n	8028716 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16e>
#endif
      return EvalQuantizedInt16(context, node, data, input, filter, bias,
                                output);
    }
    default: {
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 80286ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80286f2:	7a1b      	ldrb	r3, [r3, #8]
 80286f4:	4618      	mov	r0, r3
 80286f6:	f7fc ff01 	bl	80254fc <TfLiteTypeGetName>
 80286fa:	4603      	mov	r3, r0
 80286fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8028700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8028704:	f103 0208 	add.w	r2, r3, #8
 8028708:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802870c:	4619      	mov	r1, r3
 802870e:	4808      	ldr	r0, [pc, #32]	; (8028730 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>)
 8028710:	f7fe fa5c 	bl	8026bcc <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8028714:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 8028716:	4618      	mov	r0, r3
 8028718:	37c8      	adds	r7, #200	; 0xc8
 802871a:	46bd      	mov	sp, r7
 802871c:	bd80      	pop	{r7, pc}
 802871e:	bf00      	nop
 8028720:	08034030 	.word	0x08034030
 8028724:	08034034 	.word	0x08034034
 8028728:	08034038 	.word	0x08034038
 802872c:	0803403c 	.word	0x0803403c
 8028730:	08032a0c 	.word	0x08032a0c
 8028734:	08032a28 	.word	0x08032a28
 8028738:	08032688 	.word	0x08032688

0802873c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt16(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 802873c:	b580      	push	{r7, lr}
 802873e:	b084      	sub	sp, #16
 8028740:	af02      	add	r7, sp, #8
 8028742:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 8028744:	6878      	ldr	r0, [r7, #4]
 8028746:	2300      	movs	r3, #0
 8028748:	9300      	str	r3, [sp, #0]
 802874a:	4b05      	ldr	r3, [pc, #20]	; (8028760 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x24>)
 802874c:	4a05      	ldr	r2, [pc, #20]	; (8028764 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 802874e:	4906      	ldr	r1, [pc, #24]	; (8028768 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x2c>)
 8028750:	f000 f884 	bl	802885c <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8028754:	bf00      	nop
}
 8028756:	6878      	ldr	r0, [r7, #4]
 8028758:	3708      	adds	r7, #8
 802875a:	46bd      	mov	sp, r7
 802875c:	bd80      	pop	{r7, pc}
 802875e:	bf00      	nop
 8028760:	080285a9 	.word	0x080285a9
 8028764:	08027d85 	.word	0x08027d85
 8028768:	08027d57 	.word	0x08027d57

0802876c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 802876c:	b580      	push	{r7, lr}
 802876e:	b08a      	sub	sp, #40	; 0x28
 8028770:	af02      	add	r7, sp, #8
 8028772:	60f8      	str	r0, [r7, #12]
 8028774:	607b      	str	r3, [r7, #4]
 8028776:	460b      	mov	r3, r1
 8028778:	72fb      	strb	r3, [r7, #11]
 802877a:	4613      	mov	r3, r2
 802877c:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 802877e:	7abb      	ldrb	r3, [r7, #10]
 8028780:	2b01      	cmp	r3, #1
 8028782:	d044      	beq.n	802880e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 8028784:	f04f 0200 	mov.w	r2, #0
 8028788:	f04f 0300 	mov.w	r3, #0
 802878c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8028790:	f107 0310 	add.w	r3, r7, #16
 8028794:	9301      	str	r3, [sp, #4]
 8028796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028798:	9300      	str	r3, [sp, #0]
 802879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802879c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802879e:	6879      	ldr	r1, [r7, #4]
 80287a0:	68f8      	ldr	r0, [r7, #12]
 80287a2:	f7fd fbdd 	bl	8025f60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 80287a6:	4603      	mov	r3, r0
 80287a8:	77fb      	strb	r3, [r7, #31]
 80287aa:	7ffb      	ldrb	r3, [r7, #31]
 80287ac:	2b00      	cmp	r3, #0
 80287ae:	d001      	beq.n	80287b4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 80287b0:	7ffb      	ldrb	r3, [r7, #31]
 80287b2:	e02d      	b.n	8028810 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 80287b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80287b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80287ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80287bc:	3304      	adds	r3, #4
 80287be:	4619      	mov	r1, r3
 80287c0:	4610      	mov	r0, r2
 80287c2:	eeb0 0a47 	vmov.f32	s0, s14
 80287c6:	eef0 0a67 	vmov.f32	s1, s15
 80287ca:	f7fd f847 	bl	802585c <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 80287ce:	687b      	ldr	r3, [r7, #4]
 80287d0:	691a      	ldr	r2, [r3, #16]
 80287d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80287d4:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 80287d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80287d8:	691b      	ldr	r3, [r3, #16]
 80287da:	2b00      	cmp	r3, #0
 80287dc:	d001      	beq.n	80287e2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 80287de:	f005 f8c3 	bl	802d968 <abort>
    data->filter_zero_point = filter->params.zero_point;
 80287e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80287e4:	691a      	ldr	r2, [r3, #16]
 80287e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80287e8:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 80287ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80287ec:	691a      	ldr	r2, [r3, #16]
 80287ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80287f0:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 80287f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80287f4:	f103 0208 	add.w	r2, r3, #8
 80287f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80287fa:	330c      	adds	r3, #12
 80287fc:	7af9      	ldrb	r1, [r7, #11]
 80287fe:	9300      	str	r3, [sp, #0]
 8028800:	4613      	mov	r3, r2
 8028802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028804:	68f8      	ldr	r0, [r7, #12]
 8028806:	f7fd fd9d 	bl	8026344 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 802880a:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 802880c:	e000      	b.n	8028810 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 802880e:	2300      	movs	r3, #0
}
 8028810:	4618      	mov	r0, r3
 8028812:	3720      	adds	r7, #32
 8028814:	46bd      	mov	sp, r7
 8028816:	bd80      	pop	{r7, pc}

08028818 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
namespace micro {

namespace {

int ValidateTensorIndexing(const TfLiteContext* context, int index,
                           int max_size, const int* tensor_indices) {
 8028818:	b480      	push	{r7}
 802881a:	b087      	sub	sp, #28
 802881c:	af00      	add	r7, sp, #0
 802881e:	60f8      	str	r0, [r7, #12]
 8028820:	60b9      	str	r1, [r7, #8]
 8028822:	607a      	str	r2, [r7, #4]
 8028824:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8028826:	68bb      	ldr	r3, [r7, #8]
 8028828:	2b00      	cmp	r3, #0
 802882a:	db0f      	blt.n	802884c <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 802882c:	68ba      	ldr	r2, [r7, #8]
 802882e:	687b      	ldr	r3, [r7, #4]
 8028830:	429a      	cmp	r2, r3
 8028832:	da0b      	bge.n	802884c <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8028834:	68bb      	ldr	r3, [r7, #8]
 8028836:	009b      	lsls	r3, r3, #2
 8028838:	683a      	ldr	r2, [r7, #0]
 802883a:	4413      	add	r3, r2
 802883c:	681b      	ldr	r3, [r3, #0]
 802883e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8028840:	697b      	ldr	r3, [r7, #20]
 8028842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028846:	d001      	beq.n	802884c <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8028848:	697b      	ldr	r3, [r7, #20]
 802884a:	e001      	b.n	8028850 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 802884c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8028850:	4618      	mov	r0, r3
 8028852:	371c      	adds	r7, #28
 8028854:	46bd      	mov	sp, r7
 8028856:	f85d 7b04 	ldr.w	r7, [sp], #4
 802885a:	4770      	bx	lr

0802885c <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:

TfLiteRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer)) {
 802885c:	b480      	push	{r7}
 802885e:	b085      	sub	sp, #20
 8028860:	af00      	add	r7, sp, #0
 8028862:	60f8      	str	r0, [r7, #12]
 8028864:	60b9      	str	r1, [r7, #8]
 8028866:	607a      	str	r2, [r7, #4]
 8028868:	603b      	str	r3, [r7, #0]
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
 802886a:	68fb      	ldr	r3, [r7, #12]
 802886c:	68ba      	ldr	r2, [r7, #8]
 802886e:	601a      	str	r2, [r3, #0]
 8028870:	68fb      	ldr	r3, [r7, #12]
 8028872:	69ba      	ldr	r2, [r7, #24]
 8028874:	605a      	str	r2, [r3, #4]
 8028876:	68fb      	ldr	r3, [r7, #12]
 8028878:	687a      	ldr	r2, [r7, #4]
 802887a:	609a      	str	r2, [r3, #8]
 802887c:	68fb      	ldr	r3, [r7, #12]
 802887e:	683a      	ldr	r2, [r7, #0]
 8028880:	60da      	str	r2, [r3, #12]
 8028882:	68fb      	ldr	r3, [r7, #12]
 8028884:	2200      	movs	r2, #0
 8028886:	611a      	str	r2, [r3, #16]
 8028888:	68fb      	ldr	r3, [r7, #12]
 802888a:	2200      	movs	r2, #0
 802888c:	615a      	str	r2, [r3, #20]
 802888e:	68fb      	ldr	r3, [r7, #12]
 8028890:	2200      	movs	r2, #0
 8028892:	619a      	str	r2, [r3, #24]
 8028894:	68fb      	ldr	r3, [r7, #12]
 8028896:	2200      	movs	r2, #0
 8028898:	61da      	str	r2, [r3, #28]
 802889a:	68fb      	ldr	r3, [r7, #12]
 802889c:	2200      	movs	r2, #0
 802889e:	621a      	str	r2, [r3, #32]
}
 80288a0:	68f8      	ldr	r0, [r7, #12]
 80288a2:	3714      	adds	r7, #20
 80288a4:	46bd      	mov	sp, r7
 80288a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288aa:	4770      	bx	lr

080288ac <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 80288ac:	b580      	push	{r7, lr}
 80288ae:	b086      	sub	sp, #24
 80288b0:	af00      	add	r7, sp, #0
 80288b2:	60f8      	str	r0, [r7, #12]
 80288b4:	60b9      	str	r1, [r7, #8]
 80288b6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 80288b8:	68fb      	ldr	r3, [r7, #12]
 80288ba:	2b00      	cmp	r3, #0
 80288bc:	d101      	bne.n	80288c2 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 80288be:	f005 f853 	bl	802d968 <abort>
  TFLITE_DCHECK(node != nullptr);
 80288c2:	68bb      	ldr	r3, [r7, #8]
 80288c4:	2b00      	cmp	r3, #0
 80288c6:	d101      	bne.n	80288cc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 80288c8:	f005 f84e 	bl	802d968 <abort>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 80288cc:	68bb      	ldr	r3, [r7, #8]
 80288ce:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 80288d0:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 80288d2:	68bb      	ldr	r3, [r7, #8]
 80288d4:	681b      	ldr	r3, [r3, #0]
 80288d6:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 80288d8:	6879      	ldr	r1, [r7, #4]
 80288da:	68f8      	ldr	r0, [r7, #12]
 80288dc:	f7ff ff9c 	bl	8028818 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80288e0:	6178      	str	r0, [r7, #20]

  if (tensor_index < 0) {
 80288e2:	697b      	ldr	r3, [r7, #20]
 80288e4:	2b00      	cmp	r3, #0
 80288e6:	da01      	bge.n	80288ec <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x40>
    return nullptr;
 80288e8:	2300      	movs	r3, #0
 80288ea:	e00c      	b.n	8028906 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x5a>
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 80288ec:	68fb      	ldr	r3, [r7, #12]
 80288ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80288f0:	68bb      	ldr	r3, [r7, #8]
 80288f2:	6819      	ldr	r1, [r3, #0]
 80288f4:	687b      	ldr	r3, [r7, #4]
 80288f6:	009b      	lsls	r3, r3, #2
 80288f8:	440b      	add	r3, r1
 80288fa:	685b      	ldr	r3, [r3, #4]
 80288fc:	4619      	mov	r1, r3
 80288fe:	68f8      	ldr	r0, [r7, #12]
 8028900:	4790      	blx	r2
 8028902:	4603      	mov	r3, r0
 8028904:	bf00      	nop
}
 8028906:	4618      	mov	r0, r3
 8028908:	3718      	adds	r7, #24
 802890a:	46bd      	mov	sp, r7
 802890c:	bd80      	pop	{r7, pc}

0802890e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 802890e:	b580      	push	{r7, lr}
 8028910:	b084      	sub	sp, #16
 8028912:	af00      	add	r7, sp, #0
 8028914:	60f8      	str	r0, [r7, #12]
 8028916:	60b9      	str	r1, [r7, #8]
 8028918:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 802891a:	687a      	ldr	r2, [r7, #4]
 802891c:	68b9      	ldr	r1, [r7, #8]
 802891e:	68f8      	ldr	r0, [r7, #12]
 8028920:	f7ff ffc4 	bl	80288ac <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8028924:	4603      	mov	r3, r0
}
 8028926:	4618      	mov	r0, r3
 8028928:	3710      	adds	r7, #16
 802892a:	46bd      	mov	sp, r7
 802892c:	bd80      	pop	{r7, pc}

0802892e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 802892e:	b580      	push	{r7, lr}
 8028930:	b084      	sub	sp, #16
 8028932:	af00      	add	r7, sp, #0
 8028934:	60f8      	str	r0, [r7, #12]
 8028936:	60b9      	str	r1, [r7, #8]
 8028938:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 802893a:	68fb      	ldr	r3, [r7, #12]
 802893c:	2b00      	cmp	r3, #0
 802893e:	d101      	bne.n	8028944 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8028940:	f005 f812 	bl	802d968 <abort>
  TFLITE_DCHECK(node != nullptr);
 8028944:	68bb      	ldr	r3, [r7, #8]
 8028946:	2b00      	cmp	r3, #0
 8028948:	d101      	bne.n	802894e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 802894a:	f005 f80d 	bl	802d968 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 802894e:	68fb      	ldr	r3, [r7, #12]
 8028950:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8028952:	68bb      	ldr	r3, [r7, #8]
 8028954:	6859      	ldr	r1, [r3, #4]
 8028956:	687b      	ldr	r3, [r7, #4]
 8028958:	009b      	lsls	r3, r3, #2
 802895a:	440b      	add	r3, r1
 802895c:	685b      	ldr	r3, [r3, #4]
 802895e:	4619      	mov	r1, r3
 8028960:	68f8      	ldr	r0, [r7, #12]
 8028962:	4790      	blx	r2
 8028964:	4603      	mov	r3, r0
}
 8028966:	4618      	mov	r0, r3
 8028968:	3710      	adds	r7, #16
 802896a:	46bd      	mov	sp, r7
 802896c:	bd80      	pop	{r7, pc}

0802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 802896e:	b580      	push	{r7, lr}
 8028970:	b086      	sub	sp, #24
 8028972:	af00      	add	r7, sp, #0
 8028974:	6078      	str	r0, [r7, #4]
 8028976:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8028978:	683b      	ldr	r3, [r7, #0]
 802897a:	2b00      	cmp	r3, #0
 802897c:	d003      	beq.n	8028986 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 802897e:	683b      	ldr	r3, [r7, #0]
 8028980:	685b      	ldr	r3, [r3, #4]
 8028982:	2b00      	cmp	r3, #0
 8028984:	d103      	bne.n	802898e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8028986:	6878      	ldr	r0, [r7, #4]
 8028988:	f7fc fe40 	bl	802560c <_ZN6tflite12RuntimeShapeC1Ev>
 802898c:	e00d      	b.n	80289aa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 802898e:	683b      	ldr	r3, [r7, #0]
 8028990:	685b      	ldr	r3, [r3, #4]
 8028992:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8028994:	697b      	ldr	r3, [r7, #20]
 8028996:	681b      	ldr	r3, [r3, #0]
 8028998:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 802899a:	697b      	ldr	r3, [r7, #20]
 802899c:	3304      	adds	r3, #4
 802899e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 80289a0:	68fa      	ldr	r2, [r7, #12]
 80289a2:	6939      	ldr	r1, [r7, #16]
 80289a4:	6878      	ldr	r0, [r7, #4]
 80289a6:	f7fc fe3f 	bl	8025628 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 80289aa:	6878      	ldr	r0, [r7, #4]
 80289ac:	3718      	adds	r7, #24
 80289ae:	46bd      	mov	sp, r7
 80289b0:	bd80      	pop	{r7, pc}

080289b2 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
 80289b2:	b5b0      	push	{r4, r5, r7, lr}
 80289b4:	b08e      	sub	sp, #56	; 0x38
 80289b6:	af00      	add	r7, sp, #0
 80289b8:	60f8      	str	r0, [r7, #12]
 80289ba:	60b9      	str	r1, [r7, #8]
 80289bc:	607a      	str	r2, [r7, #4]
 80289be:	603b      	str	r3, [r7, #0]
  if (tensor->type != kTfLiteInt4) {
 80289c0:	683b      	ldr	r3, [r7, #0]
 80289c2:	7a1b      	ldrb	r3, [r3, #8]
 80289c4:	2b12      	cmp	r3, #18
 80289c6:	d005      	beq.n	80289d4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x22>
    return *tensor;
 80289c8:	68fb      	ldr	r3, [r7, #12]
 80289ca:	683a      	ldr	r2, [r7, #0]
 80289cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80289ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80289d2:	e033      	b.n	8028a3c <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x8a>
  }

  TfLiteEvalTensor new_tensor;
  new_tensor.data.data = static_cast<int8_t*>(
      context->GetScratchBuffer(context, scratch_buffer_index));
 80289d4:	68bb      	ldr	r3, [r7, #8]
 80289d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80289d8:	6879      	ldr	r1, [r7, #4]
 80289da:	68b8      	ldr	r0, [r7, #8]
 80289dc:	4798      	blx	r3
 80289de:	4603      	mov	r3, r0
  new_tensor.data.data = static_cast<int8_t*>(
 80289e0:	617b      	str	r3, [r7, #20]
  new_tensor.dims = tensor->dims;
 80289e2:	683b      	ldr	r3, [r7, #0]
 80289e4:	685b      	ldr	r3, [r3, #4]
 80289e6:	61bb      	str	r3, [r7, #24]
  new_tensor.type = kTfLiteInt8;
 80289e8:	2309      	movs	r3, #9
 80289ea:	773b      	strb	r3, [r7, #28]
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 80289ec:	6838      	ldr	r0, [r7, #0]
 80289ee:	f7fe f81e 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80289f2:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 80289f4:	f107 0320 	add.w	r3, r7, #32
 80289f8:	6839      	ldr	r1, [r7, #0]
 80289fa:	4618      	mov	r0, r3
 80289fc:	f7ff ffb7 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 8028a00:	f107 0320 	add.w	r3, r7, #32
 8028a04:	4618      	mov	r0, r3
 8028a06:	f7fc fe5d 	bl	80256c4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8028a0a:	4605      	mov	r5, r0
 8028a0c:	f107 0314 	add.w	r3, r7, #20
 8028a10:	4618      	mov	r0, r3
 8028a12:	f7fe f81b 	bl	8026a4c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8028a16:	4603      	mov	r3, r0
 8028a18:	461a      	mov	r2, r3
 8028a1a:	4629      	mov	r1, r5
 8028a1c:	4620      	mov	r0, r4
 8028a1e:	f7fc fed6 	bl	80257ce <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 8028a22:	f107 0320 	add.w	r3, r7, #32
 8028a26:	4618      	mov	r0, r3
 8028a28:	f7fc fe11 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
 8028a2c:	68fb      	ldr	r3, [r7, #12]
 8028a2e:	461c      	mov	r4, r3
 8028a30:	f107 0314 	add.w	r3, r7, #20
 8028a34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028a38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8028a3c:	68f8      	ldr	r0, [r7, #12]
 8028a3e:	3738      	adds	r7, #56	; 0x38
 8028a40:	46bd      	mov	sp, r7
 8028a42:	bdb0      	pop	{r4, r5, r7, pc}

08028a44 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8028a44:	b590      	push	{r4, r7, lr}
 8028a46:	b087      	sub	sp, #28
 8028a48:	af00      	add	r7, sp, #0
 8028a4a:	60f8      	str	r0, [r7, #12]
 8028a4c:	60b9      	str	r1, [r7, #8]
 8028a4e:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8028a50:	68f8      	ldr	r0, [r7, #12]
 8028a52:	f7fd fccf 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8028a56:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8028a58:	2300      	movs	r3, #0
 8028a5a:	617b      	str	r3, [r7, #20]
 8028a5c:	e014      	b.n	8028a88 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
    if (i != skip_dim) {
 8028a5e:	697a      	ldr	r2, [r7, #20]
 8028a60:	68bb      	ldr	r3, [r7, #8]
 8028a62:	429a      	cmp	r2, r3
 8028a64:	d00d      	beq.n	8028a82 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8028a66:	6979      	ldr	r1, [r7, #20]
 8028a68:	68f8      	ldr	r0, [r7, #12]
 8028a6a:	f7fd fffe 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8028a6e:	4604      	mov	r4, r0
 8028a70:	6979      	ldr	r1, [r7, #20]
 8028a72:	6878      	ldr	r0, [r7, #4]
 8028a74:	f7fd fff9 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8028a78:	4603      	mov	r3, r0
 8028a7a:	429c      	cmp	r4, r3
 8028a7c:	d001      	beq.n	8028a82 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
 8028a7e:	f004 ff73 	bl	802d968 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8028a82:	697b      	ldr	r3, [r7, #20]
 8028a84:	3301      	adds	r3, #1
 8028a86:	617b      	str	r3, [r7, #20]
 8028a88:	697a      	ldr	r2, [r7, #20]
 8028a8a:	693b      	ldr	r3, [r7, #16]
 8028a8c:	429a      	cmp	r2, r3
 8028a8e:	dbe6      	blt.n	8028a5e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8028a90:	68b9      	ldr	r1, [r7, #8]
 8028a92:	68f8      	ldr	r0, [r7, #12]
 8028a94:	f7ff f929 	bl	8027cea <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8028a98:	4603      	mov	r3, r0
}
 8028a9a:	4618      	mov	r0, r3
 8028a9c:	371c      	adds	r7, #28
 8028a9e:	46bd      	mov	sp, r7
 8028aa0:	bd90      	pop	{r4, r7, pc}

08028aa2 <_ZN6tflite12_GLOBAL__N_120PopulateCommonParamsEP13TfLiteContextP13cmsis_nn_dimsS4_P20cmsis_nn_pool_paramsP16cmsis_nn_contextS4_RKNS0_6OpDataERKNS_12RuntimeShapeESE_PK16TfLitePoolParams>:
void PopulateCommonParams(
    TfLiteContext* const context, cmsis_nn_dims* const input_dims,
    cmsis_nn_dims* const output_dims, cmsis_nn_pool_params* const pool_params,
    cmsis_nn_context* const ctx, cmsis_nn_dims* const filter_dims,
    const OpData& data, const RuntimeShape& input_shape,
    const RuntimeShape& output_shape, const TfLitePoolParams* params) {
 8028aa2:	b580      	push	{r7, lr}
 8028aa4:	b086      	sub	sp, #24
 8028aa6:	af00      	add	r7, sp, #0
 8028aa8:	60f8      	str	r0, [r7, #12]
 8028aaa:	60b9      	str	r1, [r7, #8]
 8028aac:	607a      	str	r2, [r7, #4]
 8028aae:	603b      	str	r3, [r7, #0]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8028ab0:	2303      	movs	r3, #3
 8028ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028ab4:	2103      	movs	r1, #3
 8028ab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8028ab8:	f7fe f894 	bl	8026be4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8028abc:	6178      	str	r0, [r7, #20]

  input_dims->n = 1;
 8028abe:	68bb      	ldr	r3, [r7, #8]
 8028ac0:	2201      	movs	r2, #1
 8028ac2:	601a      	str	r2, [r3, #0]
  input_dims->h = input_shape.Dims(1);
 8028ac4:	2101      	movs	r1, #1
 8028ac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8028ac8:	f7fd ffcf 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8028acc:	4602      	mov	r2, r0
 8028ace:	68bb      	ldr	r3, [r7, #8]
 8028ad0:	605a      	str	r2, [r3, #4]
  input_dims->w = input_shape.Dims(2);
 8028ad2:	2102      	movs	r1, #2
 8028ad4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8028ad6:	f7fd ffc8 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8028ada:	4602      	mov	r2, r0
 8028adc:	68bb      	ldr	r3, [r7, #8]
 8028ade:	609a      	str	r2, [r3, #8]
  input_dims->c = depth;
 8028ae0:	68bb      	ldr	r3, [r7, #8]
 8028ae2:	697a      	ldr	r2, [r7, #20]
 8028ae4:	60da      	str	r2, [r3, #12]

  output_dims->n = 1;
 8028ae6:	687b      	ldr	r3, [r7, #4]
 8028ae8:	2201      	movs	r2, #1
 8028aea:	601a      	str	r2, [r3, #0]
  output_dims->h = output_shape.Dims(1);
 8028aec:	2101      	movs	r1, #1
 8028aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8028af0:	f7fd ffbb 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8028af4:	4602      	mov	r2, r0
 8028af6:	687b      	ldr	r3, [r7, #4]
 8028af8:	605a      	str	r2, [r3, #4]
  output_dims->w = output_shape.Dims(2);
 8028afa:	2102      	movs	r1, #2
 8028afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8028afe:	f7fd ffb4 	bl	8026a6a <_ZNK6tflite12RuntimeShape4DimsEi>
 8028b02:	4602      	mov	r2, r0
 8028b04:	687b      	ldr	r3, [r7, #4]
 8028b06:	609a      	str	r2, [r3, #8]
  output_dims->c = depth;
 8028b08:	687b      	ldr	r3, [r7, #4]
 8028b0a:	697a      	ldr	r2, [r7, #20]
 8028b0c:	60da      	str	r2, [r3, #12]

  pool_params->stride.h = params->stride_height;
 8028b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028b10:	689a      	ldr	r2, [r3, #8]
 8028b12:	683b      	ldr	r3, [r7, #0]
 8028b14:	605a      	str	r2, [r3, #4]
  pool_params->stride.w = params->stride_width;
 8028b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028b18:	685a      	ldr	r2, [r3, #4]
 8028b1a:	683b      	ldr	r3, [r7, #0]
 8028b1c:	601a      	str	r2, [r3, #0]
  pool_params->padding.h = data.reference_op_data.padding.height;
 8028b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028b20:	685a      	ldr	r2, [r3, #4]
 8028b22:	683b      	ldr	r3, [r7, #0]
 8028b24:	60da      	str	r2, [r3, #12]
  pool_params->padding.w = data.reference_op_data.padding.width;
 8028b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028b28:	681a      	ldr	r2, [r3, #0]
 8028b2a:	683b      	ldr	r3, [r7, #0]
 8028b2c:	609a      	str	r2, [r3, #8]
  pool_params->activation.min = data.reference_op_data.activation_min;
 8028b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028b30:	691a      	ldr	r2, [r3, #16]
 8028b32:	683b      	ldr	r3, [r7, #0]
 8028b34:	611a      	str	r2, [r3, #16]
  pool_params->activation.max = data.reference_op_data.activation_max;
 8028b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028b38:	695a      	ldr	r2, [r3, #20]
 8028b3a:	683b      	ldr	r3, [r7, #0]
 8028b3c:	615a      	str	r2, [r3, #20]

  filter_dims->n = 1;
 8028b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028b40:	2201      	movs	r2, #1
 8028b42:	601a      	str	r2, [r3, #0]
  filter_dims->h = params->filter_height;
 8028b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028b46:	691a      	ldr	r2, [r3, #16]
 8028b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028b4a:	605a      	str	r2, [r3, #4]
  filter_dims->w = params->filter_width;
 8028b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028b4e:	68da      	ldr	r2, [r3, #12]
 8028b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028b52:	609a      	str	r2, [r3, #8]
  filter_dims->c = 1;
 8028b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028b56:	2201      	movs	r2, #1
 8028b58:	60da      	str	r2, [r3, #12]
  ctx->buf = nullptr;
 8028b5a:	6a3b      	ldr	r3, [r7, #32]
 8028b5c:	2200      	movs	r2, #0
 8028b5e:	601a      	str	r2, [r3, #0]
  ctx->size = 0;
 8028b60:	6a3b      	ldr	r3, [r7, #32]
 8028b62:	2200      	movs	r2, #0
 8028b64:	605a      	str	r2, [r3, #4]
  if (data.buffer_idx > -1) {
 8028b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028b68:	6a1b      	ldr	r3, [r3, #32]
 8028b6a:	2b00      	cmp	r3, #0
 8028b6c:	db09      	blt.n	8028b82 <_ZN6tflite12_GLOBAL__N_120PopulateCommonParamsEP13TfLiteContextP13cmsis_nn_dimsS4_P20cmsis_nn_pool_paramsP16cmsis_nn_contextS4_RKNS0_6OpDataERKNS_12RuntimeShapeESE_PK16TfLitePoolParams+0xe0>
    ctx->buf = context->GetScratchBuffer(context, data.buffer_idx);
 8028b6e:	68fb      	ldr	r3, [r7, #12]
 8028b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028b74:	6a12      	ldr	r2, [r2, #32]
 8028b76:	4611      	mov	r1, r2
 8028b78:	68f8      	ldr	r0, [r7, #12]
 8028b7a:	4798      	blx	r3
 8028b7c:	4602      	mov	r2, r0
 8028b7e:	6a3b      	ldr	r3, [r7, #32]
 8028b80:	601a      	str	r2, [r3, #0]
  }
}
 8028b82:	bf00      	nop
 8028b84:	3718      	adds	r7, #24
 8028b86:	46bd      	mov	sp, r7
 8028b88:	bd80      	pop	{r7, pc}

08028b8a <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_>:
}

TfLiteStatus MaxEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                              const TfLitePoolParams* params,
                              const OpData& data, const TfLiteEvalTensor* input,
                              TfLiteEvalTensor* output) {
 8028b8a:	b590      	push	{r4, r7, lr}
 8028b8c:	b0ab      	sub	sp, #172	; 0xac
 8028b8e:	af06      	add	r7, sp, #24
 8028b90:	60f8      	str	r0, [r7, #12]
 8028b92:	60b9      	str	r1, [r7, #8]
 8028b94:	607a      	str	r2, [r7, #4]
 8028b96:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK((input->type == kTfLiteInt8) || (input->type == kTfLiteInt16));
 8028b98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8028b9c:	7a1b      	ldrb	r3, [r3, #8]
 8028b9e:	2b09      	cmp	r3, #9
 8028ba0:	d006      	beq.n	8028bb0 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x26>
 8028ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8028ba6:	7a1b      	ldrb	r3, [r3, #8]
 8028ba8:	2b07      	cmp	r3, #7
 8028baa:	d001      	beq.n	8028bb0 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x26>
 8028bac:	f004 fedc 	bl	802d968 <abort>

  RuntimeShape input_shape = micro::GetTensorShape(input);
 8028bb0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8028bb4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8028bb8:	4618      	mov	r0, r3
 8028bba:	f7ff fed8 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8028bbe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8028bc2:	4618      	mov	r0, r3
 8028bc4:	f7fd fc16 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8028bc8:	4603      	mov	r3, r0
 8028bca:	2b04      	cmp	r3, #4
 8028bcc:	d001      	beq.n	8028bd2 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x48>
 8028bce:	f004 fecb 	bl	802d968 <abort>

  RuntimeShape output_shape = micro::GetTensorShape(output);
 8028bd2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8028bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8028bda:	4618      	mov	r0, r3
 8028bdc:	f7ff fec7 	bl	802896e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8028be0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8028be4:	4618      	mov	r0, r3
 8028be6:	f7fd fc05 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8028bea:	4603      	mov	r3, r0
 8028bec:	2b04      	cmp	r3, #4
 8028bee:	d001      	beq.n	8028bf4 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x6a>
 8028bf0:	f004 feba 	bl	802d968 <abort>
  cmsis_nn_dims output_dims;
  cmsis_nn_pool_params pool_params;
  cmsis_nn_dims filter_dims;
  cmsis_nn_context ctx;

  PopulateCommonParams(context, &input_dims, &output_dims, &pool_params, &ctx,
 8028bf4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8028bf8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8028bfc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8028c00:	687b      	ldr	r3, [r7, #4]
 8028c02:	9305      	str	r3, [sp, #20]
 8028c04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8028c08:	9304      	str	r3, [sp, #16]
 8028c0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8028c0e:	9303      	str	r3, [sp, #12]
 8028c10:	683b      	ldr	r3, [r7, #0]
 8028c12:	9302      	str	r3, [sp, #8]
 8028c14:	f107 0318 	add.w	r3, r7, #24
 8028c18:	9301      	str	r3, [sp, #4]
 8028c1a:	f107 0310 	add.w	r3, r7, #16
 8028c1e:	9300      	str	r3, [sp, #0]
 8028c20:	4603      	mov	r3, r0
 8028c22:	68f8      	ldr	r0, [r7, #12]
 8028c24:	f7ff ff3d 	bl	8028aa2 <_ZN6tflite12_GLOBAL__N_120PopulateCommonParamsEP13TfLiteContextP13cmsis_nn_dimsS4_P20cmsis_nn_pool_paramsP16cmsis_nn_contextS4_RKNS0_6OpDataERKNS_12RuntimeShapeESE_PK16TfLitePoolParams>
                       &filter_dims, data, input_shape, output_shape, params);

  if (input->type == kTfLiteInt8) {
 8028c28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8028c2c:	7a1b      	ldrb	r3, [r3, #8]
 8028c2e:	2b09      	cmp	r3, #9
 8028c30:	d11e      	bne.n	8028c70 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0xe6>
    TFLITE_DCHECK_EQ(
 8028c32:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8028c36:	f7fd fefa 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8028c3a:	4604      	mov	r4, r0
 8028c3c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8028c40:	f7fd ff04 	bl	8026a4c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8028c44:	4603      	mov	r3, r0
 8028c46:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8028c4a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8028c4e:	f107 0010 	add.w	r0, r7, #16
 8028c52:	9302      	str	r3, [sp, #8]
 8028c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8028c58:	9301      	str	r3, [sp, #4]
 8028c5a:	f107 0318 	add.w	r3, r7, #24
 8028c5e:	9300      	str	r3, [sp, #0]
 8028c60:	4623      	mov	r3, r4
 8028c62:	f7f6 fbbf 	bl	801f3e4 <arm_max_pool_s8>
 8028c66:	4603      	mov	r3, r0
 8028c68:	2b00      	cmp	r3, #0
 8028c6a:	d020      	beq.n	8028cae <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x124>
 8028c6c:	f004 fe7c 	bl	802d968 <abort>
        arm_max_pool_s8(&ctx, &pool_params, &input_dims,
                        micro::GetTensorData<int8_t>(input), &filter_dims,
                        &output_dims, micro::GetTensorData<int8_t>(output)),
        ARM_CMSIS_NN_SUCCESS);
  } else {
    TFLITE_DCHECK_EQ(
 8028c70:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8028c74:	f7fd ff70 	bl	8026b58 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8028c78:	4604      	mov	r4, r0
 8028c7a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8028c7e:	f7fd ff7a 	bl	8026b76 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8028c82:	4603      	mov	r3, r0
 8028c84:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8028c88:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8028c8c:	f107 0010 	add.w	r0, r7, #16
 8028c90:	9302      	str	r3, [sp, #8]
 8028c92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8028c96:	9301      	str	r3, [sp, #4]
 8028c98:	f107 0318 	add.w	r3, r7, #24
 8028c9c:	9300      	str	r3, [sp, #0]
 8028c9e:	4623      	mov	r3, r4
 8028ca0:	f7f6 f9b7 	bl	801f012 <arm_max_pool_s16>
 8028ca4:	4603      	mov	r3, r0
 8028ca6:	2b00      	cmp	r3, #0
 8028ca8:	d001      	beq.n	8028cae <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x124>
 8028caa:	f004 fe5d 	bl	802d968 <abort>
                         micro::GetTensorData<int16_t>(input), &filter_dims,
                         &output_dims, micro::GetTensorData<int16_t>(output)),
        ARM_CMSIS_NN_SUCCESS);
  }

  return kTfLiteOk;
 8028cae:	2400      	movs	r4, #0
}
 8028cb0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8028cb4:	4618      	mov	r0, r3
 8028cb6:	f7fc fcca 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 8028cba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8028cbe:	4618      	mov	r0, r3
 8028cc0:	f7fc fcc5 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 8028cc4:	4623      	mov	r3, r4
}
 8028cc6:	4618      	mov	r0, r3
 8028cc8:	3794      	adds	r7, #148	; 0x94
 8028cca:	46bd      	mov	sp, r7
 8028ccc:	bd90      	pop	{r4, r7, pc}

08028cce <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8028cce:	b580      	push	{r7, lr}
 8028cd0:	b084      	sub	sp, #16
 8028cd2:	af00      	add	r7, sp, #0
 8028cd4:	60f8      	str	r0, [r7, #12]
 8028cd6:	60b9      	str	r1, [r7, #8]
 8028cd8:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8028cda:	68fb      	ldr	r3, [r7, #12]
 8028cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028cde:	2b00      	cmp	r3, #0
 8028ce0:	d101      	bne.n	8028ce6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8028ce2:	f004 fe41 	bl	802d968 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8028ce6:	68fb      	ldr	r3, [r7, #12]
 8028ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028cea:	2124      	movs	r1, #36	; 0x24
 8028cec:	68f8      	ldr	r0, [r7, #12]
 8028cee:	4798      	blx	r3
 8028cf0:	4603      	mov	r3, r0
}
 8028cf2:	4618      	mov	r0, r3
 8028cf4:	3710      	adds	r7, #16
 8028cf6:	46bd      	mov	sp, r7
 8028cf8:	bd80      	pop	{r7, pc}

08028cfa <_ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8028cfa:	b580      	push	{r7, lr}
 8028cfc:	b084      	sub	sp, #16
 8028cfe:	af00      	add	r7, sp, #0
 8028d00:	6078      	str	r0, [r7, #4]
 8028d02:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_STATUS(PoolingPrepare(context, node));
 8028d04:	6839      	ldr	r1, [r7, #0]
 8028d06:	6878      	ldr	r0, [r7, #4]
 8028d08:	f000 f8e2 	bl	8028ed0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>
 8028d0c:	4603      	mov	r3, r0
 8028d0e:	73fb      	strb	r3, [r7, #15]
 8028d10:	7bfb      	ldrb	r3, [r7, #15]
 8028d12:	2b00      	cmp	r3, #0
 8028d14:	d001      	beq.n	8028d1a <_ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
 8028d16:	7bfb      	ldrb	r3, [r7, #15]
 8028d18:	e005      	b.n	8028d26 <_ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c>
  // Set buffer index to a reset value
  static_cast<OpData*>(node->user_data)->buffer_idx = -1;
 8028d1a:	683b      	ldr	r3, [r7, #0]
 8028d1c:	691b      	ldr	r3, [r3, #16]
 8028d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8028d22:	621a      	str	r2, [r3, #32]
  return kTfLiteOk;
 8028d24:	2300      	movs	r3, #0
}
 8028d26:	4618      	mov	r0, r3
 8028d28:	3710      	adds	r7, #16
 8028d2a:	46bd      	mov	sp, r7
 8028d2c:	bd80      	pop	{r7, pc}
	...

08028d30 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:

  AverageEvalQuantized(context, node, params, data, input, output);

  return kTfLiteOk;
}
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 8028d30:	b580      	push	{r7, lr}
 8028d32:	b08a      	sub	sp, #40	; 0x28
 8028d34:	af02      	add	r7, sp, #8
 8028d36:	6078      	str	r0, [r7, #4]
 8028d38:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8028d3a:	683b      	ldr	r3, [r7, #0]
 8028d3c:	695b      	ldr	r3, [r3, #20]
 8028d3e:	2b00      	cmp	r3, #0
 8028d40:	d101      	bne.n	8028d46 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8028d42:	f004 fe11 	bl	802d968 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8028d46:	683b      	ldr	r3, [r7, #0]
 8028d48:	695b      	ldr	r3, [r3, #20]
 8028d4a:	61fb      	str	r3, [r7, #28]

  TFLITE_DCHECK(node->user_data != nullptr);
 8028d4c:	683b      	ldr	r3, [r7, #0]
 8028d4e:	691b      	ldr	r3, [r3, #16]
 8028d50:	2b00      	cmp	r3, #0
 8028d52:	d101      	bne.n	8028d58 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x28>
 8028d54:	f004 fe08 	bl	802d968 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8028d58:	683b      	ldr	r3, [r7, #0]
 8028d5a:	691b      	ldr	r3, [r3, #16]
 8028d5c:	61bb      	str	r3, [r7, #24]

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 8028d5e:	4b2c      	ldr	r3, [pc, #176]	; (8028e10 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xe0>)
 8028d60:	681b      	ldr	r3, [r3, #0]
 8028d62:	461a      	mov	r2, r3
 8028d64:	6839      	ldr	r1, [r7, #0]
 8028d66:	6878      	ldr	r0, [r7, #4]
 8028d68:	f7ff fdd1 	bl	802890e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8028d6c:	6178      	str	r0, [r7, #20]
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
 8028d6e:	4b29      	ldr	r3, [pc, #164]	; (8028e14 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>)
 8028d70:	681b      	ldr	r3, [r3, #0]
 8028d72:	461a      	mov	r2, r3
 8028d74:	6839      	ldr	r1, [r7, #0]
 8028d76:	6878      	ldr	r0, [r7, #4]
 8028d78:	f7ff fdd9 	bl	802892e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8028d7c:	6138      	str	r0, [r7, #16]

  if (input->type == kTfLiteFloat32) {
 8028d7e:	697b      	ldr	r3, [r7, #20]
 8028d80:	7a1b      	ldrb	r3, [r3, #8]
 8028d82:	2b01      	cmp	r3, #1
 8028d84:	d111      	bne.n	8028daa <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
#if EI_TFLITE_DISABLE_MAX_POOL_2D_IN_F32
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8028d86:	697b      	ldr	r3, [r7, #20]
 8028d88:	7a1b      	ldrb	r3, [r3, #8]
 8028d8a:	4618      	mov	r0, r3
 8028d8c:	f7fc fbb6 	bl	80254fc <TfLiteTypeGetName>
 8028d90:	4603      	mov	r3, r0
 8028d92:	60bb      	str	r3, [r7, #8]
 8028d94:	697b      	ldr	r3, [r7, #20]
 8028d96:	f103 0208 	add.w	r2, r3, #8
 8028d9a:	f107 0308 	add.w	r3, r7, #8
 8028d9e:	4619      	mov	r1, r3
 8028da0:	481d      	ldr	r0, [pc, #116]	; (8028e18 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>)
 8028da2:	f7fd ff13 	bl	8026bcc <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8028da6:	2301      	movs	r3, #1
 8028da8:	e02d      	b.n	8028e06 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xd6>
#endif
    MaxPoolingEvalFloat(context, node, params, &data.reference_op_data, input,
                        output);
  } else if (input->type == kTfLiteInt8) {
 8028daa:	697b      	ldr	r3, [r7, #20]
 8028dac:	7a1b      	ldrb	r3, [r3, #8]
 8028dae:	2b09      	cmp	r3, #9
 8028db0:	d10a      	bne.n	8028dc8 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x98>
#if EI_TFLITE_DISABLE_MAX_POOL_2D_IN_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
    MaxEvalQuantized(context, node, params, data, input, output);
 8028db2:	693b      	ldr	r3, [r7, #16]
 8028db4:	9301      	str	r3, [sp, #4]
 8028db6:	697b      	ldr	r3, [r7, #20]
 8028db8:	9300      	str	r3, [sp, #0]
 8028dba:	69bb      	ldr	r3, [r7, #24]
 8028dbc:	69fa      	ldr	r2, [r7, #28]
 8028dbe:	6839      	ldr	r1, [r7, #0]
 8028dc0:	6878      	ldr	r0, [r7, #4]
 8028dc2:	f7ff fee2 	bl	8028b8a <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_>
 8028dc6:	e01d      	b.n	8028e04 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xd4>
  } else if (input->type == kTfLiteInt16) {
 8028dc8:	697b      	ldr	r3, [r7, #20]
 8028dca:	7a1b      	ldrb	r3, [r3, #8]
 8028dcc:	2b07      	cmp	r3, #7
 8028dce:	d10a      	bne.n	8028de6 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
    MaxEvalQuantized(context, node, params, data, input, output);
 8028dd0:	693b      	ldr	r3, [r7, #16]
 8028dd2:	9301      	str	r3, [sp, #4]
 8028dd4:	697b      	ldr	r3, [r7, #20]
 8028dd6:	9300      	str	r3, [sp, #0]
 8028dd8:	69bb      	ldr	r3, [r7, #24]
 8028dda:	69fa      	ldr	r2, [r7, #28]
 8028ddc:	6839      	ldr	r1, [r7, #0]
 8028dde:	6878      	ldr	r0, [r7, #4]
 8028de0:	f7ff fed3 	bl	8028b8a <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_>
 8028de4:	e00e      	b.n	8028e04 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xd4>
  } else {
    MicroPrintf("Input type %s is not currently supported",
 8028de6:	697b      	ldr	r3, [r7, #20]
 8028de8:	7a1b      	ldrb	r3, [r3, #8]
 8028dea:	4618      	mov	r0, r3
 8028dec:	f7fc fb86 	bl	80254fc <TfLiteTypeGetName>
 8028df0:	4603      	mov	r3, r0
 8028df2:	60fb      	str	r3, [r7, #12]
 8028df4:	f107 030c 	add.w	r3, r7, #12
 8028df8:	4619      	mov	r1, r3
 8028dfa:	4808      	ldr	r0, [pc, #32]	; (8028e1c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xec>)
 8028dfc:	f7fe ff6a 	bl	8027cd4 <_ZN6tflite6UnusedIJRA41_KcPS1_EEEvDpOT_>
                TfLiteTypeGetName(input->type));
    return kTfLiteError;
 8028e00:	2301      	movs	r3, #1
 8028e02:	e000      	b.n	8028e06 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xd6>
  }

  return kTfLiteOk;
 8028e04:	2300      	movs	r3, #0
}
 8028e06:	4618      	mov	r0, r3
 8028e08:	3720      	adds	r7, #32
 8028e0a:	46bd      	mov	sp, r7
 8028e0c:	bd80      	pop	{r7, pc}
 8028e0e:	bf00      	nop
 8028e10:	08034040 	.word	0x08034040
 8028e14:	08034044 	.word	0x08034044
 8028e18:	08032a4c 	.word	0x08032a4c
 8028e1c:	08032a68 	.word	0x08032a68

08028e20 <_ZN6tflite20Register_MAX_POOL_2DEv>:

TfLiteRegistration Register_MAX_POOL_2D_INT16() {
  return tflite::micro::RegisterOp(Init, MaxPrepare, MaxEvalInt16);
}

TfLiteRegistration Register_MAX_POOL_2D() {
 8028e20:	b580      	push	{r7, lr}
 8028e22:	b084      	sub	sp, #16
 8028e24:	af02      	add	r7, sp, #8
 8028e26:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, MaxPrepare, MaxEval);
 8028e28:	6878      	ldr	r0, [r7, #4]
 8028e2a:	2300      	movs	r3, #0
 8028e2c:	9300      	str	r3, [sp, #0]
 8028e2e:	4b05      	ldr	r3, [pc, #20]	; (8028e44 <_ZN6tflite20Register_MAX_POOL_2DEv+0x24>)
 8028e30:	4a05      	ldr	r2, [pc, #20]	; (8028e48 <_ZN6tflite20Register_MAX_POOL_2DEv+0x28>)
 8028e32:	4906      	ldr	r1, [pc, #24]	; (8028e4c <_ZN6tflite20Register_MAX_POOL_2DEv+0x2c>)
 8028e34:	f7ff fd12 	bl	802885c <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8028e38:	bf00      	nop
}
 8028e3a:	6878      	ldr	r0, [r7, #4]
 8028e3c:	3708      	adds	r7, #8
 8028e3e:	46bd      	mov	sp, r7
 8028e40:	bd80      	pop	{r7, pc}
 8028e42:	bf00      	nop
 8028e44:	08028d31 	.word	0x08028d31
 8028e48:	08028cfb 	.word	0x08028cfb
 8028e4c:	08028ccf 	.word	0x08028ccf

08028e50 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:

TfLiteStatus CalculateOpDataPooling(const TfLiteContext* context,
                                    const TfLitePoolParams* params,
                                    const TfLiteTensor* input,
                                    const TfLiteTensor* output,
                                    OpDataPooling* data) {
 8028e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028e52:	b097      	sub	sp, #92	; 0x5c
 8028e54:	af08      	add	r7, sp, #32
 8028e56:	6278      	str	r0, [r7, #36]	; 0x24
 8028e58:	6239      	str	r1, [r7, #32]
 8028e5a:	61fa      	str	r2, [r7, #28]
 8028e5c:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8028e5e:	2101      	movs	r1, #1
 8028e60:	69f8      	ldr	r0, [r7, #28]
 8028e62:	f7fc fc7d 	bl	8025760 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8028e66:	6378      	str	r0, [r7, #52]	; 0x34
  int width = SizeOfDimension(input, 2);
 8028e68:	2102      	movs	r1, #2
 8028e6a:	69f8      	ldr	r0, [r7, #28]
 8028e6c:	f7fc fc78 	bl	8025760 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8028e70:	6338      	str	r0, [r7, #48]	; 0x30

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8028e72:	6a3b      	ldr	r3, [r7, #32]
 8028e74:	689d      	ldr	r5, [r3, #8]
 8028e76:	6a3b      	ldr	r3, [r7, #32]
 8028e78:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 8028e7a:	6a3b      	ldr	r3, [r7, #32]
 8028e7c:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 8028e7e:	6a3a      	ldr	r2, [r7, #32]
 8028e80:	68d2      	ldr	r2, [r2, #12]
 8028e82:	6a39      	ldr	r1, [r7, #32]
 8028e84:	7809      	ldrb	r1, [r1, #0]
  data->padding = ComputePaddingHeightWidth(
 8028e86:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8028e88:	6078      	str	r0, [r7, #4]
 8028e8a:	f107 0408 	add.w	r4, r7, #8
 8028e8e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8028e92:	9007      	str	r0, [sp, #28]
 8028e94:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8028e98:	9006      	str	r0, [sp, #24]
 8028e9a:	9105      	str	r1, [sp, #20]
 8028e9c:	9204      	str	r2, [sp, #16]
 8028e9e:	9303      	str	r3, [sp, #12]
 8028ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028ea2:	9302      	str	r3, [sp, #8]
 8028ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028ea6:	9301      	str	r3, [sp, #4]
 8028ea8:	2301      	movs	r3, #1
 8028eaa:	9300      	str	r3, [sp, #0]
 8028eac:	2301      	movs	r3, #1
 8028eae:	4632      	mov	r2, r6
 8028eb0:	4629      	mov	r1, r5
 8028eb2:	4620      	mov	r0, r4
 8028eb4:	f7fe fd96 	bl	80279e4 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8028eb8:	687c      	ldr	r4, [r7, #4]
 8028eba:	f107 0308 	add.w	r3, r7, #8
 8028ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return kTfLiteOk;
 8028ec4:	2300      	movs	r3, #0
}
 8028ec6:	4618      	mov	r0, r3
 8028ec8:	373c      	adds	r7, #60	; 0x3c
 8028eca:	46bd      	mov	sp, r7
 8028ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08028ed0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
 8028ed0:	b590      	push	{r4, r7, lr}
 8028ed2:	b08d      	sub	sp, #52	; 0x34
 8028ed4:	af02      	add	r7, sp, #8
 8028ed6:	6078      	str	r0, [r7, #4]
 8028ed8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8028eda:	683b      	ldr	r3, [r7, #0]
 8028edc:	695b      	ldr	r3, [r3, #20]
 8028ede:	2b00      	cmp	r3, #0
 8028ee0:	d101      	bne.n	8028ee6 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8028ee2:	f004 fd41 	bl	802d968 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8028ee6:	683b      	ldr	r3, [r7, #0]
 8028ee8:	695b      	ldr	r3, [r3, #20]
 8028eea:	627b      	str	r3, [r7, #36]	; 0x24

  TFLITE_DCHECK(node->user_data != nullptr);
 8028eec:	683b      	ldr	r3, [r7, #0]
 8028eee:	691b      	ldr	r3, [r3, #16]
 8028ef0:	2b00      	cmp	r3, #0
 8028ef2:	d101      	bne.n	8028ef8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8028ef4:	f004 fd38 	bl	802d968 <abort>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);
 8028ef8:	683b      	ldr	r3, [r7, #0]
 8028efa:	691b      	ldr	r3, [r3, #16]
 8028efc:	623b      	str	r3, [r7, #32]

  MicroContext* micro_context = GetMicroContext(context);
 8028efe:	6878      	ldr	r0, [r7, #4]
 8028f00:	f7fd fd1d 	bl	802693e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8028f04:	61f8      	str	r0, [r7, #28]

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kPoolingInputTensor);
 8028f06:	69fb      	ldr	r3, [r7, #28]
 8028f08:	681b      	ldr	r3, [r3, #0]
 8028f0a:	3318      	adds	r3, #24
 8028f0c:	681b      	ldr	r3, [r3, #0]
 8028f0e:	2200      	movs	r2, #0
 8028f10:	6839      	ldr	r1, [r7, #0]
 8028f12:	69f8      	ldr	r0, [r7, #28]
 8028f14:	4798      	blx	r3
 8028f16:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 8028f18:	69bb      	ldr	r3, [r7, #24]
 8028f1a:	2b00      	cmp	r3, #0
 8028f1c:	d10a      	bne.n	8028f34 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x64>
 8028f1e:	687b      	ldr	r3, [r7, #4]
 8028f20:	691c      	ldr	r4, [r3, #16]
 8028f22:	4b3b      	ldr	r3, [pc, #236]	; (8029010 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x140>)
 8028f24:	9300      	str	r3, [sp, #0]
 8028f26:	233d      	movs	r3, #61	; 0x3d
 8028f28:	4a3a      	ldr	r2, [pc, #232]	; (8029014 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x144>)
 8028f2a:	493b      	ldr	r1, [pc, #236]	; (8029018 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 8028f2c:	6878      	ldr	r0, [r7, #4]
 8028f2e:	47a0      	blx	r4
 8028f30:	2301      	movs	r3, #1
 8028f32:	e069      	b.n	8029008 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x138>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kPoolingOutputTensor);
 8028f34:	69fb      	ldr	r3, [r7, #28]
 8028f36:	681b      	ldr	r3, [r3, #0]
 8028f38:	331c      	adds	r3, #28
 8028f3a:	681b      	ldr	r3, [r3, #0]
 8028f3c:	2200      	movs	r2, #0
 8028f3e:	6839      	ldr	r1, [r7, #0]
 8028f40:	69f8      	ldr	r0, [r7, #28]
 8028f42:	4798      	blx	r3
 8028f44:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 8028f46:	697b      	ldr	r3, [r7, #20]
 8028f48:	2b00      	cmp	r3, #0
 8028f4a:	d10a      	bne.n	8028f62 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x92>
 8028f4c:	687b      	ldr	r3, [r7, #4]
 8028f4e:	691c      	ldr	r4, [r3, #16]
 8028f50:	4b32      	ldr	r3, [pc, #200]	; (802901c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 8028f52:	9300      	str	r3, [sp, #0]
 8028f54:	2340      	movs	r3, #64	; 0x40
 8028f56:	4a2f      	ldr	r2, [pc, #188]	; (8029014 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x144>)
 8028f58:	492f      	ldr	r1, [pc, #188]	; (8029018 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 8028f5a:	6878      	ldr	r0, [r7, #4]
 8028f5c:	47a0      	blx	r4
 8028f5e:	2301      	movs	r3, #1
 8028f60:	e052      	b.n	8029008 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x138>

  TF_LITE_ENSURE_STATUS(
 8028f62:	6a3b      	ldr	r3, [r7, #32]
 8028f64:	9300      	str	r3, [sp, #0]
 8028f66:	697b      	ldr	r3, [r7, #20]
 8028f68:	69ba      	ldr	r2, [r7, #24]
 8028f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028f6c:	6878      	ldr	r0, [r7, #4]
 8028f6e:	f7ff ff6f 	bl	8028e50 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
 8028f72:	4603      	mov	r3, r0
 8028f74:	74fb      	strb	r3, [r7, #19]
 8028f76:	7cfb      	ldrb	r3, [r7, #19]
 8028f78:	2b00      	cmp	r3, #0
 8028f7a:	d001      	beq.n	8028f80 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xb0>
 8028f7c:	7cfb      	ldrb	r3, [r7, #19]
 8028f7e:	e043      	b.n	8029008 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x138>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
 8028f80:	69bb      	ldr	r3, [r7, #24]
 8028f82:	781b      	ldrb	r3, [r3, #0]
 8028f84:	2b01      	cmp	r3, #1
 8028f86:	d10a      	bne.n	8028f9e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 8028f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f8a:	7d18      	ldrb	r0, [r3, #20]
 8028f8c:	6a3b      	ldr	r3, [r7, #32]
 8028f8e:	f103 0118 	add.w	r1, r3, #24
 8028f92:	6a3b      	ldr	r3, [r7, #32]
 8028f94:	331c      	adds	r3, #28
 8028f96:	461a      	mov	r2, r3
 8028f98:	f7fd fd9c 	bl	8026ad4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 8028f9c:	e025      	b.n	8028fea <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x11a>
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8028f9e:	69bb      	ldr	r3, [r7, #24]
 8028fa0:	781b      	ldrb	r3, [r3, #0]
 8028fa2:	2b09      	cmp	r3, #9
 8028fa4:	d003      	beq.n	8028fae <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xde>
 8028fa6:	69bb      	ldr	r3, [r7, #24]
 8028fa8:	781b      	ldrb	r3, [r3, #0]
 8028faa:	2b07      	cmp	r3, #7
 8028fac:	d10d      	bne.n	8028fca <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xfa>
    CalculateActivationRangeQuantized(context, params->activation, output,
 8028fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028fb0:	7d19      	ldrb	r1, [r3, #20]
 8028fb2:	6a3b      	ldr	r3, [r7, #32]
 8028fb4:	f103 0210 	add.w	r2, r3, #16
 8028fb8:	6a3b      	ldr	r3, [r7, #32]
 8028fba:	3314      	adds	r3, #20
 8028fbc:	9300      	str	r3, [sp, #0]
 8028fbe:	4613      	mov	r3, r2
 8028fc0:	697a      	ldr	r2, [r7, #20]
 8028fc2:	6878      	ldr	r0, [r7, #4]
 8028fc4:	f7fd f9be 	bl	8026344 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8028fc8:	e00f      	b.n	8028fea <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x11a>
                                      &data->activation_min,
                                      &data->activation_max);
  } else {
    MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8028fca:	69bb      	ldr	r3, [r7, #24]
 8028fcc:	781b      	ldrb	r3, [r3, #0]
 8028fce:	4618      	mov	r0, r3
 8028fd0:	f7fc fa94 	bl	80254fc <TfLiteTypeGetName>
 8028fd4:	4603      	mov	r3, r0
 8028fd6:	60fb      	str	r3, [r7, #12]
 8028fd8:	69ba      	ldr	r2, [r7, #24]
 8028fda:	f107 030c 	add.w	r3, r7, #12
 8028fde:	4619      	mov	r1, r3
 8028fe0:	480f      	ldr	r0, [pc, #60]	; (8029020 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 8028fe2:	f7fd fdd7 	bl	8026b94 <_ZN6tflite6UnusedIJRA28_KcPS1_R10TfLiteTypeEEEvDpOT_>
                input->type);
    return kTfLiteError;
 8028fe6:	2301      	movs	r3, #1
 8028fe8:	e00e      	b.n	8029008 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x138>
  }

  micro_context->DeallocateTempTfLiteTensor(input);
 8028fea:	69fb      	ldr	r3, [r7, #28]
 8028fec:	681b      	ldr	r3, [r3, #0]
 8028fee:	3324      	adds	r3, #36	; 0x24
 8028ff0:	681b      	ldr	r3, [r3, #0]
 8028ff2:	69b9      	ldr	r1, [r7, #24]
 8028ff4:	69f8      	ldr	r0, [r7, #28]
 8028ff6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8028ff8:	69fb      	ldr	r3, [r7, #28]
 8028ffa:	681b      	ldr	r3, [r3, #0]
 8028ffc:	3324      	adds	r3, #36	; 0x24
 8028ffe:	681b      	ldr	r3, [r3, #0]
 8029000:	6979      	ldr	r1, [r7, #20]
 8029002:	69f8      	ldr	r0, [r7, #28]
 8029004:	4798      	blx	r3

  return kTfLiteOk;
 8029006:	2300      	movs	r3, #0
}
 8029008:	4618      	mov	r0, r3
 802900a:	372c      	adds	r7, #44	; 0x2c
 802900c:	46bd      	mov	sp, r7
 802900e:	bd90      	pop	{r4, r7, pc}
 8029010:	08032b4c 	.word	0x08032b4c
 8029014:	08032a94 	.word	0x08032a94
 8029018:	08032b34 	.word	0x08032b34
 802901c:	08032b60 	.word	0x08032b60
 8029020:	08032b74 	.word	0x08032b74

08029024 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8029024:	b5b0      	push	{r4, r5, r7, lr}
 8029026:	b090      	sub	sp, #64	; 0x40
 8029028:	af04      	add	r7, sp, #16
 802902a:	6078      	str	r0, [r7, #4]
 802902c:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 802902e:	6878      	ldr	r0, [r7, #4]
 8029030:	f7fd fc85 	bl	802693e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8029034:	6238      	str	r0, [r7, #32]

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kInputTensor);
 8029036:	6a3b      	ldr	r3, [r7, #32]
 8029038:	681b      	ldr	r3, [r3, #0]
 802903a:	3318      	adds	r3, #24
 802903c:	681b      	ldr	r3, [r3, #0]
 802903e:	2200      	movs	r2, #0
 8029040:	6839      	ldr	r1, [r7, #0]
 8029042:	6a38      	ldr	r0, [r7, #32]
 8029044:	4798      	blx	r3
 8029046:	61f8      	str	r0, [r7, #28]
  TF_LITE_ENSURE(context, input != nullptr);
 8029048:	69fb      	ldr	r3, [r7, #28]
 802904a:	2b00      	cmp	r3, #0
 802904c:	d10a      	bne.n	8029064 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x40>
 802904e:	687b      	ldr	r3, [r7, #4]
 8029050:	691c      	ldr	r4, [r3, #16]
 8029052:	4b6b      	ldr	r3, [pc, #428]	; (8029200 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1dc>)
 8029054:	9300      	str	r3, [sp, #0]
 8029056:	2328      	movs	r3, #40	; 0x28
 8029058:	4a6a      	ldr	r2, [pc, #424]	; (8029204 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1e0>)
 802905a:	496b      	ldr	r1, [pc, #428]	; (8029208 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1e4>)
 802905c:	6878      	ldr	r0, [r7, #4]
 802905e:	47a0      	blx	r4
 8029060:	2301      	movs	r3, #1
 8029062:	e0c9      	b.n	80291f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kOutputTensor);
 8029064:	6a3b      	ldr	r3, [r7, #32]
 8029066:	681b      	ldr	r3, [r3, #0]
 8029068:	331c      	adds	r3, #28
 802906a:	681b      	ldr	r3, [r3, #0]
 802906c:	2200      	movs	r2, #0
 802906e:	6839      	ldr	r1, [r7, #0]
 8029070:	6a38      	ldr	r0, [r7, #32]
 8029072:	4798      	blx	r3
 8029074:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, output != nullptr);
 8029076:	69bb      	ldr	r3, [r7, #24]
 8029078:	2b00      	cmp	r3, #0
 802907a:	d10a      	bne.n	8029092 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x6e>
 802907c:	687b      	ldr	r3, [r7, #4]
 802907e:	691c      	ldr	r4, [r3, #16]
 8029080:	4b62      	ldr	r3, [pc, #392]	; (802920c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1e8>)
 8029082:	9300      	str	r3, [sp, #0]
 8029084:	232b      	movs	r3, #43	; 0x2b
 8029086:	4a5f      	ldr	r2, [pc, #380]	; (8029204 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1e0>)
 8029088:	495f      	ldr	r1, [pc, #380]	; (8029208 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1e4>)
 802908a:	6878      	ldr	r0, [r7, #4]
 802908c:	47a0      	blx	r4
 802908e:	2301      	movs	r3, #1
 8029090:	e0b2      	b.n	80291f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 8029092:	69f8      	ldr	r0, [r7, #28]
 8029094:	f7fd fd8a 	bl	8026bac <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 8029098:	4602      	mov	r2, r0
 802909a:	460b      	mov	r3, r1
 802909c:	4613      	mov	r3, r2
 802909e:	617b      	str	r3, [r7, #20]
  TfLiteIntArray* output_shape = output->dims;
 80290a0:	69bb      	ldr	r3, [r7, #24]
 80290a2:	689b      	ldr	r3, [r3, #8]
 80290a4:	613b      	str	r3, [r7, #16]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80290a6:	6838      	ldr	r0, [r7, #0]
 80290a8:	f7fc fb6b 	bl	8025782 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80290ac:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 80290ae:	2b01      	cmp	r3, #1
 80290b0:	d109      	bne.n	80290c6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa2>
 80290b2:	693b      	ldr	r3, [r7, #16]
 80290b4:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80290b6:	2b01      	cmp	r3, #1
 80290b8:	d105      	bne.n	80290c6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa2>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 80290ba:	693b      	ldr	r3, [r7, #16]
 80290bc:	685b      	ldr	r3, [r3, #4]
 80290be:	2b00      	cmp	r3, #0
 80290c0:	d101      	bne.n	80290c6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa2>
 80290c2:	2301      	movs	r3, #1
 80290c4:	e000      	b.n	80290c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
 80290c6:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80290c8:	2b00      	cmp	r3, #0
 80290ca:	d002      	beq.n	80290d2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xae>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 80290cc:	693b      	ldr	r3, [r7, #16]
 80290ce:	2200      	movs	r2, #0
 80290d0:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 80290d2:	2301      	movs	r3, #1
 80290d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int stretch_dim = -1;
 80290d6:	f04f 33ff 	mov.w	r3, #4294967295
 80290da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int i = 0; i < output_shape->size; ++i) {
 80290dc:	2300      	movs	r3, #0
 80290de:	627b      	str	r3, [r7, #36]	; 0x24
 80290e0:	e02a      	b.n	8029138 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x114>
    int value = output_shape->data[i];
 80290e2:	693a      	ldr	r2, [r7, #16]
 80290e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80290e6:	009b      	lsls	r3, r3, #2
 80290e8:	4413      	add	r3, r2
 80290ea:	685b      	ldr	r3, [r3, #4]
 80290ec:	60fb      	str	r3, [r7, #12]
    if (value == -1) {
 80290ee:	68fb      	ldr	r3, [r7, #12]
 80290f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80290f4:	d118      	bne.n	8029128 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x104>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 80290f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80290f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80290fc:	d011      	beq.n	8029122 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
 80290fe:	687b      	ldr	r3, [r7, #4]
 8029100:	691c      	ldr	r4, [r3, #16]
 8029102:	f04f 33ff 	mov.w	r3, #4294967295
 8029106:	9303      	str	r3, [sp, #12]
 8029108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802910a:	9302      	str	r3, [sp, #8]
 802910c:	4b40      	ldr	r3, [pc, #256]	; (8029210 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ec>)
 802910e:	9301      	str	r3, [sp, #4]
 8029110:	4b40      	ldr	r3, [pc, #256]	; (8029214 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1f0>)
 8029112:	9300      	str	r3, [sp, #0]
 8029114:	2340      	movs	r3, #64	; 0x40
 8029116:	4a3b      	ldr	r2, [pc, #236]	; (8029204 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1e0>)
 8029118:	493f      	ldr	r1, [pc, #252]	; (8029218 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1f4>)
 802911a:	6878      	ldr	r0, [r7, #4]
 802911c:	47a0      	blx	r4
 802911e:	2301      	movs	r3, #1
 8029120:	e06a      	b.n	80291f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>
      stretch_dim = i;
 8029122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029124:	62bb      	str	r3, [r7, #40]	; 0x28
 8029126:	e004      	b.n	8029132 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10e>
    } else {
      num_output_elements *= value;
 8029128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802912a:	68fa      	ldr	r2, [r7, #12]
 802912c:	fb02 f303 	mul.w	r3, r2, r3
 8029130:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 0; i < output_shape->size; ++i) {
 8029132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029134:	3301      	adds	r3, #1
 8029136:	627b      	str	r3, [r7, #36]	; 0x24
 8029138:	693b      	ldr	r3, [r7, #16]
 802913a:	681b      	ldr	r3, [r3, #0]
 802913c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802913e:	429a      	cmp	r2, r3
 8029140:	dbcf      	blt.n	80290e2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xbe>
    }
  }
  if (stretch_dim != -1) {
 8029142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029148:	d011      	beq.n	802916e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x14a>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 802914a:	697a      	ldr	r2, [r7, #20]
 802914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802914e:	fb92 f2f3 	sdiv	r2, r2, r3
 8029152:	6939      	ldr	r1, [r7, #16]
 8029154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029156:	009b      	lsls	r3, r3, #2
 8029158:	440b      	add	r3, r1
 802915a:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 802915c:	693a      	ldr	r2, [r7, #16]
 802915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029160:	009b      	lsls	r3, r3, #2
 8029162:	4413      	add	r3, r2
 8029164:	685a      	ldr	r2, [r3, #4]
 8029166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029168:	fb02 f303 	mul.w	r3, r2, r3
 802916c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 802916e:	69fb      	ldr	r3, [r7, #28]
 8029170:	781a      	ldrb	r2, [r3, #0]
 8029172:	69bb      	ldr	r3, [r7, #24]
 8029174:	781b      	ldrb	r3, [r3, #0]
 8029176:	429a      	cmp	r2, r3
 8029178:	d01a      	beq.n	80291b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x18c>
 802917a:	687b      	ldr	r3, [r7, #4]
 802917c:	691c      	ldr	r4, [r3, #16]
 802917e:	69fb      	ldr	r3, [r7, #28]
 8029180:	781b      	ldrb	r3, [r3, #0]
 8029182:	4618      	mov	r0, r3
 8029184:	f7fc f9ba 	bl	80254fc <TfLiteTypeGetName>
 8029188:	4605      	mov	r5, r0
 802918a:	69bb      	ldr	r3, [r7, #24]
 802918c:	781b      	ldrb	r3, [r3, #0]
 802918e:	4618      	mov	r0, r3
 8029190:	f7fc f9b4 	bl	80254fc <TfLiteTypeGetName>
 8029194:	4603      	mov	r3, r0
 8029196:	9303      	str	r3, [sp, #12]
 8029198:	9502      	str	r5, [sp, #8]
 802919a:	4b20      	ldr	r3, [pc, #128]	; (802921c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1f8>)
 802919c:	9301      	str	r3, [sp, #4]
 802919e:	4b20      	ldr	r3, [pc, #128]	; (8029220 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1fc>)
 80291a0:	9300      	str	r3, [sp, #0]
 80291a2:	234b      	movs	r3, #75	; 0x4b
 80291a4:	4a17      	ldr	r2, [pc, #92]	; (8029204 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1e0>)
 80291a6:	491f      	ldr	r1, [pc, #124]	; (8029224 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x200>)
 80291a8:	6878      	ldr	r0, [r7, #4]
 80291aa:	47a0      	blx	r4
 80291ac:	2301      	movs	r3, #1
 80291ae:	e023      	b.n	80291f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 80291b0:	697a      	ldr	r2, [r7, #20]
 80291b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80291b4:	429a      	cmp	r2, r3
 80291b6:	d010      	beq.n	80291da <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b6>
 80291b8:	687b      	ldr	r3, [r7, #4]
 80291ba:	691c      	ldr	r4, [r3, #16]
 80291bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80291be:	9303      	str	r3, [sp, #12]
 80291c0:	697b      	ldr	r3, [r7, #20]
 80291c2:	9302      	str	r3, [sp, #8]
 80291c4:	4b18      	ldr	r3, [pc, #96]	; (8029228 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x204>)
 80291c6:	9301      	str	r3, [sp, #4]
 80291c8:	4b18      	ldr	r3, [pc, #96]	; (802922c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x208>)
 80291ca:	9300      	str	r3, [sp, #0]
 80291cc:	234c      	movs	r3, #76	; 0x4c
 80291ce:	4a0d      	ldr	r2, [pc, #52]	; (8029204 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1e0>)
 80291d0:	4911      	ldr	r1, [pc, #68]	; (8029218 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80291d2:	6878      	ldr	r0, [r7, #4]
 80291d4:	47a0      	blx	r4
 80291d6:	2301      	movs	r3, #1
 80291d8:	e00e      	b.n	80291f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>

  micro_context->DeallocateTempTfLiteTensor(input);
 80291da:	6a3b      	ldr	r3, [r7, #32]
 80291dc:	681b      	ldr	r3, [r3, #0]
 80291de:	3324      	adds	r3, #36	; 0x24
 80291e0:	681b      	ldr	r3, [r3, #0]
 80291e2:	69f9      	ldr	r1, [r7, #28]
 80291e4:	6a38      	ldr	r0, [r7, #32]
 80291e6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 80291e8:	6a3b      	ldr	r3, [r7, #32]
 80291ea:	681b      	ldr	r3, [r3, #0]
 80291ec:	3324      	adds	r3, #36	; 0x24
 80291ee:	681b      	ldr	r3, [r3, #0]
 80291f0:	69b9      	ldr	r1, [r7, #24]
 80291f2:	6a38      	ldr	r0, [r7, #32]
 80291f4:	4798      	blx	r3
  return kTfLiteOk;
 80291f6:	2300      	movs	r3, #0
}
 80291f8:	4618      	mov	r0, r3
 80291fa:	3730      	adds	r7, #48	; 0x30
 80291fc:	46bd      	mov	sp, r7
 80291fe:	bdb0      	pop	{r4, r5, r7, pc}
 8029200:	08032c40 	.word	0x08032c40
 8029204:	08032b90 	.word	0x08032b90
 8029208:	08032c28 	.word	0x08032c28
 802920c:	08032c54 	.word	0x08032c54
 8029210:	08032c84 	.word	0x08032c84
 8029214:	08032c88 	.word	0x08032c88
 8029218:	08032c68 	.word	0x08032c68
 802921c:	08032cb0 	.word	0x08032cb0
 8029220:	08032cc0 	.word	0x08032cc0
 8029224:	08032c94 	.word	0x08032c94
 8029228:	08032ccc 	.word	0x08032ccc
 802922c:	08032ce0 	.word	0x08032ce0

08029230 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8029230:	b590      	push	{r4, r7, lr}
 8029232:	b087      	sub	sp, #28
 8029234:	af04      	add	r7, sp, #16
 8029236:	6078      	str	r0, [r7, #4]
 8029238:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 802923a:	6838      	ldr	r0, [r7, #0]
 802923c:	f7fc faa1 	bl	8025782 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8029240:	4603      	mov	r3, r0
 8029242:	2b01      	cmp	r3, #1
 8029244:	d007      	beq.n	8029256 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8029246:	6838      	ldr	r0, [r7, #0]
 8029248:	f7fc fa9b 	bl	8025782 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802924c:	4603      	mov	r3, r0
 802924e:	2b02      	cmp	r3, #2
 8029250:	d001      	beq.n	8029256 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8029252:	2301      	movs	r3, #1
 8029254:	e000      	b.n	8029258 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8029256:	2300      	movs	r3, #0
 8029258:	2b00      	cmp	r3, #0
 802925a:	d00a      	beq.n	8029272 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 802925c:	687b      	ldr	r3, [r7, #4]
 802925e:	691c      	ldr	r4, [r3, #16]
 8029260:	4b27      	ldr	r3, [pc, #156]	; (8029300 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8029262:	9300      	str	r3, [sp, #0]
 8029264:	2354      	movs	r3, #84	; 0x54
 8029266:	4a27      	ldr	r2, [pc, #156]	; (8029304 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8029268:	4927      	ldr	r1, [pc, #156]	; (8029308 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 802926a:	6878      	ldr	r0, [r7, #4]
 802926c:	47a0      	blx	r4
 802926e:	2301      	movs	r3, #1
 8029270:	e041      	b.n	80292f6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8029272:	6838      	ldr	r0, [r7, #0]
 8029274:	f7fc fa98 	bl	80257a8 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8029278:	4603      	mov	r3, r0
 802927a:	2b01      	cmp	r3, #1
 802927c:	bf14      	ite	ne
 802927e:	2301      	movne	r3, #1
 8029280:	2300      	moveq	r3, #0
 8029282:	b2db      	uxtb	r3, r3
 8029284:	2b00      	cmp	r3, #0
 8029286:	d013      	beq.n	80292b0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 8029288:	687b      	ldr	r3, [r7, #4]
 802928a:	691c      	ldr	r4, [r3, #16]
 802928c:	6838      	ldr	r0, [r7, #0]
 802928e:	f7fc fa8b 	bl	80257a8 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8029292:	4603      	mov	r3, r0
 8029294:	2201      	movs	r2, #1
 8029296:	9203      	str	r2, [sp, #12]
 8029298:	9302      	str	r3, [sp, #8]
 802929a:	4b1c      	ldr	r3, [pc, #112]	; (802930c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 802929c:	9301      	str	r3, [sp, #4]
 802929e:	4b1c      	ldr	r3, [pc, #112]	; (8029310 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 80292a0:	9300      	str	r3, [sp, #0]
 80292a2:	2355      	movs	r3, #85	; 0x55
 80292a4:	4a17      	ldr	r2, [pc, #92]	; (8029304 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80292a6:	491b      	ldr	r1, [pc, #108]	; (8029314 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 80292a8:	6878      	ldr	r0, [r7, #4]
 80292aa:	47a0      	blx	r4
 80292ac:	2301      	movs	r3, #1
 80292ae:	e022      	b.n	80292f6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 80292b0:	6839      	ldr	r1, [r7, #0]
 80292b2:	6878      	ldr	r0, [r7, #4]
 80292b4:	f7ff feb6 	bl	8029024 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 80292b8:	4603      	mov	r3, r0
 80292ba:	2b00      	cmp	r3, #0
 80292bc:	bf14      	ite	ne
 80292be:	2301      	movne	r3, #1
 80292c0:	2300      	moveq	r3, #0
 80292c2:	b2db      	uxtb	r3, r3
 80292c4:	2b00      	cmp	r3, #0
 80292c6:	d015      	beq.n	80292f4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 80292c8:	687b      	ldr	r3, [r7, #4]
 80292ca:	691c      	ldr	r4, [r3, #16]
 80292cc:	6839      	ldr	r1, [r7, #0]
 80292ce:	6878      	ldr	r0, [r7, #4]
 80292d0:	f7ff fea8 	bl	8029024 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 80292d4:	4603      	mov	r3, r0
 80292d6:	461a      	mov	r2, r3
 80292d8:	2300      	movs	r3, #0
 80292da:	9303      	str	r3, [sp, #12]
 80292dc:	9202      	str	r2, [sp, #8]
 80292de:	4b0e      	ldr	r3, [pc, #56]	; (8029318 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 80292e0:	9301      	str	r3, [sp, #4]
 80292e2:	4b0e      	ldr	r3, [pc, #56]	; (802931c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 80292e4:	9300      	str	r3, [sp, #0]
 80292e6:	2356      	movs	r3, #86	; 0x56
 80292e8:	4a06      	ldr	r2, [pc, #24]	; (8029304 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80292ea:	490a      	ldr	r1, [pc, #40]	; (8029314 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 80292ec:	6878      	ldr	r0, [r7, #4]
 80292ee:	47a0      	blx	r4
 80292f0:	2301      	movs	r3, #1
 80292f2:	e000      	b.n	80292f6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 80292f4:	2300      	movs	r3, #0
}
 80292f6:	4618      	mov	r0, r3
 80292f8:	370c      	adds	r7, #12
 80292fa:	46bd      	mov	sp, r7
 80292fc:	bd90      	pop	{r4, r7, pc}
 80292fe:	bf00      	nop
 8029300:	08032cf4 	.word	0x08032cf4
 8029304:	08032b90 	.word	0x08032b90
 8029308:	08032c28 	.word	0x08032c28
 802930c:	08032d24 	.word	0x08032d24
 8029310:	08032d28 	.word	0x08032d28
 8029314:	08032c68 	.word	0x08032c68
 8029318:	08032d3c 	.word	0x08032d3c
 802931c:	08032d48 	.word	0x08032d48

08029320 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8029320:	b580      	push	{r7, lr}
 8029322:	b086      	sub	sp, #24
 8029324:	af00      	add	r7, sp, #0
 8029326:	6078      	str	r0, [r7, #4]
 8029328:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 802932a:	2200      	movs	r2, #0
 802932c:	6839      	ldr	r1, [r7, #0]
 802932e:	6878      	ldr	r0, [r7, #4]
 8029330:	f7ff faed 	bl	802890e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8029334:	6178      	str	r0, [r7, #20]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8029336:	2200      	movs	r2, #0
 8029338:	6839      	ldr	r1, [r7, #0]
 802933a:	6878      	ldr	r0, [r7, #4]
 802933c:	f7ff faf7 	bl	802892e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8029340:	6138      	str	r0, [r7, #16]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 8029342:	697b      	ldr	r3, [r7, #20]
 8029344:	7a1b      	ldrb	r3, [r3, #8]
 8029346:	f107 0208 	add.w	r2, r7, #8
 802934a:	4611      	mov	r1, r2
 802934c:	4618      	mov	r0, r3
 802934e:	f7fd f877 	bl	8026440 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8029352:	4603      	mov	r3, r0
 8029354:	73fb      	strb	r3, [r7, #15]
 8029356:	7bfb      	ldrb	r3, [r7, #15]
 8029358:	2b00      	cmp	r3, #0
 802935a:	d001      	beq.n	8029360 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 802935c:	7bfb      	ldrb	r3, [r7, #15]
 802935e:	e018      	b.n	8029392 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x72>
  input_bytes *= ElementCount(*input->dims);
 8029360:	697b      	ldr	r3, [r7, #20]
 8029362:	685b      	ldr	r3, [r3, #4]
 8029364:	4618      	mov	r0, r3
 8029366:	f7fd fb0c 	bl	8026982 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 802936a:	4602      	mov	r2, r0
 802936c:	68bb      	ldr	r3, [r7, #8]
 802936e:	fb02 f303 	mul.w	r3, r2, r3
 8029372:	60bb      	str	r3, [r7, #8]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 8029374:	697b      	ldr	r3, [r7, #20]
 8029376:	681a      	ldr	r2, [r3, #0]
 8029378:	693b      	ldr	r3, [r7, #16]
 802937a:	681b      	ldr	r3, [r3, #0]
 802937c:	429a      	cmp	r2, r3
 802937e:	d007      	beq.n	8029390 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x70>
    // Otherwise perform reshape with copy.
    memcpy(output->data.raw, input->data.raw, input_bytes);
 8029380:	693b      	ldr	r3, [r7, #16]
 8029382:	6818      	ldr	r0, [r3, #0]
 8029384:	697b      	ldr	r3, [r7, #20]
 8029386:	681b      	ldr	r3, [r3, #0]
 8029388:	68ba      	ldr	r2, [r7, #8]
 802938a:	4619      	mov	r1, r3
 802938c:	f005 faad 	bl	802e8ea <memcpy>
  }
  return kTfLiteOk;
 8029390:	2300      	movs	r3, #0
}
 8029392:	4618      	mov	r0, r3
 8029394:	3718      	adds	r7, #24
 8029396:	46bd      	mov	sp, r7
 8029398:	bd80      	pop	{r7, pc}
	...

0802939c <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 802939c:	b580      	push	{r7, lr}
 802939e:	b084      	sub	sp, #16
 80293a0:	af02      	add	r7, sp, #8
 80293a2:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(nullptr, reshape::Prepare, reshape::Eval);
 80293a4:	6878      	ldr	r0, [r7, #4]
 80293a6:	2300      	movs	r3, #0
 80293a8:	9300      	str	r3, [sp, #0]
 80293aa:	4b05      	ldr	r3, [pc, #20]	; (80293c0 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x24>)
 80293ac:	4a05      	ldr	r2, [pc, #20]	; (80293c4 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 80293ae:	2100      	movs	r1, #0
 80293b0:	f7ff fa54 	bl	802885c <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 80293b4:	bf00      	nop
}
 80293b6:	6878      	ldr	r0, [r7, #4]
 80293b8:	3708      	adds	r7, #8
 80293ba:	46bd      	mov	sp, r7
 80293bc:	bd80      	pop	{r7, pc}
 80293be:	bf00      	nop
 80293c0:	08029321 	.word	0x08029321
 80293c4:	08029231 	.word	0x08029231

080293c8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  SoftmaxParams softmax_params;
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80293c8:	b580      	push	{r7, lr}
 80293ca:	b084      	sub	sp, #16
 80293cc:	af00      	add	r7, sp, #0
 80293ce:	60f8      	str	r0, [r7, #12]
 80293d0:	60b9      	str	r1, [r7, #8]
 80293d2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80293d4:	68fb      	ldr	r3, [r7, #12]
 80293d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80293d8:	2b00      	cmp	r3, #0
 80293da:	d101      	bne.n	80293e0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 80293dc:	f004 fac4 	bl	802d968 <abort>
  return context->AllocatePersistentBuffer(context,
 80293e0:	68fb      	ldr	r3, [r7, #12]
 80293e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80293e4:	2140      	movs	r1, #64	; 0x40
 80293e6:	68f8      	ldr	r0, [r7, #12]
 80293e8:	4798      	blx	r3
 80293ea:	4603      	mov	r3, r0
                                           sizeof(CMSISNNSoftmaxParams));
}
 80293ec:	4618      	mov	r0, r3
 80293ee:	3710      	adds	r7, #16
 80293f0:	46bd      	mov	sp, r7
 80293f2:	bd80      	pop	{r7, pc}

080293f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80293f4:	b590      	push	{r4, r7, lr}
 80293f6:	b09d      	sub	sp, #116	; 0x74
 80293f8:	af04      	add	r7, sp, #16
 80293fa:	6078      	str	r0, [r7, #4]
 80293fc:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 80293fe:	6878      	ldr	r0, [r7, #4]
 8029400:	f7fd fa9d 	bl	802693e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8029404:	65f8      	str	r0, [r7, #92]	; 0x5c

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8029406:	6838      	ldr	r0, [r7, #0]
 8029408:	f7fc f9bb 	bl	8025782 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802940c:	4603      	mov	r3, r0
 802940e:	2b01      	cmp	r3, #1
 8029410:	bf14      	ite	ne
 8029412:	2301      	movne	r3, #1
 8029414:	2300      	moveq	r3, #0
 8029416:	b2db      	uxtb	r3, r3
 8029418:	2b00      	cmp	r3, #0
 802941a:	d013      	beq.n	8029444 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x50>
 802941c:	687b      	ldr	r3, [r7, #4]
 802941e:	691c      	ldr	r4, [r3, #16]
 8029420:	6838      	ldr	r0, [r7, #0]
 8029422:	f7fc f9ae 	bl	8025782 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8029426:	4603      	mov	r3, r0
 8029428:	2201      	movs	r2, #1
 802942a:	9203      	str	r2, [sp, #12]
 802942c:	9302      	str	r3, [sp, #8]
 802942e:	4b6c      	ldr	r3, [pc, #432]	; (80295e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8029430:	9301      	str	r3, [sp, #4]
 8029432:	4b6c      	ldr	r3, [pc, #432]	; (80295e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f0>)
 8029434:	9300      	str	r3, [sp, #0]
 8029436:	2334      	movs	r3, #52	; 0x34
 8029438:	4a6b      	ldr	r2, [pc, #428]	; (80295e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 802943a:	496c      	ldr	r1, [pc, #432]	; (80295ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 802943c:	6878      	ldr	r0, [r7, #4]
 802943e:	47a0      	blx	r4
 8029440:	2401      	movs	r4, #1
 8029442:	e0c8      	b.n	80295d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8029444:	6838      	ldr	r0, [r7, #0]
 8029446:	f7fc f9af 	bl	80257a8 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 802944a:	4603      	mov	r3, r0
 802944c:	2b01      	cmp	r3, #1
 802944e:	bf14      	ite	ne
 8029450:	2301      	movne	r3, #1
 8029452:	2300      	moveq	r3, #0
 8029454:	b2db      	uxtb	r3, r3
 8029456:	2b00      	cmp	r3, #0
 8029458:	d013      	beq.n	8029482 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 802945a:	687b      	ldr	r3, [r7, #4]
 802945c:	691c      	ldr	r4, [r3, #16]
 802945e:	6838      	ldr	r0, [r7, #0]
 8029460:	f7fc f9a2 	bl	80257a8 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8029464:	4603      	mov	r3, r0
 8029466:	2201      	movs	r2, #1
 8029468:	9203      	str	r2, [sp, #12]
 802946a:	9302      	str	r3, [sp, #8]
 802946c:	4b5c      	ldr	r3, [pc, #368]	; (80295e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 802946e:	9301      	str	r3, [sp, #4]
 8029470:	4b5f      	ldr	r3, [pc, #380]	; (80295f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 8029472:	9300      	str	r3, [sp, #0]
 8029474:	2335      	movs	r3, #53	; 0x35
 8029476:	4a5c      	ldr	r2, [pc, #368]	; (80295e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8029478:	495c      	ldr	r1, [pc, #368]	; (80295ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 802947a:	6878      	ldr	r0, [r7, #4]
 802947c:	47a0      	blx	r4
 802947e:	2401      	movs	r4, #1
 8029480:	e0a9      	b.n	80295d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8029482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029484:	681b      	ldr	r3, [r3, #0]
 8029486:	3318      	adds	r3, #24
 8029488:	681b      	ldr	r3, [r3, #0]
 802948a:	2200      	movs	r2, #0
 802948c:	6839      	ldr	r1, [r7, #0]
 802948e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8029490:	4798      	blx	r3
 8029492:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, input != nullptr);
 8029494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029496:	2b00      	cmp	r3, #0
 8029498:	d10a      	bne.n	80294b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 802949a:	687b      	ldr	r3, [r7, #4]
 802949c:	691c      	ldr	r4, [r3, #16]
 802949e:	4b55      	ldr	r3, [pc, #340]	; (80295f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 80294a0:	9300      	str	r3, [sp, #0]
 80294a2:	2337      	movs	r3, #55	; 0x37
 80294a4:	4a50      	ldr	r2, [pc, #320]	; (80295e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80294a6:	4954      	ldr	r1, [pc, #336]	; (80295f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 80294a8:	6878      	ldr	r0, [r7, #4]
 80294aa:	47a0      	blx	r4
 80294ac:	2401      	movs	r4, #1
 80294ae:	e092      	b.n	80295d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 80294b0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80294b2:	f7fc f948 	bl	8025746 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80294b6:	4603      	mov	r3, r0
 80294b8:	2b00      	cmp	r3, #0
 80294ba:	bfd4      	ite	le
 80294bc:	2301      	movle	r3, #1
 80294be:	2300      	movgt	r3, #0
 80294c0:	b2db      	uxtb	r3, r3
 80294c2:	2b00      	cmp	r3, #0
 80294c4:	d00a      	beq.n	80294dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe8>
 80294c6:	687b      	ldr	r3, [r7, #4]
 80294c8:	691c      	ldr	r4, [r3, #16]
 80294ca:	4b4c      	ldr	r3, [pc, #304]	; (80295fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 80294cc:	9300      	str	r3, [sp, #0]
 80294ce:	2338      	movs	r3, #56	; 0x38
 80294d0:	4a45      	ldr	r2, [pc, #276]	; (80295e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80294d2:	4949      	ldr	r1, [pc, #292]	; (80295f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 80294d4:	6878      	ldr	r0, [r7, #4]
 80294d6:	47a0      	blx	r4
 80294d8:	2401      	movs	r4, #1
 80294da:	e07c      	b.n	80295d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 80294dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80294de:	681b      	ldr	r3, [r3, #0]
 80294e0:	331c      	adds	r3, #28
 80294e2:	681b      	ldr	r3, [r3, #0]
 80294e4:	2200      	movs	r2, #0
 80294e6:	6839      	ldr	r1, [r7, #0]
 80294e8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80294ea:	4798      	blx	r3
 80294ec:	6578      	str	r0, [r7, #84]	; 0x54
  TF_LITE_ENSURE(context, output != nullptr);
 80294ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80294f0:	2b00      	cmp	r3, #0
 80294f2:	d10a      	bne.n	802950a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x116>
 80294f4:	687b      	ldr	r3, [r7, #4]
 80294f6:	691c      	ldr	r4, [r3, #16]
 80294f8:	4b41      	ldr	r3, [pc, #260]	; (8029600 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 80294fa:	9300      	str	r3, [sp, #0]
 80294fc:	233a      	movs	r3, #58	; 0x3a
 80294fe:	4a3a      	ldr	r2, [pc, #232]	; (80295e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8029500:	493d      	ldr	r1, [pc, #244]	; (80295f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8029502:	6878      	ldr	r0, [r7, #4]
 8029504:	47a0      	blx	r4
 8029506:	2401      	movs	r4, #1
 8029508:	e065      	b.n	80295d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>

  TF_LITE_ENSURE(context, node->user_data != nullptr);
 802950a:	683b      	ldr	r3, [r7, #0]
 802950c:	691b      	ldr	r3, [r3, #16]
 802950e:	2b00      	cmp	r3, #0
 8029510:	d10a      	bne.n	8029528 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
 8029512:	687b      	ldr	r3, [r7, #4]
 8029514:	691c      	ldr	r4, [r3, #16]
 8029516:	4b3b      	ldr	r3, [pc, #236]	; (8029604 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 8029518:	9300      	str	r3, [sp, #0]
 802951a:	233c      	movs	r3, #60	; 0x3c
 802951c:	4a32      	ldr	r2, [pc, #200]	; (80295e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 802951e:	4936      	ldr	r1, [pc, #216]	; (80295f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8029520:	6878      	ldr	r0, [r7, #4]
 8029522:	47a0      	blx	r4
 8029524:	2401      	movs	r4, #1
 8029526:	e056      	b.n	80295d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  CMSISNNSoftmaxParams* op_data =
 8029528:	683b      	ldr	r3, [r7, #0]
 802952a:	691b      	ldr	r3, [r3, #16]
 802952c:	653b      	str	r3, [r7, #80]	; 0x50
      static_cast<CMSISNNSoftmaxParams*>(node->user_data);

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 802952e:	683b      	ldr	r3, [r7, #0]
 8029530:	695b      	ldr	r3, [r3, #20]
 8029532:	64fb      	str	r3, [r7, #76]	; 0x4c
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
 8029534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029536:	9300      	str	r3, [sp, #0]
 8029538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802953a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802953c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802953e:	6878      	ldr	r0, [r7, #4]
 8029540:	f000 f92a 	bl	8029798 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8029544:	4603      	mov	r3, r0
 8029546:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                                        &op_data->softmax_params);

  const auto input_shape = GetTensorShape(input);
 802954a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802954e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8029550:	4618      	mov	r0, r3
 8029552:	f7fc f8da 	bl	802570a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const auto output_shape = GetTensorShape(output);
 8029556:	f107 030c 	add.w	r3, r7, #12
 802955a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802955c:	4618      	mov	r0, r3
 802955e:	f7fc f8d4 	bl	802570a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8029562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029566:	4618      	mov	r0, r3
 8029568:	f7fc ff44 	bl	80263f4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802956c:	4603      	mov	r3, r0
 802956e:	3b01      	subs	r3, #1
 8029570:	647b      	str	r3, [r7, #68]	; 0x44
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8029572:	f107 020c 	add.w	r2, r7, #12
 8029576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802957a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802957c:	4618      	mov	r0, r3
 802957e:	f7ff fa61 	bl	8028a44 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8029582:	6438      	str	r0, [r7, #64]	; 0x40
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8029584:	f107 020c 	add.w	r2, r7, #12
 8029588:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802958c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802958e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8029590:	f7fd fb28 	bl	8026be4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8029594:	63f8      	str	r0, [r7, #60]	; 0x3c
  op_data->num_rows = outer_size;
 8029596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802959a:	639a      	str	r2, [r3, #56]	; 0x38
  op_data->row_size = depth;
 802959c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802959e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80295a0:	63da      	str	r2, [r3, #60]	; 0x3c

  micro_context->DeallocateTempTfLiteTensor(input);
 80295a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80295a4:	681b      	ldr	r3, [r3, #0]
 80295a6:	3324      	adds	r3, #36	; 0x24
 80295a8:	681b      	ldr	r3, [r3, #0]
 80295aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80295ac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80295ae:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 80295b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80295b2:	681b      	ldr	r3, [r3, #0]
 80295b4:	3324      	adds	r3, #36	; 0x24
 80295b6:	681b      	ldr	r3, [r3, #0]
 80295b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80295ba:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80295bc:	4798      	blx	r3
  return ret_val;
 80295be:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
}
 80295c2:	f107 030c 	add.w	r3, r7, #12
 80295c6:	4618      	mov	r0, r3
 80295c8:	f7fc f841 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 80295cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80295d0:	4618      	mov	r0, r3
 80295d2:	f7fc f83c 	bl	802564e <_ZN6tflite12RuntimeShapeD1Ev>
 80295d6:	4623      	mov	r3, r4
 80295d8:	4618      	mov	r0, r3
 80295da:	3764      	adds	r7, #100	; 0x64
 80295dc:	46bd      	mov	sp, r7
 80295de:	bd90      	pop	{r4, r7, pc}
 80295e0:	08032e1c 	.word	0x08032e1c
 80295e4:	08032e20 	.word	0x08032e20
 80295e8:	08032d68 	.word	0x08032d68
 80295ec:	08032e00 	.word	0x08032e00
 80295f0:	08032e30 	.word	0x08032e30
 80295f4:	08032e5c 	.word	0x08032e5c
 80295f8:	08032e44 	.word	0x08032e44
 80295fc:	08032e70 	.word	0x08032e70
 8029600:	08032e8c 	.word	0x08032e8c
 8029604:	08032ea0 	.word	0x08032ea0

08029608 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8029608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802960c:	b0ac      	sub	sp, #176	; 0xb0
 802960e:	af04      	add	r7, sp, #16
 8029610:	60f8      	str	r0, [r7, #12]
 8029612:	60b9      	str	r1, [r7, #8]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8029614:	2200      	movs	r2, #0
 8029616:	68b9      	ldr	r1, [r7, #8]
 8029618:	68f8      	ldr	r0, [r7, #12]
 802961a:	f7ff f978 	bl	802890e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802961e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8029622:	2200      	movs	r2, #0
 8029624:	68b9      	ldr	r1, [r7, #8]
 8029626:	68f8      	ldr	r0, [r7, #12]
 8029628:	f7ff f981 	bl	802892e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802962c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

  TFLITE_DCHECK(node->user_data != nullptr);
 8029630:	68bb      	ldr	r3, [r7, #8]
 8029632:	691b      	ldr	r3, [r3, #16]
 8029634:	2b00      	cmp	r3, #0
 8029636:	d101      	bne.n	802963c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x34>
 8029638:	f004 f996 	bl	802d968 <abort>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);
 802963c:	68bb      	ldr	r3, [r7, #8]
 802963e:	691b      	ldr	r3, [r3, #16]
  const CMSISNNSoftmaxParams op_data =
 8029640:	f107 0418 	add.w	r4, r7, #24
 8029644:	461d      	mov	r5, r3
 8029646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8029648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802964a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802964c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802964e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8029650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8029652:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8029656:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  switch (input->type) {
 802965a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802965e:	7a1b      	ldrb	r3, [r3, #8]
 8029660:	2b09      	cmp	r3, #9
 8029662:	d01a      	beq.n	802969a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
 8029664:	2b09      	cmp	r3, #9
 8029666:	dc63      	bgt.n	8029730 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x128>
 8029668:	2b01      	cmp	r3, #1
 802966a:	d002      	beq.n	8029672 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6a>
 802966c:	2b07      	cmp	r3, #7
 802966e:	d04a      	beq.n	8029706 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xfe>
 8029670:	e05e      	b.n	8029730 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x128>
    case kTfLiteFloat32: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8029672:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8029676:	7a1b      	ldrb	r3, [r3, #8]
 8029678:	4618      	mov	r0, r3
 802967a:	f7fb ff3f 	bl	80254fc <TfLiteTypeGetName>
 802967e:	4603      	mov	r3, r0
 8029680:	65bb      	str	r3, [r7, #88]	; 0x58
 8029682:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8029686:	f103 0208 	add.w	r2, r3, #8
 802968a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802968e:	4619      	mov	r1, r3
 8029690:	4834      	ldr	r0, [pc, #208]	; (8029764 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x15c>)
 8029692:	f7fd fa9b 	bl	8026bcc <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8029696:	2301      	movs	r3, #1
 8029698:	e05e      	b.n	8029758 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x150>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
      if (output->type == kTfLiteInt8) {
 802969a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802969e:	7a1b      	ldrb	r3, [r3, #8]
 80296a0:	2b09      	cmp	r3, #9
 80296a2:	d11b      	bne.n	80296dc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd4>
#if EI_TFLITE_DISABLE_SOFTMAX_OUT_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  output->type);
      return kTfLiteError;
#endif
        arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input),
 80296a4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80296a8:	f7fd f9c1 	bl	8026a2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80296ac:	4680      	mov	r8, r0
                       op_data.num_rows, op_data.row_size,
 80296ae:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80296b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80296b2:	607b      	str	r3, [r7, #4]
                       op_data.softmax_params.input_multiplier,
 80296b4:	6a39      	ldr	r1, [r7, #32]
 80296b6:	6039      	str	r1, [r7, #0]
                       op_data.softmax_params.input_left_shift,
 80296b8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
                       op_data.softmax_params.diff_min,
 80296ba:	6b3d      	ldr	r5, [r7, #48]	; 0x30
        arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input),
 80296bc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80296c0:	f7fd f9c4 	bl	8026a4c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80296c4:	4603      	mov	r3, r0
 80296c6:	9302      	str	r3, [sp, #8]
 80296c8:	9501      	str	r5, [sp, #4]
 80296ca:	9400      	str	r4, [sp, #0]
 80296cc:	683b      	ldr	r3, [r7, #0]
 80296ce:	687a      	ldr	r2, [r7, #4]
 80296d0:	4631      	mov	r1, r6
 80296d2:	4640      	mov	r0, r8
 80296d4:	f7fa f82c 	bl	8023730 <arm_softmax_s8>
                           op_data.softmax_params.input_multiplier,
                           op_data.softmax_params.input_left_shift,
                           op_data.softmax_params.diff_min,
                           tflite::micro::GetTensorData<int16_t>(output));
      }
      return kTfLiteOk;
 80296d8:	2300      	movs	r3, #0
 80296da:	e03d      	b.n	8029758 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x150>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 80296dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80296e0:	7a1b      	ldrb	r3, [r3, #8]
 80296e2:	4618      	mov	r0, r3
 80296e4:	f7fb ff0a 	bl	80254fc <TfLiteTypeGetName>
 80296e8:	4603      	mov	r3, r0
 80296ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80296ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80296f2:	f103 0208 	add.w	r2, r3, #8
 80296f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80296fa:	4619      	mov	r1, r3
 80296fc:	4819      	ldr	r0, [pc, #100]	; (8029764 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x15c>)
 80296fe:	f7fd fa49 	bl	8026b94 <_ZN6tflite6UnusedIJRA28_KcPS1_R10TfLiteTypeEEEvDpOT_>
      return kTfLiteError;
 8029702:	2301      	movs	r3, #1
 8029704:	e028      	b.n	8029758 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x150>
    }
    case kTfLiteInt16: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8029706:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802970a:	7a1b      	ldrb	r3, [r3, #8]
 802970c:	4618      	mov	r0, r3
 802970e:	f7fb fef5 	bl	80254fc <TfLiteTypeGetName>
 8029712:	4603      	mov	r3, r0
 8029714:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8029718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802971c:	f103 0208 	add.w	r2, r3, #8
 8029720:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8029724:	4619      	mov	r1, r3
 8029726:	480f      	ldr	r0, [pc, #60]	; (8029764 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x15c>)
 8029728:	f7fd fa50 	bl	8026bcc <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 802972c:	2301      	movs	r3, #1
 802972e:	e013      	b.n	8029758 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x150>
              tflite::micro::GetTensorData<int16_t>(output)),
          ARM_CMSIS_NN_SUCCESS);
      return kTfLiteOk;
    }
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8029730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8029734:	7a1b      	ldrb	r3, [r3, #8]
 8029736:	4618      	mov	r0, r3
 8029738:	f7fb fee0 	bl	80254fc <TfLiteTypeGetName>
 802973c:	4603      	mov	r3, r0
 802973e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8029742:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8029746:	f103 0208 	add.w	r2, r3, #8
 802974a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802974e:	4619      	mov	r1, r3
 8029750:	4804      	ldr	r0, [pc, #16]	; (8029764 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x15c>)
 8029752:	f7fd fa3b 	bl	8026bcc <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8029756:	2301      	movs	r3, #1
  }
}
 8029758:	4618      	mov	r0, r3
 802975a:	37a0      	adds	r7, #160	; 0xa0
 802975c:	46bd      	mov	sp, r7
 802975e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029762:	bf00      	nop
 8029764:	08032ebc 	.word	0x08032ebc

08029768 <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8029768:	b580      	push	{r7, lr}
 802976a:	b084      	sub	sp, #16
 802976c:	af02      	add	r7, sp, #8
 802976e:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
 8029770:	6878      	ldr	r0, [r7, #4]
 8029772:	2300      	movs	r3, #0
 8029774:	9300      	str	r3, [sp, #0]
 8029776:	4b05      	ldr	r3, [pc, #20]	; (802978c <_ZN6tflite16Register_SOFTMAXEv+0x24>)
 8029778:	4a05      	ldr	r2, [pc, #20]	; (8029790 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 802977a:	4906      	ldr	r1, [pc, #24]	; (8029794 <_ZN6tflite16Register_SOFTMAXEv+0x2c>)
 802977c:	f7ff f86e 	bl	802885c <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8029780:	bf00      	nop
}
 8029782:	6878      	ldr	r0, [r7, #4]
 8029784:	3708      	adds	r7, #8
 8029786:	46bd      	mov	sp, r7
 8029788:	bd80      	pop	{r7, pc}
 802978a:	bf00      	nop
 802978c:	08029609 	.word	0x08029609
 8029790:	080293f5 	.word	0x080293f5
 8029794:	080293c9 	.word	0x080293c9

08029798 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8029798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802979c:	b08e      	sub	sp, #56	; 0x38
 802979e:	af06      	add	r7, sp, #24
 80297a0:	60f8      	str	r0, [r7, #12]
 80297a2:	60b9      	str	r1, [r7, #8]
 80297a4:	607a      	str	r2, [r7, #4]
 80297a6:	603b      	str	r3, [r7, #0]
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 80297a8:	68bb      	ldr	r3, [r7, #8]
 80297aa:	781b      	ldrb	r3, [r3, #0]
 80297ac:	2b09      	cmp	r3, #9
 80297ae:	d004      	beq.n	80297ba <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 80297b0:	68bb      	ldr	r3, [r7, #8]
 80297b2:	781b      	ldrb	r3, [r3, #0]
 80297b4:	2b07      	cmp	r3, #7
 80297b6:	f040 811e 	bne.w	80299f6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25e>
    if (input->type == kTfLiteInt16) {
 80297ba:	68bb      	ldr	r3, [r7, #8]
 80297bc:	781b      	ldrb	r3, [r3, #0]
 80297be:	2b07      	cmp	r3, #7
 80297c0:	d10e      	bne.n	80297e0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x48>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80297c2:	68fb      	ldr	r3, [r7, #12]
 80297c4:	691c      	ldr	r4, [r3, #16]
 80297c6:	68bb      	ldr	r3, [r7, #8]
 80297c8:	781b      	ldrb	r3, [r3, #0]
 80297ca:	4618      	mov	r0, r3
 80297cc:	f7fb fe96 	bl	80254fc <TfLiteTypeGetName>
 80297d0:	4602      	mov	r2, r0
 80297d2:	68bb      	ldr	r3, [r7, #8]
 80297d4:	781b      	ldrb	r3, [r3, #0]
 80297d6:	4991      	ldr	r1, [pc, #580]	; (8029a1c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x284>)
 80297d8:	68f8      	ldr	r0, [r7, #12]
 80297da:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80297dc:	2301      	movs	r3, #1
 80297de:	e118      	b.n	8029a12 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27a>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
#endif
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 80297e0:	68bb      	ldr	r3, [r7, #8]
 80297e2:	781b      	ldrb	r3, [r3, #0]
 80297e4:	2b09      	cmp	r3, #9
 80297e6:	d018      	beq.n	802981a <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x82>
 80297e8:	68fb      	ldr	r3, [r7, #12]
 80297ea:	691c      	ldr	r4, [r3, #16]
 80297ec:	68bb      	ldr	r3, [r7, #8]
 80297ee:	781b      	ldrb	r3, [r3, #0]
 80297f0:	4618      	mov	r0, r3
 80297f2:	f7fb fe83 	bl	80254fc <TfLiteTypeGetName>
 80297f6:	4605      	mov	r5, r0
 80297f8:	2009      	movs	r0, #9
 80297fa:	f7fb fe7f 	bl	80254fc <TfLiteTypeGetName>
 80297fe:	4603      	mov	r3, r0
 8029800:	9303      	str	r3, [sp, #12]
 8029802:	9502      	str	r5, [sp, #8]
 8029804:	4b86      	ldr	r3, [pc, #536]	; (8029a20 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x288>)
 8029806:	9301      	str	r3, [sp, #4]
 8029808:	4b86      	ldr	r3, [pc, #536]	; (8029a24 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28c>)
 802980a:	9300      	str	r3, [sp, #0]
 802980c:	236c      	movs	r3, #108	; 0x6c
 802980e:	4a86      	ldr	r2, [pc, #536]	; (8029a28 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x290>)
 8029810:	4986      	ldr	r1, [pc, #536]	; (8029a2c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>)
 8029812:	68f8      	ldr	r0, [r7, #12]
 8029814:	47a0      	blx	r4
 8029816:	2301      	movs	r3, #1
 8029818:	e0fb      	b.n	8029a12 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27a>
      if (output->type == kTfLiteInt16) {
 802981a:	687b      	ldr	r3, [r7, #4]
 802981c:	781b      	ldrb	r3, [r3, #0]
 802981e:	2b07      	cmp	r3, #7
 8029820:	d155      	bne.n	80298ce <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x136>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8029822:	687b      	ldr	r3, [r7, #4]
 8029824:	691b      	ldr	r3, [r3, #16]
 8029826:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802982a:	d011      	beq.n	8029850 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xb8>
 802982c:	68fb      	ldr	r3, [r7, #12]
 802982e:	691c      	ldr	r4, [r3, #16]
 8029830:	687b      	ldr	r3, [r7, #4]
 8029832:	691b      	ldr	r3, [r3, #16]
 8029834:	4a7e      	ldr	r2, [pc, #504]	; (8029a30 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 8029836:	9203      	str	r2, [sp, #12]
 8029838:	9302      	str	r3, [sp, #8]
 802983a:	4b7e      	ldr	r3, [pc, #504]	; (8029a34 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 802983c:	9301      	str	r3, [sp, #4]
 802983e:	4b7e      	ldr	r3, [pc, #504]	; (8029a38 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8029840:	9300      	str	r3, [sp, #0]
 8029842:	236e      	movs	r3, #110	; 0x6e
 8029844:	4a78      	ldr	r2, [pc, #480]	; (8029a28 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x290>)
 8029846:	497d      	ldr	r1, [pc, #500]	; (8029a3c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 8029848:	68f8      	ldr	r0, [r7, #12]
 802984a:	47a0      	blx	r4
 802984c:	2301      	movs	r3, #1
 802984e:	e0e0      	b.n	8029a12 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27a>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8029850:	687b      	ldr	r3, [r7, #4]
 8029852:	edd3 7a03 	vldr	s15, [r3, #12]
 8029856:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8029a40 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>
 802985a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802985e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029862:	dd07      	ble.n	8029874 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xdc>
 8029864:	687b      	ldr	r3, [r7, #4]
 8029866:	edd3 7a03 	vldr	s15, [r3, #12]
 802986a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8029a40 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>
 802986e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029872:	e006      	b.n	8029882 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xea>
 8029874:	687b      	ldr	r3, [r7, #4]
 8029876:	edd3 7a03 	vldr	s15, [r3, #12]
 802987a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8029a40 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>
 802987e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8029882:	edc7 7a07 	vstr	s15, [r7, #28]
 8029886:	edd7 7a07 	vldr	s15, [r7, #28]
 802988a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8029a44 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>
 802988e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8029892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029896:	dd64      	ble.n	8029962 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ca>
 8029898:	68fb      	ldr	r3, [r7, #12]
 802989a:	691c      	ldr	r4, [r3, #16]
 802989c:	687b      	ldr	r3, [r7, #4]
 802989e:	68db      	ldr	r3, [r3, #12]
 80298a0:	4618      	mov	r0, r3
 80298a2:	f7d6 fe51 	bl	8000548 <__aeabi_f2d>
 80298a6:	4602      	mov	r2, r0
 80298a8:	460b      	mov	r3, r1
 80298aa:	f04f 0000 	mov.w	r0, #0
 80298ae:	4966      	ldr	r1, [pc, #408]	; (8029a48 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 80298b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80298b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80298b8:	4b64      	ldr	r3, [pc, #400]	; (8029a4c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 80298ba:	9301      	str	r3, [sp, #4]
 80298bc:	4b64      	ldr	r3, [pc, #400]	; (8029a50 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 80298be:	9300      	str	r3, [sp, #0]
 80298c0:	236f      	movs	r3, #111	; 0x6f
 80298c2:	4a59      	ldr	r2, [pc, #356]	; (8029a28 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x290>)
 80298c4:	4963      	ldr	r1, [pc, #396]	; (8029a54 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 80298c6:	68f8      	ldr	r0, [r7, #12]
 80298c8:	47a0      	blx	r4
 80298ca:	2301      	movs	r3, #1
 80298cc:	e0a1      	b.n	8029a12 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27a>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 80298ce:	687b      	ldr	r3, [r7, #4]
 80298d0:	781b      	ldrb	r3, [r3, #0]
 80298d2:	2b09      	cmp	r3, #9
 80298d4:	d018      	beq.n	8029908 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x170>
 80298d6:	68fb      	ldr	r3, [r7, #12]
 80298d8:	691c      	ldr	r4, [r3, #16]
 80298da:	687b      	ldr	r3, [r7, #4]
 80298dc:	781b      	ldrb	r3, [r3, #0]
 80298de:	4618      	mov	r0, r3
 80298e0:	f7fb fe0c 	bl	80254fc <TfLiteTypeGetName>
 80298e4:	4605      	mov	r5, r0
 80298e6:	2009      	movs	r0, #9
 80298e8:	f7fb fe08 	bl	80254fc <TfLiteTypeGetName>
 80298ec:	4603      	mov	r3, r0
 80298ee:	9303      	str	r3, [sp, #12]
 80298f0:	9502      	str	r5, [sp, #8]
 80298f2:	4b4b      	ldr	r3, [pc, #300]	; (8029a20 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x288>)
 80298f4:	9301      	str	r3, [sp, #4]
 80298f6:	4b58      	ldr	r3, [pc, #352]	; (8029a58 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 80298f8:	9300      	str	r3, [sp, #0]
 80298fa:	2372      	movs	r3, #114	; 0x72
 80298fc:	4a4a      	ldr	r2, [pc, #296]	; (8029a28 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x290>)
 80298fe:	494b      	ldr	r1, [pc, #300]	; (8029a2c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>)
 8029900:	68f8      	ldr	r0, [r7, #12]
 8029902:	47a0      	blx	r4
 8029904:	2301      	movs	r3, #1
 8029906:	e084      	b.n	8029a12 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8029908:	687b      	ldr	r3, [r7, #4]
 802990a:	691b      	ldr	r3, [r3, #16]
 802990c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8029910:	d012      	beq.n	8029938 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1a0>
 8029912:	68fb      	ldr	r3, [r7, #12]
 8029914:	691c      	ldr	r4, [r3, #16]
 8029916:	687b      	ldr	r3, [r7, #4]
 8029918:	691b      	ldr	r3, [r3, #16]
 802991a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 802991e:	9203      	str	r2, [sp, #12]
 8029920:	9302      	str	r3, [sp, #8]
 8029922:	4b4e      	ldr	r3, [pc, #312]	; (8029a5c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c4>)
 8029924:	9301      	str	r3, [sp, #4]
 8029926:	4b44      	ldr	r3, [pc, #272]	; (8029a38 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8029928:	9300      	str	r3, [sp, #0]
 802992a:	2373      	movs	r3, #115	; 0x73
 802992c:	4a3e      	ldr	r2, [pc, #248]	; (8029a28 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x290>)
 802992e:	4943      	ldr	r1, [pc, #268]	; (8029a3c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 8029930:	68f8      	ldr	r0, [r7, #12]
 8029932:	47a0      	blx	r4
 8029934:	2301      	movs	r3, #1
 8029936:	e06c      	b.n	8029a12 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27a>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8029938:	687b      	ldr	r3, [r7, #4]
 802993a:	edd3 7a03 	vldr	s15, [r3, #12]
 802993e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8029a60 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>
 8029942:	eef4 7a47 	vcmp.f32	s15, s14
 8029946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802994a:	d00a      	beq.n	8029962 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ca>
 802994c:	68fb      	ldr	r3, [r7, #12]
 802994e:	691c      	ldr	r4, [r3, #16]
 8029950:	4b44      	ldr	r3, [pc, #272]	; (8029a64 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8029952:	9300      	str	r3, [sp, #0]
 8029954:	2374      	movs	r3, #116	; 0x74
 8029956:	4a34      	ldr	r2, [pc, #208]	; (8029a28 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x290>)
 8029958:	4943      	ldr	r1, [pc, #268]	; (8029a68 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802995a:	68f8      	ldr	r0, [r7, #12]
 802995c:	47a0      	blx	r4
 802995e:	2301      	movs	r3, #1
 8029960:	e057      	b.n	8029a12 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27a>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 8029962:	68bb      	ldr	r3, [r7, #8]
 8029964:	781b      	ldrb	r3, [r3, #0]
 8029966:	2b07      	cmp	r3, #7
 8029968:	d10e      	bne.n	8029988 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1f0>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802996a:	68fb      	ldr	r3, [r7, #12]
 802996c:	691c      	ldr	r4, [r3, #16]
 802996e:	68bb      	ldr	r3, [r7, #8]
 8029970:	781b      	ldrb	r3, [r3, #0]
 8029972:	4618      	mov	r0, r3
 8029974:	f7fb fdc2 	bl	80254fc <TfLiteTypeGetName>
 8029978:	4602      	mov	r2, r0
 802997a:	68bb      	ldr	r3, [r7, #8]
 802997c:	781b      	ldrb	r3, [r3, #0]
 802997e:	4927      	ldr	r1, [pc, #156]	; (8029a1c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x284>)
 8029980:	68f8      	ldr	r0, [r7, #12]
 8029982:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8029984:	2301      	movs	r3, #1
 8029986:	e044      	b.n	8029a12 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27a>
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
#endif
      int input_left_shift;
      tflite::PreprocessSoftmaxScaling(
          static_cast<double>(params->beta),
 8029988:	683b      	ldr	r3, [r7, #0]
 802998a:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 802998c:	4618      	mov	r0, r3
 802998e:	f7d6 fddb 	bl	8000548 <__aeabi_f2d>
 8029992:	4680      	mov	r8, r0
 8029994:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8029996:	68bb      	ldr	r3, [r7, #8]
 8029998:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 802999a:	4618      	mov	r0, r3
 802999c:	f7d6 fdd4 	bl	8000548 <__aeabi_f2d>
 80299a0:	4682      	mov	sl, r0
 80299a2:	468b      	mov	fp, r1
 80299a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80299a6:	3308      	adds	r3, #8
 80299a8:	f107 0214 	add.w	r2, r7, #20
 80299ac:	4619      	mov	r1, r3
 80299ae:	2005      	movs	r0, #5
 80299b0:	ec4b ab11 	vmov	d1, sl, fp
 80299b4:	ec49 8b10 	vmov	d0, r8, r9
 80299b8:	f7fc f81a 	bl	80259f0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 80299bc:	697a      	ldr	r2, [r7, #20]
 80299be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80299c0:	60da      	str	r2, [r3, #12]
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
 80299c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80299c4:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 80299c6:	221f      	movs	r2, #31
 80299c8:	4619      	mov	r1, r3
 80299ca:	2005      	movs	r0, #5
 80299cc:	f7fc f858 	bl	8025a80 <_ZN6tflite20CalculateInputRadiusEiii>
 80299d0:	4603      	mov	r3, r0
 80299d2:	4618      	mov	r0, r3
 80299d4:	f7d6 fda6 	bl	8000524 <__aeabi_i2d>
 80299d8:	4602      	mov	r2, r0
 80299da:	460b      	mov	r3, r1
 80299dc:	4614      	mov	r4, r2
 80299de:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 80299e2:	4620      	mov	r0, r4
 80299e4:	4629      	mov	r1, r5
 80299e6:	f7d7 f8b7 	bl	8000b58 <__aeabi_d2iz>
 80299ea:	4602      	mov	r2, r0
 80299ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80299ee:	619a      	str	r2, [r3, #24]
    }
  } else {
 80299f0:	bf00      	nop
#endif
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    op_data->beta = static_cast<double>(params->beta);
  }
  return kTfLiteOk;
 80299f2:	2300      	movs	r3, #0
 80299f4:	e00d      	b.n	8029a12 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27a>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80299f6:	68fb      	ldr	r3, [r7, #12]
 80299f8:	691c      	ldr	r4, [r3, #16]
 80299fa:	68bb      	ldr	r3, [r7, #8]
 80299fc:	781b      	ldrb	r3, [r3, #0]
 80299fe:	4618      	mov	r0, r3
 8029a00:	f7fb fd7c 	bl	80254fc <TfLiteTypeGetName>
 8029a04:	4602      	mov	r2, r0
 8029a06:	68bb      	ldr	r3, [r7, #8]
 8029a08:	781b      	ldrb	r3, [r3, #0]
 8029a0a:	4904      	ldr	r1, [pc, #16]	; (8029a1c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x284>)
 8029a0c:	68f8      	ldr	r0, [r7, #12]
 8029a0e:	47a0      	blx	r4
    return kTfLiteError;
 8029a10:	2301      	movs	r3, #1
}
 8029a12:	4618      	mov	r0, r3
 8029a14:	3720      	adds	r7, #32
 8029a16:	46bd      	mov	sp, r7
 8029a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8029a1c:	08033060 	.word	0x08033060
 8029a20:	08033098 	.word	0x08033098
 8029a24:	08033034 	.word	0x08033034
 8029a28:	08032ed8 	.word	0x08032ed8
 8029a2c:	0803307c 	.word	0x0803307c
 8029a30:	ffff8000 	.word	0xffff8000
 8029a34:	080330a4 	.word	0x080330a4
 8029a38:	08033044 	.word	0x08033044
 8029a3c:	08033008 	.word	0x08033008
 8029a40:	37800000 	.word	0x37800000
 8029a44:	3283126f 	.word	0x3283126f
 8029a48:	3ef00000 	.word	0x3ef00000
 8029a4c:	080330cc 	.word	0x080330cc
 8029a50:	080330d8 	.word	0x080330d8
 8029a54:	080330ac 	.word	0x080330ac
 8029a58:	08033024 	.word	0x08033024
 8029a5c:	080330f0 	.word	0x080330f0
 8029a60:	3b800000 	.word	0x3b800000
 8029a64:	080330f8 	.word	0x080330f8
 8029a68:	08032f78 	.word	0x08032f78

08029a6c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 8029a6c:	b480      	push	{r7}
 8029a6e:	b085      	sub	sp, #20
 8029a70:	af00      	add	r7, sp, #0
 8029a72:	6078      	str	r0, [r7, #4]
 8029a74:	6039      	str	r1, [r7, #0]
  tensor->type = tensorData[i].type;
 8029a76:	493f      	ldr	r1, [pc, #252]	; (8029b74 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x108>)
 8029a78:	687a      	ldr	r2, [r7, #4]
 8029a7a:	4613      	mov	r3, r2
 8029a7c:	005b      	lsls	r3, r3, #1
 8029a7e:	4413      	add	r3, r2
 8029a80:	00db      	lsls	r3, r3, #3
 8029a82:	440b      	add	r3, r1
 8029a84:	3301      	adds	r3, #1
 8029a86:	781a      	ldrb	r2, [r3, #0]
 8029a88:	683b      	ldr	r3, [r7, #0]
 8029a8a:	701a      	strb	r2, [r3, #0]
  tensor->is_variable = false;
 8029a8c:	683b      	ldr	r3, [r7, #0]
 8029a8e:	2200      	movs	r2, #0
 8029a90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 8029a94:	4937      	ldr	r1, [pc, #220]	; (8029b74 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x108>)
 8029a96:	687a      	ldr	r2, [r7, #4]
 8029a98:	4613      	mov	r3, r2
 8029a9a:	005b      	lsls	r3, r3, #1
 8029a9c:	4413      	add	r3, r2
 8029a9e:	00db      	lsls	r3, r3, #3
 8029aa0:	440b      	add	r3, r1
 8029aa2:	781a      	ldrb	r2, [r3, #0]
 8029aa4:	683b      	ldr	r3, [r7, #0]
 8029aa6:	751a      	strb	r2, [r3, #20]
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
 8029aa8:	4932      	ldr	r1, [pc, #200]	; (8029b74 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x108>)
 8029aaa:	687a      	ldr	r2, [r7, #4]
 8029aac:	4613      	mov	r3, r2
 8029aae:	005b      	lsls	r3, r3, #1
 8029ab0:	4413      	add	r3, r2
 8029ab2:	00db      	lsls	r3, r3, #3
 8029ab4:	440b      	add	r3, r1
 8029ab6:	330c      	adds	r3, #12
 8029ab8:	681a      	ldr	r2, [r3, #0]
 8029aba:	683b      	ldr	r3, [r7, #0]
 8029abc:	619a      	str	r2, [r3, #24]
  tensor->dims = tensorData[i].dims;
 8029abe:	492d      	ldr	r1, [pc, #180]	; (8029b74 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x108>)
 8029ac0:	687a      	ldr	r2, [r7, #4]
 8029ac2:	4613      	mov	r3, r2
 8029ac4:	005b      	lsls	r3, r3, #1
 8029ac6:	4413      	add	r3, r2
 8029ac8:	00db      	lsls	r3, r3, #3
 8029aca:	440b      	add	r3, r1
 8029acc:	3308      	adds	r3, #8
 8029ace:	681a      	ldr	r2, [r3, #0]
 8029ad0:	683b      	ldr	r3, [r7, #0]
 8029ad2:	609a      	str	r2, [r3, #8]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 8029ad4:	683b      	ldr	r3, [r7, #0]
 8029ad6:	7d1b      	ldrb	r3, [r3, #20]
 8029ad8:	2b02      	cmp	r3, #2
 8029ada:	d111      	bne.n	8029b00 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x94>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8029adc:	4925      	ldr	r1, [pc, #148]	; (8029b74 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x108>)
 8029ade:	687a      	ldr	r2, [r7, #4]
 8029ae0:	4613      	mov	r3, r2
 8029ae2:	005b      	lsls	r3, r3, #1
 8029ae4:	4413      	add	r3, r2
 8029ae6:	00db      	lsls	r3, r3, #3
 8029ae8:	440b      	add	r3, r1
 8029aea:	3304      	adds	r3, #4
 8029aec:	681b      	ldr	r3, [r3, #0]
 8029aee:	461a      	mov	r2, r3
 8029af0:	4b21      	ldr	r3, [pc, #132]	; (8029b78 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x10c>)
 8029af2:	681b      	ldr	r3, [r3, #0]
 8029af4:	4413      	add	r3, r2
 8029af6:	60fb      	str	r3, [r7, #12]

    tensor->data.data =  start;
 8029af8:	683b      	ldr	r3, [r7, #0]
 8029afa:	68fa      	ldr	r2, [r7, #12]
 8029afc:	605a      	str	r2, [r3, #4]
 8029afe:	e00a      	b.n	8029b16 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0xaa>
  }
  else {
      tensor->data.data = tensorData[i].data;
 8029b00:	491c      	ldr	r1, [pc, #112]	; (8029b74 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x108>)
 8029b02:	687a      	ldr	r2, [r7, #4]
 8029b04:	4613      	mov	r3, r2
 8029b06:	005b      	lsls	r3, r3, #1
 8029b08:	4413      	add	r3, r2
 8029b0a:	00db      	lsls	r3, r3, #3
 8029b0c:	440b      	add	r3, r1
 8029b0e:	3304      	adds	r3, #4
 8029b10:	681a      	ldr	r2, [r3, #0]
 8029b12:	683b      	ldr	r3, [r7, #0]
 8029b14:	605a      	str	r2, [r3, #4]
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
 8029b16:	6839      	ldr	r1, [r7, #0]
 8029b18:	4816      	ldr	r0, [pc, #88]	; (8029b74 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x108>)
 8029b1a:	687a      	ldr	r2, [r7, #4]
 8029b1c:	4613      	mov	r3, r2
 8029b1e:	005b      	lsls	r3, r3, #1
 8029b20:	4413      	add	r3, r2
 8029b22:	00db      	lsls	r3, r3, #3
 8029b24:	4403      	add	r3, r0
 8029b26:	f103 0210 	add.w	r2, r3, #16
 8029b2a:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8029b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8029b32:	e883 0003 	stmia.w	r3, {r0, r1}
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
 8029b36:	683b      	ldr	r3, [r7, #0]
 8029b38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8029b3c:	2b01      	cmp	r3, #1
 8029b3e:	d113      	bne.n	8029b68 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0xfc>
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 8029b40:	490c      	ldr	r1, [pc, #48]	; (8029b74 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x108>)
 8029b42:	687a      	ldr	r2, [r7, #4]
 8029b44:	4613      	mov	r3, r2
 8029b46:	005b      	lsls	r3, r3, #1
 8029b48:	4413      	add	r3, r2
 8029b4a:	00db      	lsls	r3, r3, #3
 8029b4c:	440b      	add	r3, r1
 8029b4e:	3314      	adds	r3, #20
 8029b50:	681b      	ldr	r3, [r3, #0]
 8029b52:	60bb      	str	r3, [r7, #8]
    tensor->params.scale = quant->scale->data[0];
 8029b54:	68bb      	ldr	r3, [r7, #8]
 8029b56:	681b      	ldr	r3, [r3, #0]
 8029b58:	685a      	ldr	r2, [r3, #4]
 8029b5a:	683b      	ldr	r3, [r7, #0]
 8029b5c:	60da      	str	r2, [r3, #12]
    tensor->params.zero_point = quant->zero_point->data[0];
 8029b5e:	68bb      	ldr	r3, [r7, #8]
 8029b60:	685b      	ldr	r3, [r3, #4]
 8029b62:	685a      	ldr	r2, [r3, #4]
 8029b64:	683b      	ldr	r3, [r7, #0]
 8029b66:	611a      	str	r2, [r3, #16]
  }

}
 8029b68:	bf00      	nop
 8029b6a:	3714      	adds	r7, #20
 8029b6c:	46bd      	mov	sp, r7
 8029b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b72:	4770      	bx	lr
 8029b74:	2000007c 	.word	0x2000007c
 8029b78:	20006c44 	.word	0x20006c44

08029b7c <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>:

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
 8029b7c:	b480      	push	{r7}
 8029b7e:	b085      	sub	sp, #20
 8029b80:	af00      	add	r7, sp, #0
 8029b82:	6078      	str	r0, [r7, #4]
 8029b84:	6039      	str	r1, [r7, #0]

  tensor->type = tensorData[i].type;
 8029b86:	4922      	ldr	r1, [pc, #136]	; (8029c10 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x94>)
 8029b88:	687a      	ldr	r2, [r7, #4]
 8029b8a:	4613      	mov	r3, r2
 8029b8c:	005b      	lsls	r3, r3, #1
 8029b8e:	4413      	add	r3, r2
 8029b90:	00db      	lsls	r3, r3, #3
 8029b92:	440b      	add	r3, r1
 8029b94:	3301      	adds	r3, #1
 8029b96:	781a      	ldrb	r2, [r3, #0]
 8029b98:	683b      	ldr	r3, [r7, #0]
 8029b9a:	721a      	strb	r2, [r3, #8]

  tensor->dims = tensorData[i].dims;
 8029b9c:	491c      	ldr	r1, [pc, #112]	; (8029c10 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x94>)
 8029b9e:	687a      	ldr	r2, [r7, #4]
 8029ba0:	4613      	mov	r3, r2
 8029ba2:	005b      	lsls	r3, r3, #1
 8029ba4:	4413      	add	r3, r2
 8029ba6:	00db      	lsls	r3, r3, #3
 8029ba8:	440b      	add	r3, r1
 8029baa:	3308      	adds	r3, #8
 8029bac:	681a      	ldr	r2, [r3, #0]
 8029bae:	683b      	ldr	r3, [r7, #0]
 8029bb0:	605a      	str	r2, [r3, #4]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
 8029bb2:	4917      	ldr	r1, [pc, #92]	; (8029c10 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x94>)
 8029bb4:	687a      	ldr	r2, [r7, #4]
 8029bb6:	4613      	mov	r3, r2
 8029bb8:	005b      	lsls	r3, r3, #1
 8029bba:	4413      	add	r3, r2
 8029bbc:	00db      	lsls	r3, r3, #3
 8029bbe:	440b      	add	r3, r1
 8029bc0:	781b      	ldrb	r3, [r3, #0]
 8029bc2:	73fb      	strb	r3, [r7, #15]
  if(allocation_type == kTfLiteArenaRw) {
 8029bc4:	7bfb      	ldrb	r3, [r7, #15]
 8029bc6:	2b02      	cmp	r3, #2
 8029bc8:	d111      	bne.n	8029bee <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x72>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8029bca:	4911      	ldr	r1, [pc, #68]	; (8029c10 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x94>)
 8029bcc:	687a      	ldr	r2, [r7, #4]
 8029bce:	4613      	mov	r3, r2
 8029bd0:	005b      	lsls	r3, r3, #1
 8029bd2:	4413      	add	r3, r2
 8029bd4:	00db      	lsls	r3, r3, #3
 8029bd6:	440b      	add	r3, r1
 8029bd8:	3304      	adds	r3, #4
 8029bda:	681b      	ldr	r3, [r3, #0]
 8029bdc:	461a      	mov	r2, r3
 8029bde:	4b0d      	ldr	r3, [pc, #52]	; (8029c14 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x98>)
 8029be0:	681b      	ldr	r3, [r3, #0]
 8029be2:	4413      	add	r3, r2
 8029be4:	60bb      	str	r3, [r7, #8]

    tensor->data.data =  start;
 8029be6:	683b      	ldr	r3, [r7, #0]
 8029be8:	68ba      	ldr	r2, [r7, #8]
 8029bea:	601a      	str	r2, [r3, #0]
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}
 8029bec:	e00a      	b.n	8029c04 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x88>
    tensor->data.data = tensorData[i].data;
 8029bee:	4908      	ldr	r1, [pc, #32]	; (8029c10 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x94>)
 8029bf0:	687a      	ldr	r2, [r7, #4]
 8029bf2:	4613      	mov	r3, r2
 8029bf4:	005b      	lsls	r3, r3, #1
 8029bf6:	4413      	add	r3, r2
 8029bf8:	00db      	lsls	r3, r3, #3
 8029bfa:	440b      	add	r3, r1
 8029bfc:	3304      	adds	r3, #4
 8029bfe:	681a      	ldr	r2, [r3, #0]
 8029c00:	683b      	ldr	r3, [r7, #0]
 8029c02:	601a      	str	r2, [r3, #0]
}
 8029c04:	bf00      	nop
 8029c06:	3714      	adds	r7, #20
 8029c08:	46bd      	mov	sp, r7
 8029c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c0e:	4770      	bx	lr
 8029c10:	2000007c 	.word	0x2000007c
 8029c14:	20006c44 	.word	0x20006c44

08029c18 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8029c18:	b580      	push	{r7, lr}
 8029c1a:	b084      	sub	sp, #16
 8029c1c:	af00      	add	r7, sp, #0
 8029c1e:	6078      	str	r0, [r7, #4]
 8029c20:	6039      	str	r1, [r7, #0]
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
 8029c22:	683b      	ldr	r3, [r7, #0]
 8029c24:	f003 030f 	and.w	r3, r3, #15
 8029c28:	2b00      	cmp	r3, #0
 8029c2a:	d005      	beq.n	8029c38 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x20>
 8029c2c:	683b      	ldr	r3, [r7, #0]
 8029c2e:	f003 030f 	and.w	r3, r3, #15
 8029c32:	f1c3 0310 	rsb	r3, r3, #16
 8029c36:	e000      	b.n	8029c3a <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x22>
 8029c38:	2300      	movs	r3, #0
 8029c3a:	60fb      	str	r3, [r7, #12]

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
 8029c3c:	4b29      	ldr	r3, [pc, #164]	; (8029ce4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8029c3e:	681a      	ldr	r2, [r3, #0]
 8029c40:	6839      	ldr	r1, [r7, #0]
 8029c42:	68fb      	ldr	r3, [r7, #12]
 8029c44:	440b      	add	r3, r1
 8029c46:	425b      	negs	r3, r3
 8029c48:	441a      	add	r2, r3
 8029c4a:	4b27      	ldr	r3, [pc, #156]	; (8029ce8 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd0>)
 8029c4c:	681b      	ldr	r3, [r3, #0]
 8029c4e:	429a      	cmp	r2, r3
 8029c50:	d224      	bcs.n	8029c9c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 8029c52:	4b26      	ldr	r3, [pc, #152]	; (8029cec <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 8029c54:	681b      	ldr	r3, [r3, #0]
 8029c56:	2b09      	cmp	r3, #9
 8029c58:	d906      	bls.n	8029c68 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 8029c5a:	683b      	ldr	r3, [r7, #0]
 8029c5c:	4619      	mov	r1, r3
 8029c5e:	4824      	ldr	r0, [pc, #144]	; (8029cf0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd8>)
 8029c60:	f7de ff98 	bl	8008b94 <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 8029c64:	2300      	movs	r3, #0
 8029c66:	e039      	b.n	8029cdc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 8029c68:	2101      	movs	r1, #1
 8029c6a:	6838      	ldr	r0, [r7, #0]
 8029c6c:	f7fb fc10 	bl	8025490 <_Z9ei_callocjj>
 8029c70:	60b8      	str	r0, [r7, #8]
    if (ptr == NULL) {
 8029c72:	68bb      	ldr	r3, [r7, #8]
 8029c74:	2b00      	cmp	r3, #0
 8029c76:	d106      	bne.n	8029c86 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6e>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8029c78:	683b      	ldr	r3, [r7, #0]
 8029c7a:	4619      	mov	r1, r3
 8029c7c:	481d      	ldr	r0, [pc, #116]	; (8029cf4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xdc>)
 8029c7e:	f7de ff89 	bl	8008b94 <_Z9ei_printfPKcz>
      return NULL;
 8029c82:	2300      	movs	r3, #0
 8029c84:	e02a      	b.n	8029cdc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 8029c86:	4b19      	ldr	r3, [pc, #100]	; (8029cec <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 8029c88:	681b      	ldr	r3, [r3, #0]
 8029c8a:	1c5a      	adds	r2, r3, #1
 8029c8c:	4917      	ldr	r1, [pc, #92]	; (8029cec <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 8029c8e:	600a      	str	r2, [r1, #0]
 8029c90:	4919      	ldr	r1, [pc, #100]	; (8029cf8 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xe0>)
 8029c92:	68ba      	ldr	r2, [r7, #8]
 8029c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 8029c98:	68bb      	ldr	r3, [r7, #8]
 8029c9a:	e01f      	b.n	8029cdc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
  }

  current_location -= bytes;
 8029c9c:	4b11      	ldr	r3, [pc, #68]	; (8029ce4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8029c9e:	681a      	ldr	r2, [r3, #0]
 8029ca0:	683b      	ldr	r3, [r7, #0]
 8029ca2:	425b      	negs	r3, r3
 8029ca4:	4413      	add	r3, r2
 8029ca6:	4a0f      	ldr	r2, [pc, #60]	; (8029ce4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8029ca8:	6013      	str	r3, [r2, #0]

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
 8029caa:	4b0e      	ldr	r3, [pc, #56]	; (8029ce4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8029cac:	681b      	ldr	r3, [r3, #0]
 8029cae:	3b0f      	subs	r3, #15
 8029cb0:	4a0c      	ldr	r2, [pc, #48]	; (8029ce4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8029cb2:	6013      	str	r3, [r2, #0]
  current_location += 16 - ((uintptr_t)(current_location) & 15);
 8029cb4:	4b0b      	ldr	r3, [pc, #44]	; (8029ce4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8029cb6:	681a      	ldr	r2, [r3, #0]
 8029cb8:	4b0a      	ldr	r3, [pc, #40]	; (8029ce4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8029cba:	681b      	ldr	r3, [r3, #0]
 8029cbc:	f003 030f 	and.w	r3, r3, #15
 8029cc0:	f1c3 0310 	rsb	r3, r3, #16
 8029cc4:	4413      	add	r3, r2
 8029cc6:	4a07      	ldr	r2, [pc, #28]	; (8029ce4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8029cc8:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8029cca:	4b06      	ldr	r3, [pc, #24]	; (8029ce4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8029ccc:	681b      	ldr	r3, [r3, #0]
 8029cce:	60bb      	str	r3, [r7, #8]
  memset(ptr, 0, bytes);
 8029cd0:	683a      	ldr	r2, [r7, #0]
 8029cd2:	2100      	movs	r1, #0
 8029cd4:	68b8      	ldr	r0, [r7, #8]
 8029cd6:	f004 fd35 	bl	802e744 <memset>

  return ptr;
 8029cda:	68bb      	ldr	r3, [r7, #8]
}
 8029cdc:	4618      	mov	r0, r3
 8029cde:	3710      	adds	r7, #16
 8029ce0:	46bd      	mov	sp, r7
 8029ce2:	bd80      	pop	{r7, pc}
 8029ce4:	20006c4c 	.word	0x20006c4c
 8029ce8:	20006c48 	.word	0x20006c48
 8029cec:	20006ed8 	.word	0x20006ed8
 8029cf0:	080331a4 	.word	0x080331a4
 8029cf4:	08033224 	.word	0x08033224
 8029cf8:	20006eb0 	.word	0x20006eb0

08029cfc <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8029cfc:	b580      	push	{r7, lr}
 8029cfe:	b086      	sub	sp, #24
 8029d00:	af00      	add	r7, sp, #0
 8029d02:	60f8      	str	r0, [r7, #12]
 8029d04:	60b9      	str	r1, [r7, #8]
 8029d06:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 8029d08:	4b1b      	ldr	r3, [pc, #108]	; (8029d78 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8029d0a:	681b      	ldr	r3, [r3, #0]
 8029d0c:	2b03      	cmp	r3, #3
 8029d0e:	d906      	bls.n	8029d1e <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 8029d10:	68bb      	ldr	r3, [r7, #8]
 8029d12:	4619      	mov	r1, r3
 8029d14:	4819      	ldr	r0, [pc, #100]	; (8029d7c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x80>)
 8029d16:	f7de ff3d 	bl	8008b94 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8029d1a:	2301      	movs	r3, #1
 8029d1c:	e028      	b.n	8029d70 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 8029d1e:	68bb      	ldr	r3, [r7, #8]
 8029d20:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
 8029d22:	693b      	ldr	r3, [r7, #16]
 8029d24:	4619      	mov	r1, r3
 8029d26:	68f8      	ldr	r0, [r7, #12]
 8029d28:	f7ff ff76 	bl	8029c18 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 8029d2c:	4603      	mov	r3, r0
 8029d2e:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 8029d30:	697b      	ldr	r3, [r7, #20]
 8029d32:	2b00      	cmp	r3, #0
 8029d34:	d106      	bne.n	8029d44 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 8029d36:	68bb      	ldr	r3, [r7, #8]
 8029d38:	4619      	mov	r1, r3
 8029d3a:	4811      	ldr	r0, [pc, #68]	; (8029d80 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x84>)
 8029d3c:	f7de ff2a 	bl	8008b94 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8029d40:	2301      	movs	r3, #1
 8029d42:	e015      	b.n	8029d70 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 8029d44:	4b0c      	ldr	r3, [pc, #48]	; (8029d78 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8029d46:	681b      	ldr	r3, [r3, #0]
 8029d48:	4a0e      	ldr	r2, [pc, #56]	; (8029d84 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x88>)
 8029d4a:	00db      	lsls	r3, r3, #3
 8029d4c:	4413      	add	r3, r2
 8029d4e:	f107 0210 	add.w	r2, r7, #16
 8029d52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8029d56:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 8029d5a:	4b07      	ldr	r3, [pc, #28]	; (8029d78 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8029d5c:	681b      	ldr	r3, [r3, #0]
 8029d5e:	461a      	mov	r2, r3
 8029d60:	687b      	ldr	r3, [r7, #4]
 8029d62:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 8029d64:	4b04      	ldr	r3, [pc, #16]	; (8029d78 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8029d66:	681b      	ldr	r3, [r3, #0]
 8029d68:	3301      	adds	r3, #1
 8029d6a:	4a03      	ldr	r2, [pc, #12]	; (8029d78 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8029d6c:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 8029d6e:	2300      	movs	r3, #0
}
 8029d70:	4618      	mov	r0, r3
 8029d72:	3718      	adds	r7, #24
 8029d74:	46bd      	mov	sp, r7
 8029d76:	bd80      	pop	{r7, pc}
 8029d78:	20006efc 	.word	0x20006efc
 8029d7c:	0803325c 	.word	0x0803325c
 8029d80:	080332b4 	.word	0x080332b4
 8029d84:	20006edc 	.word	0x20006edc

08029d88 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
 8029d88:	b480      	push	{r7}
 8029d8a:	b083      	sub	sp, #12
 8029d8c:	af00      	add	r7, sp, #0
 8029d8e:	6078      	str	r0, [r7, #4]
 8029d90:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 8029d92:	4b09      	ldr	r3, [pc, #36]	; (8029db8 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x30>)
 8029d94:	681b      	ldr	r3, [r3, #0]
 8029d96:	461a      	mov	r2, r3
 8029d98:	683b      	ldr	r3, [r7, #0]
 8029d9a:	4293      	cmp	r3, r2
 8029d9c:	dd01      	ble.n	8029da2 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x1a>
    return NULL;
 8029d9e:	2300      	movs	r3, #0
 8029da0:	e004      	b.n	8029dac <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 8029da2:	4a06      	ldr	r2, [pc, #24]	; (8029dbc <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x34>)
 8029da4:	683b      	ldr	r3, [r7, #0]
 8029da6:	00db      	lsls	r3, r3, #3
 8029da8:	4413      	add	r3, r2
 8029daa:	685b      	ldr	r3, [r3, #4]
}
 8029dac:	4618      	mov	r0, r3
 8029dae:	370c      	adds	r7, #12
 8029db0:	46bd      	mov	sp, r7
 8029db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029db6:	4770      	bx	lr
 8029db8:	20006efc 	.word	0x20006efc
 8029dbc:	20006edc 	.word	0x20006edc

08029dc0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
 8029dc0:	b480      	push	{r7}
 8029dc2:	b083      	sub	sp, #12
 8029dc4:	af00      	add	r7, sp, #0
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8029dc6:	2300      	movs	r3, #0
 8029dc8:	607b      	str	r3, [r7, #4]
 8029dca:	e00d      	b.n	8029de8 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 8029dcc:	4914      	ldr	r1, [pc, #80]	; (8029e20 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x60>)
 8029dce:	687a      	ldr	r2, [r7, #4]
 8029dd0:	4613      	mov	r3, r2
 8029dd2:	011b      	lsls	r3, r3, #4
 8029dd4:	4413      	add	r3, r2
 8029dd6:	009b      	lsls	r3, r3, #2
 8029dd8:	440b      	add	r3, r1
 8029dda:	3340      	adds	r3, #64	; 0x40
 8029ddc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8029de0:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8029de2:	687b      	ldr	r3, [r7, #4]
 8029de4:	3301      	adds	r3, #1
 8029de6:	607b      	str	r3, [r7, #4]
 8029de8:	687b      	ldr	r3, [r7, #4]
 8029dea:	2b03      	cmp	r3, #3
 8029dec:	d9ee      	bls.n	8029dcc <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0xc>
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8029dee:	2300      	movs	r3, #0
 8029df0:	603b      	str	r3, [r7, #0]
 8029df2:	e00a      	b.n	8029e0a <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x4a>
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 8029df4:	4a0b      	ldr	r2, [pc, #44]	; (8029e24 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x64>)
 8029df6:	683b      	ldr	r3, [r7, #0]
 8029df8:	011b      	lsls	r3, r3, #4
 8029dfa:	4413      	add	r3, r2
 8029dfc:	330c      	adds	r3, #12
 8029dfe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8029e02:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8029e04:	683b      	ldr	r3, [r7, #0]
 8029e06:	3301      	adds	r3, #1
 8029e08:	603b      	str	r3, [r7, #0]
 8029e0a:	683b      	ldr	r3, [r7, #0]
 8029e0c:	2b03      	cmp	r3, #3
 8029e0e:	d9f1      	bls.n	8029df4 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x34>
  }
}
 8029e10:	bf00      	nop
 8029e12:	bf00      	nop
 8029e14:	370c      	adds	r7, #12
 8029e16:	46bd      	mov	sp, r7
 8029e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e1c:	4770      	bx	lr
 8029e1e:	bf00      	nop
 8029e20:	20006ca8 	.word	0x20006ca8
 8029e24:	20006db8 	.word	0x20006db8

08029e28 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {
 8029e28:	b580      	push	{r7, lr}
 8029e2a:	b084      	sub	sp, #16
 8029e2c:	af00      	add	r7, sp, #0
 8029e2e:	6078      	str	r0, [r7, #4]
 8029e30:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 8029e32:	4b2e      	ldr	r3, [pc, #184]	; (8029eec <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc4>)
 8029e34:	681b      	ldr	r3, [r3, #0]
 8029e36:	4a2e      	ldr	r2, [pc, #184]	; (8029ef0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc8>)
 8029e38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8029e3c:	683b      	ldr	r3, [r7, #0]
 8029e3e:	4413      	add	r3, r2
 8029e40:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8029e42:	2300      	movs	r3, #0
 8029e44:	60fb      	str	r3, [r7, #12]
 8029e46:	e045      	b.n	8029ed4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xac>
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
 8029e48:	492a      	ldr	r1, [pc, #168]	; (8029ef4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8029e4a:	68fa      	ldr	r2, [r7, #12]
 8029e4c:	4613      	mov	r3, r2
 8029e4e:	011b      	lsls	r3, r3, #4
 8029e50:	4413      	add	r3, r2
 8029e52:	009b      	lsls	r3, r3, #2
 8029e54:	440b      	add	r3, r1
 8029e56:	3340      	adds	r3, #64	; 0x40
 8029e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8029e5c:	461a      	mov	r2, r3
 8029e5e:	683b      	ldr	r3, [r7, #0]
 8029e60:	4293      	cmp	r3, r2
 8029e62:	d107      	bne.n	8029e74 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x4c>
      return &tflTensors[ix].tensor;
 8029e64:	68fa      	ldr	r2, [r7, #12]
 8029e66:	4613      	mov	r3, r2
 8029e68:	011b      	lsls	r3, r3, #4
 8029e6a:	4413      	add	r3, r2
 8029e6c:	009b      	lsls	r3, r3, #2
 8029e6e:	4a21      	ldr	r2, [pc, #132]	; (8029ef4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8029e70:	4413      	add	r3, r2
 8029e72:	e037      	b.n	8029ee4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 8029e74:	491f      	ldr	r1, [pc, #124]	; (8029ef4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8029e76:	68fa      	ldr	r2, [r7, #12]
 8029e78:	4613      	mov	r3, r2
 8029e7a:	011b      	lsls	r3, r3, #4
 8029e7c:	4413      	add	r3, r2
 8029e7e:	009b      	lsls	r3, r3, #2
 8029e80:	440b      	add	r3, r1
 8029e82:	3340      	adds	r3, #64	; 0x40
 8029e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8029e88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8029e8c:	4293      	cmp	r3, r2
 8029e8e:	d11e      	bne.n	8029ece <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xa6>
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 8029e90:	6838      	ldr	r0, [r7, #0]
 8029e92:	68fa      	ldr	r2, [r7, #12]
 8029e94:	4613      	mov	r3, r2
 8029e96:	011b      	lsls	r3, r3, #4
 8029e98:	4413      	add	r3, r2
 8029e9a:	009b      	lsls	r3, r3, #2
 8029e9c:	4a15      	ldr	r2, [pc, #84]	; (8029ef4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8029e9e:	4413      	add	r3, r2
 8029ea0:	4619      	mov	r1, r3
 8029ea2:	f7ff fde3 	bl	8029a6c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 8029ea6:	683b      	ldr	r3, [r7, #0]
 8029ea8:	b218      	sxth	r0, r3
 8029eaa:	4912      	ldr	r1, [pc, #72]	; (8029ef4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8029eac:	68fa      	ldr	r2, [r7, #12]
 8029eae:	4613      	mov	r3, r2
 8029eb0:	011b      	lsls	r3, r3, #4
 8029eb2:	4413      	add	r3, r2
 8029eb4:	009b      	lsls	r3, r3, #2
 8029eb6:	440b      	add	r3, r1
 8029eb8:	3340      	adds	r3, #64	; 0x40
 8029eba:	4602      	mov	r2, r0
 8029ebc:	801a      	strh	r2, [r3, #0]
      return &tflTensors[ix].tensor;
 8029ebe:	68fa      	ldr	r2, [r7, #12]
 8029ec0:	4613      	mov	r3, r2
 8029ec2:	011b      	lsls	r3, r3, #4
 8029ec4:	4413      	add	r3, r2
 8029ec6:	009b      	lsls	r3, r3, #2
 8029ec8:	4a0a      	ldr	r2, [pc, #40]	; (8029ef4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8029eca:	4413      	add	r3, r2
 8029ecc:	e00a      	b.n	8029ee4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8029ece:	68fb      	ldr	r3, [r7, #12]
 8029ed0:	3301      	adds	r3, #1
 8029ed2:	60fb      	str	r3, [r7, #12]
 8029ed4:	68fb      	ldr	r3, [r7, #12]
 8029ed6:	2b03      	cmp	r3, #3
 8029ed8:	d9b6      	bls.n	8029e48 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 8029eda:	2104      	movs	r1, #4
 8029edc:	4806      	ldr	r0, [pc, #24]	; (8029ef8 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xd0>)
 8029ede:	f7de fe59 	bl	8008b94 <_Z9ei_printfPKcz>
  return nullptr;
 8029ee2:	2300      	movs	r3, #0
}
 8029ee4:	4618      	mov	r0, r3
 8029ee6:	3710      	adds	r7, #16
 8029ee8:	46bd      	mov	sp, r7
 8029eea:	bd80      	pop	{r7, pc}
 8029eec:	20006eac 	.word	0x20006eac
 8029ef0:	08034d10 	.word	0x08034d10
 8029ef4:	20006ca8 	.word	0x20006ca8
 8029ef8:	080332e8 	.word	0x080332e8

08029efc <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8029efc:	b580      	push	{r7, lr}
 8029efe:	b084      	sub	sp, #16
 8029f00:	af00      	add	r7, sp, #0
 8029f02:	6078      	str	r0, [r7, #4]
 8029f04:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 8029f06:	4b25      	ldr	r3, [pc, #148]	; (8029f9c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa0>)
 8029f08:	681b      	ldr	r3, [r3, #0]
 8029f0a:	4a25      	ldr	r2, [pc, #148]	; (8029fa0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa4>)
 8029f0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8029f10:	683b      	ldr	r3, [r7, #0]
 8029f12:	4413      	add	r3, r2
 8029f14:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8029f16:	2300      	movs	r3, #0
 8029f18:	60fb      	str	r3, [r7, #12]
 8029f1a:	e033      	b.n	8029f84 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x88>
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
 8029f1c:	4a21      	ldr	r2, [pc, #132]	; (8029fa4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8029f1e:	68fb      	ldr	r3, [r7, #12]
 8029f20:	011b      	lsls	r3, r3, #4
 8029f22:	4413      	add	r3, r2
 8029f24:	330c      	adds	r3, #12
 8029f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8029f2a:	461a      	mov	r2, r3
 8029f2c:	683b      	ldr	r3, [r7, #0]
 8029f2e:	4293      	cmp	r3, r2
 8029f30:	d104      	bne.n	8029f3c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x40>
      return &tflEvalTensors[ix].tensor;
 8029f32:	68fb      	ldr	r3, [r7, #12]
 8029f34:	011b      	lsls	r3, r3, #4
 8029f36:	4a1b      	ldr	r2, [pc, #108]	; (8029fa4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8029f38:	4413      	add	r3, r2
 8029f3a:	e02b      	b.n	8029f94 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 8029f3c:	4a19      	ldr	r2, [pc, #100]	; (8029fa4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8029f3e:	68fb      	ldr	r3, [r7, #12]
 8029f40:	011b      	lsls	r3, r3, #4
 8029f42:	4413      	add	r3, r2
 8029f44:	330c      	adds	r3, #12
 8029f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8029f4a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8029f4e:	4293      	cmp	r3, r2
 8029f50:	d115      	bne.n	8029f7e <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x82>
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 8029f52:	68fb      	ldr	r3, [r7, #12]
 8029f54:	011b      	lsls	r3, r3, #4
 8029f56:	4a13      	ldr	r2, [pc, #76]	; (8029fa4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8029f58:	4413      	add	r3, r2
 8029f5a:	4619      	mov	r1, r3
 8029f5c:	6838      	ldr	r0, [r7, #0]
 8029f5e:	f7ff fe0d 	bl	8029b7c <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>
      tflEvalTensors[ix].index = tensor_idx;
 8029f62:	683b      	ldr	r3, [r7, #0]
 8029f64:	b219      	sxth	r1, r3
 8029f66:	4a0f      	ldr	r2, [pc, #60]	; (8029fa4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8029f68:	68fb      	ldr	r3, [r7, #12]
 8029f6a:	011b      	lsls	r3, r3, #4
 8029f6c:	4413      	add	r3, r2
 8029f6e:	330c      	adds	r3, #12
 8029f70:	460a      	mov	r2, r1
 8029f72:	801a      	strh	r2, [r3, #0]
      return &tflEvalTensors[ix].tensor;
 8029f74:	68fb      	ldr	r3, [r7, #12]
 8029f76:	011b      	lsls	r3, r3, #4
 8029f78:	4a0a      	ldr	r2, [pc, #40]	; (8029fa4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8029f7a:	4413      	add	r3, r2
 8029f7c:	e00a      	b.n	8029f94 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8029f7e:	68fb      	ldr	r3, [r7, #12]
 8029f80:	3301      	adds	r3, #1
 8029f82:	60fb      	str	r3, [r7, #12]
 8029f84:	68fb      	ldr	r3, [r7, #12]
 8029f86:	2b03      	cmp	r3, #3
 8029f88:	d9c8      	bls.n	8029f1c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 8029f8a:	2104      	movs	r1, #4
 8029f8c:	4806      	ldr	r0, [pc, #24]	; (8029fa8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xac>)
 8029f8e:	f7de fe01 	bl	8008b94 <_Z9ei_printfPKcz>
  return nullptr;
 8029f92:	2300      	movs	r3, #0
}
 8029f94:	4618      	mov	r0, r3
 8029f96:	3710      	adds	r7, #16
 8029f98:	46bd      	mov	sp, r7
 8029f9a:	bd80      	pop	{r7, pc}
 8029f9c:	20006eac 	.word	0x20006eac
 8029fa0:	08034d10 	.word	0x08034d10
 8029fa4:	20006db8 	.word	0x20006db8
 8029fa8:	08033320 	.word	0x08033320

08029fac <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>:

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 8029fac:	b580      	push	{r7, lr}
 8029fae:	b082      	sub	sp, #8
 8029fb0:	af00      	add	r7, sp, #0
 8029fb2:	6078      	str	r0, [r7, #4]
 8029fb4:	6878      	ldr	r0, [r7, #4]
 8029fb6:	2300      	movs	r3, #0
 8029fb8:	2200      	movs	r2, #0
 8029fba:	2100      	movs	r1, #0
 8029fbc:	f7fc fb48 	bl	8026650 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
 8029fc0:	4a03      	ldr	r2, [pc, #12]	; (8029fd0 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev+0x24>)
 8029fc2:	687b      	ldr	r3, [r7, #4]
 8029fc4:	601a      	str	r2, [r3, #0]
 8029fc6:	687b      	ldr	r3, [r7, #4]
 8029fc8:	4618      	mov	r0, r3
 8029fca:	3708      	adds	r7, #8
 8029fcc:	46bd      	mov	sp, r7
 8029fce:	bd80      	pop	{r7, pc}
 8029fd0:	08034d28 	.word	0x08034d28

08029fd4 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:

  void* AllocatePersistentBuffer(size_t bytes) {
 8029fd4:	b580      	push	{r7, lr}
 8029fd6:	b082      	sub	sp, #8
 8029fd8:	af00      	add	r7, sp, #0
 8029fda:	6078      	str	r0, [r7, #4]
 8029fdc:	6039      	str	r1, [r7, #0]
    return AllocatePersistentBufferImpl(nullptr, bytes);
 8029fde:	6839      	ldr	r1, [r7, #0]
 8029fe0:	2000      	movs	r0, #0
 8029fe2:	f7ff fe19 	bl	8029c18 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 8029fe6:	4603      	mov	r3, r0
  }
 8029fe8:	4618      	mov	r0, r3
 8029fea:	3708      	adds	r7, #8
 8029fec:	46bd      	mov	sp, r7
 8029fee:	bd80      	pop	{r7, pc}

08029ff0 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
 8029ff0:	b580      	push	{r7, lr}
 8029ff2:	b084      	sub	sp, #16
 8029ff4:	af00      	add	r7, sp, #0
 8029ff6:	60f8      	str	r0, [r7, #12]
 8029ff8:	60b9      	str	r1, [r7, #8]
 8029ffa:	607a      	str	r2, [r7, #4]
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
 8029ffc:	687a      	ldr	r2, [r7, #4]
 8029ffe:	68b9      	ldr	r1, [r7, #8]
 802a000:	2000      	movs	r0, #0
 802a002:	f7ff fe7b 	bl	8029cfc <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>
 802a006:	4603      	mov	r3, r0
  }
 802a008:	4618      	mov	r0, r3
 802a00a:	3710      	adds	r7, #16
 802a00c:	46bd      	mov	sp, r7
 802a00e:	bd80      	pop	{r7, pc}

0802a010 <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:

  void* GetScratchBuffer(int buffer_index) {
 802a010:	b580      	push	{r7, lr}
 802a012:	b082      	sub	sp, #8
 802a014:	af00      	add	r7, sp, #0
 802a016:	6078      	str	r0, [r7, #4]
 802a018:	6039      	str	r1, [r7, #0]
    return GetScratchBufferImpl(nullptr, buffer_index);
 802a01a:	6839      	ldr	r1, [r7, #0]
 802a01c:	2000      	movs	r0, #0
 802a01e:	f7ff feb3 	bl	8029d88 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>
 802a022:	4603      	mov	r3, r0
  }
 802a024:	4618      	mov	r0, r3
 802a026:	3708      	adds	r7, #8
 802a028:	46bd      	mov	sp, r7
 802a02a:	bd80      	pop	{r7, pc}

0802a02c <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
 802a02c:	b580      	push	{r7, lr}
 802a02e:	b082      	sub	sp, #8
 802a030:	af00      	add	r7, sp, #0
 802a032:	6078      	str	r0, [r7, #4]
 802a034:	6039      	str	r1, [r7, #0]
    return GetTensorImpl(nullptr, tensor_index);
 802a036:	6839      	ldr	r1, [r7, #0]
 802a038:	2000      	movs	r0, #0
 802a03a:	f7ff fef5 	bl	8029e28 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
 802a03e:	4603      	mov	r3, r0
  }
 802a040:	4618      	mov	r0, r3
 802a042:	3708      	adds	r7, #8
 802a044:	46bd      	mov	sp, r7
 802a046:	bd80      	pop	{r7, pc}

0802a048 <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 802a048:	b480      	push	{r7}
 802a04a:	b083      	sub	sp, #12
 802a04c:	af00      	add	r7, sp, #0
 802a04e:	6078      	str	r0, [r7, #4]
 802a050:	6039      	str	r1, [r7, #0]
    return;
 802a052:	bf00      	nop
  }
 802a054:	370c      	adds	r7, #12
 802a056:	46bd      	mov	sp, r7
 802a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a05c:	4770      	bx	lr

0802a05e <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
 802a05e:	b580      	push	{r7, lr}
 802a060:	b082      	sub	sp, #8
 802a062:	af00      	add	r7, sp, #0
 802a064:	6078      	str	r0, [r7, #4]
 802a066:	6039      	str	r1, [r7, #0]
    return GetEvalTensorImpl(nullptr, tensor_index);
 802a068:	6839      	ldr	r1, [r7, #0]
 802a06a:	2000      	movs	r0, #0
 802a06c:	f7ff ff46 	bl	8029efc <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
 802a070:	4603      	mov	r3, r0
  }
 802a072:	4618      	mov	r0, r3
 802a074:	3708      	adds	r7, #8
 802a076:	46bd      	mov	sp, r7
 802a078:	bd80      	pop	{r7, pc}
	...

0802a07c <_Z19tflite_learn_5_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
 802a07c:	b5b0      	push	{r4, r5, r7, lr}
 802a07e:	b0aa      	sub	sp, #168	; 0xa8
 802a080:	af00      	add	r7, sp, #0
 802a082:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 802a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a086:	f44f 6108 	mov.w	r1, #2176	; 0x880
 802a08a:	2010      	movs	r0, #16
 802a08c:	4798      	blx	r3
 802a08e:	4603      	mov	r3, r0
 802a090:	4aa9      	ldr	r2, [pc, #676]	; (802a338 <_Z19tflite_learn_5_initPFPvjjE+0x2bc>)
 802a092:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 802a094:	4ba8      	ldr	r3, [pc, #672]	; (802a338 <_Z19tflite_learn_5_initPFPvjjE+0x2bc>)
 802a096:	681b      	ldr	r3, [r3, #0]
 802a098:	2b00      	cmp	r3, #0
 802a09a:	d104      	bne.n	802a0a6 <_Z19tflite_learn_5_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 802a09c:	48a7      	ldr	r0, [pc, #668]	; (802a33c <_Z19tflite_learn_5_initPFPvjjE+0x2c0>)
 802a09e:	f7de fd79 	bl	8008b94 <_Z9ei_printfPKcz>
    return kTfLiteError;
 802a0a2:	2401      	movs	r4, #1
 802a0a4:	e18d      	b.n	802a3c2 <_Z19tflite_learn_5_initPFPvjjE+0x346>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 802a0a6:	4ba4      	ldr	r3, [pc, #656]	; (802a338 <_Z19tflite_learn_5_initPFPvjjE+0x2bc>)
 802a0a8:	681b      	ldr	r3, [r3, #0]
 802a0aa:	4aa5      	ldr	r2, [pc, #660]	; (802a340 <_Z19tflite_learn_5_initPFPvjjE+0x2c4>)
 802a0ac:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 802a0ae:	4ba2      	ldr	r3, [pc, #648]	; (802a338 <_Z19tflite_learn_5_initPFPvjjE+0x2bc>)
 802a0b0:	681b      	ldr	r3, [r3, #0]
 802a0b2:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 802a0b6:	4aa3      	ldr	r2, [pc, #652]	; (802a344 <_Z19tflite_learn_5_initPFPvjjE+0x2c8>)
 802a0b8:	6013      	str	r3, [r2, #0]

  EonMicroContext micro_context_;
 802a0ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 802a0be:	4618      	mov	r0, r3
 802a0c0:	f7ff ff74 	bl	8029fac <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
 802a0c4:	4aa0      	ldr	r2, [pc, #640]	; (802a348 <_Z19tflite_learn_5_initPFPvjjE+0x2cc>)
 802a0c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 802a0ca:	6093      	str	r3, [r2, #8]
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
 802a0cc:	4b9e      	ldr	r3, [pc, #632]	; (802a348 <_Z19tflite_learn_5_initPFPvjjE+0x2cc>)
 802a0ce:	4a9f      	ldr	r2, [pc, #636]	; (802a34c <_Z19tflite_learn_5_initPFPvjjE+0x2d0>)
 802a0d0:	635a      	str	r2, [r3, #52]	; 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
 802a0d2:	4b9d      	ldr	r3, [pc, #628]	; (802a348 <_Z19tflite_learn_5_initPFPvjjE+0x2cc>)
 802a0d4:	4a9e      	ldr	r2, [pc, #632]	; (802a350 <_Z19tflite_learn_5_initPFPvjjE+0x2d4>)
 802a0d6:	63da      	str	r2, [r3, #60]	; 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
 802a0d8:	4b9b      	ldr	r3, [pc, #620]	; (802a348 <_Z19tflite_learn_5_initPFPvjjE+0x2cc>)
 802a0da:	4a9e      	ldr	r2, [pc, #632]	; (802a354 <_Z19tflite_learn_5_initPFPvjjE+0x2d8>)
 802a0dc:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetTensor = &GetTensorImpl;
 802a0de:	4b9a      	ldr	r3, [pc, #616]	; (802a348 <_Z19tflite_learn_5_initPFPvjjE+0x2cc>)
 802a0e0:	4a9d      	ldr	r2, [pc, #628]	; (802a358 <_Z19tflite_learn_5_initPFPvjjE+0x2dc>)
 802a0e2:	64da      	str	r2, [r3, #76]	; 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
 802a0e4:	4b98      	ldr	r3, [pc, #608]	; (802a348 <_Z19tflite_learn_5_initPFPvjjE+0x2cc>)
 802a0e6:	4a9d      	ldr	r2, [pc, #628]	; (802a35c <_Z19tflite_learn_5_initPFPvjjE+0x2e0>)
 802a0e8:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.ReportError = &MicroContextReportOpError;
 802a0ea:	4b97      	ldr	r3, [pc, #604]	; (802a348 <_Z19tflite_learn_5_initPFPvjjE+0x2cc>)
 802a0ec:	4a9c      	ldr	r2, [pc, #624]	; (802a360 <_Z19tflite_learn_5_initPFPvjjE+0x2e4>)
 802a0ee:	611a      	str	r2, [r3, #16]

  ctx.tensors_size = 23;
 802a0f0:	4b95      	ldr	r3, [pc, #596]	; (802a348 <_Z19tflite_learn_5_initPFPvjjE+0x2cc>)
 802a0f2:	2217      	movs	r2, #23
 802a0f4:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 23; ++i) {
 802a0f6:	2300      	movs	r3, #0
 802a0f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802a0fc:	e027      	b.n	802a14e <_Z19tflite_learn_5_initPFPvjjE+0xd2>
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
 802a0fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802a102:	4619      	mov	r1, r3
 802a104:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 802a108:	f7ff fcb0 	bl	8029a6c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 802a10c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 802a110:	2b02      	cmp	r3, #2
 802a112:	d117      	bne.n	802a144 <_Z19tflite_learn_5_initPFPvjjE+0xc8>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 802a114:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802a116:	4893      	ldr	r0, [pc, #588]	; (802a364 <_Z19tflite_learn_5_initPFPvjjE+0x2e8>)
 802a118:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 802a11c:	4613      	mov	r3, r2
 802a11e:	005b      	lsls	r3, r3, #1
 802a120:	4413      	add	r3, r2
 802a122:	00db      	lsls	r3, r3, #3
 802a124:	4403      	add	r3, r0
 802a126:	330c      	adds	r3, #12
 802a128:	681b      	ldr	r3, [r3, #0]
 802a12a:	440b      	add	r3, r1
 802a12c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (data_end_ptr > tensor_boundary) {
 802a130:	4b83      	ldr	r3, [pc, #524]	; (802a340 <_Z19tflite_learn_5_initPFPvjjE+0x2c4>)
 802a132:	681b      	ldr	r3, [r3, #0]
 802a134:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802a138:	429a      	cmp	r2, r3
 802a13a:	d903      	bls.n	802a144 <_Z19tflite_learn_5_initPFPvjjE+0xc8>
        tensor_boundary = data_end_ptr;
 802a13c:	4a80      	ldr	r2, [pc, #512]	; (802a340 <_Z19tflite_learn_5_initPFPvjjE+0x2c4>)
 802a13e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802a142:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 23; ++i) {
 802a144:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a148:	3301      	adds	r3, #1
 802a14a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802a14e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a152:	2b16      	cmp	r3, #22
 802a154:	d9d3      	bls.n	802a0fe <_Z19tflite_learn_5_initPFPvjjE+0x82>
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
 802a156:	4b7a      	ldr	r3, [pc, #488]	; (802a340 <_Z19tflite_learn_5_initPFPvjjE+0x2c4>)
 802a158:	681a      	ldr	r2, [r3, #0]
 802a15a:	4b7a      	ldr	r3, [pc, #488]	; (802a344 <_Z19tflite_learn_5_initPFPvjjE+0x2c8>)
 802a15c:	681b      	ldr	r3, [r3, #0]
 802a15e:	429a      	cmp	r2, r3
 802a160:	d904      	bls.n	802a16c <_Z19tflite_learn_5_initPFPvjjE+0xf0>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 802a162:	4881      	ldr	r0, [pc, #516]	; (802a368 <_Z19tflite_learn_5_initPFPvjjE+0x2ec>)
 802a164:	f7de fd16 	bl	8008b94 <_Z9ei_printfPKcz>
    return kTfLiteError;
 802a168:	2401      	movs	r4, #1
 802a16a:	e125      	b.n	802a3b8 <_Z19tflite_learn_5_initPFPvjjE+0x33c>
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
 802a16c:	4c7f      	ldr	r4, [pc, #508]	; (802a36c <_Z19tflite_learn_5_initPFPvjjE+0x2f0>)
 802a16e:	463b      	mov	r3, r7
 802a170:	4618      	mov	r0, r3
 802a172:	f7ff f913 	bl	802939c <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 802a176:	4625      	mov	r5, r4
 802a178:	463c      	mov	r4, r7
 802a17a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802a17c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802a17e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802a180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802a182:	6823      	ldr	r3, [r4, #0]
 802a184:	602b      	str	r3, [r5, #0]
  registrations[OP_CONV_2D] = Register_CONV_2D();
 802a186:	4c79      	ldr	r4, [pc, #484]	; (802a36c <_Z19tflite_learn_5_initPFPvjjE+0x2f0>)
 802a188:	463b      	mov	r3, r7
 802a18a:	4618      	mov	r0, r3
 802a18c:	f7fd fb72 	bl	8027874 <_ZN6tflite16Register_CONV_2DEv>
 802a190:	3424      	adds	r4, #36	; 0x24
 802a192:	463d      	mov	r5, r7
 802a194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a19a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a19c:	682b      	ldr	r3, [r5, #0]
 802a19e:	6023      	str	r3, [r4, #0]
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 802a1a0:	4c72      	ldr	r4, [pc, #456]	; (802a36c <_Z19tflite_learn_5_initPFPvjjE+0x2f0>)
 802a1a2:	463b      	mov	r3, r7
 802a1a4:	4618      	mov	r0, r3
 802a1a6:	f7fe fe3b 	bl	8028e20 <_ZN6tflite20Register_MAX_POOL_2DEv>
 802a1aa:	3448      	adds	r4, #72	; 0x48
 802a1ac:	463d      	mov	r5, r7
 802a1ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a1b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a1b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a1b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a1b6:	682b      	ldr	r3, [r5, #0]
 802a1b8:	6023      	str	r3, [r4, #0]
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 802a1ba:	4c6c      	ldr	r4, [pc, #432]	; (802a36c <_Z19tflite_learn_5_initPFPvjjE+0x2f0>)
 802a1bc:	463b      	mov	r3, r7
 802a1be:	4618      	mov	r0, r3
 802a1c0:	f7fe fabc 	bl	802873c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 802a1c4:	346c      	adds	r4, #108	; 0x6c
 802a1c6:	463d      	mov	r5, r7
 802a1c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a1ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a1cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a1ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a1d0:	682b      	ldr	r3, [r5, #0]
 802a1d2:	6023      	str	r3, [r4, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 802a1d4:	4c65      	ldr	r4, [pc, #404]	; (802a36c <_Z19tflite_learn_5_initPFPvjjE+0x2f0>)
 802a1d6:	463b      	mov	r3, r7
 802a1d8:	4618      	mov	r0, r3
 802a1da:	f7ff fac5 	bl	8029768 <_ZN6tflite16Register_SOFTMAXEv>
 802a1de:	3490      	adds	r4, #144	; 0x90
 802a1e0:	463d      	mov	r5, r7
 802a1e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a1e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a1e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a1e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a1ea:	682b      	ldr	r3, [r5, #0]
 802a1ec:	6023      	str	r3, [r4, #0]

  for (size_t g = 0; g < 1; ++g) {
 802a1ee:	2300      	movs	r3, #0
 802a1f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a1f4:	e054      	b.n	802a2a0 <_Z19tflite_learn_5_initPFPvjjE+0x224>
    current_subgraph_index = g;
 802a1f6:	4a5e      	ldr	r2, [pc, #376]	; (802a370 <_Z19tflite_learn_5_initPFPvjjE+0x2f4>)
 802a1f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802a1fc:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 802a1fe:	4a5d      	ldr	r2, [pc, #372]	; (802a374 <_Z19tflite_learn_5_initPFPvjjE+0x2f8>)
 802a200:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802a204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802a208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a20c:	e039      	b.n	802a282 <_Z19tflite_learn_5_initPFPvjjE+0x206>
      if (registrations[used_ops[i]].init) {
 802a20e:	4a5a      	ldr	r2, [pc, #360]	; (802a378 <_Z19tflite_learn_5_initPFPvjjE+0x2fc>)
 802a210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802a214:	4413      	add	r3, r2
 802a216:	781b      	ldrb	r3, [r3, #0]
 802a218:	4619      	mov	r1, r3
 802a21a:	4a54      	ldr	r2, [pc, #336]	; (802a36c <_Z19tflite_learn_5_initPFPvjjE+0x2f0>)
 802a21c:	460b      	mov	r3, r1
 802a21e:	00db      	lsls	r3, r3, #3
 802a220:	440b      	add	r3, r1
 802a222:	009b      	lsls	r3, r3, #2
 802a224:	4413      	add	r3, r2
 802a226:	681b      	ldr	r3, [r3, #0]
 802a228:	2b00      	cmp	r3, #0
 802a22a:	d025      	beq.n	802a278 <_Z19tflite_learn_5_initPFPvjjE+0x1fc>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 802a22c:	4a52      	ldr	r2, [pc, #328]	; (802a378 <_Z19tflite_learn_5_initPFPvjjE+0x2fc>)
 802a22e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802a232:	4413      	add	r3, r2
 802a234:	781b      	ldrb	r3, [r3, #0]
 802a236:	4619      	mov	r1, r3
 802a238:	4a4c      	ldr	r2, [pc, #304]	; (802a36c <_Z19tflite_learn_5_initPFPvjjE+0x2f0>)
 802a23a:	460b      	mov	r3, r1
 802a23c:	00db      	lsls	r3, r3, #3
 802a23e:	440b      	add	r3, r1
 802a240:	009b      	lsls	r3, r3, #2
 802a242:	4413      	add	r3, r2
 802a244:	681c      	ldr	r4, [r3, #0]
 802a246:	494d      	ldr	r1, [pc, #308]	; (802a37c <_Z19tflite_learn_5_initPFPvjjE+0x300>)
 802a248:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802a24c:	4613      	mov	r3, r2
 802a24e:	009b      	lsls	r3, r3, #2
 802a250:	4413      	add	r3, r2
 802a252:	00db      	lsls	r3, r3, #3
 802a254:	440b      	add	r3, r1
 802a256:	3314      	adds	r3, #20
 802a258:	681b      	ldr	r3, [r3, #0]
 802a25a:	2200      	movs	r2, #0
 802a25c:	4619      	mov	r1, r3
 802a25e:	483a      	ldr	r0, [pc, #232]	; (802a348 <_Z19tflite_learn_5_initPFPvjjE+0x2cc>)
 802a260:	47a0      	blx	r4
 802a262:	4601      	mov	r1, r0
 802a264:	4845      	ldr	r0, [pc, #276]	; (802a37c <_Z19tflite_learn_5_initPFPvjjE+0x300>)
 802a266:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802a26a:	4613      	mov	r3, r2
 802a26c:	009b      	lsls	r3, r3, #2
 802a26e:	4413      	add	r3, r2
 802a270:	00db      	lsls	r3, r3, #3
 802a272:	4403      	add	r3, r0
 802a274:	3310      	adds	r3, #16
 802a276:	6019      	str	r1, [r3, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 802a278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802a27c:	3301      	adds	r3, #1
 802a27e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802a286:	3301      	adds	r3, #1
 802a288:	4a3a      	ldr	r2, [pc, #232]	; (802a374 <_Z19tflite_learn_5_initPFPvjjE+0x2f8>)
 802a28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802a28e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802a292:	429a      	cmp	r2, r3
 802a294:	d3bb      	bcc.n	802a20e <_Z19tflite_learn_5_initPFPvjjE+0x192>
  for (size_t g = 0; g < 1; ++g) {
 802a296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802a29a:	3301      	adds	r3, #1
 802a29c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a2a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802a2a4:	2b00      	cmp	r3, #0
 802a2a6:	d0a6      	beq.n	802a1f6 <_Z19tflite_learn_5_initPFPvjjE+0x17a>
      }
    }
  }
  current_subgraph_index = 0;
 802a2a8:	4b31      	ldr	r3, [pc, #196]	; (802a370 <_Z19tflite_learn_5_initPFPvjjE+0x2f4>)
 802a2aa:	2200      	movs	r2, #0
 802a2ac:	601a      	str	r2, [r3, #0]

  for(size_t g = 0; g < 1; ++g) {
 802a2ae:	2300      	movs	r3, #0
 802a2b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802a2b4:	e078      	b.n	802a3a8 <_Z19tflite_learn_5_initPFPvjjE+0x32c>
    current_subgraph_index = g;
 802a2b6:	4a2e      	ldr	r2, [pc, #184]	; (802a370 <_Z19tflite_learn_5_initPFPvjjE+0x2f4>)
 802a2b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802a2bc:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 802a2be:	4a2d      	ldr	r2, [pc, #180]	; (802a374 <_Z19tflite_learn_5_initPFPvjjE+0x2f8>)
 802a2c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802a2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802a2c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802a2cc:	e05d      	b.n	802a38a <_Z19tflite_learn_5_initPFPvjjE+0x30e>
      if (registrations[used_ops[i]].prepare) {
 802a2ce:	4a2a      	ldr	r2, [pc, #168]	; (802a378 <_Z19tflite_learn_5_initPFPvjjE+0x2fc>)
 802a2d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802a2d4:	4413      	add	r3, r2
 802a2d6:	781b      	ldrb	r3, [r3, #0]
 802a2d8:	4619      	mov	r1, r3
 802a2da:	4a24      	ldr	r2, [pc, #144]	; (802a36c <_Z19tflite_learn_5_initPFPvjjE+0x2f0>)
 802a2dc:	460b      	mov	r3, r1
 802a2de:	00db      	lsls	r3, r3, #3
 802a2e0:	440b      	add	r3, r1
 802a2e2:	009b      	lsls	r3, r3, #2
 802a2e4:	4413      	add	r3, r2
 802a2e6:	3308      	adds	r3, #8
 802a2e8:	681b      	ldr	r3, [r3, #0]
 802a2ea:	2b00      	cmp	r3, #0
 802a2ec:	d048      	beq.n	802a380 <_Z19tflite_learn_5_initPFPvjjE+0x304>
        ResetTensors();
 802a2ee:	f7ff fd67 	bl	8029dc0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
 802a2f2:	4a21      	ldr	r2, [pc, #132]	; (802a378 <_Z19tflite_learn_5_initPFPvjjE+0x2fc>)
 802a2f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802a2f8:	4413      	add	r3, r2
 802a2fa:	781b      	ldrb	r3, [r3, #0]
 802a2fc:	4619      	mov	r1, r3
 802a2fe:	4a1b      	ldr	r2, [pc, #108]	; (802a36c <_Z19tflite_learn_5_initPFPvjjE+0x2f0>)
 802a300:	460b      	mov	r3, r1
 802a302:	00db      	lsls	r3, r3, #3
 802a304:	440b      	add	r3, r1
 802a306:	009b      	lsls	r3, r3, #2
 802a308:	4413      	add	r3, r2
 802a30a:	3308      	adds	r3, #8
 802a30c:	681c      	ldr	r4, [r3, #0]
 802a30e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802a312:	4613      	mov	r3, r2
 802a314:	009b      	lsls	r3, r3, #2
 802a316:	4413      	add	r3, r2
 802a318:	00db      	lsls	r3, r3, #3
 802a31a:	4a18      	ldr	r2, [pc, #96]	; (802a37c <_Z19tflite_learn_5_initPFPvjjE+0x300>)
 802a31c:	4413      	add	r3, r2
 802a31e:	4619      	mov	r1, r3
 802a320:	4809      	ldr	r0, [pc, #36]	; (802a348 <_Z19tflite_learn_5_initPFPvjjE+0x2cc>)
 802a322:	47a0      	blx	r4
 802a324:	4603      	mov	r3, r0
 802a326:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (status != kTfLiteOk) {
 802a32a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 802a32e:	2b00      	cmp	r3, #0
 802a330:	d026      	beq.n	802a380 <_Z19tflite_learn_5_initPFPvjjE+0x304>
          return status;
 802a332:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 802a336:	e03f      	b.n	802a3b8 <_Z19tflite_learn_5_initPFPvjjE+0x33c>
 802a338:	20006c44 	.word	0x20006c44
 802a33c:	08033358 	.word	0x08033358
 802a340:	20006c48 	.word	0x20006c48
 802a344:	20006c4c 	.word	0x20006c4c
 802a348:	20006c50 	.word	0x20006c50
 802a34c:	08029c19 	.word	0x08029c19
 802a350:	08029cfd 	.word	0x08029cfd
 802a354:	08029d89 	.word	0x08029d89
 802a358:	08029e29 	.word	0x08029e29
 802a35c:	08029efd 	.word	0x08029efd
 802a360:	08026919 	.word	0x08026919
 802a364:	2000007c 	.word	0x2000007c
 802a368:	08033380 	.word	0x08033380
 802a36c:	20006df8 	.word	0x20006df8
 802a370:	20006eac 	.word	0x20006eac
 802a374:	08034d18 	.word	0x08034d18
 802a378:	2000045c 	.word	0x2000045c
 802a37c:	200002a4 	.word	0x200002a4
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 802a380:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802a384:	3301      	adds	r3, #1
 802a386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802a38a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802a38e:	3301      	adds	r3, #1
 802a390:	4a0e      	ldr	r2, [pc, #56]	; (802a3cc <_Z19tflite_learn_5_initPFPvjjE+0x350>)
 802a392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802a396:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802a39a:	429a      	cmp	r2, r3
 802a39c:	d397      	bcc.n	802a2ce <_Z19tflite_learn_5_initPFPvjjE+0x252>
  for(size_t g = 0; g < 1; ++g) {
 802a39e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802a3a2:	3301      	adds	r3, #1
 802a3a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802a3a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802a3ac:	2b00      	cmp	r3, #0
 802a3ae:	d082      	beq.n	802a2b6 <_Z19tflite_learn_5_initPFPvjjE+0x23a>
        }
      }
    }
  }
  current_subgraph_index = 0;
 802a3b0:	4b07      	ldr	r3, [pc, #28]	; (802a3d0 <_Z19tflite_learn_5_initPFPvjjE+0x354>)
 802a3b2:	2200      	movs	r2, #0
 802a3b4:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 802a3b6:	2400      	movs	r4, #0
}
 802a3b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 802a3bc:	4618      	mov	r0, r3
 802a3be:	f000 f88f 	bl	802a4e0 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 802a3c2:	4623      	mov	r3, r4
 802a3c4:	4618      	mov	r0, r3
 802a3c6:	37a8      	adds	r7, #168	; 0xa8
 802a3c8:	46bd      	mov	sp, r7
 802a3ca:	bdb0      	pop	{r4, r5, r7, pc}
 802a3cc:	08034d18 	.word	0x08034d18
 802a3d0:	20006eac 	.word	0x20006eac

0802a3d4 <_Z20tflite_learn_5_inputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
 802a3d4:	b580      	push	{r7, lr}
 802a3d6:	b082      	sub	sp, #8
 802a3d8:	af00      	add	r7, sp, #0
 802a3da:	6078      	str	r0, [r7, #4]
 802a3dc:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(in_tensor_indices[index], tensor);
 802a3de:	2300      	movs	r3, #0
 802a3e0:	6839      	ldr	r1, [r7, #0]
 802a3e2:	4618      	mov	r0, r3
 802a3e4:	f7ff fb42 	bl	8029a6c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 802a3e8:	2300      	movs	r3, #0
}
 802a3ea:	4618      	mov	r0, r3
 802a3ec:	3708      	adds	r7, #8
 802a3ee:	46bd      	mov	sp, r7
 802a3f0:	bd80      	pop	{r7, pc}

0802a3f2 <_Z21tflite_learn_5_outputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
 802a3f2:	b580      	push	{r7, lr}
 802a3f4:	b082      	sub	sp, #8
 802a3f6:	af00      	add	r7, sp, #0
 802a3f8:	6078      	str	r0, [r7, #4]
 802a3fa:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(out_tensor_indices[index], tensor);
 802a3fc:	2316      	movs	r3, #22
 802a3fe:	6839      	ldr	r1, [r7, #0]
 802a400:	4618      	mov	r0, r3
 802a402:	f7ff fb33 	bl	8029a6c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 802a406:	2300      	movs	r3, #0
}
 802a408:	4618      	mov	r0, r3
 802a40a:	3708      	adds	r7, #8
 802a40c:	46bd      	mov	sp, r7
 802a40e:	bd80      	pop	{r7, pc}

0802a410 <_Z21tflite_learn_5_invokev>:

TfLiteStatus tflite_learn_5_invoke() {
 802a410:	b590      	push	{r4, r7, lr}
 802a412:	b083      	sub	sp, #12
 802a414:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 11; ++i) {
 802a416:	2300      	movs	r3, #0
 802a418:	607b      	str	r3, [r7, #4]
 802a41a:	e022      	b.n	802a462 <_Z21tflite_learn_5_invokev+0x52>
    ResetTensors();
 802a41c:	f7ff fcd0 	bl	8029dc0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
 802a420:	4a14      	ldr	r2, [pc, #80]	; (802a474 <_Z21tflite_learn_5_invokev+0x64>)
 802a422:	687b      	ldr	r3, [r7, #4]
 802a424:	4413      	add	r3, r2
 802a426:	781b      	ldrb	r3, [r3, #0]
 802a428:	4619      	mov	r1, r3
 802a42a:	4a13      	ldr	r2, [pc, #76]	; (802a478 <_Z21tflite_learn_5_invokev+0x68>)
 802a42c:	460b      	mov	r3, r1
 802a42e:	00db      	lsls	r3, r3, #3
 802a430:	440b      	add	r3, r1
 802a432:	009b      	lsls	r3, r3, #2
 802a434:	4413      	add	r3, r2
 802a436:	330c      	adds	r3, #12
 802a438:	681c      	ldr	r4, [r3, #0]
 802a43a:	687a      	ldr	r2, [r7, #4]
 802a43c:	4613      	mov	r3, r2
 802a43e:	009b      	lsls	r3, r3, #2
 802a440:	4413      	add	r3, r2
 802a442:	00db      	lsls	r3, r3, #3
 802a444:	4a0d      	ldr	r2, [pc, #52]	; (802a47c <_Z21tflite_learn_5_invokev+0x6c>)
 802a446:	4413      	add	r3, r2
 802a448:	4619      	mov	r1, r3
 802a44a:	480d      	ldr	r0, [pc, #52]	; (802a480 <_Z21tflite_learn_5_invokev+0x70>)
 802a44c:	47a0      	blx	r4
 802a44e:	4603      	mov	r3, r0
 802a450:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 802a452:	78fb      	ldrb	r3, [r7, #3]
 802a454:	2b00      	cmp	r3, #0
 802a456:	d001      	beq.n	802a45c <_Z21tflite_learn_5_invokev+0x4c>
      return status;
 802a458:	78fb      	ldrb	r3, [r7, #3]
 802a45a:	e006      	b.n	802a46a <_Z21tflite_learn_5_invokev+0x5a>
  for (size_t i = 0; i < 11; ++i) {
 802a45c:	687b      	ldr	r3, [r7, #4]
 802a45e:	3301      	adds	r3, #1
 802a460:	607b      	str	r3, [r7, #4]
 802a462:	687b      	ldr	r3, [r7, #4]
 802a464:	2b0a      	cmp	r3, #10
 802a466:	d9d9      	bls.n	802a41c <_Z21tflite_learn_5_invokev+0xc>
    }
  }
  return kTfLiteOk;
 802a468:	2300      	movs	r3, #0
}
 802a46a:	4618      	mov	r0, r3
 802a46c:	370c      	adds	r7, #12
 802a46e:	46bd      	mov	sp, r7
 802a470:	bd90      	pop	{r4, r7, pc}
 802a472:	bf00      	nop
 802a474:	2000045c 	.word	0x2000045c
 802a478:	20006df8 	.word	0x20006df8
 802a47c:	200002a4 	.word	0x200002a4
 802a480:	20006c50 	.word	0x20006c50

0802a484 <_Z20tflite_learn_5_resetPFvPvE>:

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
 802a484:	b580      	push	{r7, lr}
 802a486:	b084      	sub	sp, #16
 802a488:	af00      	add	r7, sp, #0
 802a48a:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 802a48c:	4b10      	ldr	r3, [pc, #64]	; (802a4d0 <_Z20tflite_learn_5_resetPFvPvE+0x4c>)
 802a48e:	681a      	ldr	r2, [r3, #0]
 802a490:	687b      	ldr	r3, [r7, #4]
 802a492:	4610      	mov	r0, r2
 802a494:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 802a496:	4b0f      	ldr	r3, [pc, #60]	; (802a4d4 <_Z20tflite_learn_5_resetPFvPvE+0x50>)
 802a498:	2200      	movs	r2, #0
 802a49a:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 802a49c:	2300      	movs	r3, #0
 802a49e:	60fb      	str	r3, [r7, #12]
 802a4a0:	e009      	b.n	802a4b6 <_Z20tflite_learn_5_resetPFvPvE+0x32>
    ei_free(overflow_buffers[ix]);
 802a4a2:	4a0d      	ldr	r2, [pc, #52]	; (802a4d8 <_Z20tflite_learn_5_resetPFvPvE+0x54>)
 802a4a4:	68fb      	ldr	r3, [r7, #12]
 802a4a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802a4aa:	4618      	mov	r0, r3
 802a4ac:	f7fa fffe 	bl	80254ac <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 802a4b0:	68fb      	ldr	r3, [r7, #12]
 802a4b2:	3301      	adds	r3, #1
 802a4b4:	60fb      	str	r3, [r7, #12]
 802a4b6:	4b09      	ldr	r3, [pc, #36]	; (802a4dc <_Z20tflite_learn_5_resetPFvPvE+0x58>)
 802a4b8:	681b      	ldr	r3, [r3, #0]
 802a4ba:	68fa      	ldr	r2, [r7, #12]
 802a4bc:	429a      	cmp	r2, r3
 802a4be:	d3f0      	bcc.n	802a4a2 <_Z20tflite_learn_5_resetPFvPvE+0x1e>
  }
  overflow_buffers_ix = 0;
 802a4c0:	4b06      	ldr	r3, [pc, #24]	; (802a4dc <_Z20tflite_learn_5_resetPFvPvE+0x58>)
 802a4c2:	2200      	movs	r2, #0
 802a4c4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 802a4c6:	2300      	movs	r3, #0
}
 802a4c8:	4618      	mov	r0, r3
 802a4ca:	3710      	adds	r7, #16
 802a4cc:	46bd      	mov	sp, r7
 802a4ce:	bd80      	pop	{r7, pc}
 802a4d0:	20006c44 	.word	0x20006c44
 802a4d4:	20006efc 	.word	0x20006efc
 802a4d8:	20006eb0 	.word	0x20006eb0
 802a4dc:	20006ed8 	.word	0x20006ed8

0802a4e0 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
 802a4e0:	b580      	push	{r7, lr}
 802a4e2:	b082      	sub	sp, #8
 802a4e4:	af00      	add	r7, sp, #0
 802a4e6:	6078      	str	r0, [r7, #4]
 802a4e8:	4a05      	ldr	r2, [pc, #20]	; (802a500 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x20>)
 802a4ea:	687b      	ldr	r3, [r7, #4]
 802a4ec:	601a      	str	r2, [r3, #0]
 802a4ee:	687b      	ldr	r3, [r7, #4]
 802a4f0:	4618      	mov	r0, r3
 802a4f2:	f7fc f8cf 	bl	8026694 <_ZN6tflite12MicroContextD1Ev>
 802a4f6:	687b      	ldr	r3, [r7, #4]
 802a4f8:	4618      	mov	r0, r3
 802a4fa:	3708      	adds	r7, #8
 802a4fc:	46bd      	mov	sp, r7
 802a4fe:	bd80      	pop	{r7, pc}
 802a500:	08034d28 	.word	0x08034d28

0802a504 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
 802a504:	b580      	push	{r7, lr}
 802a506:	b082      	sub	sp, #8
 802a508:	af00      	add	r7, sp, #0
 802a50a:	6078      	str	r0, [r7, #4]
 802a50c:	6878      	ldr	r0, [r7, #4]
 802a50e:	f7ff ffe7 	bl	802a4e0 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 802a512:	2118      	movs	r1, #24
 802a514:	6878      	ldr	r0, [r7, #4]
 802a516:	f000 f86b 	bl	802a5f0 <_ZdlPvj>
 802a51a:	687b      	ldr	r3, [r7, #4]
 802a51c:	4618      	mov	r0, r3
 802a51e:	3708      	adds	r7, #8
 802a520:	46bd      	mov	sp, r7
 802a522:	bd80      	pop	{r7, pc}

0802a524 <_Z41__static_initialization_and_destruction_0ii>:
}
 802a524:	b480      	push	{r7}
 802a526:	b083      	sub	sp, #12
 802a528:	af00      	add	r7, sp, #0
 802a52a:	6078      	str	r0, [r7, #4]
 802a52c:	6039      	str	r1, [r7, #0]
 802a52e:	687b      	ldr	r3, [r7, #4]
 802a530:	2b01      	cmp	r3, #1
 802a532:	d14a      	bne.n	802a5ca <_Z41__static_initialization_and_destruction_0ii+0xa6>
 802a534:	683b      	ldr	r3, [r7, #0]
 802a536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802a53a:	4293      	cmp	r3, r2
 802a53c:	d145      	bne.n	802a5ca <_Z41__static_initialization_and_destruction_0ii+0xa6>
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 656), (TfLiteIntArray*)&g0::tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
 802a53e:	4b26      	ldr	r3, [pc, #152]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a540:	681b      	ldr	r3, [r3, #0]
 802a542:	f503 7324 	add.w	r3, r3, #656	; 0x290
};
 802a546:	4a25      	ldr	r2, [pc, #148]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a548:	6053      	str	r3, [r2, #4]
 802a54a:	4b23      	ldr	r3, [pc, #140]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a54c:	681b      	ldr	r3, [r3, #0]
 802a54e:	4a23      	ldr	r2, [pc, #140]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a550:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 656), (TfLiteIntArray*)&g0::tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
 802a554:	4b20      	ldr	r3, [pc, #128]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a556:	681b      	ldr	r3, [r3, #0]
 802a558:	f503 7324 	add.w	r3, r3, #656	; 0x290
};
 802a55c:	4a1f      	ldr	r2, [pc, #124]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a55e:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 802a562:	4b1d      	ldr	r3, [pc, #116]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a564:	681b      	ldr	r3, [r3, #0]
 802a566:	4a1d      	ldr	r2, [pc, #116]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a568:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
 802a56c:	4b1a      	ldr	r3, [pc, #104]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a56e:	681b      	ldr	r3, [r3, #0]
 802a570:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};
 802a574:	4a19      	ldr	r2, [pc, #100]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a576:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 802a57a:	4b17      	ldr	r3, [pc, #92]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a57c:	681b      	ldr	r3, [r3, #0]
 802a57e:	4a17      	ldr	r2, [pc, #92]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a580:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
 802a584:	4b14      	ldr	r3, [pc, #80]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a586:	681b      	ldr	r3, [r3, #0]
 802a588:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};
 802a58c:	4a13      	ldr	r2, [pc, #76]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a58e:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 802a592:	4b11      	ldr	r3, [pc, #68]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a594:	681b      	ldr	r3, [r3, #0]
 802a596:	4a11      	ldr	r2, [pc, #68]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a598:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
 802a59c:	4b0e      	ldr	r3, [pc, #56]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a59e:	681b      	ldr	r3, [r3, #0]
 802a5a0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};
 802a5a4:	4a0d      	ldr	r2, [pc, #52]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a5a6:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 802a5aa:	4b0b      	ldr	r3, [pc, #44]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a5ac:	681b      	ldr	r3, [r3, #0]
 802a5ae:	4a0b      	ldr	r2, [pc, #44]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a5b0:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
 802a5b4:	4b08      	ldr	r3, [pc, #32]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a5b6:	681b      	ldr	r3, [r3, #0]
 802a5b8:	33d0      	adds	r3, #208	; 0xd0
};
 802a5ba:	4a08      	ldr	r2, [pc, #32]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a5bc:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 802a5c0:	4b05      	ldr	r3, [pc, #20]	; (802a5d8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802a5c2:	681b      	ldr	r3, [r3, #0]
 802a5c4:	4a05      	ldr	r2, [pc, #20]	; (802a5dc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802a5c6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
}
 802a5ca:	bf00      	nop
 802a5cc:	370c      	adds	r7, #12
 802a5ce:	46bd      	mov	sp, r7
 802a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5d4:	4770      	bx	lr
 802a5d6:	bf00      	nop
 802a5d8:	20006c44 	.word	0x20006c44
 802a5dc:	2000007c 	.word	0x2000007c

0802a5e0 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE>:
 802a5e0:	b580      	push	{r7, lr}
 802a5e2:	af00      	add	r7, sp, #0
 802a5e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802a5e8:	2001      	movs	r0, #1
 802a5ea:	f7ff ff9b 	bl	802a524 <_Z41__static_initialization_and_destruction_0ii>
 802a5ee:	bd80      	pop	{r7, pc}

0802a5f0 <_ZdlPvj>:
 802a5f0:	f000 b8df 	b.w	802a7b2 <_ZdlPv>

0802a5f4 <_ZdaPv>:
 802a5f4:	f000 b8dd 	b.w	802a7b2 <_ZdlPv>

0802a5f8 <_ZdaPvj>:
 802a5f8:	f7ff bffc 	b.w	802a5f4 <_ZdaPv>

0802a5fc <__cxa_guard_acquire>:
 802a5fc:	6803      	ldr	r3, [r0, #0]
 802a5fe:	07db      	lsls	r3, r3, #31
 802a600:	d406      	bmi.n	802a610 <__cxa_guard_acquire+0x14>
 802a602:	7843      	ldrb	r3, [r0, #1]
 802a604:	b103      	cbz	r3, 802a608 <__cxa_guard_acquire+0xc>
 802a606:	deff      	udf	#255	; 0xff
 802a608:	2301      	movs	r3, #1
 802a60a:	7043      	strb	r3, [r0, #1]
 802a60c:	4618      	mov	r0, r3
 802a60e:	4770      	bx	lr
 802a610:	2000      	movs	r0, #0
 802a612:	4770      	bx	lr

0802a614 <__cxa_guard_release>:
 802a614:	2301      	movs	r3, #1
 802a616:	6003      	str	r3, [r0, #0]
 802a618:	4770      	bx	lr

0802a61a <_Znwj>:
 802a61a:	2801      	cmp	r0, #1
 802a61c:	bf38      	it	cc
 802a61e:	2001      	movcc	r0, #1
 802a620:	b510      	push	{r4, lr}
 802a622:	4604      	mov	r4, r0
 802a624:	4620      	mov	r0, r4
 802a626:	f003 f9e9 	bl	802d9fc <malloc>
 802a62a:	b100      	cbz	r0, 802a62e <_Znwj+0x14>
 802a62c:	bd10      	pop	{r4, pc}
 802a62e:	f000 f8c3 	bl	802a7b8 <_ZSt15get_new_handlerv>
 802a632:	b908      	cbnz	r0, 802a638 <_Znwj+0x1e>
 802a634:	f003 f998 	bl	802d968 <abort>
 802a638:	4780      	blx	r0
 802a63a:	e7f3      	b.n	802a624 <_Znwj+0xa>

0802a63c <_Znaj>:
 802a63c:	f7ff bfed 	b.w	802a61a <_Znwj>

0802a640 <_ZSt19__throw_logic_errorPKc>:
 802a640:	b508      	push	{r3, lr}
 802a642:	f003 f991 	bl	802d968 <abort>

0802a646 <_ZSt20__throw_length_errorPKc>:
 802a646:	b508      	push	{r3, lr}
 802a648:	f003 f98e 	bl	802d968 <abort>

0802a64c <_ZSt24__throw_out_of_range_fmtPKcz>:
 802a64c:	b40f      	push	{r0, r1, r2, r3}
 802a64e:	b580      	push	{r7, lr}
 802a650:	b084      	sub	sp, #16
 802a652:	af00      	add	r7, sp, #0
 802a654:	f107 0418 	add.w	r4, r7, #24
 802a658:	f854 2b04 	ldr.w	r2, [r4], #4
 802a65c:	607a      	str	r2, [r7, #4]
 802a65e:	4610      	mov	r0, r2
 802a660:	f7d5 fe06 	bl	8000270 <strlen>
 802a664:	f200 2307 	addw	r3, r0, #519	; 0x207
 802a668:	f023 0307 	bic.w	r3, r3, #7
 802a66c:	ebad 0d03 	sub.w	sp, sp, r3
 802a670:	f500 7100 	add.w	r1, r0, #512	; 0x200
 802a674:	687a      	ldr	r2, [r7, #4]
 802a676:	60fc      	str	r4, [r7, #12]
 802a678:	4623      	mov	r3, r4
 802a67a:	4668      	mov	r0, sp
 802a67c:	f000 f858 	bl	802a730 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 802a680:	f003 f972 	bl	802d968 <abort>

0802a684 <_ZSt25__throw_bad_function_callv>:
 802a684:	b508      	push	{r3, lr}
 802a686:	f003 f96f 	bl	802d968 <abort>
	...

0802a68c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 802a68c:	b580      	push	{r7, lr}
 802a68e:	b09c      	sub	sp, #112	; 0x70
 802a690:	4606      	mov	r6, r0
 802a692:	af00      	add	r7, sp, #0
 802a694:	460c      	mov	r4, r1
 802a696:	1ba4      	subs	r4, r4, r6
 802a698:	490e      	ldr	r1, [pc, #56]	; (802a6d4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 802a69a:	2269      	movs	r2, #105	; 0x69
 802a69c:	1d38      	adds	r0, r7, #4
 802a69e:	f004 f924 	bl	802e8ea <memcpy>
 802a6a2:	f104 0370 	add.w	r3, r4, #112	; 0x70
 802a6a6:	f023 0307 	bic.w	r3, r3, #7
 802a6aa:	ebad 0d03 	sub.w	sp, sp, r3
 802a6ae:	466d      	mov	r5, sp
 802a6b0:	2268      	movs	r2, #104	; 0x68
 802a6b2:	1d39      	adds	r1, r7, #4
 802a6b4:	4628      	mov	r0, r5
 802a6b6:	f004 f918 	bl	802e8ea <memcpy>
 802a6ba:	4622      	mov	r2, r4
 802a6bc:	4631      	mov	r1, r6
 802a6be:	f105 0068 	add.w	r0, r5, #104	; 0x68
 802a6c2:	442c      	add	r4, r5
 802a6c4:	f004 f911 	bl	802e8ea <memcpy>
 802a6c8:	2300      	movs	r3, #0
 802a6ca:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 802a6ce:	4628      	mov	r0, r5
 802a6d0:	f7ff ffb6 	bl	802a640 <_ZSt19__throw_logic_errorPKc>
 802a6d4:	08034d54 	.word	0x08034d54

0802a6d8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 802a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a6dc:	af00      	add	r7, sp, #0
 802a6de:	b084      	sub	sp, #16
 802a6e0:	466d      	mov	r5, sp
 802a6e2:	f105 040c 	add.w	r4, r5, #12
 802a6e6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 802a72c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 802a6ea:	4623      	mov	r3, r4
 802a6ec:	f04f 0c0a 	mov.w	ip, #10
 802a6f0:	fbb2 f6fc 	udiv	r6, r2, ip
 802a6f4:	fb0c 2e16 	mls	lr, ip, r6, r2
 802a6f8:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802a6fc:	f803 ed01 	strb.w	lr, [r3, #-1]!
 802a700:	4696      	mov	lr, r2
 802a702:	f1be 0f09 	cmp.w	lr, #9
 802a706:	4632      	mov	r2, r6
 802a708:	d8f2      	bhi.n	802a6f0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 802a70a:	1ae4      	subs	r4, r4, r3
 802a70c:	428c      	cmp	r4, r1
 802a70e:	d809      	bhi.n	802a724 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 802a710:	f1c4 010c 	rsb	r1, r4, #12
 802a714:	4622      	mov	r2, r4
 802a716:	4429      	add	r1, r5
 802a718:	f004 f8e7 	bl	802e8ea <memcpy>
 802a71c:	4620      	mov	r0, r4
 802a71e:	46bd      	mov	sp, r7
 802a720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a724:	f04f 34ff 	mov.w	r4, #4294967295
 802a728:	e7f8      	b.n	802a71c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 802a72a:	bf00      	nop
 802a72c:	08034dbd 	.word	0x08034dbd

0802a730 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 802a730:	3901      	subs	r1, #1
 802a732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a736:	4607      	mov	r7, r0
 802a738:	4615      	mov	r5, r2
 802a73a:	eb00 0801 	add.w	r8, r0, r1
 802a73e:	4604      	mov	r4, r0
 802a740:	782a      	ldrb	r2, [r5, #0]
 802a742:	b392      	cbz	r2, 802a7aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 802a744:	4544      	cmp	r4, r8
 802a746:	d216      	bcs.n	802a776 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 802a748:	2a25      	cmp	r2, #37	; 0x25
 802a74a:	d107      	bne.n	802a75c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 802a74c:	786a      	ldrb	r2, [r5, #1]
 802a74e:	2a73      	cmp	r2, #115	; 0x73
 802a750:	d009      	beq.n	802a766 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 802a752:	2a7a      	cmp	r2, #122	; 0x7a
 802a754:	d016      	beq.n	802a784 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 802a756:	2a25      	cmp	r2, #37	; 0x25
 802a758:	d100      	bne.n	802a75c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 802a75a:	3501      	adds	r5, #1
 802a75c:	f815 2b01 	ldrb.w	r2, [r5], #1
 802a760:	f804 2b01 	strb.w	r2, [r4], #1
 802a764:	e7ec      	b.n	802a740 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 802a766:	f853 2b04 	ldr.w	r2, [r3], #4
 802a76a:	3a01      	subs	r2, #1
 802a76c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 802a770:	b1c9      	cbz	r1, 802a7a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 802a772:	4544      	cmp	r4, r8
 802a774:	d103      	bne.n	802a77e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4e>
 802a776:	4621      	mov	r1, r4
 802a778:	4638      	mov	r0, r7
 802a77a:	f7ff ff87 	bl	802a68c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 802a77e:	f804 1b01 	strb.w	r1, [r4], #1
 802a782:	e7f3      	b.n	802a76c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 802a784:	78aa      	ldrb	r2, [r5, #2]
 802a786:	2a75      	cmp	r2, #117	; 0x75
 802a788:	d1e8      	bne.n	802a75c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 802a78a:	461e      	mov	r6, r3
 802a78c:	eba8 0104 	sub.w	r1, r8, r4
 802a790:	f856 2b04 	ldr.w	r2, [r6], #4
 802a794:	4620      	mov	r0, r4
 802a796:	f7ff ff9f 	bl	802a6d8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 802a79a:	2800      	cmp	r0, #0
 802a79c:	ddeb      	ble.n	802a776 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 802a79e:	4404      	add	r4, r0
 802a7a0:	3503      	adds	r5, #3
 802a7a2:	4633      	mov	r3, r6
 802a7a4:	e7cc      	b.n	802a740 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 802a7a6:	3502      	adds	r5, #2
 802a7a8:	e7ca      	b.n	802a740 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 802a7aa:	7022      	strb	r2, [r4, #0]
 802a7ac:	1be0      	subs	r0, r4, r7
 802a7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802a7b2 <_ZdlPv>:
 802a7b2:	f003 b92b 	b.w	802da0c <free>
	...

0802a7b8 <_ZSt15get_new_handlerv>:
 802a7b8:	4b02      	ldr	r3, [pc, #8]	; (802a7c4 <_ZSt15get_new_handlerv+0xc>)
 802a7ba:	6818      	ldr	r0, [r3, #0]
 802a7bc:	f3bf 8f5b 	dmb	ish
 802a7c0:	4770      	bx	lr
 802a7c2:	bf00      	nop
 802a7c4:	20006f00 	.word	0x20006f00

0802a7c8 <pow>:
 802a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7ca:	ed2d 8b02 	vpush	{d8}
 802a7ce:	eeb0 8a40 	vmov.f32	s16, s0
 802a7d2:	eef0 8a60 	vmov.f32	s17, s1
 802a7d6:	ec55 4b11 	vmov	r4, r5, d1
 802a7da:	f000 fec1 	bl	802b560 <__ieee754_pow>
 802a7de:	4622      	mov	r2, r4
 802a7e0:	462b      	mov	r3, r5
 802a7e2:	4620      	mov	r0, r4
 802a7e4:	4629      	mov	r1, r5
 802a7e6:	ec57 6b10 	vmov	r6, r7, d0
 802a7ea:	f7d6 f99f 	bl	8000b2c <__aeabi_dcmpun>
 802a7ee:	2800      	cmp	r0, #0
 802a7f0:	d13b      	bne.n	802a86a <pow+0xa2>
 802a7f2:	ec51 0b18 	vmov	r0, r1, d8
 802a7f6:	2200      	movs	r2, #0
 802a7f8:	2300      	movs	r3, #0
 802a7fa:	f7d6 f965 	bl	8000ac8 <__aeabi_dcmpeq>
 802a7fe:	b1b8      	cbz	r0, 802a830 <pow+0x68>
 802a800:	2200      	movs	r2, #0
 802a802:	2300      	movs	r3, #0
 802a804:	4620      	mov	r0, r4
 802a806:	4629      	mov	r1, r5
 802a808:	f7d6 f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 802a80c:	2800      	cmp	r0, #0
 802a80e:	d146      	bne.n	802a89e <pow+0xd6>
 802a810:	ec45 4b10 	vmov	d0, r4, r5
 802a814:	f000 fa8a 	bl	802ad2c <finite>
 802a818:	b338      	cbz	r0, 802a86a <pow+0xa2>
 802a81a:	2200      	movs	r2, #0
 802a81c:	2300      	movs	r3, #0
 802a81e:	4620      	mov	r0, r4
 802a820:	4629      	mov	r1, r5
 802a822:	f7d6 f95b 	bl	8000adc <__aeabi_dcmplt>
 802a826:	b300      	cbz	r0, 802a86a <pow+0xa2>
 802a828:	f004 f832 	bl	802e890 <__errno>
 802a82c:	2322      	movs	r3, #34	; 0x22
 802a82e:	e01b      	b.n	802a868 <pow+0xa0>
 802a830:	ec47 6b10 	vmov	d0, r6, r7
 802a834:	f000 fa7a 	bl	802ad2c <finite>
 802a838:	b9e0      	cbnz	r0, 802a874 <pow+0xac>
 802a83a:	eeb0 0a48 	vmov.f32	s0, s16
 802a83e:	eef0 0a68 	vmov.f32	s1, s17
 802a842:	f000 fa73 	bl	802ad2c <finite>
 802a846:	b1a8      	cbz	r0, 802a874 <pow+0xac>
 802a848:	ec45 4b10 	vmov	d0, r4, r5
 802a84c:	f000 fa6e 	bl	802ad2c <finite>
 802a850:	b180      	cbz	r0, 802a874 <pow+0xac>
 802a852:	4632      	mov	r2, r6
 802a854:	463b      	mov	r3, r7
 802a856:	4630      	mov	r0, r6
 802a858:	4639      	mov	r1, r7
 802a85a:	f7d6 f967 	bl	8000b2c <__aeabi_dcmpun>
 802a85e:	2800      	cmp	r0, #0
 802a860:	d0e2      	beq.n	802a828 <pow+0x60>
 802a862:	f004 f815 	bl	802e890 <__errno>
 802a866:	2321      	movs	r3, #33	; 0x21
 802a868:	6003      	str	r3, [r0, #0]
 802a86a:	ecbd 8b02 	vpop	{d8}
 802a86e:	ec47 6b10 	vmov	d0, r6, r7
 802a872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a874:	2200      	movs	r2, #0
 802a876:	2300      	movs	r3, #0
 802a878:	4630      	mov	r0, r6
 802a87a:	4639      	mov	r1, r7
 802a87c:	f7d6 f924 	bl	8000ac8 <__aeabi_dcmpeq>
 802a880:	2800      	cmp	r0, #0
 802a882:	d0f2      	beq.n	802a86a <pow+0xa2>
 802a884:	eeb0 0a48 	vmov.f32	s0, s16
 802a888:	eef0 0a68 	vmov.f32	s1, s17
 802a88c:	f000 fa4e 	bl	802ad2c <finite>
 802a890:	2800      	cmp	r0, #0
 802a892:	d0ea      	beq.n	802a86a <pow+0xa2>
 802a894:	ec45 4b10 	vmov	d0, r4, r5
 802a898:	f000 fa48 	bl	802ad2c <finite>
 802a89c:	e7c3      	b.n	802a826 <pow+0x5e>
 802a89e:	4f01      	ldr	r7, [pc, #4]	; (802a8a4 <pow+0xdc>)
 802a8a0:	2600      	movs	r6, #0
 802a8a2:	e7e2      	b.n	802a86a <pow+0xa2>
 802a8a4:	3ff00000 	.word	0x3ff00000

0802a8a8 <sqrt>:
 802a8a8:	b538      	push	{r3, r4, r5, lr}
 802a8aa:	ed2d 8b02 	vpush	{d8}
 802a8ae:	ec55 4b10 	vmov	r4, r5, d0
 802a8b2:	f000 fa7b 	bl	802adac <__ieee754_sqrt>
 802a8b6:	4622      	mov	r2, r4
 802a8b8:	462b      	mov	r3, r5
 802a8ba:	4620      	mov	r0, r4
 802a8bc:	4629      	mov	r1, r5
 802a8be:	eeb0 8a40 	vmov.f32	s16, s0
 802a8c2:	eef0 8a60 	vmov.f32	s17, s1
 802a8c6:	f7d6 f931 	bl	8000b2c <__aeabi_dcmpun>
 802a8ca:	b990      	cbnz	r0, 802a8f2 <sqrt+0x4a>
 802a8cc:	2200      	movs	r2, #0
 802a8ce:	2300      	movs	r3, #0
 802a8d0:	4620      	mov	r0, r4
 802a8d2:	4629      	mov	r1, r5
 802a8d4:	f7d6 f902 	bl	8000adc <__aeabi_dcmplt>
 802a8d8:	b158      	cbz	r0, 802a8f2 <sqrt+0x4a>
 802a8da:	f003 ffd9 	bl	802e890 <__errno>
 802a8de:	2321      	movs	r3, #33	; 0x21
 802a8e0:	6003      	str	r3, [r0, #0]
 802a8e2:	2200      	movs	r2, #0
 802a8e4:	2300      	movs	r3, #0
 802a8e6:	4610      	mov	r0, r2
 802a8e8:	4619      	mov	r1, r3
 802a8ea:	f7d5 ffaf 	bl	800084c <__aeabi_ddiv>
 802a8ee:	ec41 0b18 	vmov	d8, r0, r1
 802a8f2:	eeb0 0a48 	vmov.f32	s0, s16
 802a8f6:	eef0 0a68 	vmov.f32	s1, s17
 802a8fa:	ecbd 8b02 	vpop	{d8}
 802a8fe:	bd38      	pop	{r3, r4, r5, pc}

0802a900 <cos>:
 802a900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a902:	ec53 2b10 	vmov	r2, r3, d0
 802a906:	4826      	ldr	r0, [pc, #152]	; (802a9a0 <cos+0xa0>)
 802a908:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802a90c:	4281      	cmp	r1, r0
 802a90e:	dc06      	bgt.n	802a91e <cos+0x1e>
 802a910:	ed9f 1b21 	vldr	d1, [pc, #132]	; 802a998 <cos+0x98>
 802a914:	b005      	add	sp, #20
 802a916:	f85d eb04 	ldr.w	lr, [sp], #4
 802a91a:	f000 bc99 	b.w	802b250 <__kernel_cos>
 802a91e:	4821      	ldr	r0, [pc, #132]	; (802a9a4 <cos+0xa4>)
 802a920:	4281      	cmp	r1, r0
 802a922:	dd09      	ble.n	802a938 <cos+0x38>
 802a924:	ee10 0a10 	vmov	r0, s0
 802a928:	4619      	mov	r1, r3
 802a92a:	f7d5 fcad 	bl	8000288 <__aeabi_dsub>
 802a92e:	ec41 0b10 	vmov	d0, r0, r1
 802a932:	b005      	add	sp, #20
 802a934:	f85d fb04 	ldr.w	pc, [sp], #4
 802a938:	4668      	mov	r0, sp
 802a93a:	f001 fb3d 	bl	802bfb8 <__ieee754_rem_pio2>
 802a93e:	f000 0003 	and.w	r0, r0, #3
 802a942:	2801      	cmp	r0, #1
 802a944:	d00b      	beq.n	802a95e <cos+0x5e>
 802a946:	2802      	cmp	r0, #2
 802a948:	d016      	beq.n	802a978 <cos+0x78>
 802a94a:	b9e0      	cbnz	r0, 802a986 <cos+0x86>
 802a94c:	ed9d 1b02 	vldr	d1, [sp, #8]
 802a950:	ed9d 0b00 	vldr	d0, [sp]
 802a954:	f000 fc7c 	bl	802b250 <__kernel_cos>
 802a958:	ec51 0b10 	vmov	r0, r1, d0
 802a95c:	e7e7      	b.n	802a92e <cos+0x2e>
 802a95e:	ed9d 1b02 	vldr	d1, [sp, #8]
 802a962:	ed9d 0b00 	vldr	d0, [sp]
 802a966:	f000 fd3b 	bl	802b3e0 <__kernel_sin>
 802a96a:	ec53 2b10 	vmov	r2, r3, d0
 802a96e:	ee10 0a10 	vmov	r0, s0
 802a972:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802a976:	e7da      	b.n	802a92e <cos+0x2e>
 802a978:	ed9d 1b02 	vldr	d1, [sp, #8]
 802a97c:	ed9d 0b00 	vldr	d0, [sp]
 802a980:	f000 fc66 	bl	802b250 <__kernel_cos>
 802a984:	e7f1      	b.n	802a96a <cos+0x6a>
 802a986:	ed9d 1b02 	vldr	d1, [sp, #8]
 802a98a:	ed9d 0b00 	vldr	d0, [sp]
 802a98e:	2001      	movs	r0, #1
 802a990:	f000 fd26 	bl	802b3e0 <__kernel_sin>
 802a994:	e7e0      	b.n	802a958 <cos+0x58>
 802a996:	bf00      	nop
	...
 802a9a0:	3fe921fb 	.word	0x3fe921fb
 802a9a4:	7fefffff 	.word	0x7fefffff

0802a9a8 <frexp>:
 802a9a8:	b570      	push	{r4, r5, r6, lr}
 802a9aa:	2100      	movs	r1, #0
 802a9ac:	ec55 4b10 	vmov	r4, r5, d0
 802a9b0:	6001      	str	r1, [r0, #0]
 802a9b2:	4916      	ldr	r1, [pc, #88]	; (802aa0c <frexp+0x64>)
 802a9b4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 802a9b8:	428a      	cmp	r2, r1
 802a9ba:	4606      	mov	r6, r0
 802a9bc:	462b      	mov	r3, r5
 802a9be:	dc22      	bgt.n	802aa06 <frexp+0x5e>
 802a9c0:	ee10 1a10 	vmov	r1, s0
 802a9c4:	4311      	orrs	r1, r2
 802a9c6:	d01e      	beq.n	802aa06 <frexp+0x5e>
 802a9c8:	4911      	ldr	r1, [pc, #68]	; (802aa10 <frexp+0x68>)
 802a9ca:	4029      	ands	r1, r5
 802a9cc:	b969      	cbnz	r1, 802a9ea <frexp+0x42>
 802a9ce:	4b11      	ldr	r3, [pc, #68]	; (802aa14 <frexp+0x6c>)
 802a9d0:	2200      	movs	r2, #0
 802a9d2:	ee10 0a10 	vmov	r0, s0
 802a9d6:	4629      	mov	r1, r5
 802a9d8:	f7d5 fe0e 	bl	80005f8 <__aeabi_dmul>
 802a9dc:	460b      	mov	r3, r1
 802a9de:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802a9e2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 802a9e6:	4604      	mov	r4, r0
 802a9e8:	6031      	str	r1, [r6, #0]
 802a9ea:	6831      	ldr	r1, [r6, #0]
 802a9ec:	1512      	asrs	r2, r2, #20
 802a9ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802a9f2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 802a9f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802a9fa:	4411      	add	r1, r2
 802a9fc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 802aa00:	6031      	str	r1, [r6, #0]
 802aa02:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 802aa06:	ec45 4b10 	vmov	d0, r4, r5
 802aa0a:	bd70      	pop	{r4, r5, r6, pc}
 802aa0c:	7fefffff 	.word	0x7fefffff
 802aa10:	7ff00000 	.word	0x7ff00000
 802aa14:	43500000 	.word	0x43500000

0802aa18 <sin>:
 802aa18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802aa1a:	ec53 2b10 	vmov	r2, r3, d0
 802aa1e:	4828      	ldr	r0, [pc, #160]	; (802aac0 <sin+0xa8>)
 802aa20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802aa24:	4281      	cmp	r1, r0
 802aa26:	dc07      	bgt.n	802aa38 <sin+0x20>
 802aa28:	ed9f 1b23 	vldr	d1, [pc, #140]	; 802aab8 <sin+0xa0>
 802aa2c:	2000      	movs	r0, #0
 802aa2e:	b005      	add	sp, #20
 802aa30:	f85d eb04 	ldr.w	lr, [sp], #4
 802aa34:	f000 bcd4 	b.w	802b3e0 <__kernel_sin>
 802aa38:	4822      	ldr	r0, [pc, #136]	; (802aac4 <sin+0xac>)
 802aa3a:	4281      	cmp	r1, r0
 802aa3c:	dd09      	ble.n	802aa52 <sin+0x3a>
 802aa3e:	ee10 0a10 	vmov	r0, s0
 802aa42:	4619      	mov	r1, r3
 802aa44:	f7d5 fc20 	bl	8000288 <__aeabi_dsub>
 802aa48:	ec41 0b10 	vmov	d0, r0, r1
 802aa4c:	b005      	add	sp, #20
 802aa4e:	f85d fb04 	ldr.w	pc, [sp], #4
 802aa52:	4668      	mov	r0, sp
 802aa54:	f001 fab0 	bl	802bfb8 <__ieee754_rem_pio2>
 802aa58:	f000 0003 	and.w	r0, r0, #3
 802aa5c:	2801      	cmp	r0, #1
 802aa5e:	d00c      	beq.n	802aa7a <sin+0x62>
 802aa60:	2802      	cmp	r0, #2
 802aa62:	d011      	beq.n	802aa88 <sin+0x70>
 802aa64:	b9f0      	cbnz	r0, 802aaa4 <sin+0x8c>
 802aa66:	ed9d 1b02 	vldr	d1, [sp, #8]
 802aa6a:	ed9d 0b00 	vldr	d0, [sp]
 802aa6e:	2001      	movs	r0, #1
 802aa70:	f000 fcb6 	bl	802b3e0 <__kernel_sin>
 802aa74:	ec51 0b10 	vmov	r0, r1, d0
 802aa78:	e7e6      	b.n	802aa48 <sin+0x30>
 802aa7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802aa7e:	ed9d 0b00 	vldr	d0, [sp]
 802aa82:	f000 fbe5 	bl	802b250 <__kernel_cos>
 802aa86:	e7f5      	b.n	802aa74 <sin+0x5c>
 802aa88:	ed9d 1b02 	vldr	d1, [sp, #8]
 802aa8c:	ed9d 0b00 	vldr	d0, [sp]
 802aa90:	2001      	movs	r0, #1
 802aa92:	f000 fca5 	bl	802b3e0 <__kernel_sin>
 802aa96:	ec53 2b10 	vmov	r2, r3, d0
 802aa9a:	ee10 0a10 	vmov	r0, s0
 802aa9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802aaa2:	e7d1      	b.n	802aa48 <sin+0x30>
 802aaa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 802aaa8:	ed9d 0b00 	vldr	d0, [sp]
 802aaac:	f000 fbd0 	bl	802b250 <__kernel_cos>
 802aab0:	e7f1      	b.n	802aa96 <sin+0x7e>
 802aab2:	bf00      	nop
 802aab4:	f3af 8000 	nop.w
	...
 802aac0:	3fe921fb 	.word	0x3fe921fb
 802aac4:	7fefffff 	.word	0x7fefffff

0802aac8 <expf>:
 802aac8:	b508      	push	{r3, lr}
 802aaca:	ed2d 8b02 	vpush	{d8}
 802aace:	eef0 8a40 	vmov.f32	s17, s0
 802aad2:	f001 fd27 	bl	802c524 <__ieee754_expf>
 802aad6:	eeb0 8a40 	vmov.f32	s16, s0
 802aada:	eeb0 0a68 	vmov.f32	s0, s17
 802aade:	f000 f930 	bl	802ad42 <finitef>
 802aae2:	b160      	cbz	r0, 802aafe <expf+0x36>
 802aae4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 802ab24 <expf+0x5c>
 802aae8:	eef4 8ae7 	vcmpe.f32	s17, s15
 802aaec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aaf0:	dd0a      	ble.n	802ab08 <expf+0x40>
 802aaf2:	f003 fecd 	bl	802e890 <__errno>
 802aaf6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 802ab28 <expf+0x60>
 802aafa:	2322      	movs	r3, #34	; 0x22
 802aafc:	6003      	str	r3, [r0, #0]
 802aafe:	eeb0 0a48 	vmov.f32	s0, s16
 802ab02:	ecbd 8b02 	vpop	{d8}
 802ab06:	bd08      	pop	{r3, pc}
 802ab08:	eddf 7a08 	vldr	s15, [pc, #32]	; 802ab2c <expf+0x64>
 802ab0c:	eef4 8ae7 	vcmpe.f32	s17, s15
 802ab10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ab14:	d5f3      	bpl.n	802aafe <expf+0x36>
 802ab16:	f003 febb 	bl	802e890 <__errno>
 802ab1a:	2322      	movs	r3, #34	; 0x22
 802ab1c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 802ab30 <expf+0x68>
 802ab20:	6003      	str	r3, [r0, #0]
 802ab22:	e7ec      	b.n	802aafe <expf+0x36>
 802ab24:	42b17217 	.word	0x42b17217
 802ab28:	7f800000 	.word	0x7f800000
 802ab2c:	c2cff1b5 	.word	0xc2cff1b5
 802ab30:	00000000 	.word	0x00000000

0802ab34 <log10f>:
 802ab34:	b508      	push	{r3, lr}
 802ab36:	ed2d 8b02 	vpush	{d8}
 802ab3a:	eeb0 8a40 	vmov.f32	s16, s0
 802ab3e:	f001 feb1 	bl	802c8a4 <__ieee754_log10f>
 802ab42:	eeb4 8a48 	vcmp.f32	s16, s16
 802ab46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ab4a:	d60f      	bvs.n	802ab6c <log10f+0x38>
 802ab4c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802ab50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ab54:	d80a      	bhi.n	802ab6c <log10f+0x38>
 802ab56:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802ab5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ab5e:	d108      	bne.n	802ab72 <log10f+0x3e>
 802ab60:	f003 fe96 	bl	802e890 <__errno>
 802ab64:	2322      	movs	r3, #34	; 0x22
 802ab66:	ed9f 0a08 	vldr	s0, [pc, #32]	; 802ab88 <log10f+0x54>
 802ab6a:	6003      	str	r3, [r0, #0]
 802ab6c:	ecbd 8b02 	vpop	{d8}
 802ab70:	bd08      	pop	{r3, pc}
 802ab72:	f003 fe8d 	bl	802e890 <__errno>
 802ab76:	ecbd 8b02 	vpop	{d8}
 802ab7a:	2321      	movs	r3, #33	; 0x21
 802ab7c:	6003      	str	r3, [r0, #0]
 802ab7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802ab82:	4802      	ldr	r0, [pc, #8]	; (802ab8c <log10f+0x58>)
 802ab84:	f000 b8ea 	b.w	802ad5c <nanf>
 802ab88:	ff800000 	.word	0xff800000
 802ab8c:	080353f3 	.word	0x080353f3

0802ab90 <sqrtf>:
 802ab90:	b508      	push	{r3, lr}
 802ab92:	ed2d 8b02 	vpush	{d8}
 802ab96:	eeb0 8a40 	vmov.f32	s16, s0
 802ab9a:	f000 f9e1 	bl	802af60 <__ieee754_sqrtf>
 802ab9e:	eeb4 8a48 	vcmp.f32	s16, s16
 802aba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aba6:	d60c      	bvs.n	802abc2 <sqrtf+0x32>
 802aba8:	eddf 8a07 	vldr	s17, [pc, #28]	; 802abc8 <sqrtf+0x38>
 802abac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802abb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802abb4:	d505      	bpl.n	802abc2 <sqrtf+0x32>
 802abb6:	f003 fe6b 	bl	802e890 <__errno>
 802abba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802abbe:	2321      	movs	r3, #33	; 0x21
 802abc0:	6003      	str	r3, [r0, #0]
 802abc2:	ecbd 8b02 	vpop	{d8}
 802abc6:	bd08      	pop	{r3, pc}
 802abc8:	00000000 	.word	0x00000000

0802abcc <cosf>:
 802abcc:	ee10 3a10 	vmov	r3, s0
 802abd0:	b507      	push	{r0, r1, r2, lr}
 802abd2:	4a1e      	ldr	r2, [pc, #120]	; (802ac4c <cosf+0x80>)
 802abd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802abd8:	4293      	cmp	r3, r2
 802abda:	dc06      	bgt.n	802abea <cosf+0x1e>
 802abdc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 802ac50 <cosf+0x84>
 802abe0:	b003      	add	sp, #12
 802abe2:	f85d eb04 	ldr.w	lr, [sp], #4
 802abe6:	f001 bbf7 	b.w	802c3d8 <__kernel_cosf>
 802abea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802abee:	db04      	blt.n	802abfa <cosf+0x2e>
 802abf0:	ee30 0a40 	vsub.f32	s0, s0, s0
 802abf4:	b003      	add	sp, #12
 802abf6:	f85d fb04 	ldr.w	pc, [sp], #4
 802abfa:	4668      	mov	r0, sp
 802abfc:	f001 feaa 	bl	802c954 <__ieee754_rem_pio2f>
 802ac00:	f000 0003 	and.w	r0, r0, #3
 802ac04:	2801      	cmp	r0, #1
 802ac06:	d009      	beq.n	802ac1c <cosf+0x50>
 802ac08:	2802      	cmp	r0, #2
 802ac0a:	d010      	beq.n	802ac2e <cosf+0x62>
 802ac0c:	b9b0      	cbnz	r0, 802ac3c <cosf+0x70>
 802ac0e:	eddd 0a01 	vldr	s1, [sp, #4]
 802ac12:	ed9d 0a00 	vldr	s0, [sp]
 802ac16:	f001 fbdf 	bl	802c3d8 <__kernel_cosf>
 802ac1a:	e7eb      	b.n	802abf4 <cosf+0x28>
 802ac1c:	eddd 0a01 	vldr	s1, [sp, #4]
 802ac20:	ed9d 0a00 	vldr	s0, [sp]
 802ac24:	f001 fc36 	bl	802c494 <__kernel_sinf>
 802ac28:	eeb1 0a40 	vneg.f32	s0, s0
 802ac2c:	e7e2      	b.n	802abf4 <cosf+0x28>
 802ac2e:	eddd 0a01 	vldr	s1, [sp, #4]
 802ac32:	ed9d 0a00 	vldr	s0, [sp]
 802ac36:	f001 fbcf 	bl	802c3d8 <__kernel_cosf>
 802ac3a:	e7f5      	b.n	802ac28 <cosf+0x5c>
 802ac3c:	eddd 0a01 	vldr	s1, [sp, #4]
 802ac40:	ed9d 0a00 	vldr	s0, [sp]
 802ac44:	2001      	movs	r0, #1
 802ac46:	f001 fc25 	bl	802c494 <__kernel_sinf>
 802ac4a:	e7d3      	b.n	802abf4 <cosf+0x28>
 802ac4c:	3f490fd8 	.word	0x3f490fd8
 802ac50:	00000000 	.word	0x00000000

0802ac54 <frexpf>:
 802ac54:	ee10 3a10 	vmov	r3, s0
 802ac58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802ac5c:	2100      	movs	r1, #0
 802ac5e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802ac62:	6001      	str	r1, [r0, #0]
 802ac64:	da19      	bge.n	802ac9a <frexpf+0x46>
 802ac66:	b1c2      	cbz	r2, 802ac9a <frexpf+0x46>
 802ac68:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802ac6c:	d10a      	bne.n	802ac84 <frexpf+0x30>
 802ac6e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 802ac9c <frexpf+0x48>
 802ac72:	ee60 7a27 	vmul.f32	s15, s0, s15
 802ac76:	f06f 0118 	mvn.w	r1, #24
 802ac7a:	ee17 3a90 	vmov	r3, s15
 802ac7e:	6001      	str	r1, [r0, #0]
 802ac80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802ac84:	6801      	ldr	r1, [r0, #0]
 802ac86:	15d2      	asrs	r2, r2, #23
 802ac88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802ac8c:	3a7e      	subs	r2, #126	; 0x7e
 802ac8e:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 802ac92:	4411      	add	r1, r2
 802ac94:	ee00 3a10 	vmov	s0, r3
 802ac98:	6001      	str	r1, [r0, #0]
 802ac9a:	4770      	bx	lr
 802ac9c:	4c000000 	.word	0x4c000000

0802aca0 <sinf>:
 802aca0:	ee10 3a10 	vmov	r3, s0
 802aca4:	b507      	push	{r0, r1, r2, lr}
 802aca6:	4a1f      	ldr	r2, [pc, #124]	; (802ad24 <sinf+0x84>)
 802aca8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802acac:	4293      	cmp	r3, r2
 802acae:	dc07      	bgt.n	802acc0 <sinf+0x20>
 802acb0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 802ad28 <sinf+0x88>
 802acb4:	2000      	movs	r0, #0
 802acb6:	b003      	add	sp, #12
 802acb8:	f85d eb04 	ldr.w	lr, [sp], #4
 802acbc:	f001 bbea 	b.w	802c494 <__kernel_sinf>
 802acc0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802acc4:	db04      	blt.n	802acd0 <sinf+0x30>
 802acc6:	ee30 0a40 	vsub.f32	s0, s0, s0
 802acca:	b003      	add	sp, #12
 802accc:	f85d fb04 	ldr.w	pc, [sp], #4
 802acd0:	4668      	mov	r0, sp
 802acd2:	f001 fe3f 	bl	802c954 <__ieee754_rem_pio2f>
 802acd6:	f000 0003 	and.w	r0, r0, #3
 802acda:	2801      	cmp	r0, #1
 802acdc:	d00a      	beq.n	802acf4 <sinf+0x54>
 802acde:	2802      	cmp	r0, #2
 802ace0:	d00f      	beq.n	802ad02 <sinf+0x62>
 802ace2:	b9c0      	cbnz	r0, 802ad16 <sinf+0x76>
 802ace4:	eddd 0a01 	vldr	s1, [sp, #4]
 802ace8:	ed9d 0a00 	vldr	s0, [sp]
 802acec:	2001      	movs	r0, #1
 802acee:	f001 fbd1 	bl	802c494 <__kernel_sinf>
 802acf2:	e7ea      	b.n	802acca <sinf+0x2a>
 802acf4:	eddd 0a01 	vldr	s1, [sp, #4]
 802acf8:	ed9d 0a00 	vldr	s0, [sp]
 802acfc:	f001 fb6c 	bl	802c3d8 <__kernel_cosf>
 802ad00:	e7e3      	b.n	802acca <sinf+0x2a>
 802ad02:	eddd 0a01 	vldr	s1, [sp, #4]
 802ad06:	ed9d 0a00 	vldr	s0, [sp]
 802ad0a:	2001      	movs	r0, #1
 802ad0c:	f001 fbc2 	bl	802c494 <__kernel_sinf>
 802ad10:	eeb1 0a40 	vneg.f32	s0, s0
 802ad14:	e7d9      	b.n	802acca <sinf+0x2a>
 802ad16:	eddd 0a01 	vldr	s1, [sp, #4]
 802ad1a:	ed9d 0a00 	vldr	s0, [sp]
 802ad1e:	f001 fb5b 	bl	802c3d8 <__kernel_cosf>
 802ad22:	e7f5      	b.n	802ad10 <sinf+0x70>
 802ad24:	3f490fd8 	.word	0x3f490fd8
 802ad28:	00000000 	.word	0x00000000

0802ad2c <finite>:
 802ad2c:	b082      	sub	sp, #8
 802ad2e:	ed8d 0b00 	vstr	d0, [sp]
 802ad32:	9801      	ldr	r0, [sp, #4]
 802ad34:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802ad38:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802ad3c:	0fc0      	lsrs	r0, r0, #31
 802ad3e:	b002      	add	sp, #8
 802ad40:	4770      	bx	lr

0802ad42 <finitef>:
 802ad42:	b082      	sub	sp, #8
 802ad44:	ed8d 0a01 	vstr	s0, [sp, #4]
 802ad48:	9801      	ldr	r0, [sp, #4]
 802ad4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802ad4e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 802ad52:	bfac      	ite	ge
 802ad54:	2000      	movge	r0, #0
 802ad56:	2001      	movlt	r0, #1
 802ad58:	b002      	add	sp, #8
 802ad5a:	4770      	bx	lr

0802ad5c <nanf>:
 802ad5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802ad64 <nanf+0x8>
 802ad60:	4770      	bx	lr
 802ad62:	bf00      	nop
 802ad64:	7fc00000 	.word	0x7fc00000

0802ad68 <with_errnof>:
 802ad68:	b513      	push	{r0, r1, r4, lr}
 802ad6a:	4604      	mov	r4, r0
 802ad6c:	ed8d 0a01 	vstr	s0, [sp, #4]
 802ad70:	f003 fd8e 	bl	802e890 <__errno>
 802ad74:	ed9d 0a01 	vldr	s0, [sp, #4]
 802ad78:	6004      	str	r4, [r0, #0]
 802ad7a:	b002      	add	sp, #8
 802ad7c:	bd10      	pop	{r4, pc}

0802ad7e <xflowf>:
 802ad7e:	b130      	cbz	r0, 802ad8e <xflowf+0x10>
 802ad80:	eef1 7a40 	vneg.f32	s15, s0
 802ad84:	ee27 0a80 	vmul.f32	s0, s15, s0
 802ad88:	2022      	movs	r0, #34	; 0x22
 802ad8a:	f7ff bfed 	b.w	802ad68 <with_errnof>
 802ad8e:	eef0 7a40 	vmov.f32	s15, s0
 802ad92:	e7f7      	b.n	802ad84 <xflowf+0x6>

0802ad94 <__math_uflowf>:
 802ad94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802ad9c <__math_uflowf+0x8>
 802ad98:	f7ff bff1 	b.w	802ad7e <xflowf>
 802ad9c:	10000000 	.word	0x10000000

0802ada0 <__math_oflowf>:
 802ada0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802ada8 <__math_oflowf+0x8>
 802ada4:	f7ff bfeb 	b.w	802ad7e <xflowf>
 802ada8:	70000000 	.word	0x70000000

0802adac <__ieee754_sqrt>:
 802adac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802adb0:	ec55 4b10 	vmov	r4, r5, d0
 802adb4:	4e67      	ldr	r6, [pc, #412]	; (802af54 <__ieee754_sqrt+0x1a8>)
 802adb6:	43ae      	bics	r6, r5
 802adb8:	ee10 0a10 	vmov	r0, s0
 802adbc:	ee10 2a10 	vmov	r2, s0
 802adc0:	4629      	mov	r1, r5
 802adc2:	462b      	mov	r3, r5
 802adc4:	d10d      	bne.n	802ade2 <__ieee754_sqrt+0x36>
 802adc6:	f7d5 fc17 	bl	80005f8 <__aeabi_dmul>
 802adca:	4602      	mov	r2, r0
 802adcc:	460b      	mov	r3, r1
 802adce:	4620      	mov	r0, r4
 802add0:	4629      	mov	r1, r5
 802add2:	f7d5 fa5b 	bl	800028c <__adddf3>
 802add6:	4604      	mov	r4, r0
 802add8:	460d      	mov	r5, r1
 802adda:	ec45 4b10 	vmov	d0, r4, r5
 802adde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ade2:	2d00      	cmp	r5, #0
 802ade4:	dc0b      	bgt.n	802adfe <__ieee754_sqrt+0x52>
 802ade6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802adea:	4326      	orrs	r6, r4
 802adec:	d0f5      	beq.n	802adda <__ieee754_sqrt+0x2e>
 802adee:	b135      	cbz	r5, 802adfe <__ieee754_sqrt+0x52>
 802adf0:	f7d5 fa4a 	bl	8000288 <__aeabi_dsub>
 802adf4:	4602      	mov	r2, r0
 802adf6:	460b      	mov	r3, r1
 802adf8:	f7d5 fd28 	bl	800084c <__aeabi_ddiv>
 802adfc:	e7eb      	b.n	802add6 <__ieee754_sqrt+0x2a>
 802adfe:	1509      	asrs	r1, r1, #20
 802ae00:	f000 808d 	beq.w	802af1e <__ieee754_sqrt+0x172>
 802ae04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802ae08:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 802ae0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802ae10:	07c9      	lsls	r1, r1, #31
 802ae12:	bf5c      	itt	pl
 802ae14:	005b      	lslpl	r3, r3, #1
 802ae16:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 802ae1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802ae1e:	bf58      	it	pl
 802ae20:	0052      	lslpl	r2, r2, #1
 802ae22:	2500      	movs	r5, #0
 802ae24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 802ae28:	1076      	asrs	r6, r6, #1
 802ae2a:	0052      	lsls	r2, r2, #1
 802ae2c:	f04f 0e16 	mov.w	lr, #22
 802ae30:	46ac      	mov	ip, r5
 802ae32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802ae36:	eb0c 0001 	add.w	r0, ip, r1
 802ae3a:	4298      	cmp	r0, r3
 802ae3c:	bfde      	ittt	le
 802ae3e:	1a1b      	suble	r3, r3, r0
 802ae40:	eb00 0c01 	addle.w	ip, r0, r1
 802ae44:	186d      	addle	r5, r5, r1
 802ae46:	005b      	lsls	r3, r3, #1
 802ae48:	f1be 0e01 	subs.w	lr, lr, #1
 802ae4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 802ae50:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802ae54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802ae58:	d1ed      	bne.n	802ae36 <__ieee754_sqrt+0x8a>
 802ae5a:	4674      	mov	r4, lr
 802ae5c:	2720      	movs	r7, #32
 802ae5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802ae62:	4563      	cmp	r3, ip
 802ae64:	eb01 000e 	add.w	r0, r1, lr
 802ae68:	dc02      	bgt.n	802ae70 <__ieee754_sqrt+0xc4>
 802ae6a:	d113      	bne.n	802ae94 <__ieee754_sqrt+0xe8>
 802ae6c:	4290      	cmp	r0, r2
 802ae6e:	d811      	bhi.n	802ae94 <__ieee754_sqrt+0xe8>
 802ae70:	2800      	cmp	r0, #0
 802ae72:	eb00 0e01 	add.w	lr, r0, r1
 802ae76:	da57      	bge.n	802af28 <__ieee754_sqrt+0x17c>
 802ae78:	f1be 0f00 	cmp.w	lr, #0
 802ae7c:	db54      	blt.n	802af28 <__ieee754_sqrt+0x17c>
 802ae7e:	f10c 0801 	add.w	r8, ip, #1
 802ae82:	eba3 030c 	sub.w	r3, r3, ip
 802ae86:	4290      	cmp	r0, r2
 802ae88:	bf88      	it	hi
 802ae8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 802ae8e:	1a12      	subs	r2, r2, r0
 802ae90:	440c      	add	r4, r1
 802ae92:	46c4      	mov	ip, r8
 802ae94:	005b      	lsls	r3, r3, #1
 802ae96:	3f01      	subs	r7, #1
 802ae98:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 802ae9c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802aea0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802aea4:	d1dd      	bne.n	802ae62 <__ieee754_sqrt+0xb6>
 802aea6:	4313      	orrs	r3, r2
 802aea8:	d01b      	beq.n	802aee2 <__ieee754_sqrt+0x136>
 802aeaa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 802af58 <__ieee754_sqrt+0x1ac>
 802aeae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 802af5c <__ieee754_sqrt+0x1b0>
 802aeb2:	e9da 0100 	ldrd	r0, r1, [sl]
 802aeb6:	e9db 2300 	ldrd	r2, r3, [fp]
 802aeba:	f7d5 f9e5 	bl	8000288 <__aeabi_dsub>
 802aebe:	e9da 8900 	ldrd	r8, r9, [sl]
 802aec2:	4602      	mov	r2, r0
 802aec4:	460b      	mov	r3, r1
 802aec6:	4640      	mov	r0, r8
 802aec8:	4649      	mov	r1, r9
 802aeca:	f7d5 fe11 	bl	8000af0 <__aeabi_dcmple>
 802aece:	b140      	cbz	r0, 802aee2 <__ieee754_sqrt+0x136>
 802aed0:	f1b4 3fff 	cmp.w	r4, #4294967295
 802aed4:	e9da 0100 	ldrd	r0, r1, [sl]
 802aed8:	e9db 2300 	ldrd	r2, r3, [fp]
 802aedc:	d126      	bne.n	802af2c <__ieee754_sqrt+0x180>
 802aede:	3501      	adds	r5, #1
 802aee0:	463c      	mov	r4, r7
 802aee2:	106a      	asrs	r2, r5, #1
 802aee4:	0863      	lsrs	r3, r4, #1
 802aee6:	07e9      	lsls	r1, r5, #31
 802aee8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 802aeec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 802aef0:	bf48      	it	mi
 802aef2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 802aef6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 802aefa:	461c      	mov	r4, r3
 802aefc:	e76d      	b.n	802adda <__ieee754_sqrt+0x2e>
 802aefe:	0ad3      	lsrs	r3, r2, #11
 802af00:	3815      	subs	r0, #21
 802af02:	0552      	lsls	r2, r2, #21
 802af04:	2b00      	cmp	r3, #0
 802af06:	d0fa      	beq.n	802aefe <__ieee754_sqrt+0x152>
 802af08:	02dc      	lsls	r4, r3, #11
 802af0a:	d50a      	bpl.n	802af22 <__ieee754_sqrt+0x176>
 802af0c:	f1c1 0420 	rsb	r4, r1, #32
 802af10:	fa22 f404 	lsr.w	r4, r2, r4
 802af14:	1e4d      	subs	r5, r1, #1
 802af16:	408a      	lsls	r2, r1
 802af18:	4323      	orrs	r3, r4
 802af1a:	1b41      	subs	r1, r0, r5
 802af1c:	e772      	b.n	802ae04 <__ieee754_sqrt+0x58>
 802af1e:	4608      	mov	r0, r1
 802af20:	e7f0      	b.n	802af04 <__ieee754_sqrt+0x158>
 802af22:	005b      	lsls	r3, r3, #1
 802af24:	3101      	adds	r1, #1
 802af26:	e7ef      	b.n	802af08 <__ieee754_sqrt+0x15c>
 802af28:	46e0      	mov	r8, ip
 802af2a:	e7aa      	b.n	802ae82 <__ieee754_sqrt+0xd6>
 802af2c:	f7d5 f9ae 	bl	800028c <__adddf3>
 802af30:	e9da 8900 	ldrd	r8, r9, [sl]
 802af34:	4602      	mov	r2, r0
 802af36:	460b      	mov	r3, r1
 802af38:	4640      	mov	r0, r8
 802af3a:	4649      	mov	r1, r9
 802af3c:	f7d5 fdce 	bl	8000adc <__aeabi_dcmplt>
 802af40:	b120      	cbz	r0, 802af4c <__ieee754_sqrt+0x1a0>
 802af42:	1ca0      	adds	r0, r4, #2
 802af44:	bf08      	it	eq
 802af46:	3501      	addeq	r5, #1
 802af48:	3402      	adds	r4, #2
 802af4a:	e7ca      	b.n	802aee2 <__ieee754_sqrt+0x136>
 802af4c:	3401      	adds	r4, #1
 802af4e:	f024 0401 	bic.w	r4, r4, #1
 802af52:	e7c6      	b.n	802aee2 <__ieee754_sqrt+0x136>
 802af54:	7ff00000 	.word	0x7ff00000
 802af58:	20000468 	.word	0x20000468
 802af5c:	20000470 	.word	0x20000470

0802af60 <__ieee754_sqrtf>:
 802af60:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802af64:	4770      	bx	lr
	...

0802af68 <floor>:
 802af68:	ec51 0b10 	vmov	r0, r1, d0
 802af6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802af70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802af74:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 802af78:	2e13      	cmp	r6, #19
 802af7a:	ee10 5a10 	vmov	r5, s0
 802af7e:	ee10 8a10 	vmov	r8, s0
 802af82:	460c      	mov	r4, r1
 802af84:	dc31      	bgt.n	802afea <floor+0x82>
 802af86:	2e00      	cmp	r6, #0
 802af88:	da14      	bge.n	802afb4 <floor+0x4c>
 802af8a:	a333      	add	r3, pc, #204	; (adr r3, 802b058 <floor+0xf0>)
 802af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802af90:	f7d5 f97c 	bl	800028c <__adddf3>
 802af94:	2200      	movs	r2, #0
 802af96:	2300      	movs	r3, #0
 802af98:	f7d5 fdbe 	bl	8000b18 <__aeabi_dcmpgt>
 802af9c:	b138      	cbz	r0, 802afae <floor+0x46>
 802af9e:	2c00      	cmp	r4, #0
 802afa0:	da53      	bge.n	802b04a <floor+0xe2>
 802afa2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 802afa6:	4325      	orrs	r5, r4
 802afa8:	d052      	beq.n	802b050 <floor+0xe8>
 802afaa:	4c2d      	ldr	r4, [pc, #180]	; (802b060 <floor+0xf8>)
 802afac:	2500      	movs	r5, #0
 802afae:	4621      	mov	r1, r4
 802afb0:	4628      	mov	r0, r5
 802afb2:	e024      	b.n	802affe <floor+0x96>
 802afb4:	4f2b      	ldr	r7, [pc, #172]	; (802b064 <floor+0xfc>)
 802afb6:	4137      	asrs	r7, r6
 802afb8:	ea01 0307 	and.w	r3, r1, r7
 802afbc:	4303      	orrs	r3, r0
 802afbe:	d01e      	beq.n	802affe <floor+0x96>
 802afc0:	a325      	add	r3, pc, #148	; (adr r3, 802b058 <floor+0xf0>)
 802afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802afc6:	f7d5 f961 	bl	800028c <__adddf3>
 802afca:	2200      	movs	r2, #0
 802afcc:	2300      	movs	r3, #0
 802afce:	f7d5 fda3 	bl	8000b18 <__aeabi_dcmpgt>
 802afd2:	2800      	cmp	r0, #0
 802afd4:	d0eb      	beq.n	802afae <floor+0x46>
 802afd6:	2c00      	cmp	r4, #0
 802afd8:	bfbe      	ittt	lt
 802afda:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802afde:	4133      	asrlt	r3, r6
 802afe0:	18e4      	addlt	r4, r4, r3
 802afe2:	ea24 0407 	bic.w	r4, r4, r7
 802afe6:	2500      	movs	r5, #0
 802afe8:	e7e1      	b.n	802afae <floor+0x46>
 802afea:	2e33      	cmp	r6, #51	; 0x33
 802afec:	dd0b      	ble.n	802b006 <floor+0x9e>
 802afee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802aff2:	d104      	bne.n	802affe <floor+0x96>
 802aff4:	ee10 2a10 	vmov	r2, s0
 802aff8:	460b      	mov	r3, r1
 802affa:	f7d5 f947 	bl	800028c <__adddf3>
 802affe:	ec41 0b10 	vmov	d0, r0, r1
 802b002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b006:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 802b00a:	f04f 37ff 	mov.w	r7, #4294967295
 802b00e:	40df      	lsrs	r7, r3
 802b010:	4238      	tst	r0, r7
 802b012:	d0f4      	beq.n	802affe <floor+0x96>
 802b014:	a310      	add	r3, pc, #64	; (adr r3, 802b058 <floor+0xf0>)
 802b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b01a:	f7d5 f937 	bl	800028c <__adddf3>
 802b01e:	2200      	movs	r2, #0
 802b020:	2300      	movs	r3, #0
 802b022:	f7d5 fd79 	bl	8000b18 <__aeabi_dcmpgt>
 802b026:	2800      	cmp	r0, #0
 802b028:	d0c1      	beq.n	802afae <floor+0x46>
 802b02a:	2c00      	cmp	r4, #0
 802b02c:	da0a      	bge.n	802b044 <floor+0xdc>
 802b02e:	2e14      	cmp	r6, #20
 802b030:	d101      	bne.n	802b036 <floor+0xce>
 802b032:	3401      	adds	r4, #1
 802b034:	e006      	b.n	802b044 <floor+0xdc>
 802b036:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802b03a:	2301      	movs	r3, #1
 802b03c:	40b3      	lsls	r3, r6
 802b03e:	441d      	add	r5, r3
 802b040:	45a8      	cmp	r8, r5
 802b042:	d8f6      	bhi.n	802b032 <floor+0xca>
 802b044:	ea25 0507 	bic.w	r5, r5, r7
 802b048:	e7b1      	b.n	802afae <floor+0x46>
 802b04a:	2500      	movs	r5, #0
 802b04c:	462c      	mov	r4, r5
 802b04e:	e7ae      	b.n	802afae <floor+0x46>
 802b050:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802b054:	e7ab      	b.n	802afae <floor+0x46>
 802b056:	bf00      	nop
 802b058:	8800759c 	.word	0x8800759c
 802b05c:	7e37e43c 	.word	0x7e37e43c
 802b060:	bff00000 	.word	0xbff00000
 802b064:	000fffff 	.word	0x000fffff

0802b068 <round>:
 802b068:	ec53 2b10 	vmov	r2, r3, d0
 802b06c:	b570      	push	{r4, r5, r6, lr}
 802b06e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 802b072:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 802b076:	2813      	cmp	r0, #19
 802b078:	ee10 5a10 	vmov	r5, s0
 802b07c:	4619      	mov	r1, r3
 802b07e:	dc18      	bgt.n	802b0b2 <round+0x4a>
 802b080:	2800      	cmp	r0, #0
 802b082:	da09      	bge.n	802b098 <round+0x30>
 802b084:	3001      	adds	r0, #1
 802b086:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 802b08a:	d103      	bne.n	802b094 <round+0x2c>
 802b08c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 802b090:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 802b094:	2300      	movs	r3, #0
 802b096:	e02a      	b.n	802b0ee <round+0x86>
 802b098:	4c16      	ldr	r4, [pc, #88]	; (802b0f4 <round+0x8c>)
 802b09a:	4104      	asrs	r4, r0
 802b09c:	ea03 0604 	and.w	r6, r3, r4
 802b0a0:	4316      	orrs	r6, r2
 802b0a2:	d011      	beq.n	802b0c8 <round+0x60>
 802b0a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802b0a8:	4103      	asrs	r3, r0
 802b0aa:	440b      	add	r3, r1
 802b0ac:	ea23 0104 	bic.w	r1, r3, r4
 802b0b0:	e7f0      	b.n	802b094 <round+0x2c>
 802b0b2:	2833      	cmp	r0, #51	; 0x33
 802b0b4:	dd0b      	ble.n	802b0ce <round+0x66>
 802b0b6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 802b0ba:	d105      	bne.n	802b0c8 <round+0x60>
 802b0bc:	ee10 0a10 	vmov	r0, s0
 802b0c0:	f7d5 f8e4 	bl	800028c <__adddf3>
 802b0c4:	4602      	mov	r2, r0
 802b0c6:	460b      	mov	r3, r1
 802b0c8:	ec43 2b10 	vmov	d0, r2, r3
 802b0cc:	bd70      	pop	{r4, r5, r6, pc}
 802b0ce:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 802b0d2:	f04f 34ff 	mov.w	r4, #4294967295
 802b0d6:	40f4      	lsrs	r4, r6
 802b0d8:	4214      	tst	r4, r2
 802b0da:	d0f5      	beq.n	802b0c8 <round+0x60>
 802b0dc:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 802b0e0:	2301      	movs	r3, #1
 802b0e2:	4083      	lsls	r3, r0
 802b0e4:	195b      	adds	r3, r3, r5
 802b0e6:	bf28      	it	cs
 802b0e8:	3101      	addcs	r1, #1
 802b0ea:	ea23 0304 	bic.w	r3, r3, r4
 802b0ee:	461a      	mov	r2, r3
 802b0f0:	460b      	mov	r3, r1
 802b0f2:	e7e9      	b.n	802b0c8 <round+0x60>
 802b0f4:	000fffff 	.word	0x000fffff

0802b0f8 <ceilf>:
 802b0f8:	ee10 3a10 	vmov	r3, s0
 802b0fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802b100:	3a7f      	subs	r2, #127	; 0x7f
 802b102:	2a16      	cmp	r2, #22
 802b104:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802b108:	dc2a      	bgt.n	802b160 <ceilf+0x68>
 802b10a:	2a00      	cmp	r2, #0
 802b10c:	da11      	bge.n	802b132 <ceilf+0x3a>
 802b10e:	eddf 7a19 	vldr	s15, [pc, #100]	; 802b174 <ceilf+0x7c>
 802b112:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b116:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b11e:	dd05      	ble.n	802b12c <ceilf+0x34>
 802b120:	2b00      	cmp	r3, #0
 802b122:	db23      	blt.n	802b16c <ceilf+0x74>
 802b124:	2900      	cmp	r1, #0
 802b126:	bf18      	it	ne
 802b128:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802b12c:	ee00 3a10 	vmov	s0, r3
 802b130:	4770      	bx	lr
 802b132:	4911      	ldr	r1, [pc, #68]	; (802b178 <ceilf+0x80>)
 802b134:	4111      	asrs	r1, r2
 802b136:	420b      	tst	r3, r1
 802b138:	d0fa      	beq.n	802b130 <ceilf+0x38>
 802b13a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802b174 <ceilf+0x7c>
 802b13e:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b142:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b14a:	ddef      	ble.n	802b12c <ceilf+0x34>
 802b14c:	2b00      	cmp	r3, #0
 802b14e:	bfc2      	ittt	gt
 802b150:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802b154:	fa40 f202 	asrgt.w	r2, r0, r2
 802b158:	189b      	addgt	r3, r3, r2
 802b15a:	ea23 0301 	bic.w	r3, r3, r1
 802b15e:	e7e5      	b.n	802b12c <ceilf+0x34>
 802b160:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802b164:	d3e4      	bcc.n	802b130 <ceilf+0x38>
 802b166:	ee30 0a00 	vadd.f32	s0, s0, s0
 802b16a:	4770      	bx	lr
 802b16c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802b170:	e7dc      	b.n	802b12c <ceilf+0x34>
 802b172:	bf00      	nop
 802b174:	7149f2ca 	.word	0x7149f2ca
 802b178:	007fffff 	.word	0x007fffff

0802b17c <floorf>:
 802b17c:	ee10 3a10 	vmov	r3, s0
 802b180:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802b184:	3a7f      	subs	r2, #127	; 0x7f
 802b186:	2a16      	cmp	r2, #22
 802b188:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802b18c:	dc2a      	bgt.n	802b1e4 <floorf+0x68>
 802b18e:	2a00      	cmp	r2, #0
 802b190:	da11      	bge.n	802b1b6 <floorf+0x3a>
 802b192:	eddf 7a18 	vldr	s15, [pc, #96]	; 802b1f4 <floorf+0x78>
 802b196:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b19a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b1a2:	dd05      	ble.n	802b1b0 <floorf+0x34>
 802b1a4:	2b00      	cmp	r3, #0
 802b1a6:	da23      	bge.n	802b1f0 <floorf+0x74>
 802b1a8:	4a13      	ldr	r2, [pc, #76]	; (802b1f8 <floorf+0x7c>)
 802b1aa:	2900      	cmp	r1, #0
 802b1ac:	bf18      	it	ne
 802b1ae:	4613      	movne	r3, r2
 802b1b0:	ee00 3a10 	vmov	s0, r3
 802b1b4:	4770      	bx	lr
 802b1b6:	4911      	ldr	r1, [pc, #68]	; (802b1fc <floorf+0x80>)
 802b1b8:	4111      	asrs	r1, r2
 802b1ba:	420b      	tst	r3, r1
 802b1bc:	d0fa      	beq.n	802b1b4 <floorf+0x38>
 802b1be:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802b1f4 <floorf+0x78>
 802b1c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b1c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b1ce:	ddef      	ble.n	802b1b0 <floorf+0x34>
 802b1d0:	2b00      	cmp	r3, #0
 802b1d2:	bfbe      	ittt	lt
 802b1d4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802b1d8:	fa40 f202 	asrlt.w	r2, r0, r2
 802b1dc:	189b      	addlt	r3, r3, r2
 802b1de:	ea23 0301 	bic.w	r3, r3, r1
 802b1e2:	e7e5      	b.n	802b1b0 <floorf+0x34>
 802b1e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802b1e8:	d3e4      	bcc.n	802b1b4 <floorf+0x38>
 802b1ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 802b1ee:	4770      	bx	lr
 802b1f0:	2300      	movs	r3, #0
 802b1f2:	e7dd      	b.n	802b1b0 <floorf+0x34>
 802b1f4:	7149f2ca 	.word	0x7149f2ca
 802b1f8:	bf800000 	.word	0xbf800000
 802b1fc:	007fffff 	.word	0x007fffff

0802b200 <fmaf>:
 802b200:	eea0 0a20 	vfma.f32	s0, s0, s1
 802b204:	4770      	bx	lr
	...

0802b208 <roundf>:
 802b208:	ee10 0a10 	vmov	r0, s0
 802b20c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 802b210:	3a7f      	subs	r2, #127	; 0x7f
 802b212:	2a16      	cmp	r2, #22
 802b214:	dc15      	bgt.n	802b242 <roundf+0x3a>
 802b216:	2a00      	cmp	r2, #0
 802b218:	da08      	bge.n	802b22c <roundf+0x24>
 802b21a:	3201      	adds	r2, #1
 802b21c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 802b220:	d101      	bne.n	802b226 <roundf+0x1e>
 802b222:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 802b226:	ee00 3a10 	vmov	s0, r3
 802b22a:	4770      	bx	lr
 802b22c:	4907      	ldr	r1, [pc, #28]	; (802b24c <roundf+0x44>)
 802b22e:	4111      	asrs	r1, r2
 802b230:	4208      	tst	r0, r1
 802b232:	d0fa      	beq.n	802b22a <roundf+0x22>
 802b234:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802b238:	4113      	asrs	r3, r2
 802b23a:	4403      	add	r3, r0
 802b23c:	ea23 0301 	bic.w	r3, r3, r1
 802b240:	e7f1      	b.n	802b226 <roundf+0x1e>
 802b242:	2a80      	cmp	r2, #128	; 0x80
 802b244:	d1f1      	bne.n	802b22a <roundf+0x22>
 802b246:	ee30 0a00 	vadd.f32	s0, s0, s0
 802b24a:	4770      	bx	lr
 802b24c:	007fffff 	.word	0x007fffff

0802b250 <__kernel_cos>:
 802b250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b254:	ec57 6b10 	vmov	r6, r7, d0
 802b258:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 802b25c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 802b260:	ed8d 1b00 	vstr	d1, [sp]
 802b264:	da07      	bge.n	802b276 <__kernel_cos+0x26>
 802b266:	ee10 0a10 	vmov	r0, s0
 802b26a:	4639      	mov	r1, r7
 802b26c:	f7d5 fc74 	bl	8000b58 <__aeabi_d2iz>
 802b270:	2800      	cmp	r0, #0
 802b272:	f000 8088 	beq.w	802b386 <__kernel_cos+0x136>
 802b276:	4632      	mov	r2, r6
 802b278:	463b      	mov	r3, r7
 802b27a:	4630      	mov	r0, r6
 802b27c:	4639      	mov	r1, r7
 802b27e:	f7d5 f9bb 	bl	80005f8 <__aeabi_dmul>
 802b282:	4b51      	ldr	r3, [pc, #324]	; (802b3c8 <__kernel_cos+0x178>)
 802b284:	2200      	movs	r2, #0
 802b286:	4604      	mov	r4, r0
 802b288:	460d      	mov	r5, r1
 802b28a:	f7d5 f9b5 	bl	80005f8 <__aeabi_dmul>
 802b28e:	a340      	add	r3, pc, #256	; (adr r3, 802b390 <__kernel_cos+0x140>)
 802b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b294:	4682      	mov	sl, r0
 802b296:	468b      	mov	fp, r1
 802b298:	4620      	mov	r0, r4
 802b29a:	4629      	mov	r1, r5
 802b29c:	f7d5 f9ac 	bl	80005f8 <__aeabi_dmul>
 802b2a0:	a33d      	add	r3, pc, #244	; (adr r3, 802b398 <__kernel_cos+0x148>)
 802b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2a6:	f7d4 fff1 	bl	800028c <__adddf3>
 802b2aa:	4622      	mov	r2, r4
 802b2ac:	462b      	mov	r3, r5
 802b2ae:	f7d5 f9a3 	bl	80005f8 <__aeabi_dmul>
 802b2b2:	a33b      	add	r3, pc, #236	; (adr r3, 802b3a0 <__kernel_cos+0x150>)
 802b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2b8:	f7d4 ffe6 	bl	8000288 <__aeabi_dsub>
 802b2bc:	4622      	mov	r2, r4
 802b2be:	462b      	mov	r3, r5
 802b2c0:	f7d5 f99a 	bl	80005f8 <__aeabi_dmul>
 802b2c4:	a338      	add	r3, pc, #224	; (adr r3, 802b3a8 <__kernel_cos+0x158>)
 802b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2ca:	f7d4 ffdf 	bl	800028c <__adddf3>
 802b2ce:	4622      	mov	r2, r4
 802b2d0:	462b      	mov	r3, r5
 802b2d2:	f7d5 f991 	bl	80005f8 <__aeabi_dmul>
 802b2d6:	a336      	add	r3, pc, #216	; (adr r3, 802b3b0 <__kernel_cos+0x160>)
 802b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2dc:	f7d4 ffd4 	bl	8000288 <__aeabi_dsub>
 802b2e0:	4622      	mov	r2, r4
 802b2e2:	462b      	mov	r3, r5
 802b2e4:	f7d5 f988 	bl	80005f8 <__aeabi_dmul>
 802b2e8:	a333      	add	r3, pc, #204	; (adr r3, 802b3b8 <__kernel_cos+0x168>)
 802b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2ee:	f7d4 ffcd 	bl	800028c <__adddf3>
 802b2f2:	4622      	mov	r2, r4
 802b2f4:	462b      	mov	r3, r5
 802b2f6:	f7d5 f97f 	bl	80005f8 <__aeabi_dmul>
 802b2fa:	4622      	mov	r2, r4
 802b2fc:	462b      	mov	r3, r5
 802b2fe:	f7d5 f97b 	bl	80005f8 <__aeabi_dmul>
 802b302:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b306:	4604      	mov	r4, r0
 802b308:	460d      	mov	r5, r1
 802b30a:	4630      	mov	r0, r6
 802b30c:	4639      	mov	r1, r7
 802b30e:	f7d5 f973 	bl	80005f8 <__aeabi_dmul>
 802b312:	460b      	mov	r3, r1
 802b314:	4602      	mov	r2, r0
 802b316:	4629      	mov	r1, r5
 802b318:	4620      	mov	r0, r4
 802b31a:	f7d4 ffb5 	bl	8000288 <__aeabi_dsub>
 802b31e:	4b2b      	ldr	r3, [pc, #172]	; (802b3cc <__kernel_cos+0x17c>)
 802b320:	4598      	cmp	r8, r3
 802b322:	4606      	mov	r6, r0
 802b324:	460f      	mov	r7, r1
 802b326:	dc10      	bgt.n	802b34a <__kernel_cos+0xfa>
 802b328:	4602      	mov	r2, r0
 802b32a:	460b      	mov	r3, r1
 802b32c:	4650      	mov	r0, sl
 802b32e:	4659      	mov	r1, fp
 802b330:	f7d4 ffaa 	bl	8000288 <__aeabi_dsub>
 802b334:	460b      	mov	r3, r1
 802b336:	4926      	ldr	r1, [pc, #152]	; (802b3d0 <__kernel_cos+0x180>)
 802b338:	4602      	mov	r2, r0
 802b33a:	2000      	movs	r0, #0
 802b33c:	f7d4 ffa4 	bl	8000288 <__aeabi_dsub>
 802b340:	ec41 0b10 	vmov	d0, r0, r1
 802b344:	b003      	add	sp, #12
 802b346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b34a:	4b22      	ldr	r3, [pc, #136]	; (802b3d4 <__kernel_cos+0x184>)
 802b34c:	4920      	ldr	r1, [pc, #128]	; (802b3d0 <__kernel_cos+0x180>)
 802b34e:	4598      	cmp	r8, r3
 802b350:	bfcc      	ite	gt
 802b352:	4d21      	ldrgt	r5, [pc, #132]	; (802b3d8 <__kernel_cos+0x188>)
 802b354:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 802b358:	2400      	movs	r4, #0
 802b35a:	4622      	mov	r2, r4
 802b35c:	462b      	mov	r3, r5
 802b35e:	2000      	movs	r0, #0
 802b360:	f7d4 ff92 	bl	8000288 <__aeabi_dsub>
 802b364:	4622      	mov	r2, r4
 802b366:	4680      	mov	r8, r0
 802b368:	4689      	mov	r9, r1
 802b36a:	462b      	mov	r3, r5
 802b36c:	4650      	mov	r0, sl
 802b36e:	4659      	mov	r1, fp
 802b370:	f7d4 ff8a 	bl	8000288 <__aeabi_dsub>
 802b374:	4632      	mov	r2, r6
 802b376:	463b      	mov	r3, r7
 802b378:	f7d4 ff86 	bl	8000288 <__aeabi_dsub>
 802b37c:	4602      	mov	r2, r0
 802b37e:	460b      	mov	r3, r1
 802b380:	4640      	mov	r0, r8
 802b382:	4649      	mov	r1, r9
 802b384:	e7da      	b.n	802b33c <__kernel_cos+0xec>
 802b386:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 802b3c0 <__kernel_cos+0x170>
 802b38a:	e7db      	b.n	802b344 <__kernel_cos+0xf4>
 802b38c:	f3af 8000 	nop.w
 802b390:	be8838d4 	.word	0xbe8838d4
 802b394:	bda8fae9 	.word	0xbda8fae9
 802b398:	bdb4b1c4 	.word	0xbdb4b1c4
 802b39c:	3e21ee9e 	.word	0x3e21ee9e
 802b3a0:	809c52ad 	.word	0x809c52ad
 802b3a4:	3e927e4f 	.word	0x3e927e4f
 802b3a8:	19cb1590 	.word	0x19cb1590
 802b3ac:	3efa01a0 	.word	0x3efa01a0
 802b3b0:	16c15177 	.word	0x16c15177
 802b3b4:	3f56c16c 	.word	0x3f56c16c
 802b3b8:	5555554c 	.word	0x5555554c
 802b3bc:	3fa55555 	.word	0x3fa55555
 802b3c0:	00000000 	.word	0x00000000
 802b3c4:	3ff00000 	.word	0x3ff00000
 802b3c8:	3fe00000 	.word	0x3fe00000
 802b3cc:	3fd33332 	.word	0x3fd33332
 802b3d0:	3ff00000 	.word	0x3ff00000
 802b3d4:	3fe90000 	.word	0x3fe90000
 802b3d8:	3fd20000 	.word	0x3fd20000
 802b3dc:	00000000 	.word	0x00000000

0802b3e0 <__kernel_sin>:
 802b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b3e4:	ed2d 8b04 	vpush	{d8-d9}
 802b3e8:	eeb0 8a41 	vmov.f32	s16, s2
 802b3ec:	eef0 8a61 	vmov.f32	s17, s3
 802b3f0:	ec55 4b10 	vmov	r4, r5, d0
 802b3f4:	b083      	sub	sp, #12
 802b3f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802b3fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802b3fe:	9001      	str	r0, [sp, #4]
 802b400:	da06      	bge.n	802b410 <__kernel_sin+0x30>
 802b402:	ee10 0a10 	vmov	r0, s0
 802b406:	4629      	mov	r1, r5
 802b408:	f7d5 fba6 	bl	8000b58 <__aeabi_d2iz>
 802b40c:	2800      	cmp	r0, #0
 802b40e:	d051      	beq.n	802b4b4 <__kernel_sin+0xd4>
 802b410:	4622      	mov	r2, r4
 802b412:	462b      	mov	r3, r5
 802b414:	4620      	mov	r0, r4
 802b416:	4629      	mov	r1, r5
 802b418:	f7d5 f8ee 	bl	80005f8 <__aeabi_dmul>
 802b41c:	4682      	mov	sl, r0
 802b41e:	468b      	mov	fp, r1
 802b420:	4602      	mov	r2, r0
 802b422:	460b      	mov	r3, r1
 802b424:	4620      	mov	r0, r4
 802b426:	4629      	mov	r1, r5
 802b428:	f7d5 f8e6 	bl	80005f8 <__aeabi_dmul>
 802b42c:	a341      	add	r3, pc, #260	; (adr r3, 802b534 <__kernel_sin+0x154>)
 802b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b432:	4680      	mov	r8, r0
 802b434:	4689      	mov	r9, r1
 802b436:	4650      	mov	r0, sl
 802b438:	4659      	mov	r1, fp
 802b43a:	f7d5 f8dd 	bl	80005f8 <__aeabi_dmul>
 802b43e:	a33f      	add	r3, pc, #252	; (adr r3, 802b53c <__kernel_sin+0x15c>)
 802b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b444:	f7d4 ff20 	bl	8000288 <__aeabi_dsub>
 802b448:	4652      	mov	r2, sl
 802b44a:	465b      	mov	r3, fp
 802b44c:	f7d5 f8d4 	bl	80005f8 <__aeabi_dmul>
 802b450:	a33c      	add	r3, pc, #240	; (adr r3, 802b544 <__kernel_sin+0x164>)
 802b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b456:	f7d4 ff19 	bl	800028c <__adddf3>
 802b45a:	4652      	mov	r2, sl
 802b45c:	465b      	mov	r3, fp
 802b45e:	f7d5 f8cb 	bl	80005f8 <__aeabi_dmul>
 802b462:	a33a      	add	r3, pc, #232	; (adr r3, 802b54c <__kernel_sin+0x16c>)
 802b464:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b468:	f7d4 ff0e 	bl	8000288 <__aeabi_dsub>
 802b46c:	4652      	mov	r2, sl
 802b46e:	465b      	mov	r3, fp
 802b470:	f7d5 f8c2 	bl	80005f8 <__aeabi_dmul>
 802b474:	a337      	add	r3, pc, #220	; (adr r3, 802b554 <__kernel_sin+0x174>)
 802b476:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b47a:	f7d4 ff07 	bl	800028c <__adddf3>
 802b47e:	9b01      	ldr	r3, [sp, #4]
 802b480:	4606      	mov	r6, r0
 802b482:	460f      	mov	r7, r1
 802b484:	b9eb      	cbnz	r3, 802b4c2 <__kernel_sin+0xe2>
 802b486:	4602      	mov	r2, r0
 802b488:	460b      	mov	r3, r1
 802b48a:	4650      	mov	r0, sl
 802b48c:	4659      	mov	r1, fp
 802b48e:	f7d5 f8b3 	bl	80005f8 <__aeabi_dmul>
 802b492:	a325      	add	r3, pc, #148	; (adr r3, 802b528 <__kernel_sin+0x148>)
 802b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b498:	f7d4 fef6 	bl	8000288 <__aeabi_dsub>
 802b49c:	4642      	mov	r2, r8
 802b49e:	464b      	mov	r3, r9
 802b4a0:	f7d5 f8aa 	bl	80005f8 <__aeabi_dmul>
 802b4a4:	4602      	mov	r2, r0
 802b4a6:	460b      	mov	r3, r1
 802b4a8:	4620      	mov	r0, r4
 802b4aa:	4629      	mov	r1, r5
 802b4ac:	f7d4 feee 	bl	800028c <__adddf3>
 802b4b0:	4604      	mov	r4, r0
 802b4b2:	460d      	mov	r5, r1
 802b4b4:	ec45 4b10 	vmov	d0, r4, r5
 802b4b8:	b003      	add	sp, #12
 802b4ba:	ecbd 8b04 	vpop	{d8-d9}
 802b4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b4c2:	4b1b      	ldr	r3, [pc, #108]	; (802b530 <__kernel_sin+0x150>)
 802b4c4:	ec51 0b18 	vmov	r0, r1, d8
 802b4c8:	2200      	movs	r2, #0
 802b4ca:	f7d5 f895 	bl	80005f8 <__aeabi_dmul>
 802b4ce:	4632      	mov	r2, r6
 802b4d0:	ec41 0b19 	vmov	d9, r0, r1
 802b4d4:	463b      	mov	r3, r7
 802b4d6:	4640      	mov	r0, r8
 802b4d8:	4649      	mov	r1, r9
 802b4da:	f7d5 f88d 	bl	80005f8 <__aeabi_dmul>
 802b4de:	4602      	mov	r2, r0
 802b4e0:	460b      	mov	r3, r1
 802b4e2:	ec51 0b19 	vmov	r0, r1, d9
 802b4e6:	f7d4 fecf 	bl	8000288 <__aeabi_dsub>
 802b4ea:	4652      	mov	r2, sl
 802b4ec:	465b      	mov	r3, fp
 802b4ee:	f7d5 f883 	bl	80005f8 <__aeabi_dmul>
 802b4f2:	ec53 2b18 	vmov	r2, r3, d8
 802b4f6:	f7d4 fec7 	bl	8000288 <__aeabi_dsub>
 802b4fa:	a30b      	add	r3, pc, #44	; (adr r3, 802b528 <__kernel_sin+0x148>)
 802b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b500:	4606      	mov	r6, r0
 802b502:	460f      	mov	r7, r1
 802b504:	4640      	mov	r0, r8
 802b506:	4649      	mov	r1, r9
 802b508:	f7d5 f876 	bl	80005f8 <__aeabi_dmul>
 802b50c:	4602      	mov	r2, r0
 802b50e:	460b      	mov	r3, r1
 802b510:	4630      	mov	r0, r6
 802b512:	4639      	mov	r1, r7
 802b514:	f7d4 feba 	bl	800028c <__adddf3>
 802b518:	4602      	mov	r2, r0
 802b51a:	460b      	mov	r3, r1
 802b51c:	4620      	mov	r0, r4
 802b51e:	4629      	mov	r1, r5
 802b520:	f7d4 feb2 	bl	8000288 <__aeabi_dsub>
 802b524:	e7c4      	b.n	802b4b0 <__kernel_sin+0xd0>
 802b526:	bf00      	nop
 802b528:	55555549 	.word	0x55555549
 802b52c:	3fc55555 	.word	0x3fc55555
 802b530:	3fe00000 	.word	0x3fe00000
 802b534:	5acfd57c 	.word	0x5acfd57c
 802b538:	3de5d93a 	.word	0x3de5d93a
 802b53c:	8a2b9ceb 	.word	0x8a2b9ceb
 802b540:	3e5ae5e6 	.word	0x3e5ae5e6
 802b544:	57b1fe7d 	.word	0x57b1fe7d
 802b548:	3ec71de3 	.word	0x3ec71de3
 802b54c:	19c161d5 	.word	0x19c161d5
 802b550:	3f2a01a0 	.word	0x3f2a01a0
 802b554:	1110f8a6 	.word	0x1110f8a6
 802b558:	3f811111 	.word	0x3f811111
 802b55c:	00000000 	.word	0x00000000

0802b560 <__ieee754_pow>:
 802b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b564:	ed2d 8b06 	vpush	{d8-d10}
 802b568:	b089      	sub	sp, #36	; 0x24
 802b56a:	ed8d 1b00 	vstr	d1, [sp]
 802b56e:	e9dd 2900 	ldrd	r2, r9, [sp]
 802b572:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802b576:	ea58 0102 	orrs.w	r1, r8, r2
 802b57a:	ec57 6b10 	vmov	r6, r7, d0
 802b57e:	d115      	bne.n	802b5ac <__ieee754_pow+0x4c>
 802b580:	19b3      	adds	r3, r6, r6
 802b582:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 802b586:	4152      	adcs	r2, r2
 802b588:	4299      	cmp	r1, r3
 802b58a:	4b89      	ldr	r3, [pc, #548]	; (802b7b0 <__ieee754_pow+0x250>)
 802b58c:	4193      	sbcs	r3, r2
 802b58e:	f080 84d1 	bcs.w	802bf34 <__ieee754_pow+0x9d4>
 802b592:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b596:	4630      	mov	r0, r6
 802b598:	4639      	mov	r1, r7
 802b59a:	f7d4 fe77 	bl	800028c <__adddf3>
 802b59e:	ec41 0b10 	vmov	d0, r0, r1
 802b5a2:	b009      	add	sp, #36	; 0x24
 802b5a4:	ecbd 8b06 	vpop	{d8-d10}
 802b5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b5ac:	4b81      	ldr	r3, [pc, #516]	; (802b7b4 <__ieee754_pow+0x254>)
 802b5ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 802b5b2:	429c      	cmp	r4, r3
 802b5b4:	ee10 aa10 	vmov	sl, s0
 802b5b8:	463d      	mov	r5, r7
 802b5ba:	dc06      	bgt.n	802b5ca <__ieee754_pow+0x6a>
 802b5bc:	d101      	bne.n	802b5c2 <__ieee754_pow+0x62>
 802b5be:	2e00      	cmp	r6, #0
 802b5c0:	d1e7      	bne.n	802b592 <__ieee754_pow+0x32>
 802b5c2:	4598      	cmp	r8, r3
 802b5c4:	dc01      	bgt.n	802b5ca <__ieee754_pow+0x6a>
 802b5c6:	d10f      	bne.n	802b5e8 <__ieee754_pow+0x88>
 802b5c8:	b172      	cbz	r2, 802b5e8 <__ieee754_pow+0x88>
 802b5ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 802b5ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 802b5d2:	ea55 050a 	orrs.w	r5, r5, sl
 802b5d6:	d1dc      	bne.n	802b592 <__ieee754_pow+0x32>
 802b5d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 802b5dc:	18db      	adds	r3, r3, r3
 802b5de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 802b5e2:	4152      	adcs	r2, r2
 802b5e4:	429d      	cmp	r5, r3
 802b5e6:	e7d0      	b.n	802b58a <__ieee754_pow+0x2a>
 802b5e8:	2d00      	cmp	r5, #0
 802b5ea:	da3b      	bge.n	802b664 <__ieee754_pow+0x104>
 802b5ec:	4b72      	ldr	r3, [pc, #456]	; (802b7b8 <__ieee754_pow+0x258>)
 802b5ee:	4598      	cmp	r8, r3
 802b5f0:	dc51      	bgt.n	802b696 <__ieee754_pow+0x136>
 802b5f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802b5f6:	4598      	cmp	r8, r3
 802b5f8:	f340 84ab 	ble.w	802bf52 <__ieee754_pow+0x9f2>
 802b5fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 802b600:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802b604:	2b14      	cmp	r3, #20
 802b606:	dd0f      	ble.n	802b628 <__ieee754_pow+0xc8>
 802b608:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802b60c:	fa22 f103 	lsr.w	r1, r2, r3
 802b610:	fa01 f303 	lsl.w	r3, r1, r3
 802b614:	4293      	cmp	r3, r2
 802b616:	f040 849c 	bne.w	802bf52 <__ieee754_pow+0x9f2>
 802b61a:	f001 0101 	and.w	r1, r1, #1
 802b61e:	f1c1 0302 	rsb	r3, r1, #2
 802b622:	9304      	str	r3, [sp, #16]
 802b624:	b182      	cbz	r2, 802b648 <__ieee754_pow+0xe8>
 802b626:	e05f      	b.n	802b6e8 <__ieee754_pow+0x188>
 802b628:	2a00      	cmp	r2, #0
 802b62a:	d15b      	bne.n	802b6e4 <__ieee754_pow+0x184>
 802b62c:	f1c3 0314 	rsb	r3, r3, #20
 802b630:	fa48 f103 	asr.w	r1, r8, r3
 802b634:	fa01 f303 	lsl.w	r3, r1, r3
 802b638:	4543      	cmp	r3, r8
 802b63a:	f040 8487 	bne.w	802bf4c <__ieee754_pow+0x9ec>
 802b63e:	f001 0101 	and.w	r1, r1, #1
 802b642:	f1c1 0302 	rsb	r3, r1, #2
 802b646:	9304      	str	r3, [sp, #16]
 802b648:	4b5c      	ldr	r3, [pc, #368]	; (802b7bc <__ieee754_pow+0x25c>)
 802b64a:	4598      	cmp	r8, r3
 802b64c:	d132      	bne.n	802b6b4 <__ieee754_pow+0x154>
 802b64e:	f1b9 0f00 	cmp.w	r9, #0
 802b652:	f280 8477 	bge.w	802bf44 <__ieee754_pow+0x9e4>
 802b656:	4959      	ldr	r1, [pc, #356]	; (802b7bc <__ieee754_pow+0x25c>)
 802b658:	4632      	mov	r2, r6
 802b65a:	463b      	mov	r3, r7
 802b65c:	2000      	movs	r0, #0
 802b65e:	f7d5 f8f5 	bl	800084c <__aeabi_ddiv>
 802b662:	e79c      	b.n	802b59e <__ieee754_pow+0x3e>
 802b664:	2300      	movs	r3, #0
 802b666:	9304      	str	r3, [sp, #16]
 802b668:	2a00      	cmp	r2, #0
 802b66a:	d13d      	bne.n	802b6e8 <__ieee754_pow+0x188>
 802b66c:	4b51      	ldr	r3, [pc, #324]	; (802b7b4 <__ieee754_pow+0x254>)
 802b66e:	4598      	cmp	r8, r3
 802b670:	d1ea      	bne.n	802b648 <__ieee754_pow+0xe8>
 802b672:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802b676:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802b67a:	ea53 030a 	orrs.w	r3, r3, sl
 802b67e:	f000 8459 	beq.w	802bf34 <__ieee754_pow+0x9d4>
 802b682:	4b4f      	ldr	r3, [pc, #316]	; (802b7c0 <__ieee754_pow+0x260>)
 802b684:	429c      	cmp	r4, r3
 802b686:	dd08      	ble.n	802b69a <__ieee754_pow+0x13a>
 802b688:	f1b9 0f00 	cmp.w	r9, #0
 802b68c:	f2c0 8456 	blt.w	802bf3c <__ieee754_pow+0x9dc>
 802b690:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b694:	e783      	b.n	802b59e <__ieee754_pow+0x3e>
 802b696:	2302      	movs	r3, #2
 802b698:	e7e5      	b.n	802b666 <__ieee754_pow+0x106>
 802b69a:	f1b9 0f00 	cmp.w	r9, #0
 802b69e:	f04f 0000 	mov.w	r0, #0
 802b6a2:	f04f 0100 	mov.w	r1, #0
 802b6a6:	f6bf af7a 	bge.w	802b59e <__ieee754_pow+0x3e>
 802b6aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 802b6ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802b6b2:	e774      	b.n	802b59e <__ieee754_pow+0x3e>
 802b6b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802b6b8:	d106      	bne.n	802b6c8 <__ieee754_pow+0x168>
 802b6ba:	4632      	mov	r2, r6
 802b6bc:	463b      	mov	r3, r7
 802b6be:	4630      	mov	r0, r6
 802b6c0:	4639      	mov	r1, r7
 802b6c2:	f7d4 ff99 	bl	80005f8 <__aeabi_dmul>
 802b6c6:	e76a      	b.n	802b59e <__ieee754_pow+0x3e>
 802b6c8:	4b3e      	ldr	r3, [pc, #248]	; (802b7c4 <__ieee754_pow+0x264>)
 802b6ca:	4599      	cmp	r9, r3
 802b6cc:	d10c      	bne.n	802b6e8 <__ieee754_pow+0x188>
 802b6ce:	2d00      	cmp	r5, #0
 802b6d0:	db0a      	blt.n	802b6e8 <__ieee754_pow+0x188>
 802b6d2:	ec47 6b10 	vmov	d0, r6, r7
 802b6d6:	b009      	add	sp, #36	; 0x24
 802b6d8:	ecbd 8b06 	vpop	{d8-d10}
 802b6dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b6e0:	f7ff bb64 	b.w	802adac <__ieee754_sqrt>
 802b6e4:	2300      	movs	r3, #0
 802b6e6:	9304      	str	r3, [sp, #16]
 802b6e8:	ec47 6b10 	vmov	d0, r6, r7
 802b6ec:	f000 fe6a 	bl	802c3c4 <fabs>
 802b6f0:	ec51 0b10 	vmov	r0, r1, d0
 802b6f4:	f1ba 0f00 	cmp.w	sl, #0
 802b6f8:	d129      	bne.n	802b74e <__ieee754_pow+0x1ee>
 802b6fa:	b124      	cbz	r4, 802b706 <__ieee754_pow+0x1a6>
 802b6fc:	4b2f      	ldr	r3, [pc, #188]	; (802b7bc <__ieee754_pow+0x25c>)
 802b6fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 802b702:	429a      	cmp	r2, r3
 802b704:	d123      	bne.n	802b74e <__ieee754_pow+0x1ee>
 802b706:	f1b9 0f00 	cmp.w	r9, #0
 802b70a:	da05      	bge.n	802b718 <__ieee754_pow+0x1b8>
 802b70c:	4602      	mov	r2, r0
 802b70e:	460b      	mov	r3, r1
 802b710:	2000      	movs	r0, #0
 802b712:	492a      	ldr	r1, [pc, #168]	; (802b7bc <__ieee754_pow+0x25c>)
 802b714:	f7d5 f89a 	bl	800084c <__aeabi_ddiv>
 802b718:	2d00      	cmp	r5, #0
 802b71a:	f6bf af40 	bge.w	802b59e <__ieee754_pow+0x3e>
 802b71e:	9b04      	ldr	r3, [sp, #16]
 802b720:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802b724:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802b728:	431c      	orrs	r4, r3
 802b72a:	d108      	bne.n	802b73e <__ieee754_pow+0x1de>
 802b72c:	4602      	mov	r2, r0
 802b72e:	460b      	mov	r3, r1
 802b730:	4610      	mov	r0, r2
 802b732:	4619      	mov	r1, r3
 802b734:	f7d4 fda8 	bl	8000288 <__aeabi_dsub>
 802b738:	4602      	mov	r2, r0
 802b73a:	460b      	mov	r3, r1
 802b73c:	e78f      	b.n	802b65e <__ieee754_pow+0xfe>
 802b73e:	9b04      	ldr	r3, [sp, #16]
 802b740:	2b01      	cmp	r3, #1
 802b742:	f47f af2c 	bne.w	802b59e <__ieee754_pow+0x3e>
 802b746:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802b74a:	4619      	mov	r1, r3
 802b74c:	e727      	b.n	802b59e <__ieee754_pow+0x3e>
 802b74e:	0feb      	lsrs	r3, r5, #31
 802b750:	3b01      	subs	r3, #1
 802b752:	9306      	str	r3, [sp, #24]
 802b754:	9a06      	ldr	r2, [sp, #24]
 802b756:	9b04      	ldr	r3, [sp, #16]
 802b758:	4313      	orrs	r3, r2
 802b75a:	d102      	bne.n	802b762 <__ieee754_pow+0x202>
 802b75c:	4632      	mov	r2, r6
 802b75e:	463b      	mov	r3, r7
 802b760:	e7e6      	b.n	802b730 <__ieee754_pow+0x1d0>
 802b762:	4b19      	ldr	r3, [pc, #100]	; (802b7c8 <__ieee754_pow+0x268>)
 802b764:	4598      	cmp	r8, r3
 802b766:	f340 80fb 	ble.w	802b960 <__ieee754_pow+0x400>
 802b76a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 802b76e:	4598      	cmp	r8, r3
 802b770:	4b13      	ldr	r3, [pc, #76]	; (802b7c0 <__ieee754_pow+0x260>)
 802b772:	dd0c      	ble.n	802b78e <__ieee754_pow+0x22e>
 802b774:	429c      	cmp	r4, r3
 802b776:	dc0f      	bgt.n	802b798 <__ieee754_pow+0x238>
 802b778:	f1b9 0f00 	cmp.w	r9, #0
 802b77c:	da0f      	bge.n	802b79e <__ieee754_pow+0x23e>
 802b77e:	2000      	movs	r0, #0
 802b780:	b009      	add	sp, #36	; 0x24
 802b782:	ecbd 8b06 	vpop	{d8-d10}
 802b786:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b78a:	f001 babe 	b.w	802cd0a <__math_oflow>
 802b78e:	429c      	cmp	r4, r3
 802b790:	dbf2      	blt.n	802b778 <__ieee754_pow+0x218>
 802b792:	4b0a      	ldr	r3, [pc, #40]	; (802b7bc <__ieee754_pow+0x25c>)
 802b794:	429c      	cmp	r4, r3
 802b796:	dd19      	ble.n	802b7cc <__ieee754_pow+0x26c>
 802b798:	f1b9 0f00 	cmp.w	r9, #0
 802b79c:	dcef      	bgt.n	802b77e <__ieee754_pow+0x21e>
 802b79e:	2000      	movs	r0, #0
 802b7a0:	b009      	add	sp, #36	; 0x24
 802b7a2:	ecbd 8b06 	vpop	{d8-d10}
 802b7a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b7aa:	f001 baa5 	b.w	802ccf8 <__math_uflow>
 802b7ae:	bf00      	nop
 802b7b0:	fff00000 	.word	0xfff00000
 802b7b4:	7ff00000 	.word	0x7ff00000
 802b7b8:	433fffff 	.word	0x433fffff
 802b7bc:	3ff00000 	.word	0x3ff00000
 802b7c0:	3fefffff 	.word	0x3fefffff
 802b7c4:	3fe00000 	.word	0x3fe00000
 802b7c8:	41e00000 	.word	0x41e00000
 802b7cc:	4b60      	ldr	r3, [pc, #384]	; (802b950 <__ieee754_pow+0x3f0>)
 802b7ce:	2200      	movs	r2, #0
 802b7d0:	f7d4 fd5a 	bl	8000288 <__aeabi_dsub>
 802b7d4:	a354      	add	r3, pc, #336	; (adr r3, 802b928 <__ieee754_pow+0x3c8>)
 802b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b7da:	4604      	mov	r4, r0
 802b7dc:	460d      	mov	r5, r1
 802b7de:	f7d4 ff0b 	bl	80005f8 <__aeabi_dmul>
 802b7e2:	a353      	add	r3, pc, #332	; (adr r3, 802b930 <__ieee754_pow+0x3d0>)
 802b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b7e8:	4606      	mov	r6, r0
 802b7ea:	460f      	mov	r7, r1
 802b7ec:	4620      	mov	r0, r4
 802b7ee:	4629      	mov	r1, r5
 802b7f0:	f7d4 ff02 	bl	80005f8 <__aeabi_dmul>
 802b7f4:	4b57      	ldr	r3, [pc, #348]	; (802b954 <__ieee754_pow+0x3f4>)
 802b7f6:	4682      	mov	sl, r0
 802b7f8:	468b      	mov	fp, r1
 802b7fa:	2200      	movs	r2, #0
 802b7fc:	4620      	mov	r0, r4
 802b7fe:	4629      	mov	r1, r5
 802b800:	f7d4 fefa 	bl	80005f8 <__aeabi_dmul>
 802b804:	4602      	mov	r2, r0
 802b806:	460b      	mov	r3, r1
 802b808:	a14b      	add	r1, pc, #300	; (adr r1, 802b938 <__ieee754_pow+0x3d8>)
 802b80a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802b80e:	f7d4 fd3b 	bl	8000288 <__aeabi_dsub>
 802b812:	4622      	mov	r2, r4
 802b814:	462b      	mov	r3, r5
 802b816:	f7d4 feef 	bl	80005f8 <__aeabi_dmul>
 802b81a:	4602      	mov	r2, r0
 802b81c:	460b      	mov	r3, r1
 802b81e:	2000      	movs	r0, #0
 802b820:	494d      	ldr	r1, [pc, #308]	; (802b958 <__ieee754_pow+0x3f8>)
 802b822:	f7d4 fd31 	bl	8000288 <__aeabi_dsub>
 802b826:	4622      	mov	r2, r4
 802b828:	4680      	mov	r8, r0
 802b82a:	4689      	mov	r9, r1
 802b82c:	462b      	mov	r3, r5
 802b82e:	4620      	mov	r0, r4
 802b830:	4629      	mov	r1, r5
 802b832:	f7d4 fee1 	bl	80005f8 <__aeabi_dmul>
 802b836:	4602      	mov	r2, r0
 802b838:	460b      	mov	r3, r1
 802b83a:	4640      	mov	r0, r8
 802b83c:	4649      	mov	r1, r9
 802b83e:	f7d4 fedb 	bl	80005f8 <__aeabi_dmul>
 802b842:	a33f      	add	r3, pc, #252	; (adr r3, 802b940 <__ieee754_pow+0x3e0>)
 802b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b848:	f7d4 fed6 	bl	80005f8 <__aeabi_dmul>
 802b84c:	4602      	mov	r2, r0
 802b84e:	460b      	mov	r3, r1
 802b850:	4650      	mov	r0, sl
 802b852:	4659      	mov	r1, fp
 802b854:	f7d4 fd18 	bl	8000288 <__aeabi_dsub>
 802b858:	4602      	mov	r2, r0
 802b85a:	460b      	mov	r3, r1
 802b85c:	4680      	mov	r8, r0
 802b85e:	4689      	mov	r9, r1
 802b860:	4630      	mov	r0, r6
 802b862:	4639      	mov	r1, r7
 802b864:	f7d4 fd12 	bl	800028c <__adddf3>
 802b868:	2000      	movs	r0, #0
 802b86a:	4632      	mov	r2, r6
 802b86c:	463b      	mov	r3, r7
 802b86e:	4604      	mov	r4, r0
 802b870:	460d      	mov	r5, r1
 802b872:	f7d4 fd09 	bl	8000288 <__aeabi_dsub>
 802b876:	4602      	mov	r2, r0
 802b878:	460b      	mov	r3, r1
 802b87a:	4640      	mov	r0, r8
 802b87c:	4649      	mov	r1, r9
 802b87e:	f7d4 fd03 	bl	8000288 <__aeabi_dsub>
 802b882:	9b04      	ldr	r3, [sp, #16]
 802b884:	9a06      	ldr	r2, [sp, #24]
 802b886:	3b01      	subs	r3, #1
 802b888:	4313      	orrs	r3, r2
 802b88a:	4682      	mov	sl, r0
 802b88c:	468b      	mov	fp, r1
 802b88e:	f040 81e7 	bne.w	802bc60 <__ieee754_pow+0x700>
 802b892:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 802b948 <__ieee754_pow+0x3e8>
 802b896:	eeb0 8a47 	vmov.f32	s16, s14
 802b89a:	eef0 8a67 	vmov.f32	s17, s15
 802b89e:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b8a2:	2600      	movs	r6, #0
 802b8a4:	4632      	mov	r2, r6
 802b8a6:	463b      	mov	r3, r7
 802b8a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b8ac:	f7d4 fcec 	bl	8000288 <__aeabi_dsub>
 802b8b0:	4622      	mov	r2, r4
 802b8b2:	462b      	mov	r3, r5
 802b8b4:	f7d4 fea0 	bl	80005f8 <__aeabi_dmul>
 802b8b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b8bc:	4680      	mov	r8, r0
 802b8be:	4689      	mov	r9, r1
 802b8c0:	4650      	mov	r0, sl
 802b8c2:	4659      	mov	r1, fp
 802b8c4:	f7d4 fe98 	bl	80005f8 <__aeabi_dmul>
 802b8c8:	4602      	mov	r2, r0
 802b8ca:	460b      	mov	r3, r1
 802b8cc:	4640      	mov	r0, r8
 802b8ce:	4649      	mov	r1, r9
 802b8d0:	f7d4 fcdc 	bl	800028c <__adddf3>
 802b8d4:	4632      	mov	r2, r6
 802b8d6:	463b      	mov	r3, r7
 802b8d8:	4680      	mov	r8, r0
 802b8da:	4689      	mov	r9, r1
 802b8dc:	4620      	mov	r0, r4
 802b8de:	4629      	mov	r1, r5
 802b8e0:	f7d4 fe8a 	bl	80005f8 <__aeabi_dmul>
 802b8e4:	460b      	mov	r3, r1
 802b8e6:	4604      	mov	r4, r0
 802b8e8:	460d      	mov	r5, r1
 802b8ea:	4602      	mov	r2, r0
 802b8ec:	4649      	mov	r1, r9
 802b8ee:	4640      	mov	r0, r8
 802b8f0:	f7d4 fccc 	bl	800028c <__adddf3>
 802b8f4:	4b19      	ldr	r3, [pc, #100]	; (802b95c <__ieee754_pow+0x3fc>)
 802b8f6:	4299      	cmp	r1, r3
 802b8f8:	ec45 4b19 	vmov	d9, r4, r5
 802b8fc:	4606      	mov	r6, r0
 802b8fe:	460f      	mov	r7, r1
 802b900:	468b      	mov	fp, r1
 802b902:	f340 82f0 	ble.w	802bee6 <__ieee754_pow+0x986>
 802b906:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802b90a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802b90e:	4303      	orrs	r3, r0
 802b910:	f000 81e4 	beq.w	802bcdc <__ieee754_pow+0x77c>
 802b914:	ec51 0b18 	vmov	r0, r1, d8
 802b918:	2200      	movs	r2, #0
 802b91a:	2300      	movs	r3, #0
 802b91c:	f7d5 f8de 	bl	8000adc <__aeabi_dcmplt>
 802b920:	3800      	subs	r0, #0
 802b922:	bf18      	it	ne
 802b924:	2001      	movne	r0, #1
 802b926:	e72b      	b.n	802b780 <__ieee754_pow+0x220>
 802b928:	60000000 	.word	0x60000000
 802b92c:	3ff71547 	.word	0x3ff71547
 802b930:	f85ddf44 	.word	0xf85ddf44
 802b934:	3e54ae0b 	.word	0x3e54ae0b
 802b938:	55555555 	.word	0x55555555
 802b93c:	3fd55555 	.word	0x3fd55555
 802b940:	652b82fe 	.word	0x652b82fe
 802b944:	3ff71547 	.word	0x3ff71547
 802b948:	00000000 	.word	0x00000000
 802b94c:	bff00000 	.word	0xbff00000
 802b950:	3ff00000 	.word	0x3ff00000
 802b954:	3fd00000 	.word	0x3fd00000
 802b958:	3fe00000 	.word	0x3fe00000
 802b95c:	408fffff 	.word	0x408fffff
 802b960:	4bd5      	ldr	r3, [pc, #852]	; (802bcb8 <__ieee754_pow+0x758>)
 802b962:	402b      	ands	r3, r5
 802b964:	2200      	movs	r2, #0
 802b966:	b92b      	cbnz	r3, 802b974 <__ieee754_pow+0x414>
 802b968:	4bd4      	ldr	r3, [pc, #848]	; (802bcbc <__ieee754_pow+0x75c>)
 802b96a:	f7d4 fe45 	bl	80005f8 <__aeabi_dmul>
 802b96e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802b972:	460c      	mov	r4, r1
 802b974:	1523      	asrs	r3, r4, #20
 802b976:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802b97a:	4413      	add	r3, r2
 802b97c:	9305      	str	r3, [sp, #20]
 802b97e:	4bd0      	ldr	r3, [pc, #832]	; (802bcc0 <__ieee754_pow+0x760>)
 802b980:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802b984:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802b988:	429c      	cmp	r4, r3
 802b98a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802b98e:	dd08      	ble.n	802b9a2 <__ieee754_pow+0x442>
 802b990:	4bcc      	ldr	r3, [pc, #816]	; (802bcc4 <__ieee754_pow+0x764>)
 802b992:	429c      	cmp	r4, r3
 802b994:	f340 8162 	ble.w	802bc5c <__ieee754_pow+0x6fc>
 802b998:	9b05      	ldr	r3, [sp, #20]
 802b99a:	3301      	adds	r3, #1
 802b99c:	9305      	str	r3, [sp, #20]
 802b99e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802b9a2:	2400      	movs	r4, #0
 802b9a4:	00e3      	lsls	r3, r4, #3
 802b9a6:	9307      	str	r3, [sp, #28]
 802b9a8:	4bc7      	ldr	r3, [pc, #796]	; (802bcc8 <__ieee754_pow+0x768>)
 802b9aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802b9ae:	ed93 7b00 	vldr	d7, [r3]
 802b9b2:	4629      	mov	r1, r5
 802b9b4:	ec53 2b17 	vmov	r2, r3, d7
 802b9b8:	eeb0 9a47 	vmov.f32	s18, s14
 802b9bc:	eef0 9a67 	vmov.f32	s19, s15
 802b9c0:	4682      	mov	sl, r0
 802b9c2:	f7d4 fc61 	bl	8000288 <__aeabi_dsub>
 802b9c6:	4652      	mov	r2, sl
 802b9c8:	4606      	mov	r6, r0
 802b9ca:	460f      	mov	r7, r1
 802b9cc:	462b      	mov	r3, r5
 802b9ce:	ec51 0b19 	vmov	r0, r1, d9
 802b9d2:	f7d4 fc5b 	bl	800028c <__adddf3>
 802b9d6:	4602      	mov	r2, r0
 802b9d8:	460b      	mov	r3, r1
 802b9da:	2000      	movs	r0, #0
 802b9dc:	49bb      	ldr	r1, [pc, #748]	; (802bccc <__ieee754_pow+0x76c>)
 802b9de:	f7d4 ff35 	bl	800084c <__aeabi_ddiv>
 802b9e2:	ec41 0b1a 	vmov	d10, r0, r1
 802b9e6:	4602      	mov	r2, r0
 802b9e8:	460b      	mov	r3, r1
 802b9ea:	4630      	mov	r0, r6
 802b9ec:	4639      	mov	r1, r7
 802b9ee:	f7d4 fe03 	bl	80005f8 <__aeabi_dmul>
 802b9f2:	2300      	movs	r3, #0
 802b9f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b9f8:	9302      	str	r3, [sp, #8]
 802b9fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802b9fe:	46ab      	mov	fp, r5
 802ba00:	106d      	asrs	r5, r5, #1
 802ba02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 802ba06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 802ba0a:	ec41 0b18 	vmov	d8, r0, r1
 802ba0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 802ba12:	2200      	movs	r2, #0
 802ba14:	4640      	mov	r0, r8
 802ba16:	4649      	mov	r1, r9
 802ba18:	4614      	mov	r4, r2
 802ba1a:	461d      	mov	r5, r3
 802ba1c:	f7d4 fdec 	bl	80005f8 <__aeabi_dmul>
 802ba20:	4602      	mov	r2, r0
 802ba22:	460b      	mov	r3, r1
 802ba24:	4630      	mov	r0, r6
 802ba26:	4639      	mov	r1, r7
 802ba28:	f7d4 fc2e 	bl	8000288 <__aeabi_dsub>
 802ba2c:	ec53 2b19 	vmov	r2, r3, d9
 802ba30:	4606      	mov	r6, r0
 802ba32:	460f      	mov	r7, r1
 802ba34:	4620      	mov	r0, r4
 802ba36:	4629      	mov	r1, r5
 802ba38:	f7d4 fc26 	bl	8000288 <__aeabi_dsub>
 802ba3c:	4602      	mov	r2, r0
 802ba3e:	460b      	mov	r3, r1
 802ba40:	4650      	mov	r0, sl
 802ba42:	4659      	mov	r1, fp
 802ba44:	f7d4 fc20 	bl	8000288 <__aeabi_dsub>
 802ba48:	4642      	mov	r2, r8
 802ba4a:	464b      	mov	r3, r9
 802ba4c:	f7d4 fdd4 	bl	80005f8 <__aeabi_dmul>
 802ba50:	4602      	mov	r2, r0
 802ba52:	460b      	mov	r3, r1
 802ba54:	4630      	mov	r0, r6
 802ba56:	4639      	mov	r1, r7
 802ba58:	f7d4 fc16 	bl	8000288 <__aeabi_dsub>
 802ba5c:	ec53 2b1a 	vmov	r2, r3, d10
 802ba60:	f7d4 fdca 	bl	80005f8 <__aeabi_dmul>
 802ba64:	ec53 2b18 	vmov	r2, r3, d8
 802ba68:	ec41 0b19 	vmov	d9, r0, r1
 802ba6c:	ec51 0b18 	vmov	r0, r1, d8
 802ba70:	f7d4 fdc2 	bl	80005f8 <__aeabi_dmul>
 802ba74:	a37c      	add	r3, pc, #496	; (adr r3, 802bc68 <__ieee754_pow+0x708>)
 802ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ba7a:	4604      	mov	r4, r0
 802ba7c:	460d      	mov	r5, r1
 802ba7e:	f7d4 fdbb 	bl	80005f8 <__aeabi_dmul>
 802ba82:	a37b      	add	r3, pc, #492	; (adr r3, 802bc70 <__ieee754_pow+0x710>)
 802ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ba88:	f7d4 fc00 	bl	800028c <__adddf3>
 802ba8c:	4622      	mov	r2, r4
 802ba8e:	462b      	mov	r3, r5
 802ba90:	f7d4 fdb2 	bl	80005f8 <__aeabi_dmul>
 802ba94:	a378      	add	r3, pc, #480	; (adr r3, 802bc78 <__ieee754_pow+0x718>)
 802ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ba9a:	f7d4 fbf7 	bl	800028c <__adddf3>
 802ba9e:	4622      	mov	r2, r4
 802baa0:	462b      	mov	r3, r5
 802baa2:	f7d4 fda9 	bl	80005f8 <__aeabi_dmul>
 802baa6:	a376      	add	r3, pc, #472	; (adr r3, 802bc80 <__ieee754_pow+0x720>)
 802baa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802baac:	f7d4 fbee 	bl	800028c <__adddf3>
 802bab0:	4622      	mov	r2, r4
 802bab2:	462b      	mov	r3, r5
 802bab4:	f7d4 fda0 	bl	80005f8 <__aeabi_dmul>
 802bab8:	a373      	add	r3, pc, #460	; (adr r3, 802bc88 <__ieee754_pow+0x728>)
 802baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 802babe:	f7d4 fbe5 	bl	800028c <__adddf3>
 802bac2:	4622      	mov	r2, r4
 802bac4:	462b      	mov	r3, r5
 802bac6:	f7d4 fd97 	bl	80005f8 <__aeabi_dmul>
 802baca:	a371      	add	r3, pc, #452	; (adr r3, 802bc90 <__ieee754_pow+0x730>)
 802bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bad0:	f7d4 fbdc 	bl	800028c <__adddf3>
 802bad4:	4622      	mov	r2, r4
 802bad6:	4606      	mov	r6, r0
 802bad8:	460f      	mov	r7, r1
 802bada:	462b      	mov	r3, r5
 802badc:	4620      	mov	r0, r4
 802bade:	4629      	mov	r1, r5
 802bae0:	f7d4 fd8a 	bl	80005f8 <__aeabi_dmul>
 802bae4:	4602      	mov	r2, r0
 802bae6:	460b      	mov	r3, r1
 802bae8:	4630      	mov	r0, r6
 802baea:	4639      	mov	r1, r7
 802baec:	f7d4 fd84 	bl	80005f8 <__aeabi_dmul>
 802baf0:	4642      	mov	r2, r8
 802baf2:	4604      	mov	r4, r0
 802baf4:	460d      	mov	r5, r1
 802baf6:	464b      	mov	r3, r9
 802baf8:	ec51 0b18 	vmov	r0, r1, d8
 802bafc:	f7d4 fbc6 	bl	800028c <__adddf3>
 802bb00:	ec53 2b19 	vmov	r2, r3, d9
 802bb04:	f7d4 fd78 	bl	80005f8 <__aeabi_dmul>
 802bb08:	4622      	mov	r2, r4
 802bb0a:	462b      	mov	r3, r5
 802bb0c:	f7d4 fbbe 	bl	800028c <__adddf3>
 802bb10:	4642      	mov	r2, r8
 802bb12:	4682      	mov	sl, r0
 802bb14:	468b      	mov	fp, r1
 802bb16:	464b      	mov	r3, r9
 802bb18:	4640      	mov	r0, r8
 802bb1a:	4649      	mov	r1, r9
 802bb1c:	f7d4 fd6c 	bl	80005f8 <__aeabi_dmul>
 802bb20:	4b6b      	ldr	r3, [pc, #428]	; (802bcd0 <__ieee754_pow+0x770>)
 802bb22:	2200      	movs	r2, #0
 802bb24:	4606      	mov	r6, r0
 802bb26:	460f      	mov	r7, r1
 802bb28:	f7d4 fbb0 	bl	800028c <__adddf3>
 802bb2c:	4652      	mov	r2, sl
 802bb2e:	465b      	mov	r3, fp
 802bb30:	f7d4 fbac 	bl	800028c <__adddf3>
 802bb34:	2000      	movs	r0, #0
 802bb36:	4604      	mov	r4, r0
 802bb38:	460d      	mov	r5, r1
 802bb3a:	4602      	mov	r2, r0
 802bb3c:	460b      	mov	r3, r1
 802bb3e:	4640      	mov	r0, r8
 802bb40:	4649      	mov	r1, r9
 802bb42:	f7d4 fd59 	bl	80005f8 <__aeabi_dmul>
 802bb46:	4b62      	ldr	r3, [pc, #392]	; (802bcd0 <__ieee754_pow+0x770>)
 802bb48:	4680      	mov	r8, r0
 802bb4a:	4689      	mov	r9, r1
 802bb4c:	2200      	movs	r2, #0
 802bb4e:	4620      	mov	r0, r4
 802bb50:	4629      	mov	r1, r5
 802bb52:	f7d4 fb99 	bl	8000288 <__aeabi_dsub>
 802bb56:	4632      	mov	r2, r6
 802bb58:	463b      	mov	r3, r7
 802bb5a:	f7d4 fb95 	bl	8000288 <__aeabi_dsub>
 802bb5e:	4602      	mov	r2, r0
 802bb60:	460b      	mov	r3, r1
 802bb62:	4650      	mov	r0, sl
 802bb64:	4659      	mov	r1, fp
 802bb66:	f7d4 fb8f 	bl	8000288 <__aeabi_dsub>
 802bb6a:	ec53 2b18 	vmov	r2, r3, d8
 802bb6e:	f7d4 fd43 	bl	80005f8 <__aeabi_dmul>
 802bb72:	4622      	mov	r2, r4
 802bb74:	4606      	mov	r6, r0
 802bb76:	460f      	mov	r7, r1
 802bb78:	462b      	mov	r3, r5
 802bb7a:	ec51 0b19 	vmov	r0, r1, d9
 802bb7e:	f7d4 fd3b 	bl	80005f8 <__aeabi_dmul>
 802bb82:	4602      	mov	r2, r0
 802bb84:	460b      	mov	r3, r1
 802bb86:	4630      	mov	r0, r6
 802bb88:	4639      	mov	r1, r7
 802bb8a:	f7d4 fb7f 	bl	800028c <__adddf3>
 802bb8e:	4606      	mov	r6, r0
 802bb90:	460f      	mov	r7, r1
 802bb92:	4602      	mov	r2, r0
 802bb94:	460b      	mov	r3, r1
 802bb96:	4640      	mov	r0, r8
 802bb98:	4649      	mov	r1, r9
 802bb9a:	f7d4 fb77 	bl	800028c <__adddf3>
 802bb9e:	a33e      	add	r3, pc, #248	; (adr r3, 802bc98 <__ieee754_pow+0x738>)
 802bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bba4:	2000      	movs	r0, #0
 802bba6:	4604      	mov	r4, r0
 802bba8:	460d      	mov	r5, r1
 802bbaa:	f7d4 fd25 	bl	80005f8 <__aeabi_dmul>
 802bbae:	4642      	mov	r2, r8
 802bbb0:	ec41 0b18 	vmov	d8, r0, r1
 802bbb4:	464b      	mov	r3, r9
 802bbb6:	4620      	mov	r0, r4
 802bbb8:	4629      	mov	r1, r5
 802bbba:	f7d4 fb65 	bl	8000288 <__aeabi_dsub>
 802bbbe:	4602      	mov	r2, r0
 802bbc0:	460b      	mov	r3, r1
 802bbc2:	4630      	mov	r0, r6
 802bbc4:	4639      	mov	r1, r7
 802bbc6:	f7d4 fb5f 	bl	8000288 <__aeabi_dsub>
 802bbca:	a335      	add	r3, pc, #212	; (adr r3, 802bca0 <__ieee754_pow+0x740>)
 802bbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bbd0:	f7d4 fd12 	bl	80005f8 <__aeabi_dmul>
 802bbd4:	a334      	add	r3, pc, #208	; (adr r3, 802bca8 <__ieee754_pow+0x748>)
 802bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bbda:	4606      	mov	r6, r0
 802bbdc:	460f      	mov	r7, r1
 802bbde:	4620      	mov	r0, r4
 802bbe0:	4629      	mov	r1, r5
 802bbe2:	f7d4 fd09 	bl	80005f8 <__aeabi_dmul>
 802bbe6:	4602      	mov	r2, r0
 802bbe8:	460b      	mov	r3, r1
 802bbea:	4630      	mov	r0, r6
 802bbec:	4639      	mov	r1, r7
 802bbee:	f7d4 fb4d 	bl	800028c <__adddf3>
 802bbf2:	9a07      	ldr	r2, [sp, #28]
 802bbf4:	4b37      	ldr	r3, [pc, #220]	; (802bcd4 <__ieee754_pow+0x774>)
 802bbf6:	4413      	add	r3, r2
 802bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bbfc:	f7d4 fb46 	bl	800028c <__adddf3>
 802bc00:	4682      	mov	sl, r0
 802bc02:	9805      	ldr	r0, [sp, #20]
 802bc04:	468b      	mov	fp, r1
 802bc06:	f7d4 fc8d 	bl	8000524 <__aeabi_i2d>
 802bc0a:	9a07      	ldr	r2, [sp, #28]
 802bc0c:	4b32      	ldr	r3, [pc, #200]	; (802bcd8 <__ieee754_pow+0x778>)
 802bc0e:	4413      	add	r3, r2
 802bc10:	e9d3 8900 	ldrd	r8, r9, [r3]
 802bc14:	4606      	mov	r6, r0
 802bc16:	460f      	mov	r7, r1
 802bc18:	4652      	mov	r2, sl
 802bc1a:	465b      	mov	r3, fp
 802bc1c:	ec51 0b18 	vmov	r0, r1, d8
 802bc20:	f7d4 fb34 	bl	800028c <__adddf3>
 802bc24:	4642      	mov	r2, r8
 802bc26:	464b      	mov	r3, r9
 802bc28:	f7d4 fb30 	bl	800028c <__adddf3>
 802bc2c:	4632      	mov	r2, r6
 802bc2e:	463b      	mov	r3, r7
 802bc30:	f7d4 fb2c 	bl	800028c <__adddf3>
 802bc34:	2000      	movs	r0, #0
 802bc36:	4632      	mov	r2, r6
 802bc38:	463b      	mov	r3, r7
 802bc3a:	4604      	mov	r4, r0
 802bc3c:	460d      	mov	r5, r1
 802bc3e:	f7d4 fb23 	bl	8000288 <__aeabi_dsub>
 802bc42:	4642      	mov	r2, r8
 802bc44:	464b      	mov	r3, r9
 802bc46:	f7d4 fb1f 	bl	8000288 <__aeabi_dsub>
 802bc4a:	ec53 2b18 	vmov	r2, r3, d8
 802bc4e:	f7d4 fb1b 	bl	8000288 <__aeabi_dsub>
 802bc52:	4602      	mov	r2, r0
 802bc54:	460b      	mov	r3, r1
 802bc56:	4650      	mov	r0, sl
 802bc58:	4659      	mov	r1, fp
 802bc5a:	e610      	b.n	802b87e <__ieee754_pow+0x31e>
 802bc5c:	2401      	movs	r4, #1
 802bc5e:	e6a1      	b.n	802b9a4 <__ieee754_pow+0x444>
 802bc60:	ed9f 7b13 	vldr	d7, [pc, #76]	; 802bcb0 <__ieee754_pow+0x750>
 802bc64:	e617      	b.n	802b896 <__ieee754_pow+0x336>
 802bc66:	bf00      	nop
 802bc68:	4a454eef 	.word	0x4a454eef
 802bc6c:	3fca7e28 	.word	0x3fca7e28
 802bc70:	93c9db65 	.word	0x93c9db65
 802bc74:	3fcd864a 	.word	0x3fcd864a
 802bc78:	a91d4101 	.word	0xa91d4101
 802bc7c:	3fd17460 	.word	0x3fd17460
 802bc80:	518f264d 	.word	0x518f264d
 802bc84:	3fd55555 	.word	0x3fd55555
 802bc88:	db6fabff 	.word	0xdb6fabff
 802bc8c:	3fdb6db6 	.word	0x3fdb6db6
 802bc90:	33333303 	.word	0x33333303
 802bc94:	3fe33333 	.word	0x3fe33333
 802bc98:	e0000000 	.word	0xe0000000
 802bc9c:	3feec709 	.word	0x3feec709
 802bca0:	dc3a03fd 	.word	0xdc3a03fd
 802bca4:	3feec709 	.word	0x3feec709
 802bca8:	145b01f5 	.word	0x145b01f5
 802bcac:	be3e2fe0 	.word	0xbe3e2fe0
 802bcb0:	00000000 	.word	0x00000000
 802bcb4:	3ff00000 	.word	0x3ff00000
 802bcb8:	7ff00000 	.word	0x7ff00000
 802bcbc:	43400000 	.word	0x43400000
 802bcc0:	0003988e 	.word	0x0003988e
 802bcc4:	000bb679 	.word	0x000bb679
 802bcc8:	08034dc8 	.word	0x08034dc8
 802bccc:	3ff00000 	.word	0x3ff00000
 802bcd0:	40080000 	.word	0x40080000
 802bcd4:	08034de8 	.word	0x08034de8
 802bcd8:	08034dd8 	.word	0x08034dd8
 802bcdc:	a3b3      	add	r3, pc, #716	; (adr r3, 802bfac <__ieee754_pow+0xa4c>)
 802bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bce2:	4640      	mov	r0, r8
 802bce4:	4649      	mov	r1, r9
 802bce6:	f7d4 fad1 	bl	800028c <__adddf3>
 802bcea:	4622      	mov	r2, r4
 802bcec:	ec41 0b1a 	vmov	d10, r0, r1
 802bcf0:	462b      	mov	r3, r5
 802bcf2:	4630      	mov	r0, r6
 802bcf4:	4639      	mov	r1, r7
 802bcf6:	f7d4 fac7 	bl	8000288 <__aeabi_dsub>
 802bcfa:	4602      	mov	r2, r0
 802bcfc:	460b      	mov	r3, r1
 802bcfe:	ec51 0b1a 	vmov	r0, r1, d10
 802bd02:	f7d4 ff09 	bl	8000b18 <__aeabi_dcmpgt>
 802bd06:	2800      	cmp	r0, #0
 802bd08:	f47f ae04 	bne.w	802b914 <__ieee754_pow+0x3b4>
 802bd0c:	4aa2      	ldr	r2, [pc, #648]	; (802bf98 <__ieee754_pow+0xa38>)
 802bd0e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802bd12:	4293      	cmp	r3, r2
 802bd14:	f340 8107 	ble.w	802bf26 <__ieee754_pow+0x9c6>
 802bd18:	151b      	asrs	r3, r3, #20
 802bd1a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802bd1e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802bd22:	fa4a fa03 	asr.w	sl, sl, r3
 802bd26:	44da      	add	sl, fp
 802bd28:	f3ca 510a 	ubfx	r1, sl, #20, #11
 802bd2c:	489b      	ldr	r0, [pc, #620]	; (802bf9c <__ieee754_pow+0xa3c>)
 802bd2e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802bd32:	4108      	asrs	r0, r1
 802bd34:	ea00 030a 	and.w	r3, r0, sl
 802bd38:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 802bd3c:	f1c1 0114 	rsb	r1, r1, #20
 802bd40:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802bd44:	fa4a fa01 	asr.w	sl, sl, r1
 802bd48:	f1bb 0f00 	cmp.w	fp, #0
 802bd4c:	f04f 0200 	mov.w	r2, #0
 802bd50:	4620      	mov	r0, r4
 802bd52:	4629      	mov	r1, r5
 802bd54:	bfb8      	it	lt
 802bd56:	f1ca 0a00 	rsblt	sl, sl, #0
 802bd5a:	f7d4 fa95 	bl	8000288 <__aeabi_dsub>
 802bd5e:	ec41 0b19 	vmov	d9, r0, r1
 802bd62:	4642      	mov	r2, r8
 802bd64:	464b      	mov	r3, r9
 802bd66:	ec51 0b19 	vmov	r0, r1, d9
 802bd6a:	f7d4 fa8f 	bl	800028c <__adddf3>
 802bd6e:	a37a      	add	r3, pc, #488	; (adr r3, 802bf58 <__ieee754_pow+0x9f8>)
 802bd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bd74:	2000      	movs	r0, #0
 802bd76:	4604      	mov	r4, r0
 802bd78:	460d      	mov	r5, r1
 802bd7a:	f7d4 fc3d 	bl	80005f8 <__aeabi_dmul>
 802bd7e:	ec53 2b19 	vmov	r2, r3, d9
 802bd82:	4606      	mov	r6, r0
 802bd84:	460f      	mov	r7, r1
 802bd86:	4620      	mov	r0, r4
 802bd88:	4629      	mov	r1, r5
 802bd8a:	f7d4 fa7d 	bl	8000288 <__aeabi_dsub>
 802bd8e:	4602      	mov	r2, r0
 802bd90:	460b      	mov	r3, r1
 802bd92:	4640      	mov	r0, r8
 802bd94:	4649      	mov	r1, r9
 802bd96:	f7d4 fa77 	bl	8000288 <__aeabi_dsub>
 802bd9a:	a371      	add	r3, pc, #452	; (adr r3, 802bf60 <__ieee754_pow+0xa00>)
 802bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bda0:	f7d4 fc2a 	bl	80005f8 <__aeabi_dmul>
 802bda4:	a370      	add	r3, pc, #448	; (adr r3, 802bf68 <__ieee754_pow+0xa08>)
 802bda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bdaa:	4680      	mov	r8, r0
 802bdac:	4689      	mov	r9, r1
 802bdae:	4620      	mov	r0, r4
 802bdb0:	4629      	mov	r1, r5
 802bdb2:	f7d4 fc21 	bl	80005f8 <__aeabi_dmul>
 802bdb6:	4602      	mov	r2, r0
 802bdb8:	460b      	mov	r3, r1
 802bdba:	4640      	mov	r0, r8
 802bdbc:	4649      	mov	r1, r9
 802bdbe:	f7d4 fa65 	bl	800028c <__adddf3>
 802bdc2:	4604      	mov	r4, r0
 802bdc4:	460d      	mov	r5, r1
 802bdc6:	4602      	mov	r2, r0
 802bdc8:	460b      	mov	r3, r1
 802bdca:	4630      	mov	r0, r6
 802bdcc:	4639      	mov	r1, r7
 802bdce:	f7d4 fa5d 	bl	800028c <__adddf3>
 802bdd2:	4632      	mov	r2, r6
 802bdd4:	463b      	mov	r3, r7
 802bdd6:	4680      	mov	r8, r0
 802bdd8:	4689      	mov	r9, r1
 802bdda:	f7d4 fa55 	bl	8000288 <__aeabi_dsub>
 802bdde:	4602      	mov	r2, r0
 802bde0:	460b      	mov	r3, r1
 802bde2:	4620      	mov	r0, r4
 802bde4:	4629      	mov	r1, r5
 802bde6:	f7d4 fa4f 	bl	8000288 <__aeabi_dsub>
 802bdea:	4642      	mov	r2, r8
 802bdec:	4606      	mov	r6, r0
 802bdee:	460f      	mov	r7, r1
 802bdf0:	464b      	mov	r3, r9
 802bdf2:	4640      	mov	r0, r8
 802bdf4:	4649      	mov	r1, r9
 802bdf6:	f7d4 fbff 	bl	80005f8 <__aeabi_dmul>
 802bdfa:	a35d      	add	r3, pc, #372	; (adr r3, 802bf70 <__ieee754_pow+0xa10>)
 802bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802be00:	4604      	mov	r4, r0
 802be02:	460d      	mov	r5, r1
 802be04:	f7d4 fbf8 	bl	80005f8 <__aeabi_dmul>
 802be08:	a35b      	add	r3, pc, #364	; (adr r3, 802bf78 <__ieee754_pow+0xa18>)
 802be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802be0e:	f7d4 fa3b 	bl	8000288 <__aeabi_dsub>
 802be12:	4622      	mov	r2, r4
 802be14:	462b      	mov	r3, r5
 802be16:	f7d4 fbef 	bl	80005f8 <__aeabi_dmul>
 802be1a:	a359      	add	r3, pc, #356	; (adr r3, 802bf80 <__ieee754_pow+0xa20>)
 802be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802be20:	f7d4 fa34 	bl	800028c <__adddf3>
 802be24:	4622      	mov	r2, r4
 802be26:	462b      	mov	r3, r5
 802be28:	f7d4 fbe6 	bl	80005f8 <__aeabi_dmul>
 802be2c:	a356      	add	r3, pc, #344	; (adr r3, 802bf88 <__ieee754_pow+0xa28>)
 802be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802be32:	f7d4 fa29 	bl	8000288 <__aeabi_dsub>
 802be36:	4622      	mov	r2, r4
 802be38:	462b      	mov	r3, r5
 802be3a:	f7d4 fbdd 	bl	80005f8 <__aeabi_dmul>
 802be3e:	a354      	add	r3, pc, #336	; (adr r3, 802bf90 <__ieee754_pow+0xa30>)
 802be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 802be44:	f7d4 fa22 	bl	800028c <__adddf3>
 802be48:	4622      	mov	r2, r4
 802be4a:	462b      	mov	r3, r5
 802be4c:	f7d4 fbd4 	bl	80005f8 <__aeabi_dmul>
 802be50:	4602      	mov	r2, r0
 802be52:	460b      	mov	r3, r1
 802be54:	4640      	mov	r0, r8
 802be56:	4649      	mov	r1, r9
 802be58:	f7d4 fa16 	bl	8000288 <__aeabi_dsub>
 802be5c:	4604      	mov	r4, r0
 802be5e:	460d      	mov	r5, r1
 802be60:	4602      	mov	r2, r0
 802be62:	460b      	mov	r3, r1
 802be64:	4640      	mov	r0, r8
 802be66:	4649      	mov	r1, r9
 802be68:	f7d4 fbc6 	bl	80005f8 <__aeabi_dmul>
 802be6c:	2200      	movs	r2, #0
 802be6e:	ec41 0b19 	vmov	d9, r0, r1
 802be72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802be76:	4620      	mov	r0, r4
 802be78:	4629      	mov	r1, r5
 802be7a:	f7d4 fa05 	bl	8000288 <__aeabi_dsub>
 802be7e:	4602      	mov	r2, r0
 802be80:	460b      	mov	r3, r1
 802be82:	ec51 0b19 	vmov	r0, r1, d9
 802be86:	f7d4 fce1 	bl	800084c <__aeabi_ddiv>
 802be8a:	4632      	mov	r2, r6
 802be8c:	4604      	mov	r4, r0
 802be8e:	460d      	mov	r5, r1
 802be90:	463b      	mov	r3, r7
 802be92:	4640      	mov	r0, r8
 802be94:	4649      	mov	r1, r9
 802be96:	f7d4 fbaf 	bl	80005f8 <__aeabi_dmul>
 802be9a:	4632      	mov	r2, r6
 802be9c:	463b      	mov	r3, r7
 802be9e:	f7d4 f9f5 	bl	800028c <__adddf3>
 802bea2:	4602      	mov	r2, r0
 802bea4:	460b      	mov	r3, r1
 802bea6:	4620      	mov	r0, r4
 802bea8:	4629      	mov	r1, r5
 802beaa:	f7d4 f9ed 	bl	8000288 <__aeabi_dsub>
 802beae:	4642      	mov	r2, r8
 802beb0:	464b      	mov	r3, r9
 802beb2:	f7d4 f9e9 	bl	8000288 <__aeabi_dsub>
 802beb6:	460b      	mov	r3, r1
 802beb8:	4602      	mov	r2, r0
 802beba:	4939      	ldr	r1, [pc, #228]	; (802bfa0 <__ieee754_pow+0xa40>)
 802bebc:	2000      	movs	r0, #0
 802bebe:	f7d4 f9e3 	bl	8000288 <__aeabi_dsub>
 802bec2:	ec41 0b10 	vmov	d0, r0, r1
 802bec6:	ee10 3a90 	vmov	r3, s1
 802beca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802bece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802bed2:	da2b      	bge.n	802bf2c <__ieee754_pow+0x9cc>
 802bed4:	4650      	mov	r0, sl
 802bed6:	f000 fe73 	bl	802cbc0 <scalbn>
 802beda:	ec51 0b10 	vmov	r0, r1, d0
 802bede:	ec53 2b18 	vmov	r2, r3, d8
 802bee2:	f7ff bbee 	b.w	802b6c2 <__ieee754_pow+0x162>
 802bee6:	4b2f      	ldr	r3, [pc, #188]	; (802bfa4 <__ieee754_pow+0xa44>)
 802bee8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802beec:	429e      	cmp	r6, r3
 802beee:	f77f af0d 	ble.w	802bd0c <__ieee754_pow+0x7ac>
 802bef2:	4b2d      	ldr	r3, [pc, #180]	; (802bfa8 <__ieee754_pow+0xa48>)
 802bef4:	440b      	add	r3, r1
 802bef6:	4303      	orrs	r3, r0
 802bef8:	d009      	beq.n	802bf0e <__ieee754_pow+0x9ae>
 802befa:	ec51 0b18 	vmov	r0, r1, d8
 802befe:	2200      	movs	r2, #0
 802bf00:	2300      	movs	r3, #0
 802bf02:	f7d4 fdeb 	bl	8000adc <__aeabi_dcmplt>
 802bf06:	3800      	subs	r0, #0
 802bf08:	bf18      	it	ne
 802bf0a:	2001      	movne	r0, #1
 802bf0c:	e448      	b.n	802b7a0 <__ieee754_pow+0x240>
 802bf0e:	4622      	mov	r2, r4
 802bf10:	462b      	mov	r3, r5
 802bf12:	f7d4 f9b9 	bl	8000288 <__aeabi_dsub>
 802bf16:	4642      	mov	r2, r8
 802bf18:	464b      	mov	r3, r9
 802bf1a:	f7d4 fdf3 	bl	8000b04 <__aeabi_dcmpge>
 802bf1e:	2800      	cmp	r0, #0
 802bf20:	f43f aef4 	beq.w	802bd0c <__ieee754_pow+0x7ac>
 802bf24:	e7e9      	b.n	802befa <__ieee754_pow+0x99a>
 802bf26:	f04f 0a00 	mov.w	sl, #0
 802bf2a:	e71a      	b.n	802bd62 <__ieee754_pow+0x802>
 802bf2c:	ec51 0b10 	vmov	r0, r1, d0
 802bf30:	4619      	mov	r1, r3
 802bf32:	e7d4      	b.n	802bede <__ieee754_pow+0x97e>
 802bf34:	491a      	ldr	r1, [pc, #104]	; (802bfa0 <__ieee754_pow+0xa40>)
 802bf36:	2000      	movs	r0, #0
 802bf38:	f7ff bb31 	b.w	802b59e <__ieee754_pow+0x3e>
 802bf3c:	2000      	movs	r0, #0
 802bf3e:	2100      	movs	r1, #0
 802bf40:	f7ff bb2d 	b.w	802b59e <__ieee754_pow+0x3e>
 802bf44:	4630      	mov	r0, r6
 802bf46:	4639      	mov	r1, r7
 802bf48:	f7ff bb29 	b.w	802b59e <__ieee754_pow+0x3e>
 802bf4c:	9204      	str	r2, [sp, #16]
 802bf4e:	f7ff bb7b 	b.w	802b648 <__ieee754_pow+0xe8>
 802bf52:	2300      	movs	r3, #0
 802bf54:	f7ff bb65 	b.w	802b622 <__ieee754_pow+0xc2>
 802bf58:	00000000 	.word	0x00000000
 802bf5c:	3fe62e43 	.word	0x3fe62e43
 802bf60:	fefa39ef 	.word	0xfefa39ef
 802bf64:	3fe62e42 	.word	0x3fe62e42
 802bf68:	0ca86c39 	.word	0x0ca86c39
 802bf6c:	be205c61 	.word	0xbe205c61
 802bf70:	72bea4d0 	.word	0x72bea4d0
 802bf74:	3e663769 	.word	0x3e663769
 802bf78:	c5d26bf1 	.word	0xc5d26bf1
 802bf7c:	3ebbbd41 	.word	0x3ebbbd41
 802bf80:	af25de2c 	.word	0xaf25de2c
 802bf84:	3f11566a 	.word	0x3f11566a
 802bf88:	16bebd93 	.word	0x16bebd93
 802bf8c:	3f66c16c 	.word	0x3f66c16c
 802bf90:	5555553e 	.word	0x5555553e
 802bf94:	3fc55555 	.word	0x3fc55555
 802bf98:	3fe00000 	.word	0x3fe00000
 802bf9c:	fff00000 	.word	0xfff00000
 802bfa0:	3ff00000 	.word	0x3ff00000
 802bfa4:	4090cbff 	.word	0x4090cbff
 802bfa8:	3f6f3400 	.word	0x3f6f3400
 802bfac:	652b82fe 	.word	0x652b82fe
 802bfb0:	3c971547 	.word	0x3c971547
 802bfb4:	00000000 	.word	0x00000000

0802bfb8 <__ieee754_rem_pio2>:
 802bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bfbc:	ed2d 8b02 	vpush	{d8}
 802bfc0:	ec55 4b10 	vmov	r4, r5, d0
 802bfc4:	4bca      	ldr	r3, [pc, #808]	; (802c2f0 <__ieee754_rem_pio2+0x338>)
 802bfc6:	b08b      	sub	sp, #44	; 0x2c
 802bfc8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 802bfcc:	4598      	cmp	r8, r3
 802bfce:	4682      	mov	sl, r0
 802bfd0:	9502      	str	r5, [sp, #8]
 802bfd2:	dc08      	bgt.n	802bfe6 <__ieee754_rem_pio2+0x2e>
 802bfd4:	2200      	movs	r2, #0
 802bfd6:	2300      	movs	r3, #0
 802bfd8:	ed80 0b00 	vstr	d0, [r0]
 802bfdc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 802bfe0:	f04f 0b00 	mov.w	fp, #0
 802bfe4:	e028      	b.n	802c038 <__ieee754_rem_pio2+0x80>
 802bfe6:	4bc3      	ldr	r3, [pc, #780]	; (802c2f4 <__ieee754_rem_pio2+0x33c>)
 802bfe8:	4598      	cmp	r8, r3
 802bfea:	dc78      	bgt.n	802c0de <__ieee754_rem_pio2+0x126>
 802bfec:	9b02      	ldr	r3, [sp, #8]
 802bfee:	4ec2      	ldr	r6, [pc, #776]	; (802c2f8 <__ieee754_rem_pio2+0x340>)
 802bff0:	2b00      	cmp	r3, #0
 802bff2:	ee10 0a10 	vmov	r0, s0
 802bff6:	a3b0      	add	r3, pc, #704	; (adr r3, 802c2b8 <__ieee754_rem_pio2+0x300>)
 802bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bffc:	4629      	mov	r1, r5
 802bffe:	dd39      	ble.n	802c074 <__ieee754_rem_pio2+0xbc>
 802c000:	f7d4 f942 	bl	8000288 <__aeabi_dsub>
 802c004:	45b0      	cmp	r8, r6
 802c006:	4604      	mov	r4, r0
 802c008:	460d      	mov	r5, r1
 802c00a:	d01b      	beq.n	802c044 <__ieee754_rem_pio2+0x8c>
 802c00c:	a3ac      	add	r3, pc, #688	; (adr r3, 802c2c0 <__ieee754_rem_pio2+0x308>)
 802c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c012:	f7d4 f939 	bl	8000288 <__aeabi_dsub>
 802c016:	4602      	mov	r2, r0
 802c018:	460b      	mov	r3, r1
 802c01a:	e9ca 2300 	strd	r2, r3, [sl]
 802c01e:	4620      	mov	r0, r4
 802c020:	4629      	mov	r1, r5
 802c022:	f7d4 f931 	bl	8000288 <__aeabi_dsub>
 802c026:	a3a6      	add	r3, pc, #664	; (adr r3, 802c2c0 <__ieee754_rem_pio2+0x308>)
 802c028:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c02c:	f7d4 f92c 	bl	8000288 <__aeabi_dsub>
 802c030:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802c034:	f04f 0b01 	mov.w	fp, #1
 802c038:	4658      	mov	r0, fp
 802c03a:	b00b      	add	sp, #44	; 0x2c
 802c03c:	ecbd 8b02 	vpop	{d8}
 802c040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c044:	a3a0      	add	r3, pc, #640	; (adr r3, 802c2c8 <__ieee754_rem_pio2+0x310>)
 802c046:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c04a:	f7d4 f91d 	bl	8000288 <__aeabi_dsub>
 802c04e:	a3a0      	add	r3, pc, #640	; (adr r3, 802c2d0 <__ieee754_rem_pio2+0x318>)
 802c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c054:	4604      	mov	r4, r0
 802c056:	460d      	mov	r5, r1
 802c058:	f7d4 f916 	bl	8000288 <__aeabi_dsub>
 802c05c:	4602      	mov	r2, r0
 802c05e:	460b      	mov	r3, r1
 802c060:	e9ca 2300 	strd	r2, r3, [sl]
 802c064:	4620      	mov	r0, r4
 802c066:	4629      	mov	r1, r5
 802c068:	f7d4 f90e 	bl	8000288 <__aeabi_dsub>
 802c06c:	a398      	add	r3, pc, #608	; (adr r3, 802c2d0 <__ieee754_rem_pio2+0x318>)
 802c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c072:	e7db      	b.n	802c02c <__ieee754_rem_pio2+0x74>
 802c074:	f7d4 f90a 	bl	800028c <__adddf3>
 802c078:	45b0      	cmp	r8, r6
 802c07a:	4604      	mov	r4, r0
 802c07c:	460d      	mov	r5, r1
 802c07e:	d016      	beq.n	802c0ae <__ieee754_rem_pio2+0xf6>
 802c080:	a38f      	add	r3, pc, #572	; (adr r3, 802c2c0 <__ieee754_rem_pio2+0x308>)
 802c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c086:	f7d4 f901 	bl	800028c <__adddf3>
 802c08a:	4602      	mov	r2, r0
 802c08c:	460b      	mov	r3, r1
 802c08e:	e9ca 2300 	strd	r2, r3, [sl]
 802c092:	4620      	mov	r0, r4
 802c094:	4629      	mov	r1, r5
 802c096:	f7d4 f8f7 	bl	8000288 <__aeabi_dsub>
 802c09a:	a389      	add	r3, pc, #548	; (adr r3, 802c2c0 <__ieee754_rem_pio2+0x308>)
 802c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c0a0:	f7d4 f8f4 	bl	800028c <__adddf3>
 802c0a4:	f04f 3bff 	mov.w	fp, #4294967295
 802c0a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802c0ac:	e7c4      	b.n	802c038 <__ieee754_rem_pio2+0x80>
 802c0ae:	a386      	add	r3, pc, #536	; (adr r3, 802c2c8 <__ieee754_rem_pio2+0x310>)
 802c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c0b4:	f7d4 f8ea 	bl	800028c <__adddf3>
 802c0b8:	a385      	add	r3, pc, #532	; (adr r3, 802c2d0 <__ieee754_rem_pio2+0x318>)
 802c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c0be:	4604      	mov	r4, r0
 802c0c0:	460d      	mov	r5, r1
 802c0c2:	f7d4 f8e3 	bl	800028c <__adddf3>
 802c0c6:	4602      	mov	r2, r0
 802c0c8:	460b      	mov	r3, r1
 802c0ca:	e9ca 2300 	strd	r2, r3, [sl]
 802c0ce:	4620      	mov	r0, r4
 802c0d0:	4629      	mov	r1, r5
 802c0d2:	f7d4 f8d9 	bl	8000288 <__aeabi_dsub>
 802c0d6:	a37e      	add	r3, pc, #504	; (adr r3, 802c2d0 <__ieee754_rem_pio2+0x318>)
 802c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c0dc:	e7e0      	b.n	802c0a0 <__ieee754_rem_pio2+0xe8>
 802c0de:	4b87      	ldr	r3, [pc, #540]	; (802c2fc <__ieee754_rem_pio2+0x344>)
 802c0e0:	4598      	cmp	r8, r3
 802c0e2:	f300 80d8 	bgt.w	802c296 <__ieee754_rem_pio2+0x2de>
 802c0e6:	f000 f96d 	bl	802c3c4 <fabs>
 802c0ea:	ec55 4b10 	vmov	r4, r5, d0
 802c0ee:	ee10 0a10 	vmov	r0, s0
 802c0f2:	a379      	add	r3, pc, #484	; (adr r3, 802c2d8 <__ieee754_rem_pio2+0x320>)
 802c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c0f8:	4629      	mov	r1, r5
 802c0fa:	f7d4 fa7d 	bl	80005f8 <__aeabi_dmul>
 802c0fe:	4b80      	ldr	r3, [pc, #512]	; (802c300 <__ieee754_rem_pio2+0x348>)
 802c100:	2200      	movs	r2, #0
 802c102:	f7d4 f8c3 	bl	800028c <__adddf3>
 802c106:	f7d4 fd27 	bl	8000b58 <__aeabi_d2iz>
 802c10a:	4683      	mov	fp, r0
 802c10c:	f7d4 fa0a 	bl	8000524 <__aeabi_i2d>
 802c110:	4602      	mov	r2, r0
 802c112:	460b      	mov	r3, r1
 802c114:	ec43 2b18 	vmov	d8, r2, r3
 802c118:	a367      	add	r3, pc, #412	; (adr r3, 802c2b8 <__ieee754_rem_pio2+0x300>)
 802c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c11e:	f7d4 fa6b 	bl	80005f8 <__aeabi_dmul>
 802c122:	4602      	mov	r2, r0
 802c124:	460b      	mov	r3, r1
 802c126:	4620      	mov	r0, r4
 802c128:	4629      	mov	r1, r5
 802c12a:	f7d4 f8ad 	bl	8000288 <__aeabi_dsub>
 802c12e:	a364      	add	r3, pc, #400	; (adr r3, 802c2c0 <__ieee754_rem_pio2+0x308>)
 802c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c134:	4606      	mov	r6, r0
 802c136:	460f      	mov	r7, r1
 802c138:	ec51 0b18 	vmov	r0, r1, d8
 802c13c:	f7d4 fa5c 	bl	80005f8 <__aeabi_dmul>
 802c140:	f1bb 0f1f 	cmp.w	fp, #31
 802c144:	4604      	mov	r4, r0
 802c146:	460d      	mov	r5, r1
 802c148:	dc0d      	bgt.n	802c166 <__ieee754_rem_pio2+0x1ae>
 802c14a:	4b6e      	ldr	r3, [pc, #440]	; (802c304 <__ieee754_rem_pio2+0x34c>)
 802c14c:	f10b 32ff 	add.w	r2, fp, #4294967295
 802c150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802c154:	4543      	cmp	r3, r8
 802c156:	d006      	beq.n	802c166 <__ieee754_rem_pio2+0x1ae>
 802c158:	4622      	mov	r2, r4
 802c15a:	462b      	mov	r3, r5
 802c15c:	4630      	mov	r0, r6
 802c15e:	4639      	mov	r1, r7
 802c160:	f7d4 f892 	bl	8000288 <__aeabi_dsub>
 802c164:	e00e      	b.n	802c184 <__ieee754_rem_pio2+0x1cc>
 802c166:	462b      	mov	r3, r5
 802c168:	4622      	mov	r2, r4
 802c16a:	4630      	mov	r0, r6
 802c16c:	4639      	mov	r1, r7
 802c16e:	f7d4 f88b 	bl	8000288 <__aeabi_dsub>
 802c172:	ea4f 5328 	mov.w	r3, r8, asr #20
 802c176:	9303      	str	r3, [sp, #12]
 802c178:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802c17c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 802c180:	2b10      	cmp	r3, #16
 802c182:	dc02      	bgt.n	802c18a <__ieee754_rem_pio2+0x1d2>
 802c184:	e9ca 0100 	strd	r0, r1, [sl]
 802c188:	e039      	b.n	802c1fe <__ieee754_rem_pio2+0x246>
 802c18a:	a34f      	add	r3, pc, #316	; (adr r3, 802c2c8 <__ieee754_rem_pio2+0x310>)
 802c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c190:	ec51 0b18 	vmov	r0, r1, d8
 802c194:	f7d4 fa30 	bl	80005f8 <__aeabi_dmul>
 802c198:	4604      	mov	r4, r0
 802c19a:	460d      	mov	r5, r1
 802c19c:	4602      	mov	r2, r0
 802c19e:	460b      	mov	r3, r1
 802c1a0:	4630      	mov	r0, r6
 802c1a2:	4639      	mov	r1, r7
 802c1a4:	f7d4 f870 	bl	8000288 <__aeabi_dsub>
 802c1a8:	4602      	mov	r2, r0
 802c1aa:	460b      	mov	r3, r1
 802c1ac:	4680      	mov	r8, r0
 802c1ae:	4689      	mov	r9, r1
 802c1b0:	4630      	mov	r0, r6
 802c1b2:	4639      	mov	r1, r7
 802c1b4:	f7d4 f868 	bl	8000288 <__aeabi_dsub>
 802c1b8:	4622      	mov	r2, r4
 802c1ba:	462b      	mov	r3, r5
 802c1bc:	f7d4 f864 	bl	8000288 <__aeabi_dsub>
 802c1c0:	a343      	add	r3, pc, #268	; (adr r3, 802c2d0 <__ieee754_rem_pio2+0x318>)
 802c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c1c6:	4604      	mov	r4, r0
 802c1c8:	460d      	mov	r5, r1
 802c1ca:	ec51 0b18 	vmov	r0, r1, d8
 802c1ce:	f7d4 fa13 	bl	80005f8 <__aeabi_dmul>
 802c1d2:	4622      	mov	r2, r4
 802c1d4:	462b      	mov	r3, r5
 802c1d6:	f7d4 f857 	bl	8000288 <__aeabi_dsub>
 802c1da:	4602      	mov	r2, r0
 802c1dc:	460b      	mov	r3, r1
 802c1de:	4604      	mov	r4, r0
 802c1e0:	460d      	mov	r5, r1
 802c1e2:	4640      	mov	r0, r8
 802c1e4:	4649      	mov	r1, r9
 802c1e6:	f7d4 f84f 	bl	8000288 <__aeabi_dsub>
 802c1ea:	9a03      	ldr	r2, [sp, #12]
 802c1ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802c1f0:	1ad3      	subs	r3, r2, r3
 802c1f2:	2b31      	cmp	r3, #49	; 0x31
 802c1f4:	dc24      	bgt.n	802c240 <__ieee754_rem_pio2+0x288>
 802c1f6:	e9ca 0100 	strd	r0, r1, [sl]
 802c1fa:	4646      	mov	r6, r8
 802c1fc:	464f      	mov	r7, r9
 802c1fe:	e9da 8900 	ldrd	r8, r9, [sl]
 802c202:	4630      	mov	r0, r6
 802c204:	4642      	mov	r2, r8
 802c206:	464b      	mov	r3, r9
 802c208:	4639      	mov	r1, r7
 802c20a:	f7d4 f83d 	bl	8000288 <__aeabi_dsub>
 802c20e:	462b      	mov	r3, r5
 802c210:	4622      	mov	r2, r4
 802c212:	f7d4 f839 	bl	8000288 <__aeabi_dsub>
 802c216:	9b02      	ldr	r3, [sp, #8]
 802c218:	2b00      	cmp	r3, #0
 802c21a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802c21e:	f6bf af0b 	bge.w	802c038 <__ieee754_rem_pio2+0x80>
 802c222:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802c226:	f8ca 3004 	str.w	r3, [sl, #4]
 802c22a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802c22e:	f8ca 8000 	str.w	r8, [sl]
 802c232:	f8ca 0008 	str.w	r0, [sl, #8]
 802c236:	f8ca 300c 	str.w	r3, [sl, #12]
 802c23a:	f1cb 0b00 	rsb	fp, fp, #0
 802c23e:	e6fb      	b.n	802c038 <__ieee754_rem_pio2+0x80>
 802c240:	a327      	add	r3, pc, #156	; (adr r3, 802c2e0 <__ieee754_rem_pio2+0x328>)
 802c242:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c246:	ec51 0b18 	vmov	r0, r1, d8
 802c24a:	f7d4 f9d5 	bl	80005f8 <__aeabi_dmul>
 802c24e:	4604      	mov	r4, r0
 802c250:	460d      	mov	r5, r1
 802c252:	4602      	mov	r2, r0
 802c254:	460b      	mov	r3, r1
 802c256:	4640      	mov	r0, r8
 802c258:	4649      	mov	r1, r9
 802c25a:	f7d4 f815 	bl	8000288 <__aeabi_dsub>
 802c25e:	4602      	mov	r2, r0
 802c260:	460b      	mov	r3, r1
 802c262:	4606      	mov	r6, r0
 802c264:	460f      	mov	r7, r1
 802c266:	4640      	mov	r0, r8
 802c268:	4649      	mov	r1, r9
 802c26a:	f7d4 f80d 	bl	8000288 <__aeabi_dsub>
 802c26e:	4622      	mov	r2, r4
 802c270:	462b      	mov	r3, r5
 802c272:	f7d4 f809 	bl	8000288 <__aeabi_dsub>
 802c276:	a31c      	add	r3, pc, #112	; (adr r3, 802c2e8 <__ieee754_rem_pio2+0x330>)
 802c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c27c:	4604      	mov	r4, r0
 802c27e:	460d      	mov	r5, r1
 802c280:	ec51 0b18 	vmov	r0, r1, d8
 802c284:	f7d4 f9b8 	bl	80005f8 <__aeabi_dmul>
 802c288:	4622      	mov	r2, r4
 802c28a:	462b      	mov	r3, r5
 802c28c:	f7d3 fffc 	bl	8000288 <__aeabi_dsub>
 802c290:	4604      	mov	r4, r0
 802c292:	460d      	mov	r5, r1
 802c294:	e760      	b.n	802c158 <__ieee754_rem_pio2+0x1a0>
 802c296:	4b1c      	ldr	r3, [pc, #112]	; (802c308 <__ieee754_rem_pio2+0x350>)
 802c298:	4598      	cmp	r8, r3
 802c29a:	dd37      	ble.n	802c30c <__ieee754_rem_pio2+0x354>
 802c29c:	ee10 2a10 	vmov	r2, s0
 802c2a0:	462b      	mov	r3, r5
 802c2a2:	4620      	mov	r0, r4
 802c2a4:	4629      	mov	r1, r5
 802c2a6:	f7d3 ffef 	bl	8000288 <__aeabi_dsub>
 802c2aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802c2ae:	e9ca 0100 	strd	r0, r1, [sl]
 802c2b2:	e695      	b.n	802bfe0 <__ieee754_rem_pio2+0x28>
 802c2b4:	f3af 8000 	nop.w
 802c2b8:	54400000 	.word	0x54400000
 802c2bc:	3ff921fb 	.word	0x3ff921fb
 802c2c0:	1a626331 	.word	0x1a626331
 802c2c4:	3dd0b461 	.word	0x3dd0b461
 802c2c8:	1a600000 	.word	0x1a600000
 802c2cc:	3dd0b461 	.word	0x3dd0b461
 802c2d0:	2e037073 	.word	0x2e037073
 802c2d4:	3ba3198a 	.word	0x3ba3198a
 802c2d8:	6dc9c883 	.word	0x6dc9c883
 802c2dc:	3fe45f30 	.word	0x3fe45f30
 802c2e0:	2e000000 	.word	0x2e000000
 802c2e4:	3ba3198a 	.word	0x3ba3198a
 802c2e8:	252049c1 	.word	0x252049c1
 802c2ec:	397b839a 	.word	0x397b839a
 802c2f0:	3fe921fb 	.word	0x3fe921fb
 802c2f4:	4002d97b 	.word	0x4002d97b
 802c2f8:	3ff921fb 	.word	0x3ff921fb
 802c2fc:	413921fb 	.word	0x413921fb
 802c300:	3fe00000 	.word	0x3fe00000
 802c304:	08034df8 	.word	0x08034df8
 802c308:	7fefffff 	.word	0x7fefffff
 802c30c:	ea4f 5628 	mov.w	r6, r8, asr #20
 802c310:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 802c314:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 802c318:	4620      	mov	r0, r4
 802c31a:	460d      	mov	r5, r1
 802c31c:	f7d4 fc1c 	bl	8000b58 <__aeabi_d2iz>
 802c320:	f7d4 f900 	bl	8000524 <__aeabi_i2d>
 802c324:	4602      	mov	r2, r0
 802c326:	460b      	mov	r3, r1
 802c328:	4620      	mov	r0, r4
 802c32a:	4629      	mov	r1, r5
 802c32c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802c330:	f7d3 ffaa 	bl	8000288 <__aeabi_dsub>
 802c334:	4b21      	ldr	r3, [pc, #132]	; (802c3bc <__ieee754_rem_pio2+0x404>)
 802c336:	2200      	movs	r2, #0
 802c338:	f7d4 f95e 	bl	80005f8 <__aeabi_dmul>
 802c33c:	460d      	mov	r5, r1
 802c33e:	4604      	mov	r4, r0
 802c340:	f7d4 fc0a 	bl	8000b58 <__aeabi_d2iz>
 802c344:	f7d4 f8ee 	bl	8000524 <__aeabi_i2d>
 802c348:	4602      	mov	r2, r0
 802c34a:	460b      	mov	r3, r1
 802c34c:	4620      	mov	r0, r4
 802c34e:	4629      	mov	r1, r5
 802c350:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802c354:	f7d3 ff98 	bl	8000288 <__aeabi_dsub>
 802c358:	4b18      	ldr	r3, [pc, #96]	; (802c3bc <__ieee754_rem_pio2+0x404>)
 802c35a:	2200      	movs	r2, #0
 802c35c:	f7d4 f94c 	bl	80005f8 <__aeabi_dmul>
 802c360:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802c364:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 802c368:	2703      	movs	r7, #3
 802c36a:	2400      	movs	r4, #0
 802c36c:	2500      	movs	r5, #0
 802c36e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 802c372:	4622      	mov	r2, r4
 802c374:	462b      	mov	r3, r5
 802c376:	46b9      	mov	r9, r7
 802c378:	3f01      	subs	r7, #1
 802c37a:	f7d4 fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 802c37e:	2800      	cmp	r0, #0
 802c380:	d1f5      	bne.n	802c36e <__ieee754_rem_pio2+0x3b6>
 802c382:	4b0f      	ldr	r3, [pc, #60]	; (802c3c0 <__ieee754_rem_pio2+0x408>)
 802c384:	9301      	str	r3, [sp, #4]
 802c386:	2302      	movs	r3, #2
 802c388:	9300      	str	r3, [sp, #0]
 802c38a:	4632      	mov	r2, r6
 802c38c:	464b      	mov	r3, r9
 802c38e:	4651      	mov	r1, sl
 802c390:	a804      	add	r0, sp, #16
 802c392:	f000 fd29 	bl	802cde8 <__kernel_rem_pio2>
 802c396:	9b02      	ldr	r3, [sp, #8]
 802c398:	2b00      	cmp	r3, #0
 802c39a:	4683      	mov	fp, r0
 802c39c:	f6bf ae4c 	bge.w	802c038 <__ieee754_rem_pio2+0x80>
 802c3a0:	e9da 2100 	ldrd	r2, r1, [sl]
 802c3a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802c3a8:	e9ca 2300 	strd	r2, r3, [sl]
 802c3ac:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 802c3b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802c3b4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 802c3b8:	e73f      	b.n	802c23a <__ieee754_rem_pio2+0x282>
 802c3ba:	bf00      	nop
 802c3bc:	41700000 	.word	0x41700000
 802c3c0:	08034e78 	.word	0x08034e78

0802c3c4 <fabs>:
 802c3c4:	ec51 0b10 	vmov	r0, r1, d0
 802c3c8:	ee10 2a10 	vmov	r2, s0
 802c3cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802c3d0:	ec43 2b10 	vmov	d0, r2, r3
 802c3d4:	4770      	bx	lr
	...

0802c3d8 <__kernel_cosf>:
 802c3d8:	ee10 3a10 	vmov	r3, s0
 802c3dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c3e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802c3e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c3e8:	da05      	bge.n	802c3f6 <__kernel_cosf+0x1e>
 802c3ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802c3ee:	ee17 2a90 	vmov	r2, s15
 802c3f2:	2a00      	cmp	r2, #0
 802c3f4:	d03b      	beq.n	802c46e <__kernel_cosf+0x96>
 802c3f6:	ee20 7a00 	vmul.f32	s14, s0, s0
 802c3fa:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802c474 <__kernel_cosf+0x9c>
 802c3fe:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 802c478 <__kernel_cosf+0xa0>
 802c402:	4a1e      	ldr	r2, [pc, #120]	; (802c47c <__kernel_cosf+0xa4>)
 802c404:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c408:	4293      	cmp	r3, r2
 802c40a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 802c480 <__kernel_cosf+0xa8>
 802c40e:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c412:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 802c484 <__kernel_cosf+0xac>
 802c416:	eea7 6a87 	vfma.f32	s12, s15, s14
 802c41a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 802c488 <__kernel_cosf+0xb0>
 802c41e:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c422:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 802c48c <__kernel_cosf+0xb4>
 802c426:	eea7 6a87 	vfma.f32	s12, s15, s14
 802c42a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 802c42e:	ee26 6a07 	vmul.f32	s12, s12, s14
 802c432:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802c436:	eee7 0a06 	vfma.f32	s1, s14, s12
 802c43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c43e:	dc04      	bgt.n	802c44a <__kernel_cosf+0x72>
 802c440:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802c444:	ee36 0ae7 	vsub.f32	s0, s13, s15
 802c448:	4770      	bx	lr
 802c44a:	4a11      	ldr	r2, [pc, #68]	; (802c490 <__kernel_cosf+0xb8>)
 802c44c:	4293      	cmp	r3, r2
 802c44e:	bfda      	itte	le
 802c450:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802c454:	ee07 3a10 	vmovle	s14, r3
 802c458:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 802c45c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c460:	ee36 0ac7 	vsub.f32	s0, s13, s14
 802c464:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802c468:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c46c:	4770      	bx	lr
 802c46e:	eeb0 0a66 	vmov.f32	s0, s13
 802c472:	4770      	bx	lr
 802c474:	ad47d74e 	.word	0xad47d74e
 802c478:	310f74f6 	.word	0x310f74f6
 802c47c:	3e999999 	.word	0x3e999999
 802c480:	b493f27c 	.word	0xb493f27c
 802c484:	37d00d01 	.word	0x37d00d01
 802c488:	bab60b61 	.word	0xbab60b61
 802c48c:	3d2aaaab 	.word	0x3d2aaaab
 802c490:	3f480000 	.word	0x3f480000

0802c494 <__kernel_sinf>:
 802c494:	ee10 3a10 	vmov	r3, s0
 802c498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c49c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802c4a0:	da04      	bge.n	802c4ac <__kernel_sinf+0x18>
 802c4a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802c4a6:	ee17 3a90 	vmov	r3, s15
 802c4aa:	b35b      	cbz	r3, 802c504 <__kernel_sinf+0x70>
 802c4ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 802c4b0:	eddf 7a15 	vldr	s15, [pc, #84]	; 802c508 <__kernel_sinf+0x74>
 802c4b4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802c50c <__kernel_sinf+0x78>
 802c4b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c4bc:	eddf 7a14 	vldr	s15, [pc, #80]	; 802c510 <__kernel_sinf+0x7c>
 802c4c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c4c4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802c514 <__kernel_sinf+0x80>
 802c4c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 802c4cc:	eddf 7a12 	vldr	s15, [pc, #72]	; 802c518 <__kernel_sinf+0x84>
 802c4d0:	ee60 6a07 	vmul.f32	s13, s0, s14
 802c4d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c4d8:	b930      	cbnz	r0, 802c4e8 <__kernel_sinf+0x54>
 802c4da:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802c51c <__kernel_sinf+0x88>
 802c4de:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c4e2:	eea6 0a26 	vfma.f32	s0, s12, s13
 802c4e6:	4770      	bx	lr
 802c4e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802c4ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802c4f0:	eee0 7a86 	vfma.f32	s15, s1, s12
 802c4f4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802c4f8:	eddf 7a09 	vldr	s15, [pc, #36]	; 802c520 <__kernel_sinf+0x8c>
 802c4fc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802c500:	ee30 0a60 	vsub.f32	s0, s0, s1
 802c504:	4770      	bx	lr
 802c506:	bf00      	nop
 802c508:	2f2ec9d3 	.word	0x2f2ec9d3
 802c50c:	b2d72f34 	.word	0xb2d72f34
 802c510:	3638ef1b 	.word	0x3638ef1b
 802c514:	b9500d01 	.word	0xb9500d01
 802c518:	3c088889 	.word	0x3c088889
 802c51c:	be2aaaab 	.word	0xbe2aaaab
 802c520:	3e2aaaab 	.word	0x3e2aaaab

0802c524 <__ieee754_expf>:
 802c524:	ee10 2a10 	vmov	r2, s0
 802c528:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 802c52c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802c530:	d902      	bls.n	802c538 <__ieee754_expf+0x14>
 802c532:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c536:	4770      	bx	lr
 802c538:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 802c53c:	d106      	bne.n	802c54c <__ieee754_expf+0x28>
 802c53e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 802c678 <__ieee754_expf+0x154>
 802c542:	2900      	cmp	r1, #0
 802c544:	bf18      	it	ne
 802c546:	eeb0 0a67 	vmovne.f32	s0, s15
 802c54a:	4770      	bx	lr
 802c54c:	484b      	ldr	r0, [pc, #300]	; (802c67c <__ieee754_expf+0x158>)
 802c54e:	4282      	cmp	r2, r0
 802c550:	dd02      	ble.n	802c558 <__ieee754_expf+0x34>
 802c552:	2000      	movs	r0, #0
 802c554:	f7fe bc24 	b.w	802ada0 <__math_oflowf>
 802c558:	2a00      	cmp	r2, #0
 802c55a:	da05      	bge.n	802c568 <__ieee754_expf+0x44>
 802c55c:	4a48      	ldr	r2, [pc, #288]	; (802c680 <__ieee754_expf+0x15c>)
 802c55e:	4293      	cmp	r3, r2
 802c560:	d902      	bls.n	802c568 <__ieee754_expf+0x44>
 802c562:	2000      	movs	r0, #0
 802c564:	f7fe bc16 	b.w	802ad94 <__math_uflowf>
 802c568:	4a46      	ldr	r2, [pc, #280]	; (802c684 <__ieee754_expf+0x160>)
 802c56a:	4293      	cmp	r3, r2
 802c56c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 802c570:	d952      	bls.n	802c618 <__ieee754_expf+0xf4>
 802c572:	4a45      	ldr	r2, [pc, #276]	; (802c688 <__ieee754_expf+0x164>)
 802c574:	4293      	cmp	r3, r2
 802c576:	ea4f 0281 	mov.w	r2, r1, lsl #2
 802c57a:	d834      	bhi.n	802c5e6 <__ieee754_expf+0xc2>
 802c57c:	4b43      	ldr	r3, [pc, #268]	; (802c68c <__ieee754_expf+0x168>)
 802c57e:	4413      	add	r3, r2
 802c580:	ed93 7a00 	vldr	s14, [r3]
 802c584:	4b42      	ldr	r3, [pc, #264]	; (802c690 <__ieee754_expf+0x16c>)
 802c586:	4413      	add	r3, r2
 802c588:	ee30 7a47 	vsub.f32	s14, s0, s14
 802c58c:	f1c1 0201 	rsb	r2, r1, #1
 802c590:	edd3 7a00 	vldr	s15, [r3]
 802c594:	1a52      	subs	r2, r2, r1
 802c596:	ee37 0a67 	vsub.f32	s0, s14, s15
 802c59a:	ee20 6a00 	vmul.f32	s12, s0, s0
 802c59e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 802c694 <__ieee754_expf+0x170>
 802c5a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 802c698 <__ieee754_expf+0x174>
 802c5a6:	eee6 6a05 	vfma.f32	s13, s12, s10
 802c5aa:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 802c69c <__ieee754_expf+0x178>
 802c5ae:	eea6 5a86 	vfma.f32	s10, s13, s12
 802c5b2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 802c6a0 <__ieee754_expf+0x17c>
 802c5b6:	eee5 6a06 	vfma.f32	s13, s10, s12
 802c5ba:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 802c6a4 <__ieee754_expf+0x180>
 802c5be:	eea6 5a86 	vfma.f32	s10, s13, s12
 802c5c2:	eef0 6a40 	vmov.f32	s13, s0
 802c5c6:	eee5 6a46 	vfms.f32	s13, s10, s12
 802c5ca:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 802c5ce:	ee20 5a26 	vmul.f32	s10, s0, s13
 802c5d2:	bb92      	cbnz	r2, 802c63a <__ieee754_expf+0x116>
 802c5d4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 802c5d8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 802c5dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 802c5e0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 802c5e4:	4770      	bx	lr
 802c5e6:	4b30      	ldr	r3, [pc, #192]	; (802c6a8 <__ieee754_expf+0x184>)
 802c5e8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 802c6ac <__ieee754_expf+0x188>
 802c5ec:	eddf 6a30 	vldr	s13, [pc, #192]	; 802c6b0 <__ieee754_expf+0x18c>
 802c5f0:	4413      	add	r3, r2
 802c5f2:	edd3 7a00 	vldr	s15, [r3]
 802c5f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 802c5fa:	eeb0 7a40 	vmov.f32	s14, s0
 802c5fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c602:	ee17 2a90 	vmov	r2, s15
 802c606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c60a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802c60e:	eddf 6a29 	vldr	s13, [pc, #164]	; 802c6b4 <__ieee754_expf+0x190>
 802c612:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802c616:	e7be      	b.n	802c596 <__ieee754_expf+0x72>
 802c618:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 802c61c:	d20b      	bcs.n	802c636 <__ieee754_expf+0x112>
 802c61e:	eddf 6a26 	vldr	s13, [pc, #152]	; 802c6b8 <__ieee754_expf+0x194>
 802c622:	ee70 6a26 	vadd.f32	s13, s0, s13
 802c626:	eef4 6ae5 	vcmpe.f32	s13, s11
 802c62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c62e:	dd02      	ble.n	802c636 <__ieee754_expf+0x112>
 802c630:	ee30 0a25 	vadd.f32	s0, s0, s11
 802c634:	4770      	bx	lr
 802c636:	2200      	movs	r2, #0
 802c638:	e7af      	b.n	802c59a <__ieee754_expf+0x76>
 802c63a:	ee36 6a66 	vsub.f32	s12, s12, s13
 802c63e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 802c642:	eec5 6a06 	vdiv.f32	s13, s10, s12
 802c646:	bfb8      	it	lt
 802c648:	3264      	addlt	r2, #100	; 0x64
 802c64a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802c64e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c652:	ee75 7ae7 	vsub.f32	s15, s11, s15
 802c656:	ee17 3a90 	vmov	r3, s15
 802c65a:	bfab      	itete	ge
 802c65c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 802c660:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 802c664:	ee00 3a10 	vmovge	s0, r3
 802c668:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 802c6bc <__ieee754_expf+0x198>
 802c66c:	bfbc      	itt	lt
 802c66e:	ee00 3a10 	vmovlt	s0, r3
 802c672:	ee20 0a27 	vmullt.f32	s0, s0, s15
 802c676:	4770      	bx	lr
 802c678:	00000000 	.word	0x00000000
 802c67c:	42b17217 	.word	0x42b17217
 802c680:	42cff1b5 	.word	0x42cff1b5
 802c684:	3eb17218 	.word	0x3eb17218
 802c688:	3f851591 	.word	0x3f851591
 802c68c:	08034f88 	.word	0x08034f88
 802c690:	08034f90 	.word	0x08034f90
 802c694:	3331bb4c 	.word	0x3331bb4c
 802c698:	b5ddea0e 	.word	0xb5ddea0e
 802c69c:	388ab355 	.word	0x388ab355
 802c6a0:	bb360b61 	.word	0xbb360b61
 802c6a4:	3e2aaaab 	.word	0x3e2aaaab
 802c6a8:	08034f80 	.word	0x08034f80
 802c6ac:	3fb8aa3b 	.word	0x3fb8aa3b
 802c6b0:	3f317180 	.word	0x3f317180
 802c6b4:	3717f7d1 	.word	0x3717f7d1
 802c6b8:	7149f2ca 	.word	0x7149f2ca
 802c6bc:	0d800000 	.word	0x0d800000

0802c6c0 <__ieee754_logf>:
 802c6c0:	ee10 3a10 	vmov	r3, s0
 802c6c4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802c6c8:	d106      	bne.n	802c6d8 <__ieee754_logf+0x18>
 802c6ca:	ed9f 7a66 	vldr	s14, [pc, #408]	; 802c864 <__ieee754_logf+0x1a4>
 802c6ce:	eddf 7a66 	vldr	s15, [pc, #408]	; 802c868 <__ieee754_logf+0x1a8>
 802c6d2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 802c6d6:	4770      	bx	lr
 802c6d8:	2b00      	cmp	r3, #0
 802c6da:	da02      	bge.n	802c6e2 <__ieee754_logf+0x22>
 802c6dc:	ee30 7a40 	vsub.f32	s14, s0, s0
 802c6e0:	e7f5      	b.n	802c6ce <__ieee754_logf+0xe>
 802c6e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802c6e6:	db02      	blt.n	802c6ee <__ieee754_logf+0x2e>
 802c6e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c6ec:	4770      	bx	lr
 802c6ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802c6f2:	bfb8      	it	lt
 802c6f4:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 802c86c <__ieee754_logf+0x1ac>
 802c6f8:	485d      	ldr	r0, [pc, #372]	; (802c870 <__ieee754_logf+0x1b0>)
 802c6fa:	bfbe      	ittt	lt
 802c6fc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 802c700:	f06f 0118 	mvnlt.w	r1, #24
 802c704:	ee17 3a90 	vmovlt	r3, s15
 802c708:	ea4f 52e3 	mov.w	r2, r3, asr #23
 802c70c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802c710:	4418      	add	r0, r3
 802c712:	bfa8      	it	ge
 802c714:	2100      	movge	r1, #0
 802c716:	3a7f      	subs	r2, #127	; 0x7f
 802c718:	440a      	add	r2, r1
 802c71a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 802c71e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 802c722:	4319      	orrs	r1, r3
 802c724:	ee00 1a10 	vmov	s0, r1
 802c728:	4952      	ldr	r1, [pc, #328]	; (802c874 <__ieee754_logf+0x1b4>)
 802c72a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 802c72e:	f103 000f 	add.w	r0, r3, #15
 802c732:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802c736:	4001      	ands	r1, r0
 802c738:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c73c:	bb89      	cbnz	r1, 802c7a2 <__ieee754_logf+0xe2>
 802c73e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 802c742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c746:	d10f      	bne.n	802c768 <__ieee754_logf+0xa8>
 802c748:	2a00      	cmp	r2, #0
 802c74a:	f000 8087 	beq.w	802c85c <__ieee754_logf+0x19c>
 802c74e:	ee07 2a90 	vmov	s15, r2
 802c752:	ed9f 0a49 	vldr	s0, [pc, #292]	; 802c878 <__ieee754_logf+0x1b8>
 802c756:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802c87c <__ieee754_logf+0x1bc>
 802c75a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c75e:	ee27 0a80 	vmul.f32	s0, s15, s0
 802c762:	eea7 0a87 	vfma.f32	s0, s15, s14
 802c766:	4770      	bx	lr
 802c768:	eddf 6a45 	vldr	s13, [pc, #276]	; 802c880 <__ieee754_logf+0x1c0>
 802c76c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802c770:	eee0 7a66 	vfms.f32	s15, s0, s13
 802c774:	ee20 7a00 	vmul.f32	s14, s0, s0
 802c778:	ee27 7a27 	vmul.f32	s14, s14, s15
 802c77c:	b912      	cbnz	r2, 802c784 <__ieee754_logf+0xc4>
 802c77e:	ee30 0a47 	vsub.f32	s0, s0, s14
 802c782:	4770      	bx	lr
 802c784:	ee07 2a90 	vmov	s15, r2
 802c788:	eddf 6a3b 	vldr	s13, [pc, #236]	; 802c878 <__ieee754_logf+0x1b8>
 802c78c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c790:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802c794:	ee37 0a40 	vsub.f32	s0, s14, s0
 802c798:	ed9f 7a38 	vldr	s14, [pc, #224]	; 802c87c <__ieee754_logf+0x1bc>
 802c79c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 802c7a0:	4770      	bx	lr
 802c7a2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802c7a6:	ee70 7a27 	vadd.f32	s15, s0, s15
 802c7aa:	eddf 5a36 	vldr	s11, [pc, #216]	; 802c884 <__ieee754_logf+0x1c4>
 802c7ae:	eddf 4a36 	vldr	s9, [pc, #216]	; 802c888 <__ieee754_logf+0x1c8>
 802c7b2:	4936      	ldr	r1, [pc, #216]	; (802c88c <__ieee754_logf+0x1cc>)
 802c7b4:	ee80 6a27 	vdiv.f32	s12, s0, s15
 802c7b8:	4419      	add	r1, r3
 802c7ba:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 802c7be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802c7c2:	430b      	orrs	r3, r1
 802c7c4:	2b00      	cmp	r3, #0
 802c7c6:	ee07 2a90 	vmov	s15, r2
 802c7ca:	ee26 5a06 	vmul.f32	s10, s12, s12
 802c7ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802c7d2:	ee25 7a05 	vmul.f32	s14, s10, s10
 802c7d6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 802c890 <__ieee754_logf+0x1d0>
 802c7da:	eee7 7a25 	vfma.f32	s15, s14, s11
 802c7de:	eddf 5a2d 	vldr	s11, [pc, #180]	; 802c894 <__ieee754_logf+0x1d4>
 802c7e2:	eee7 5a87 	vfma.f32	s11, s15, s14
 802c7e6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 802c898 <__ieee754_logf+0x1d8>
 802c7ea:	eee7 7a24 	vfma.f32	s15, s14, s9
 802c7ee:	eddf 4a2b 	vldr	s9, [pc, #172]	; 802c89c <__ieee754_logf+0x1dc>
 802c7f2:	eee7 4a87 	vfma.f32	s9, s15, s14
 802c7f6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 802c8a0 <__ieee754_logf+0x1e0>
 802c7fa:	eee4 7a87 	vfma.f32	s15, s9, s14
 802c7fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 802c802:	eee5 7a87 	vfma.f32	s15, s11, s14
 802c806:	dd1a      	ble.n	802c83e <__ieee754_logf+0x17e>
 802c808:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802c80c:	ee20 7a07 	vmul.f32	s14, s0, s14
 802c810:	ee27 7a00 	vmul.f32	s14, s14, s0
 802c814:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c818:	ee67 7a86 	vmul.f32	s15, s15, s12
 802c81c:	b912      	cbnz	r2, 802c824 <__ieee754_logf+0x164>
 802c81e:	ee37 7a67 	vsub.f32	s14, s14, s15
 802c822:	e7ac      	b.n	802c77e <__ieee754_logf+0xbe>
 802c824:	ed9f 6a14 	vldr	s12, [pc, #80]	; 802c878 <__ieee754_logf+0x1b8>
 802c828:	eee6 7a86 	vfma.f32	s15, s13, s12
 802c82c:	ee37 7a67 	vsub.f32	s14, s14, s15
 802c830:	ee37 0a40 	vsub.f32	s0, s14, s0
 802c834:	eddf 7a11 	vldr	s15, [pc, #68]	; 802c87c <__ieee754_logf+0x1bc>
 802c838:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 802c83c:	4770      	bx	lr
 802c83e:	ee70 7a67 	vsub.f32	s15, s0, s15
 802c842:	ee67 7a86 	vmul.f32	s15, s15, s12
 802c846:	b912      	cbnz	r2, 802c84e <__ieee754_logf+0x18e>
 802c848:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c84c:	4770      	bx	lr
 802c84e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 802c878 <__ieee754_logf+0x1b8>
 802c852:	eee6 7ac7 	vfms.f32	s15, s13, s14
 802c856:	ee37 0ac0 	vsub.f32	s0, s15, s0
 802c85a:	e7eb      	b.n	802c834 <__ieee754_logf+0x174>
 802c85c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 802c868 <__ieee754_logf+0x1a8>
 802c860:	4770      	bx	lr
 802c862:	bf00      	nop
 802c864:	cc000000 	.word	0xcc000000
 802c868:	00000000 	.word	0x00000000
 802c86c:	4c000000 	.word	0x4c000000
 802c870:	004afb20 	.word	0x004afb20
 802c874:	007ffff0 	.word	0x007ffff0
 802c878:	3717f7d1 	.word	0x3717f7d1
 802c87c:	3f317180 	.word	0x3f317180
 802c880:	3eaaaaab 	.word	0x3eaaaaab
 802c884:	3e1cd04f 	.word	0x3e1cd04f
 802c888:	3e178897 	.word	0x3e178897
 802c88c:	ffcf5c30 	.word	0xffcf5c30
 802c890:	3e638e29 	.word	0x3e638e29
 802c894:	3ecccccd 	.word	0x3ecccccd
 802c898:	3e3a3325 	.word	0x3e3a3325
 802c89c:	3e924925 	.word	0x3e924925
 802c8a0:	3f2aaaab 	.word	0x3f2aaaab

0802c8a4 <__ieee754_log10f>:
 802c8a4:	b508      	push	{r3, lr}
 802c8a6:	ee10 2a10 	vmov	r2, s0
 802c8aa:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 802c8ae:	ed2d 8b02 	vpush	{d8}
 802c8b2:	d108      	bne.n	802c8c6 <__ieee754_log10f+0x22>
 802c8b4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 802c93c <__ieee754_log10f+0x98>
 802c8b8:	eddf 7a21 	vldr	s15, [pc, #132]	; 802c940 <__ieee754_log10f+0x9c>
 802c8bc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 802c8c0:	ecbd 8b02 	vpop	{d8}
 802c8c4:	bd08      	pop	{r3, pc}
 802c8c6:	2a00      	cmp	r2, #0
 802c8c8:	da02      	bge.n	802c8d0 <__ieee754_log10f+0x2c>
 802c8ca:	ee30 7a40 	vsub.f32	s14, s0, s0
 802c8ce:	e7f3      	b.n	802c8b8 <__ieee754_log10f+0x14>
 802c8d0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802c8d4:	db02      	blt.n	802c8dc <__ieee754_log10f+0x38>
 802c8d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c8da:	e7f1      	b.n	802c8c0 <__ieee754_log10f+0x1c>
 802c8dc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 802c8e0:	bfbf      	itttt	lt
 802c8e2:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 802c944 <__ieee754_log10f+0xa0>
 802c8e6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 802c8ea:	f06f 0118 	mvnlt.w	r1, #24
 802c8ee:	ee17 2a90 	vmovlt	r2, s15
 802c8f2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 802c8f6:	bfa8      	it	ge
 802c8f8:	2100      	movge	r1, #0
 802c8fa:	3b7f      	subs	r3, #127	; 0x7f
 802c8fc:	440b      	add	r3, r1
 802c8fe:	0fd9      	lsrs	r1, r3, #31
 802c900:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802c904:	ee07 3a90 	vmov	s15, r3
 802c908:	f3c2 0216 	ubfx	r2, r2, #0, #23
 802c90c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 802c910:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802c914:	ee00 3a10 	vmov	s0, r3
 802c918:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 802c91c:	f7ff fed0 	bl	802c6c0 <__ieee754_logf>
 802c920:	eddf 7a09 	vldr	s15, [pc, #36]	; 802c948 <__ieee754_log10f+0xa4>
 802c924:	ee20 0a27 	vmul.f32	s0, s0, s15
 802c928:	eddf 7a08 	vldr	s15, [pc, #32]	; 802c94c <__ieee754_log10f+0xa8>
 802c92c:	eea8 0a27 	vfma.f32	s0, s16, s15
 802c930:	eddf 7a07 	vldr	s15, [pc, #28]	; 802c950 <__ieee754_log10f+0xac>
 802c934:	eea8 0a27 	vfma.f32	s0, s16, s15
 802c938:	e7c2      	b.n	802c8c0 <__ieee754_log10f+0x1c>
 802c93a:	bf00      	nop
 802c93c:	cc000000 	.word	0xcc000000
 802c940:	00000000 	.word	0x00000000
 802c944:	4c000000 	.word	0x4c000000
 802c948:	3ede5bd9 	.word	0x3ede5bd9
 802c94c:	355427db 	.word	0x355427db
 802c950:	3e9a2080 	.word	0x3e9a2080

0802c954 <__ieee754_rem_pio2f>:
 802c954:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c956:	ee10 6a10 	vmov	r6, s0
 802c95a:	4b86      	ldr	r3, [pc, #536]	; (802cb74 <__ieee754_rem_pio2f+0x220>)
 802c95c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802c960:	429d      	cmp	r5, r3
 802c962:	b087      	sub	sp, #28
 802c964:	4604      	mov	r4, r0
 802c966:	dc05      	bgt.n	802c974 <__ieee754_rem_pio2f+0x20>
 802c968:	2300      	movs	r3, #0
 802c96a:	ed80 0a00 	vstr	s0, [r0]
 802c96e:	6043      	str	r3, [r0, #4]
 802c970:	2000      	movs	r0, #0
 802c972:	e020      	b.n	802c9b6 <__ieee754_rem_pio2f+0x62>
 802c974:	4b80      	ldr	r3, [pc, #512]	; (802cb78 <__ieee754_rem_pio2f+0x224>)
 802c976:	429d      	cmp	r5, r3
 802c978:	dc38      	bgt.n	802c9ec <__ieee754_rem_pio2f+0x98>
 802c97a:	2e00      	cmp	r6, #0
 802c97c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 802cb7c <__ieee754_rem_pio2f+0x228>
 802c980:	4b7f      	ldr	r3, [pc, #508]	; (802cb80 <__ieee754_rem_pio2f+0x22c>)
 802c982:	f025 050f 	bic.w	r5, r5, #15
 802c986:	dd18      	ble.n	802c9ba <__ieee754_rem_pio2f+0x66>
 802c988:	429d      	cmp	r5, r3
 802c98a:	ee70 7a47 	vsub.f32	s15, s0, s14
 802c98e:	bf09      	itett	eq
 802c990:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 802cb84 <__ieee754_rem_pio2f+0x230>
 802c994:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 802cb88 <__ieee754_rem_pio2f+0x234>
 802c998:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802c99c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 802cb8c <__ieee754_rem_pio2f+0x238>
 802c9a0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802c9a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802c9a8:	edc0 6a00 	vstr	s13, [r0]
 802c9ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c9b0:	edc0 7a01 	vstr	s15, [r0, #4]
 802c9b4:	2001      	movs	r0, #1
 802c9b6:	b007      	add	sp, #28
 802c9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c9ba:	429d      	cmp	r5, r3
 802c9bc:	ee70 7a07 	vadd.f32	s15, s0, s14
 802c9c0:	bf09      	itett	eq
 802c9c2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 802cb84 <__ieee754_rem_pio2f+0x230>
 802c9c6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 802cb88 <__ieee754_rem_pio2f+0x234>
 802c9ca:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802c9ce:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 802cb8c <__ieee754_rem_pio2f+0x238>
 802c9d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 802c9d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802c9da:	edc0 6a00 	vstr	s13, [r0]
 802c9de:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c9e2:	edc0 7a01 	vstr	s15, [r0, #4]
 802c9e6:	f04f 30ff 	mov.w	r0, #4294967295
 802c9ea:	e7e4      	b.n	802c9b6 <__ieee754_rem_pio2f+0x62>
 802c9ec:	4b68      	ldr	r3, [pc, #416]	; (802cb90 <__ieee754_rem_pio2f+0x23c>)
 802c9ee:	429d      	cmp	r5, r3
 802c9f0:	dc71      	bgt.n	802cad6 <__ieee754_rem_pio2f+0x182>
 802c9f2:	f000 f8db 	bl	802cbac <fabsf>
 802c9f6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802cb94 <__ieee754_rem_pio2f+0x240>
 802c9fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802c9fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 802ca02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802ca06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802ca0a:	ee17 0a90 	vmov	r0, s15
 802ca0e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802cb7c <__ieee754_rem_pio2f+0x228>
 802ca12:	eea7 0a67 	vfms.f32	s0, s14, s15
 802ca16:	281f      	cmp	r0, #31
 802ca18:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802cb88 <__ieee754_rem_pio2f+0x234>
 802ca1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 802ca20:	eeb1 6a47 	vneg.f32	s12, s14
 802ca24:	ee70 6a67 	vsub.f32	s13, s0, s15
 802ca28:	ee16 2a90 	vmov	r2, s13
 802ca2c:	dc1c      	bgt.n	802ca68 <__ieee754_rem_pio2f+0x114>
 802ca2e:	495a      	ldr	r1, [pc, #360]	; (802cb98 <__ieee754_rem_pio2f+0x244>)
 802ca30:	1e47      	subs	r7, r0, #1
 802ca32:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802ca36:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802ca3a:	428b      	cmp	r3, r1
 802ca3c:	d014      	beq.n	802ca68 <__ieee754_rem_pio2f+0x114>
 802ca3e:	6022      	str	r2, [r4, #0]
 802ca40:	ed94 7a00 	vldr	s14, [r4]
 802ca44:	ee30 0a47 	vsub.f32	s0, s0, s14
 802ca48:	2e00      	cmp	r6, #0
 802ca4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802ca4e:	ed84 0a01 	vstr	s0, [r4, #4]
 802ca52:	dab0      	bge.n	802c9b6 <__ieee754_rem_pio2f+0x62>
 802ca54:	eeb1 7a47 	vneg.f32	s14, s14
 802ca58:	eeb1 0a40 	vneg.f32	s0, s0
 802ca5c:	ed84 7a00 	vstr	s14, [r4]
 802ca60:	ed84 0a01 	vstr	s0, [r4, #4]
 802ca64:	4240      	negs	r0, r0
 802ca66:	e7a6      	b.n	802c9b6 <__ieee754_rem_pio2f+0x62>
 802ca68:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802ca6c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 802ca70:	2908      	cmp	r1, #8
 802ca72:	ea4f 53e5 	mov.w	r3, r5, asr #23
 802ca76:	dde2      	ble.n	802ca3e <__ieee754_rem_pio2f+0xea>
 802ca78:	eddf 5a42 	vldr	s11, [pc, #264]	; 802cb84 <__ieee754_rem_pio2f+0x230>
 802ca7c:	eef0 6a40 	vmov.f32	s13, s0
 802ca80:	eee6 6a25 	vfma.f32	s13, s12, s11
 802ca84:	ee70 7a66 	vsub.f32	s15, s0, s13
 802ca88:	eee6 7a25 	vfma.f32	s15, s12, s11
 802ca8c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802cb8c <__ieee754_rem_pio2f+0x238>
 802ca90:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802ca94:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802ca98:	ee15 2a90 	vmov	r2, s11
 802ca9c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802caa0:	1a5b      	subs	r3, r3, r1
 802caa2:	2b19      	cmp	r3, #25
 802caa4:	dc04      	bgt.n	802cab0 <__ieee754_rem_pio2f+0x15c>
 802caa6:	edc4 5a00 	vstr	s11, [r4]
 802caaa:	eeb0 0a66 	vmov.f32	s0, s13
 802caae:	e7c7      	b.n	802ca40 <__ieee754_rem_pio2f+0xec>
 802cab0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802cb9c <__ieee754_rem_pio2f+0x248>
 802cab4:	eeb0 0a66 	vmov.f32	s0, s13
 802cab8:	eea6 0a25 	vfma.f32	s0, s12, s11
 802cabc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802cac0:	eddf 6a37 	vldr	s13, [pc, #220]	; 802cba0 <__ieee754_rem_pio2f+0x24c>
 802cac4:	eee6 7a25 	vfma.f32	s15, s12, s11
 802cac8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802cacc:	ee30 7a67 	vsub.f32	s14, s0, s15
 802cad0:	ed84 7a00 	vstr	s14, [r4]
 802cad4:	e7b4      	b.n	802ca40 <__ieee754_rem_pio2f+0xec>
 802cad6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802cada:	db06      	blt.n	802caea <__ieee754_rem_pio2f+0x196>
 802cadc:	ee70 7a40 	vsub.f32	s15, s0, s0
 802cae0:	edc0 7a01 	vstr	s15, [r0, #4]
 802cae4:	edc0 7a00 	vstr	s15, [r0]
 802cae8:	e742      	b.n	802c970 <__ieee754_rem_pio2f+0x1c>
 802caea:	15ea      	asrs	r2, r5, #23
 802caec:	3a86      	subs	r2, #134	; 0x86
 802caee:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802caf2:	ee07 3a90 	vmov	s15, r3
 802caf6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802cafa:	eddf 6a2a 	vldr	s13, [pc, #168]	; 802cba4 <__ieee754_rem_pio2f+0x250>
 802cafe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802cb02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802cb06:	ed8d 7a03 	vstr	s14, [sp, #12]
 802cb0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802cb0e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802cb12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802cb16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802cb1a:	ed8d 7a04 	vstr	s14, [sp, #16]
 802cb1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802cb22:	eef5 7a40 	vcmp.f32	s15, #0.0
 802cb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cb2a:	edcd 7a05 	vstr	s15, [sp, #20]
 802cb2e:	d11e      	bne.n	802cb6e <__ieee754_rem_pio2f+0x21a>
 802cb30:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802cb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cb38:	bf14      	ite	ne
 802cb3a:	2302      	movne	r3, #2
 802cb3c:	2301      	moveq	r3, #1
 802cb3e:	491a      	ldr	r1, [pc, #104]	; (802cba8 <__ieee754_rem_pio2f+0x254>)
 802cb40:	9101      	str	r1, [sp, #4]
 802cb42:	2102      	movs	r1, #2
 802cb44:	9100      	str	r1, [sp, #0]
 802cb46:	a803      	add	r0, sp, #12
 802cb48:	4621      	mov	r1, r4
 802cb4a:	f000 fc9b 	bl	802d484 <__kernel_rem_pio2f>
 802cb4e:	2e00      	cmp	r6, #0
 802cb50:	f6bf af31 	bge.w	802c9b6 <__ieee754_rem_pio2f+0x62>
 802cb54:	edd4 7a00 	vldr	s15, [r4]
 802cb58:	eef1 7a67 	vneg.f32	s15, s15
 802cb5c:	edc4 7a00 	vstr	s15, [r4]
 802cb60:	edd4 7a01 	vldr	s15, [r4, #4]
 802cb64:	eef1 7a67 	vneg.f32	s15, s15
 802cb68:	edc4 7a01 	vstr	s15, [r4, #4]
 802cb6c:	e77a      	b.n	802ca64 <__ieee754_rem_pio2f+0x110>
 802cb6e:	2303      	movs	r3, #3
 802cb70:	e7e5      	b.n	802cb3e <__ieee754_rem_pio2f+0x1ea>
 802cb72:	bf00      	nop
 802cb74:	3f490fd8 	.word	0x3f490fd8
 802cb78:	4016cbe3 	.word	0x4016cbe3
 802cb7c:	3fc90f80 	.word	0x3fc90f80
 802cb80:	3fc90fd0 	.word	0x3fc90fd0
 802cb84:	37354400 	.word	0x37354400
 802cb88:	37354443 	.word	0x37354443
 802cb8c:	2e85a308 	.word	0x2e85a308
 802cb90:	43490f80 	.word	0x43490f80
 802cb94:	3f22f984 	.word	0x3f22f984
 802cb98:	08034f98 	.word	0x08034f98
 802cb9c:	2e85a300 	.word	0x2e85a300
 802cba0:	248d3132 	.word	0x248d3132
 802cba4:	43800000 	.word	0x43800000
 802cba8:	08035018 	.word	0x08035018

0802cbac <fabsf>:
 802cbac:	ee10 3a10 	vmov	r3, s0
 802cbb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802cbb4:	ee00 3a10 	vmov	s0, r3
 802cbb8:	4770      	bx	lr
 802cbba:	0000      	movs	r0, r0
 802cbbc:	0000      	movs	r0, r0
	...

0802cbc0 <scalbn>:
 802cbc0:	b570      	push	{r4, r5, r6, lr}
 802cbc2:	ec55 4b10 	vmov	r4, r5, d0
 802cbc6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 802cbca:	4606      	mov	r6, r0
 802cbcc:	462b      	mov	r3, r5
 802cbce:	b999      	cbnz	r1, 802cbf8 <scalbn+0x38>
 802cbd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802cbd4:	4323      	orrs	r3, r4
 802cbd6:	d03f      	beq.n	802cc58 <scalbn+0x98>
 802cbd8:	4b35      	ldr	r3, [pc, #212]	; (802ccb0 <scalbn+0xf0>)
 802cbda:	4629      	mov	r1, r5
 802cbdc:	ee10 0a10 	vmov	r0, s0
 802cbe0:	2200      	movs	r2, #0
 802cbe2:	f7d3 fd09 	bl	80005f8 <__aeabi_dmul>
 802cbe6:	4b33      	ldr	r3, [pc, #204]	; (802ccb4 <scalbn+0xf4>)
 802cbe8:	429e      	cmp	r6, r3
 802cbea:	4604      	mov	r4, r0
 802cbec:	460d      	mov	r5, r1
 802cbee:	da10      	bge.n	802cc12 <scalbn+0x52>
 802cbf0:	a327      	add	r3, pc, #156	; (adr r3, 802cc90 <scalbn+0xd0>)
 802cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cbf6:	e01f      	b.n	802cc38 <scalbn+0x78>
 802cbf8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 802cbfc:	4291      	cmp	r1, r2
 802cbfe:	d10c      	bne.n	802cc1a <scalbn+0x5a>
 802cc00:	ee10 2a10 	vmov	r2, s0
 802cc04:	4620      	mov	r0, r4
 802cc06:	4629      	mov	r1, r5
 802cc08:	f7d3 fb40 	bl	800028c <__adddf3>
 802cc0c:	4604      	mov	r4, r0
 802cc0e:	460d      	mov	r5, r1
 802cc10:	e022      	b.n	802cc58 <scalbn+0x98>
 802cc12:	460b      	mov	r3, r1
 802cc14:	f3c1 510a 	ubfx	r1, r1, #20, #11
 802cc18:	3936      	subs	r1, #54	; 0x36
 802cc1a:	f24c 3250 	movw	r2, #50000	; 0xc350
 802cc1e:	4296      	cmp	r6, r2
 802cc20:	dd0d      	ble.n	802cc3e <scalbn+0x7e>
 802cc22:	2d00      	cmp	r5, #0
 802cc24:	a11c      	add	r1, pc, #112	; (adr r1, 802cc98 <scalbn+0xd8>)
 802cc26:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cc2a:	da02      	bge.n	802cc32 <scalbn+0x72>
 802cc2c:	a11c      	add	r1, pc, #112	; (adr r1, 802cca0 <scalbn+0xe0>)
 802cc2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cc32:	a319      	add	r3, pc, #100	; (adr r3, 802cc98 <scalbn+0xd8>)
 802cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cc38:	f7d3 fcde 	bl	80005f8 <__aeabi_dmul>
 802cc3c:	e7e6      	b.n	802cc0c <scalbn+0x4c>
 802cc3e:	1872      	adds	r2, r6, r1
 802cc40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802cc44:	428a      	cmp	r2, r1
 802cc46:	dcec      	bgt.n	802cc22 <scalbn+0x62>
 802cc48:	2a00      	cmp	r2, #0
 802cc4a:	dd08      	ble.n	802cc5e <scalbn+0x9e>
 802cc4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802cc50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802cc54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802cc58:	ec45 4b10 	vmov	d0, r4, r5
 802cc5c:	bd70      	pop	{r4, r5, r6, pc}
 802cc5e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802cc62:	da08      	bge.n	802cc76 <scalbn+0xb6>
 802cc64:	2d00      	cmp	r5, #0
 802cc66:	a10a      	add	r1, pc, #40	; (adr r1, 802cc90 <scalbn+0xd0>)
 802cc68:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cc6c:	dac0      	bge.n	802cbf0 <scalbn+0x30>
 802cc6e:	a10e      	add	r1, pc, #56	; (adr r1, 802cca8 <scalbn+0xe8>)
 802cc70:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cc74:	e7bc      	b.n	802cbf0 <scalbn+0x30>
 802cc76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802cc7a:	3236      	adds	r2, #54	; 0x36
 802cc7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802cc80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802cc84:	4620      	mov	r0, r4
 802cc86:	4b0c      	ldr	r3, [pc, #48]	; (802ccb8 <scalbn+0xf8>)
 802cc88:	2200      	movs	r2, #0
 802cc8a:	e7d5      	b.n	802cc38 <scalbn+0x78>
 802cc8c:	f3af 8000 	nop.w
 802cc90:	c2f8f359 	.word	0xc2f8f359
 802cc94:	01a56e1f 	.word	0x01a56e1f
 802cc98:	8800759c 	.word	0x8800759c
 802cc9c:	7e37e43c 	.word	0x7e37e43c
 802cca0:	8800759c 	.word	0x8800759c
 802cca4:	fe37e43c 	.word	0xfe37e43c
 802cca8:	c2f8f359 	.word	0xc2f8f359
 802ccac:	81a56e1f 	.word	0x81a56e1f
 802ccb0:	43500000 	.word	0x43500000
 802ccb4:	ffff3cb0 	.word	0xffff3cb0
 802ccb8:	3c900000 	.word	0x3c900000

0802ccbc <with_errno>:
 802ccbc:	b570      	push	{r4, r5, r6, lr}
 802ccbe:	4604      	mov	r4, r0
 802ccc0:	460d      	mov	r5, r1
 802ccc2:	4616      	mov	r6, r2
 802ccc4:	f001 fde4 	bl	802e890 <__errno>
 802ccc8:	4629      	mov	r1, r5
 802ccca:	6006      	str	r6, [r0, #0]
 802cccc:	4620      	mov	r0, r4
 802ccce:	bd70      	pop	{r4, r5, r6, pc}

0802ccd0 <xflow>:
 802ccd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ccd2:	4614      	mov	r4, r2
 802ccd4:	461d      	mov	r5, r3
 802ccd6:	b108      	cbz	r0, 802ccdc <xflow+0xc>
 802ccd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802ccdc:	e9cd 2300 	strd	r2, r3, [sp]
 802cce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 802cce4:	4620      	mov	r0, r4
 802cce6:	4629      	mov	r1, r5
 802cce8:	f7d3 fc86 	bl	80005f8 <__aeabi_dmul>
 802ccec:	2222      	movs	r2, #34	; 0x22
 802ccee:	b003      	add	sp, #12
 802ccf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ccf4:	f7ff bfe2 	b.w	802ccbc <with_errno>

0802ccf8 <__math_uflow>:
 802ccf8:	b508      	push	{r3, lr}
 802ccfa:	2200      	movs	r2, #0
 802ccfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 802cd00:	f7ff ffe6 	bl	802ccd0 <xflow>
 802cd04:	ec41 0b10 	vmov	d0, r0, r1
 802cd08:	bd08      	pop	{r3, pc}

0802cd0a <__math_oflow>:
 802cd0a:	b508      	push	{r3, lr}
 802cd0c:	2200      	movs	r2, #0
 802cd0e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802cd12:	f7ff ffdd 	bl	802ccd0 <xflow>
 802cd16:	ec41 0b10 	vmov	d0, r0, r1
 802cd1a:	bd08      	pop	{r3, pc}

0802cd1c <scalbnf>:
 802cd1c:	ee10 3a10 	vmov	r3, s0
 802cd20:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802cd24:	d02b      	beq.n	802cd7e <scalbnf+0x62>
 802cd26:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802cd2a:	d302      	bcc.n	802cd32 <scalbnf+0x16>
 802cd2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 802cd30:	4770      	bx	lr
 802cd32:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802cd36:	d123      	bne.n	802cd80 <scalbnf+0x64>
 802cd38:	4b24      	ldr	r3, [pc, #144]	; (802cdcc <scalbnf+0xb0>)
 802cd3a:	eddf 7a25 	vldr	s15, [pc, #148]	; 802cdd0 <scalbnf+0xb4>
 802cd3e:	4298      	cmp	r0, r3
 802cd40:	ee20 0a27 	vmul.f32	s0, s0, s15
 802cd44:	db17      	blt.n	802cd76 <scalbnf+0x5a>
 802cd46:	ee10 3a10 	vmov	r3, s0
 802cd4a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802cd4e:	3a19      	subs	r2, #25
 802cd50:	f24c 3150 	movw	r1, #50000	; 0xc350
 802cd54:	4288      	cmp	r0, r1
 802cd56:	dd15      	ble.n	802cd84 <scalbnf+0x68>
 802cd58:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802cdd4 <scalbnf+0xb8>
 802cd5c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 802cdd8 <scalbnf+0xbc>
 802cd60:	ee10 3a10 	vmov	r3, s0
 802cd64:	eeb0 7a67 	vmov.f32	s14, s15
 802cd68:	2b00      	cmp	r3, #0
 802cd6a:	bfb8      	it	lt
 802cd6c:	eef0 7a66 	vmovlt.f32	s15, s13
 802cd70:	ee27 0a87 	vmul.f32	s0, s15, s14
 802cd74:	4770      	bx	lr
 802cd76:	eddf 7a19 	vldr	s15, [pc, #100]	; 802cddc <scalbnf+0xc0>
 802cd7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 802cd7e:	4770      	bx	lr
 802cd80:	0dd2      	lsrs	r2, r2, #23
 802cd82:	e7e5      	b.n	802cd50 <scalbnf+0x34>
 802cd84:	4410      	add	r0, r2
 802cd86:	28fe      	cmp	r0, #254	; 0xfe
 802cd88:	dce6      	bgt.n	802cd58 <scalbnf+0x3c>
 802cd8a:	2800      	cmp	r0, #0
 802cd8c:	dd06      	ble.n	802cd9c <scalbnf+0x80>
 802cd8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802cd92:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802cd96:	ee00 3a10 	vmov	s0, r3
 802cd9a:	4770      	bx	lr
 802cd9c:	f110 0f16 	cmn.w	r0, #22
 802cda0:	da09      	bge.n	802cdb6 <scalbnf+0x9a>
 802cda2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802cddc <scalbnf+0xc0>
 802cda6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 802cde0 <scalbnf+0xc4>
 802cdaa:	ee10 3a10 	vmov	r3, s0
 802cdae:	eeb0 7a67 	vmov.f32	s14, s15
 802cdb2:	2b00      	cmp	r3, #0
 802cdb4:	e7d9      	b.n	802cd6a <scalbnf+0x4e>
 802cdb6:	3019      	adds	r0, #25
 802cdb8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802cdbc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802cdc0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 802cde4 <scalbnf+0xc8>
 802cdc4:	ee07 3a90 	vmov	s15, r3
 802cdc8:	e7d7      	b.n	802cd7a <scalbnf+0x5e>
 802cdca:	bf00      	nop
 802cdcc:	ffff3cb0 	.word	0xffff3cb0
 802cdd0:	4c000000 	.word	0x4c000000
 802cdd4:	7149f2ca 	.word	0x7149f2ca
 802cdd8:	f149f2ca 	.word	0xf149f2ca
 802cddc:	0da24260 	.word	0x0da24260
 802cde0:	8da24260 	.word	0x8da24260
 802cde4:	33000000 	.word	0x33000000

0802cde8 <__kernel_rem_pio2>:
 802cde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cdec:	ed2d 8b02 	vpush	{d8}
 802cdf0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 802cdf4:	f112 0f14 	cmn.w	r2, #20
 802cdf8:	9306      	str	r3, [sp, #24]
 802cdfa:	9104      	str	r1, [sp, #16]
 802cdfc:	4bc2      	ldr	r3, [pc, #776]	; (802d108 <__kernel_rem_pio2+0x320>)
 802cdfe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 802ce00:	9009      	str	r0, [sp, #36]	; 0x24
 802ce02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802ce06:	9300      	str	r3, [sp, #0]
 802ce08:	9b06      	ldr	r3, [sp, #24]
 802ce0a:	f103 33ff 	add.w	r3, r3, #4294967295
 802ce0e:	bfa8      	it	ge
 802ce10:	1ed4      	subge	r4, r2, #3
 802ce12:	9305      	str	r3, [sp, #20]
 802ce14:	bfb2      	itee	lt
 802ce16:	2400      	movlt	r4, #0
 802ce18:	2318      	movge	r3, #24
 802ce1a:	fb94 f4f3 	sdivge	r4, r4, r3
 802ce1e:	f06f 0317 	mvn.w	r3, #23
 802ce22:	fb04 3303 	mla	r3, r4, r3, r3
 802ce26:	eb03 0a02 	add.w	sl, r3, r2
 802ce2a:	9b00      	ldr	r3, [sp, #0]
 802ce2c:	9a05      	ldr	r2, [sp, #20]
 802ce2e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 802d0f8 <__kernel_rem_pio2+0x310>
 802ce32:	eb03 0802 	add.w	r8, r3, r2
 802ce36:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 802ce38:	1aa7      	subs	r7, r4, r2
 802ce3a:	ae20      	add	r6, sp, #128	; 0x80
 802ce3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 802ce40:	2500      	movs	r5, #0
 802ce42:	4545      	cmp	r5, r8
 802ce44:	dd13      	ble.n	802ce6e <__kernel_rem_pio2+0x86>
 802ce46:	9b06      	ldr	r3, [sp, #24]
 802ce48:	aa20      	add	r2, sp, #128	; 0x80
 802ce4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 802ce4e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 802ce52:	f04f 0800 	mov.w	r8, #0
 802ce56:	9b00      	ldr	r3, [sp, #0]
 802ce58:	4598      	cmp	r8, r3
 802ce5a:	dc31      	bgt.n	802cec0 <__kernel_rem_pio2+0xd8>
 802ce5c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 802d0f8 <__kernel_rem_pio2+0x310>
 802ce60:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802ce64:	ed8d 7b02 	vstr	d7, [sp, #8]
 802ce68:	462f      	mov	r7, r5
 802ce6a:	2600      	movs	r6, #0
 802ce6c:	e01b      	b.n	802cea6 <__kernel_rem_pio2+0xbe>
 802ce6e:	42ef      	cmn	r7, r5
 802ce70:	d407      	bmi.n	802ce82 <__kernel_rem_pio2+0x9a>
 802ce72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 802ce76:	f7d3 fb55 	bl	8000524 <__aeabi_i2d>
 802ce7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802ce7e:	3501      	adds	r5, #1
 802ce80:	e7df      	b.n	802ce42 <__kernel_rem_pio2+0x5a>
 802ce82:	ec51 0b18 	vmov	r0, r1, d8
 802ce86:	e7f8      	b.n	802ce7a <__kernel_rem_pio2+0x92>
 802ce88:	e9d7 2300 	ldrd	r2, r3, [r7]
 802ce8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 802ce90:	f7d3 fbb2 	bl	80005f8 <__aeabi_dmul>
 802ce94:	4602      	mov	r2, r0
 802ce96:	460b      	mov	r3, r1
 802ce98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ce9c:	f7d3 f9f6 	bl	800028c <__adddf3>
 802cea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802cea4:	3601      	adds	r6, #1
 802cea6:	9b05      	ldr	r3, [sp, #20]
 802cea8:	429e      	cmp	r6, r3
 802ceaa:	f1a7 0708 	sub.w	r7, r7, #8
 802ceae:	ddeb      	ble.n	802ce88 <__kernel_rem_pio2+0xa0>
 802ceb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 802ceb4:	f108 0801 	add.w	r8, r8, #1
 802ceb8:	ecab 7b02 	vstmia	fp!, {d7}
 802cebc:	3508      	adds	r5, #8
 802cebe:	e7ca      	b.n	802ce56 <__kernel_rem_pio2+0x6e>
 802cec0:	9b00      	ldr	r3, [sp, #0]
 802cec2:	aa0c      	add	r2, sp, #48	; 0x30
 802cec4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802cec8:	930b      	str	r3, [sp, #44]	; 0x2c
 802ceca:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 802cecc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802ced0:	9c00      	ldr	r4, [sp, #0]
 802ced2:	930a      	str	r3, [sp, #40]	; 0x28
 802ced4:	00e3      	lsls	r3, r4, #3
 802ced6:	9308      	str	r3, [sp, #32]
 802ced8:	ab98      	add	r3, sp, #608	; 0x260
 802ceda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802cede:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 802cee2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 802cee6:	ab70      	add	r3, sp, #448	; 0x1c0
 802cee8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 802ceec:	46c3      	mov	fp, r8
 802ceee:	46a1      	mov	r9, r4
 802cef0:	f1b9 0f00 	cmp.w	r9, #0
 802cef4:	f1a5 0508 	sub.w	r5, r5, #8
 802cef8:	dc77      	bgt.n	802cfea <__kernel_rem_pio2+0x202>
 802cefa:	ec47 6b10 	vmov	d0, r6, r7
 802cefe:	4650      	mov	r0, sl
 802cf00:	f7ff fe5e 	bl	802cbc0 <scalbn>
 802cf04:	ec57 6b10 	vmov	r6, r7, d0
 802cf08:	2200      	movs	r2, #0
 802cf0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802cf0e:	ee10 0a10 	vmov	r0, s0
 802cf12:	4639      	mov	r1, r7
 802cf14:	f7d3 fb70 	bl	80005f8 <__aeabi_dmul>
 802cf18:	ec41 0b10 	vmov	d0, r0, r1
 802cf1c:	f7fe f824 	bl	802af68 <floor>
 802cf20:	4b7a      	ldr	r3, [pc, #488]	; (802d10c <__kernel_rem_pio2+0x324>)
 802cf22:	ec51 0b10 	vmov	r0, r1, d0
 802cf26:	2200      	movs	r2, #0
 802cf28:	f7d3 fb66 	bl	80005f8 <__aeabi_dmul>
 802cf2c:	4602      	mov	r2, r0
 802cf2e:	460b      	mov	r3, r1
 802cf30:	4630      	mov	r0, r6
 802cf32:	4639      	mov	r1, r7
 802cf34:	f7d3 f9a8 	bl	8000288 <__aeabi_dsub>
 802cf38:	460f      	mov	r7, r1
 802cf3a:	4606      	mov	r6, r0
 802cf3c:	f7d3 fe0c 	bl	8000b58 <__aeabi_d2iz>
 802cf40:	9002      	str	r0, [sp, #8]
 802cf42:	f7d3 faef 	bl	8000524 <__aeabi_i2d>
 802cf46:	4602      	mov	r2, r0
 802cf48:	460b      	mov	r3, r1
 802cf4a:	4630      	mov	r0, r6
 802cf4c:	4639      	mov	r1, r7
 802cf4e:	f7d3 f99b 	bl	8000288 <__aeabi_dsub>
 802cf52:	f1ba 0f00 	cmp.w	sl, #0
 802cf56:	4606      	mov	r6, r0
 802cf58:	460f      	mov	r7, r1
 802cf5a:	dd6d      	ble.n	802d038 <__kernel_rem_pio2+0x250>
 802cf5c:	1e61      	subs	r1, r4, #1
 802cf5e:	ab0c      	add	r3, sp, #48	; 0x30
 802cf60:	9d02      	ldr	r5, [sp, #8]
 802cf62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802cf66:	f1ca 0018 	rsb	r0, sl, #24
 802cf6a:	fa43 f200 	asr.w	r2, r3, r0
 802cf6e:	4415      	add	r5, r2
 802cf70:	4082      	lsls	r2, r0
 802cf72:	1a9b      	subs	r3, r3, r2
 802cf74:	aa0c      	add	r2, sp, #48	; 0x30
 802cf76:	9502      	str	r5, [sp, #8]
 802cf78:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 802cf7c:	f1ca 0217 	rsb	r2, sl, #23
 802cf80:	fa43 fb02 	asr.w	fp, r3, r2
 802cf84:	f1bb 0f00 	cmp.w	fp, #0
 802cf88:	dd65      	ble.n	802d056 <__kernel_rem_pio2+0x26e>
 802cf8a:	9b02      	ldr	r3, [sp, #8]
 802cf8c:	2200      	movs	r2, #0
 802cf8e:	3301      	adds	r3, #1
 802cf90:	9302      	str	r3, [sp, #8]
 802cf92:	4615      	mov	r5, r2
 802cf94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 802cf98:	4294      	cmp	r4, r2
 802cf9a:	f300 809f 	bgt.w	802d0dc <__kernel_rem_pio2+0x2f4>
 802cf9e:	f1ba 0f00 	cmp.w	sl, #0
 802cfa2:	dd07      	ble.n	802cfb4 <__kernel_rem_pio2+0x1cc>
 802cfa4:	f1ba 0f01 	cmp.w	sl, #1
 802cfa8:	f000 80c1 	beq.w	802d12e <__kernel_rem_pio2+0x346>
 802cfac:	f1ba 0f02 	cmp.w	sl, #2
 802cfb0:	f000 80c7 	beq.w	802d142 <__kernel_rem_pio2+0x35a>
 802cfb4:	f1bb 0f02 	cmp.w	fp, #2
 802cfb8:	d14d      	bne.n	802d056 <__kernel_rem_pio2+0x26e>
 802cfba:	4632      	mov	r2, r6
 802cfbc:	463b      	mov	r3, r7
 802cfbe:	4954      	ldr	r1, [pc, #336]	; (802d110 <__kernel_rem_pio2+0x328>)
 802cfc0:	2000      	movs	r0, #0
 802cfc2:	f7d3 f961 	bl	8000288 <__aeabi_dsub>
 802cfc6:	4606      	mov	r6, r0
 802cfc8:	460f      	mov	r7, r1
 802cfca:	2d00      	cmp	r5, #0
 802cfcc:	d043      	beq.n	802d056 <__kernel_rem_pio2+0x26e>
 802cfce:	4650      	mov	r0, sl
 802cfd0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 802d100 <__kernel_rem_pio2+0x318>
 802cfd4:	f7ff fdf4 	bl	802cbc0 <scalbn>
 802cfd8:	4630      	mov	r0, r6
 802cfda:	4639      	mov	r1, r7
 802cfdc:	ec53 2b10 	vmov	r2, r3, d0
 802cfe0:	f7d3 f952 	bl	8000288 <__aeabi_dsub>
 802cfe4:	4606      	mov	r6, r0
 802cfe6:	460f      	mov	r7, r1
 802cfe8:	e035      	b.n	802d056 <__kernel_rem_pio2+0x26e>
 802cfea:	4b4a      	ldr	r3, [pc, #296]	; (802d114 <__kernel_rem_pio2+0x32c>)
 802cfec:	2200      	movs	r2, #0
 802cfee:	4630      	mov	r0, r6
 802cff0:	4639      	mov	r1, r7
 802cff2:	f7d3 fb01 	bl	80005f8 <__aeabi_dmul>
 802cff6:	f7d3 fdaf 	bl	8000b58 <__aeabi_d2iz>
 802cffa:	f7d3 fa93 	bl	8000524 <__aeabi_i2d>
 802cffe:	4602      	mov	r2, r0
 802d000:	460b      	mov	r3, r1
 802d002:	ec43 2b18 	vmov	d8, r2, r3
 802d006:	4b44      	ldr	r3, [pc, #272]	; (802d118 <__kernel_rem_pio2+0x330>)
 802d008:	2200      	movs	r2, #0
 802d00a:	f7d3 faf5 	bl	80005f8 <__aeabi_dmul>
 802d00e:	4602      	mov	r2, r0
 802d010:	460b      	mov	r3, r1
 802d012:	4630      	mov	r0, r6
 802d014:	4639      	mov	r1, r7
 802d016:	f7d3 f937 	bl	8000288 <__aeabi_dsub>
 802d01a:	f7d3 fd9d 	bl	8000b58 <__aeabi_d2iz>
 802d01e:	e9d5 2300 	ldrd	r2, r3, [r5]
 802d022:	f84b 0b04 	str.w	r0, [fp], #4
 802d026:	ec51 0b18 	vmov	r0, r1, d8
 802d02a:	f7d3 f92f 	bl	800028c <__adddf3>
 802d02e:	f109 39ff 	add.w	r9, r9, #4294967295
 802d032:	4606      	mov	r6, r0
 802d034:	460f      	mov	r7, r1
 802d036:	e75b      	b.n	802cef0 <__kernel_rem_pio2+0x108>
 802d038:	d106      	bne.n	802d048 <__kernel_rem_pio2+0x260>
 802d03a:	1e63      	subs	r3, r4, #1
 802d03c:	aa0c      	add	r2, sp, #48	; 0x30
 802d03e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802d042:	ea4f 5be3 	mov.w	fp, r3, asr #23
 802d046:	e79d      	b.n	802cf84 <__kernel_rem_pio2+0x19c>
 802d048:	4b34      	ldr	r3, [pc, #208]	; (802d11c <__kernel_rem_pio2+0x334>)
 802d04a:	2200      	movs	r2, #0
 802d04c:	f7d3 fd5a 	bl	8000b04 <__aeabi_dcmpge>
 802d050:	2800      	cmp	r0, #0
 802d052:	d140      	bne.n	802d0d6 <__kernel_rem_pio2+0x2ee>
 802d054:	4683      	mov	fp, r0
 802d056:	2200      	movs	r2, #0
 802d058:	2300      	movs	r3, #0
 802d05a:	4630      	mov	r0, r6
 802d05c:	4639      	mov	r1, r7
 802d05e:	f7d3 fd33 	bl	8000ac8 <__aeabi_dcmpeq>
 802d062:	2800      	cmp	r0, #0
 802d064:	f000 80c1 	beq.w	802d1ea <__kernel_rem_pio2+0x402>
 802d068:	1e65      	subs	r5, r4, #1
 802d06a:	462b      	mov	r3, r5
 802d06c:	2200      	movs	r2, #0
 802d06e:	9900      	ldr	r1, [sp, #0]
 802d070:	428b      	cmp	r3, r1
 802d072:	da6d      	bge.n	802d150 <__kernel_rem_pio2+0x368>
 802d074:	2a00      	cmp	r2, #0
 802d076:	f000 808a 	beq.w	802d18e <__kernel_rem_pio2+0x3a6>
 802d07a:	ab0c      	add	r3, sp, #48	; 0x30
 802d07c:	f1aa 0a18 	sub.w	sl, sl, #24
 802d080:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802d084:	2b00      	cmp	r3, #0
 802d086:	f000 80ae 	beq.w	802d1e6 <__kernel_rem_pio2+0x3fe>
 802d08a:	4650      	mov	r0, sl
 802d08c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 802d100 <__kernel_rem_pio2+0x318>
 802d090:	f7ff fd96 	bl	802cbc0 <scalbn>
 802d094:	1c6b      	adds	r3, r5, #1
 802d096:	00da      	lsls	r2, r3, #3
 802d098:	9205      	str	r2, [sp, #20]
 802d09a:	ec57 6b10 	vmov	r6, r7, d0
 802d09e:	aa70      	add	r2, sp, #448	; 0x1c0
 802d0a0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 802d114 <__kernel_rem_pio2+0x32c>
 802d0a4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 802d0a8:	462c      	mov	r4, r5
 802d0aa:	f04f 0800 	mov.w	r8, #0
 802d0ae:	2c00      	cmp	r4, #0
 802d0b0:	f280 80d4 	bge.w	802d25c <__kernel_rem_pio2+0x474>
 802d0b4:	462c      	mov	r4, r5
 802d0b6:	2c00      	cmp	r4, #0
 802d0b8:	f2c0 8102 	blt.w	802d2c0 <__kernel_rem_pio2+0x4d8>
 802d0bc:	4b18      	ldr	r3, [pc, #96]	; (802d120 <__kernel_rem_pio2+0x338>)
 802d0be:	461e      	mov	r6, r3
 802d0c0:	ab70      	add	r3, sp, #448	; 0x1c0
 802d0c2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 802d0c6:	1b2b      	subs	r3, r5, r4
 802d0c8:	f04f 0900 	mov.w	r9, #0
 802d0cc:	f04f 0a00 	mov.w	sl, #0
 802d0d0:	2700      	movs	r7, #0
 802d0d2:	9306      	str	r3, [sp, #24]
 802d0d4:	e0e6      	b.n	802d2a4 <__kernel_rem_pio2+0x4bc>
 802d0d6:	f04f 0b02 	mov.w	fp, #2
 802d0da:	e756      	b.n	802cf8a <__kernel_rem_pio2+0x1a2>
 802d0dc:	f8d8 3000 	ldr.w	r3, [r8]
 802d0e0:	bb05      	cbnz	r5, 802d124 <__kernel_rem_pio2+0x33c>
 802d0e2:	b123      	cbz	r3, 802d0ee <__kernel_rem_pio2+0x306>
 802d0e4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 802d0e8:	f8c8 3000 	str.w	r3, [r8]
 802d0ec:	2301      	movs	r3, #1
 802d0ee:	3201      	adds	r2, #1
 802d0f0:	f108 0804 	add.w	r8, r8, #4
 802d0f4:	461d      	mov	r5, r3
 802d0f6:	e74f      	b.n	802cf98 <__kernel_rem_pio2+0x1b0>
	...
 802d104:	3ff00000 	.word	0x3ff00000
 802d108:	08035370 	.word	0x08035370
 802d10c:	40200000 	.word	0x40200000
 802d110:	3ff00000 	.word	0x3ff00000
 802d114:	3e700000 	.word	0x3e700000
 802d118:	41700000 	.word	0x41700000
 802d11c:	3fe00000 	.word	0x3fe00000
 802d120:	08035330 	.word	0x08035330
 802d124:	1acb      	subs	r3, r1, r3
 802d126:	f8c8 3000 	str.w	r3, [r8]
 802d12a:	462b      	mov	r3, r5
 802d12c:	e7df      	b.n	802d0ee <__kernel_rem_pio2+0x306>
 802d12e:	1e62      	subs	r2, r4, #1
 802d130:	ab0c      	add	r3, sp, #48	; 0x30
 802d132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802d136:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802d13a:	a90c      	add	r1, sp, #48	; 0x30
 802d13c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 802d140:	e738      	b.n	802cfb4 <__kernel_rem_pio2+0x1cc>
 802d142:	1e62      	subs	r2, r4, #1
 802d144:	ab0c      	add	r3, sp, #48	; 0x30
 802d146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802d14a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802d14e:	e7f4      	b.n	802d13a <__kernel_rem_pio2+0x352>
 802d150:	a90c      	add	r1, sp, #48	; 0x30
 802d152:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 802d156:	3b01      	subs	r3, #1
 802d158:	430a      	orrs	r2, r1
 802d15a:	e788      	b.n	802d06e <__kernel_rem_pio2+0x286>
 802d15c:	3301      	adds	r3, #1
 802d15e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 802d162:	2900      	cmp	r1, #0
 802d164:	d0fa      	beq.n	802d15c <__kernel_rem_pio2+0x374>
 802d166:	9a08      	ldr	r2, [sp, #32]
 802d168:	f502 7218 	add.w	r2, r2, #608	; 0x260
 802d16c:	446a      	add	r2, sp
 802d16e:	3a98      	subs	r2, #152	; 0x98
 802d170:	9208      	str	r2, [sp, #32]
 802d172:	9a06      	ldr	r2, [sp, #24]
 802d174:	a920      	add	r1, sp, #128	; 0x80
 802d176:	18a2      	adds	r2, r4, r2
 802d178:	18e3      	adds	r3, r4, r3
 802d17a:	f104 0801 	add.w	r8, r4, #1
 802d17e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 802d182:	9302      	str	r3, [sp, #8]
 802d184:	9b02      	ldr	r3, [sp, #8]
 802d186:	4543      	cmp	r3, r8
 802d188:	da04      	bge.n	802d194 <__kernel_rem_pio2+0x3ac>
 802d18a:	461c      	mov	r4, r3
 802d18c:	e6a2      	b.n	802ced4 <__kernel_rem_pio2+0xec>
 802d18e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802d190:	2301      	movs	r3, #1
 802d192:	e7e4      	b.n	802d15e <__kernel_rem_pio2+0x376>
 802d194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802d196:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 802d19a:	f7d3 f9c3 	bl	8000524 <__aeabi_i2d>
 802d19e:	e8e5 0102 	strd	r0, r1, [r5], #8
 802d1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d1a4:	46ab      	mov	fp, r5
 802d1a6:	461c      	mov	r4, r3
 802d1a8:	f04f 0900 	mov.w	r9, #0
 802d1ac:	2600      	movs	r6, #0
 802d1ae:	2700      	movs	r7, #0
 802d1b0:	9b05      	ldr	r3, [sp, #20]
 802d1b2:	4599      	cmp	r9, r3
 802d1b4:	dd06      	ble.n	802d1c4 <__kernel_rem_pio2+0x3dc>
 802d1b6:	9b08      	ldr	r3, [sp, #32]
 802d1b8:	e8e3 6702 	strd	r6, r7, [r3], #8
 802d1bc:	f108 0801 	add.w	r8, r8, #1
 802d1c0:	9308      	str	r3, [sp, #32]
 802d1c2:	e7df      	b.n	802d184 <__kernel_rem_pio2+0x39c>
 802d1c4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 802d1c8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 802d1cc:	f7d3 fa14 	bl	80005f8 <__aeabi_dmul>
 802d1d0:	4602      	mov	r2, r0
 802d1d2:	460b      	mov	r3, r1
 802d1d4:	4630      	mov	r0, r6
 802d1d6:	4639      	mov	r1, r7
 802d1d8:	f7d3 f858 	bl	800028c <__adddf3>
 802d1dc:	f109 0901 	add.w	r9, r9, #1
 802d1e0:	4606      	mov	r6, r0
 802d1e2:	460f      	mov	r7, r1
 802d1e4:	e7e4      	b.n	802d1b0 <__kernel_rem_pio2+0x3c8>
 802d1e6:	3d01      	subs	r5, #1
 802d1e8:	e747      	b.n	802d07a <__kernel_rem_pio2+0x292>
 802d1ea:	ec47 6b10 	vmov	d0, r6, r7
 802d1ee:	f1ca 0000 	rsb	r0, sl, #0
 802d1f2:	f7ff fce5 	bl	802cbc0 <scalbn>
 802d1f6:	ec57 6b10 	vmov	r6, r7, d0
 802d1fa:	4ba0      	ldr	r3, [pc, #640]	; (802d47c <__kernel_rem_pio2+0x694>)
 802d1fc:	ee10 0a10 	vmov	r0, s0
 802d200:	2200      	movs	r2, #0
 802d202:	4639      	mov	r1, r7
 802d204:	f7d3 fc7e 	bl	8000b04 <__aeabi_dcmpge>
 802d208:	b1f8      	cbz	r0, 802d24a <__kernel_rem_pio2+0x462>
 802d20a:	4b9d      	ldr	r3, [pc, #628]	; (802d480 <__kernel_rem_pio2+0x698>)
 802d20c:	2200      	movs	r2, #0
 802d20e:	4630      	mov	r0, r6
 802d210:	4639      	mov	r1, r7
 802d212:	f7d3 f9f1 	bl	80005f8 <__aeabi_dmul>
 802d216:	f7d3 fc9f 	bl	8000b58 <__aeabi_d2iz>
 802d21a:	4680      	mov	r8, r0
 802d21c:	f7d3 f982 	bl	8000524 <__aeabi_i2d>
 802d220:	4b96      	ldr	r3, [pc, #600]	; (802d47c <__kernel_rem_pio2+0x694>)
 802d222:	2200      	movs	r2, #0
 802d224:	f7d3 f9e8 	bl	80005f8 <__aeabi_dmul>
 802d228:	460b      	mov	r3, r1
 802d22a:	4602      	mov	r2, r0
 802d22c:	4639      	mov	r1, r7
 802d22e:	4630      	mov	r0, r6
 802d230:	f7d3 f82a 	bl	8000288 <__aeabi_dsub>
 802d234:	f7d3 fc90 	bl	8000b58 <__aeabi_d2iz>
 802d238:	1c65      	adds	r5, r4, #1
 802d23a:	ab0c      	add	r3, sp, #48	; 0x30
 802d23c:	f10a 0a18 	add.w	sl, sl, #24
 802d240:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802d244:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 802d248:	e71f      	b.n	802d08a <__kernel_rem_pio2+0x2a2>
 802d24a:	4630      	mov	r0, r6
 802d24c:	4639      	mov	r1, r7
 802d24e:	f7d3 fc83 	bl	8000b58 <__aeabi_d2iz>
 802d252:	ab0c      	add	r3, sp, #48	; 0x30
 802d254:	4625      	mov	r5, r4
 802d256:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802d25a:	e716      	b.n	802d08a <__kernel_rem_pio2+0x2a2>
 802d25c:	ab0c      	add	r3, sp, #48	; 0x30
 802d25e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802d262:	f7d3 f95f 	bl	8000524 <__aeabi_i2d>
 802d266:	4632      	mov	r2, r6
 802d268:	463b      	mov	r3, r7
 802d26a:	f7d3 f9c5 	bl	80005f8 <__aeabi_dmul>
 802d26e:	4642      	mov	r2, r8
 802d270:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 802d274:	464b      	mov	r3, r9
 802d276:	4630      	mov	r0, r6
 802d278:	4639      	mov	r1, r7
 802d27a:	f7d3 f9bd 	bl	80005f8 <__aeabi_dmul>
 802d27e:	3c01      	subs	r4, #1
 802d280:	4606      	mov	r6, r0
 802d282:	460f      	mov	r7, r1
 802d284:	e713      	b.n	802d0ae <__kernel_rem_pio2+0x2c6>
 802d286:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 802d28a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 802d28e:	f7d3 f9b3 	bl	80005f8 <__aeabi_dmul>
 802d292:	4602      	mov	r2, r0
 802d294:	460b      	mov	r3, r1
 802d296:	4648      	mov	r0, r9
 802d298:	4651      	mov	r1, sl
 802d29a:	f7d2 fff7 	bl	800028c <__adddf3>
 802d29e:	3701      	adds	r7, #1
 802d2a0:	4681      	mov	r9, r0
 802d2a2:	468a      	mov	sl, r1
 802d2a4:	9b00      	ldr	r3, [sp, #0]
 802d2a6:	429f      	cmp	r7, r3
 802d2a8:	dc02      	bgt.n	802d2b0 <__kernel_rem_pio2+0x4c8>
 802d2aa:	9b06      	ldr	r3, [sp, #24]
 802d2ac:	429f      	cmp	r7, r3
 802d2ae:	ddea      	ble.n	802d286 <__kernel_rem_pio2+0x49e>
 802d2b0:	9a06      	ldr	r2, [sp, #24]
 802d2b2:	ab48      	add	r3, sp, #288	; 0x120
 802d2b4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 802d2b8:	e9c6 9a00 	strd	r9, sl, [r6]
 802d2bc:	3c01      	subs	r4, #1
 802d2be:	e6fa      	b.n	802d0b6 <__kernel_rem_pio2+0x2ce>
 802d2c0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 802d2c2:	2b02      	cmp	r3, #2
 802d2c4:	dc0b      	bgt.n	802d2de <__kernel_rem_pio2+0x4f6>
 802d2c6:	2b00      	cmp	r3, #0
 802d2c8:	dc39      	bgt.n	802d33e <__kernel_rem_pio2+0x556>
 802d2ca:	d05d      	beq.n	802d388 <__kernel_rem_pio2+0x5a0>
 802d2cc:	9b02      	ldr	r3, [sp, #8]
 802d2ce:	f003 0007 	and.w	r0, r3, #7
 802d2d2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 802d2d6:	ecbd 8b02 	vpop	{d8}
 802d2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d2de:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 802d2e0:	2b03      	cmp	r3, #3
 802d2e2:	d1f3      	bne.n	802d2cc <__kernel_rem_pio2+0x4e4>
 802d2e4:	9b05      	ldr	r3, [sp, #20]
 802d2e6:	9500      	str	r5, [sp, #0]
 802d2e8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 802d2ec:	eb0d 0403 	add.w	r4, sp, r3
 802d2f0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 802d2f4:	46a2      	mov	sl, r4
 802d2f6:	9b00      	ldr	r3, [sp, #0]
 802d2f8:	2b00      	cmp	r3, #0
 802d2fa:	f1aa 0a08 	sub.w	sl, sl, #8
 802d2fe:	dc69      	bgt.n	802d3d4 <__kernel_rem_pio2+0x5ec>
 802d300:	46aa      	mov	sl, r5
 802d302:	f1ba 0f01 	cmp.w	sl, #1
 802d306:	f1a4 0408 	sub.w	r4, r4, #8
 802d30a:	f300 8083 	bgt.w	802d414 <__kernel_rem_pio2+0x62c>
 802d30e:	9c05      	ldr	r4, [sp, #20]
 802d310:	ab48      	add	r3, sp, #288	; 0x120
 802d312:	441c      	add	r4, r3
 802d314:	2000      	movs	r0, #0
 802d316:	2100      	movs	r1, #0
 802d318:	2d01      	cmp	r5, #1
 802d31a:	f300 809a 	bgt.w	802d452 <__kernel_rem_pio2+0x66a>
 802d31e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 802d322:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 802d326:	f1bb 0f00 	cmp.w	fp, #0
 802d32a:	f040 8098 	bne.w	802d45e <__kernel_rem_pio2+0x676>
 802d32e:	9b04      	ldr	r3, [sp, #16]
 802d330:	e9c3 7800 	strd	r7, r8, [r3]
 802d334:	e9c3 5602 	strd	r5, r6, [r3, #8]
 802d338:	e9c3 0104 	strd	r0, r1, [r3, #16]
 802d33c:	e7c6      	b.n	802d2cc <__kernel_rem_pio2+0x4e4>
 802d33e:	9e05      	ldr	r6, [sp, #20]
 802d340:	ab48      	add	r3, sp, #288	; 0x120
 802d342:	441e      	add	r6, r3
 802d344:	462c      	mov	r4, r5
 802d346:	2000      	movs	r0, #0
 802d348:	2100      	movs	r1, #0
 802d34a:	2c00      	cmp	r4, #0
 802d34c:	da33      	bge.n	802d3b6 <__kernel_rem_pio2+0x5ce>
 802d34e:	f1bb 0f00 	cmp.w	fp, #0
 802d352:	d036      	beq.n	802d3c2 <__kernel_rem_pio2+0x5da>
 802d354:	4602      	mov	r2, r0
 802d356:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802d35a:	9c04      	ldr	r4, [sp, #16]
 802d35c:	e9c4 2300 	strd	r2, r3, [r4]
 802d360:	4602      	mov	r2, r0
 802d362:	460b      	mov	r3, r1
 802d364:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 802d368:	f7d2 ff8e 	bl	8000288 <__aeabi_dsub>
 802d36c:	ae4a      	add	r6, sp, #296	; 0x128
 802d36e:	2401      	movs	r4, #1
 802d370:	42a5      	cmp	r5, r4
 802d372:	da29      	bge.n	802d3c8 <__kernel_rem_pio2+0x5e0>
 802d374:	f1bb 0f00 	cmp.w	fp, #0
 802d378:	d002      	beq.n	802d380 <__kernel_rem_pio2+0x598>
 802d37a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802d37e:	4619      	mov	r1, r3
 802d380:	9b04      	ldr	r3, [sp, #16]
 802d382:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802d386:	e7a1      	b.n	802d2cc <__kernel_rem_pio2+0x4e4>
 802d388:	9c05      	ldr	r4, [sp, #20]
 802d38a:	ab48      	add	r3, sp, #288	; 0x120
 802d38c:	441c      	add	r4, r3
 802d38e:	2000      	movs	r0, #0
 802d390:	2100      	movs	r1, #0
 802d392:	2d00      	cmp	r5, #0
 802d394:	da09      	bge.n	802d3aa <__kernel_rem_pio2+0x5c2>
 802d396:	f1bb 0f00 	cmp.w	fp, #0
 802d39a:	d002      	beq.n	802d3a2 <__kernel_rem_pio2+0x5ba>
 802d39c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802d3a0:	4619      	mov	r1, r3
 802d3a2:	9b04      	ldr	r3, [sp, #16]
 802d3a4:	e9c3 0100 	strd	r0, r1, [r3]
 802d3a8:	e790      	b.n	802d2cc <__kernel_rem_pio2+0x4e4>
 802d3aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802d3ae:	f7d2 ff6d 	bl	800028c <__adddf3>
 802d3b2:	3d01      	subs	r5, #1
 802d3b4:	e7ed      	b.n	802d392 <__kernel_rem_pio2+0x5aa>
 802d3b6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 802d3ba:	f7d2 ff67 	bl	800028c <__adddf3>
 802d3be:	3c01      	subs	r4, #1
 802d3c0:	e7c3      	b.n	802d34a <__kernel_rem_pio2+0x562>
 802d3c2:	4602      	mov	r2, r0
 802d3c4:	460b      	mov	r3, r1
 802d3c6:	e7c8      	b.n	802d35a <__kernel_rem_pio2+0x572>
 802d3c8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 802d3cc:	f7d2 ff5e 	bl	800028c <__adddf3>
 802d3d0:	3401      	adds	r4, #1
 802d3d2:	e7cd      	b.n	802d370 <__kernel_rem_pio2+0x588>
 802d3d4:	e9da 8900 	ldrd	r8, r9, [sl]
 802d3d8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 802d3dc:	9b00      	ldr	r3, [sp, #0]
 802d3de:	3b01      	subs	r3, #1
 802d3e0:	9300      	str	r3, [sp, #0]
 802d3e2:	4632      	mov	r2, r6
 802d3e4:	463b      	mov	r3, r7
 802d3e6:	4640      	mov	r0, r8
 802d3e8:	4649      	mov	r1, r9
 802d3ea:	f7d2 ff4f 	bl	800028c <__adddf3>
 802d3ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802d3f2:	4602      	mov	r2, r0
 802d3f4:	460b      	mov	r3, r1
 802d3f6:	4640      	mov	r0, r8
 802d3f8:	4649      	mov	r1, r9
 802d3fa:	f7d2 ff45 	bl	8000288 <__aeabi_dsub>
 802d3fe:	4632      	mov	r2, r6
 802d400:	463b      	mov	r3, r7
 802d402:	f7d2 ff43 	bl	800028c <__adddf3>
 802d406:	ed9d 7b06 	vldr	d7, [sp, #24]
 802d40a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802d40e:	ed8a 7b00 	vstr	d7, [sl]
 802d412:	e770      	b.n	802d2f6 <__kernel_rem_pio2+0x50e>
 802d414:	e9d4 8900 	ldrd	r8, r9, [r4]
 802d418:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 802d41c:	4640      	mov	r0, r8
 802d41e:	4632      	mov	r2, r6
 802d420:	463b      	mov	r3, r7
 802d422:	4649      	mov	r1, r9
 802d424:	f7d2 ff32 	bl	800028c <__adddf3>
 802d428:	e9cd 0100 	strd	r0, r1, [sp]
 802d42c:	4602      	mov	r2, r0
 802d42e:	460b      	mov	r3, r1
 802d430:	4640      	mov	r0, r8
 802d432:	4649      	mov	r1, r9
 802d434:	f7d2 ff28 	bl	8000288 <__aeabi_dsub>
 802d438:	4632      	mov	r2, r6
 802d43a:	463b      	mov	r3, r7
 802d43c:	f7d2 ff26 	bl	800028c <__adddf3>
 802d440:	ed9d 7b00 	vldr	d7, [sp]
 802d444:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802d448:	ed84 7b00 	vstr	d7, [r4]
 802d44c:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d450:	e757      	b.n	802d302 <__kernel_rem_pio2+0x51a>
 802d452:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802d456:	f7d2 ff19 	bl	800028c <__adddf3>
 802d45a:	3d01      	subs	r5, #1
 802d45c:	e75c      	b.n	802d318 <__kernel_rem_pio2+0x530>
 802d45e:	9b04      	ldr	r3, [sp, #16]
 802d460:	9a04      	ldr	r2, [sp, #16]
 802d462:	601f      	str	r7, [r3, #0]
 802d464:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 802d468:	605c      	str	r4, [r3, #4]
 802d46a:	609d      	str	r5, [r3, #8]
 802d46c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802d470:	60d3      	str	r3, [r2, #12]
 802d472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802d476:	6110      	str	r0, [r2, #16]
 802d478:	6153      	str	r3, [r2, #20]
 802d47a:	e727      	b.n	802d2cc <__kernel_rem_pio2+0x4e4>
 802d47c:	41700000 	.word	0x41700000
 802d480:	3e700000 	.word	0x3e700000

0802d484 <__kernel_rem_pio2f>:
 802d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d488:	ed2d 8b04 	vpush	{d8-d9}
 802d48c:	b0d9      	sub	sp, #356	; 0x164
 802d48e:	4688      	mov	r8, r1
 802d490:	9002      	str	r0, [sp, #8]
 802d492:	49b8      	ldr	r1, [pc, #736]	; (802d774 <__kernel_rem_pio2f+0x2f0>)
 802d494:	9866      	ldr	r0, [sp, #408]	; 0x198
 802d496:	9301      	str	r3, [sp, #4]
 802d498:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 802d49c:	9901      	ldr	r1, [sp, #4]
 802d49e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 802d4a0:	f101 3bff 	add.w	fp, r1, #4294967295
 802d4a4:	1d11      	adds	r1, r2, #4
 802d4a6:	db25      	blt.n	802d4f4 <__kernel_rem_pio2f+0x70>
 802d4a8:	1ed0      	subs	r0, r2, #3
 802d4aa:	bf48      	it	mi
 802d4ac:	1d10      	addmi	r0, r2, #4
 802d4ae:	10c0      	asrs	r0, r0, #3
 802d4b0:	1c45      	adds	r5, r0, #1
 802d4b2:	00e9      	lsls	r1, r5, #3
 802d4b4:	eba0 070b 	sub.w	r7, r0, fp
 802d4b8:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 802d784 <__kernel_rem_pio2f+0x300>
 802d4bc:	9103      	str	r1, [sp, #12]
 802d4be:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 802d4c2:	eb0a 0c0b 	add.w	ip, sl, fp
 802d4c6:	ae1c      	add	r6, sp, #112	; 0x70
 802d4c8:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 802d4cc:	2400      	movs	r4, #0
 802d4ce:	4564      	cmp	r4, ip
 802d4d0:	dd12      	ble.n	802d4f8 <__kernel_rem_pio2f+0x74>
 802d4d2:	9901      	ldr	r1, [sp, #4]
 802d4d4:	ac1c      	add	r4, sp, #112	; 0x70
 802d4d6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802d4da:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 802d4de:	f04f 0c00 	mov.w	ip, #0
 802d4e2:	45d4      	cmp	ip, sl
 802d4e4:	dc27      	bgt.n	802d536 <__kernel_rem_pio2f+0xb2>
 802d4e6:	f8dd e008 	ldr.w	lr, [sp, #8]
 802d4ea:	eddf 7aa6 	vldr	s15, [pc, #664]	; 802d784 <__kernel_rem_pio2f+0x300>
 802d4ee:	4627      	mov	r7, r4
 802d4f0:	2600      	movs	r6, #0
 802d4f2:	e016      	b.n	802d522 <__kernel_rem_pio2f+0x9e>
 802d4f4:	2000      	movs	r0, #0
 802d4f6:	e7db      	b.n	802d4b0 <__kernel_rem_pio2f+0x2c>
 802d4f8:	42e7      	cmn	r7, r4
 802d4fa:	bf5d      	ittte	pl
 802d4fc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 802d500:	ee07 1a90 	vmovpl	s15, r1
 802d504:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802d508:	eef0 7a47 	vmovmi.f32	s15, s14
 802d50c:	ece6 7a01 	vstmia	r6!, {s15}
 802d510:	3401      	adds	r4, #1
 802d512:	e7dc      	b.n	802d4ce <__kernel_rem_pio2f+0x4a>
 802d514:	ecfe 6a01 	vldmia	lr!, {s13}
 802d518:	ed97 7a00 	vldr	s14, [r7]
 802d51c:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d520:	3601      	adds	r6, #1
 802d522:	455e      	cmp	r6, fp
 802d524:	f1a7 0704 	sub.w	r7, r7, #4
 802d528:	ddf4      	ble.n	802d514 <__kernel_rem_pio2f+0x90>
 802d52a:	ece9 7a01 	vstmia	r9!, {s15}
 802d52e:	f10c 0c01 	add.w	ip, ip, #1
 802d532:	3404      	adds	r4, #4
 802d534:	e7d5      	b.n	802d4e2 <__kernel_rem_pio2f+0x5e>
 802d536:	a908      	add	r1, sp, #32
 802d538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802d53c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 802d540:	eddf 8a8f 	vldr	s17, [pc, #572]	; 802d780 <__kernel_rem_pio2f+0x2fc>
 802d544:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 802d77c <__kernel_rem_pio2f+0x2f8>
 802d548:	9105      	str	r1, [sp, #20]
 802d54a:	9304      	str	r3, [sp, #16]
 802d54c:	4656      	mov	r6, sl
 802d54e:	00b3      	lsls	r3, r6, #2
 802d550:	9306      	str	r3, [sp, #24]
 802d552:	ab58      	add	r3, sp, #352	; 0x160
 802d554:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802d558:	ac08      	add	r4, sp, #32
 802d55a:	ab44      	add	r3, sp, #272	; 0x110
 802d55c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 802d560:	46a4      	mov	ip, r4
 802d562:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802d566:	4637      	mov	r7, r6
 802d568:	2f00      	cmp	r7, #0
 802d56a:	f1a0 0004 	sub.w	r0, r0, #4
 802d56e:	dc4a      	bgt.n	802d606 <__kernel_rem_pio2f+0x182>
 802d570:	4628      	mov	r0, r5
 802d572:	9207      	str	r2, [sp, #28]
 802d574:	f7ff fbd2 	bl	802cd1c <scalbnf>
 802d578:	eeb0 8a40 	vmov.f32	s16, s0
 802d57c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802d580:	ee28 0a00 	vmul.f32	s0, s16, s0
 802d584:	f7fd fdfa 	bl	802b17c <floorf>
 802d588:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802d58c:	eea0 8a67 	vfms.f32	s16, s0, s15
 802d590:	2d00      	cmp	r5, #0
 802d592:	9a07      	ldr	r2, [sp, #28]
 802d594:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802d598:	ee17 9a90 	vmov	r9, s15
 802d59c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d5a0:	ee38 8a67 	vsub.f32	s16, s16, s15
 802d5a4:	dd41      	ble.n	802d62a <__kernel_rem_pio2f+0x1a6>
 802d5a6:	f106 3cff 	add.w	ip, r6, #4294967295
 802d5aa:	ab08      	add	r3, sp, #32
 802d5ac:	f1c5 0e08 	rsb	lr, r5, #8
 802d5b0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 802d5b4:	fa47 f00e 	asr.w	r0, r7, lr
 802d5b8:	4481      	add	r9, r0
 802d5ba:	fa00 f00e 	lsl.w	r0, r0, lr
 802d5be:	1a3f      	subs	r7, r7, r0
 802d5c0:	f1c5 0007 	rsb	r0, r5, #7
 802d5c4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 802d5c8:	4107      	asrs	r7, r0
 802d5ca:	2f00      	cmp	r7, #0
 802d5cc:	dd3c      	ble.n	802d648 <__kernel_rem_pio2f+0x1c4>
 802d5ce:	f04f 0e00 	mov.w	lr, #0
 802d5d2:	f109 0901 	add.w	r9, r9, #1
 802d5d6:	4671      	mov	r1, lr
 802d5d8:	4576      	cmp	r6, lr
 802d5da:	dc67      	bgt.n	802d6ac <__kernel_rem_pio2f+0x228>
 802d5dc:	2d00      	cmp	r5, #0
 802d5de:	dd03      	ble.n	802d5e8 <__kernel_rem_pio2f+0x164>
 802d5e0:	2d01      	cmp	r5, #1
 802d5e2:	d074      	beq.n	802d6ce <__kernel_rem_pio2f+0x24a>
 802d5e4:	2d02      	cmp	r5, #2
 802d5e6:	d07b      	beq.n	802d6e0 <__kernel_rem_pio2f+0x25c>
 802d5e8:	2f02      	cmp	r7, #2
 802d5ea:	d12d      	bne.n	802d648 <__kernel_rem_pio2f+0x1c4>
 802d5ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802d5f0:	ee30 8a48 	vsub.f32	s16, s0, s16
 802d5f4:	b341      	cbz	r1, 802d648 <__kernel_rem_pio2f+0x1c4>
 802d5f6:	4628      	mov	r0, r5
 802d5f8:	9207      	str	r2, [sp, #28]
 802d5fa:	f7ff fb8f 	bl	802cd1c <scalbnf>
 802d5fe:	9a07      	ldr	r2, [sp, #28]
 802d600:	ee38 8a40 	vsub.f32	s16, s16, s0
 802d604:	e020      	b.n	802d648 <__kernel_rem_pio2f+0x1c4>
 802d606:	ee60 7a28 	vmul.f32	s15, s0, s17
 802d60a:	3f01      	subs	r7, #1
 802d60c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d614:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802d618:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d61c:	ecac 0a01 	vstmia	ip!, {s0}
 802d620:	ed90 0a00 	vldr	s0, [r0]
 802d624:	ee37 0a80 	vadd.f32	s0, s15, s0
 802d628:	e79e      	b.n	802d568 <__kernel_rem_pio2f+0xe4>
 802d62a:	d105      	bne.n	802d638 <__kernel_rem_pio2f+0x1b4>
 802d62c:	1e70      	subs	r0, r6, #1
 802d62e:	ab08      	add	r3, sp, #32
 802d630:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 802d634:	11ff      	asrs	r7, r7, #7
 802d636:	e7c8      	b.n	802d5ca <__kernel_rem_pio2f+0x146>
 802d638:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802d63c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802d640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d644:	da30      	bge.n	802d6a8 <__kernel_rem_pio2f+0x224>
 802d646:	2700      	movs	r7, #0
 802d648:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802d64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d650:	f040 809a 	bne.w	802d788 <__kernel_rem_pio2f+0x304>
 802d654:	1e74      	subs	r4, r6, #1
 802d656:	46a4      	mov	ip, r4
 802d658:	2100      	movs	r1, #0
 802d65a:	45d4      	cmp	ip, sl
 802d65c:	da47      	bge.n	802d6ee <__kernel_rem_pio2f+0x26a>
 802d65e:	2900      	cmp	r1, #0
 802d660:	d063      	beq.n	802d72a <__kernel_rem_pio2f+0x2a6>
 802d662:	ab08      	add	r3, sp, #32
 802d664:	3d08      	subs	r5, #8
 802d666:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802d66a:	2b00      	cmp	r3, #0
 802d66c:	d07f      	beq.n	802d76e <__kernel_rem_pio2f+0x2ea>
 802d66e:	4628      	mov	r0, r5
 802d670:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802d674:	f7ff fb52 	bl	802cd1c <scalbnf>
 802d678:	1c63      	adds	r3, r4, #1
 802d67a:	aa44      	add	r2, sp, #272	; 0x110
 802d67c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 802d780 <__kernel_rem_pio2f+0x2fc>
 802d680:	0099      	lsls	r1, r3, #2
 802d682:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802d686:	4623      	mov	r3, r4
 802d688:	2b00      	cmp	r3, #0
 802d68a:	f280 80ad 	bge.w	802d7e8 <__kernel_rem_pio2f+0x364>
 802d68e:	4623      	mov	r3, r4
 802d690:	2b00      	cmp	r3, #0
 802d692:	f2c0 80cb 	blt.w	802d82c <__kernel_rem_pio2f+0x3a8>
 802d696:	aa44      	add	r2, sp, #272	; 0x110
 802d698:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802d69c:	4e36      	ldr	r6, [pc, #216]	; (802d778 <__kernel_rem_pio2f+0x2f4>)
 802d69e:	eddf 7a39 	vldr	s15, [pc, #228]	; 802d784 <__kernel_rem_pio2f+0x300>
 802d6a2:	2000      	movs	r0, #0
 802d6a4:	1ae2      	subs	r2, r4, r3
 802d6a6:	e0b6      	b.n	802d816 <__kernel_rem_pio2f+0x392>
 802d6a8:	2702      	movs	r7, #2
 802d6aa:	e790      	b.n	802d5ce <__kernel_rem_pio2f+0x14a>
 802d6ac:	6820      	ldr	r0, [r4, #0]
 802d6ae:	b949      	cbnz	r1, 802d6c4 <__kernel_rem_pio2f+0x240>
 802d6b0:	b118      	cbz	r0, 802d6ba <__kernel_rem_pio2f+0x236>
 802d6b2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802d6b6:	6020      	str	r0, [r4, #0]
 802d6b8:	2001      	movs	r0, #1
 802d6ba:	f10e 0e01 	add.w	lr, lr, #1
 802d6be:	3404      	adds	r4, #4
 802d6c0:	4601      	mov	r1, r0
 802d6c2:	e789      	b.n	802d5d8 <__kernel_rem_pio2f+0x154>
 802d6c4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 802d6c8:	6020      	str	r0, [r4, #0]
 802d6ca:	4608      	mov	r0, r1
 802d6cc:	e7f5      	b.n	802d6ba <__kernel_rem_pio2f+0x236>
 802d6ce:	1e74      	subs	r4, r6, #1
 802d6d0:	ab08      	add	r3, sp, #32
 802d6d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802d6d6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 802d6da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802d6de:	e783      	b.n	802d5e8 <__kernel_rem_pio2f+0x164>
 802d6e0:	1e74      	subs	r4, r6, #1
 802d6e2:	ab08      	add	r3, sp, #32
 802d6e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802d6e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 802d6ec:	e7f5      	b.n	802d6da <__kernel_rem_pio2f+0x256>
 802d6ee:	ab08      	add	r3, sp, #32
 802d6f0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 802d6f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 802d6f8:	4301      	orrs	r1, r0
 802d6fa:	e7ae      	b.n	802d65a <__kernel_rem_pio2f+0x1d6>
 802d6fc:	3001      	adds	r0, #1
 802d6fe:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 802d702:	2f00      	cmp	r7, #0
 802d704:	d0fa      	beq.n	802d6fc <__kernel_rem_pio2f+0x278>
 802d706:	9b06      	ldr	r3, [sp, #24]
 802d708:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 802d70c:	eb0d 0403 	add.w	r4, sp, r3
 802d710:	9b01      	ldr	r3, [sp, #4]
 802d712:	18f7      	adds	r7, r6, r3
 802d714:	ab1c      	add	r3, sp, #112	; 0x70
 802d716:	f106 0c01 	add.w	ip, r6, #1
 802d71a:	3c4c      	subs	r4, #76	; 0x4c
 802d71c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802d720:	4430      	add	r0, r6
 802d722:	4560      	cmp	r0, ip
 802d724:	da04      	bge.n	802d730 <__kernel_rem_pio2f+0x2ac>
 802d726:	4606      	mov	r6, r0
 802d728:	e711      	b.n	802d54e <__kernel_rem_pio2f+0xca>
 802d72a:	9c05      	ldr	r4, [sp, #20]
 802d72c:	2001      	movs	r0, #1
 802d72e:	e7e6      	b.n	802d6fe <__kernel_rem_pio2f+0x27a>
 802d730:	9b04      	ldr	r3, [sp, #16]
 802d732:	f8dd e008 	ldr.w	lr, [sp, #8]
 802d736:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802d73a:	9306      	str	r3, [sp, #24]
 802d73c:	ee07 3a90 	vmov	s15, r3
 802d740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d744:	2600      	movs	r6, #0
 802d746:	ece7 7a01 	vstmia	r7!, {s15}
 802d74a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802d784 <__kernel_rem_pio2f+0x300>
 802d74e:	46b9      	mov	r9, r7
 802d750:	455e      	cmp	r6, fp
 802d752:	dd04      	ble.n	802d75e <__kernel_rem_pio2f+0x2da>
 802d754:	ece4 7a01 	vstmia	r4!, {s15}
 802d758:	f10c 0c01 	add.w	ip, ip, #1
 802d75c:	e7e1      	b.n	802d722 <__kernel_rem_pio2f+0x29e>
 802d75e:	ecfe 6a01 	vldmia	lr!, {s13}
 802d762:	ed39 7a01 	vldmdb	r9!, {s14}
 802d766:	3601      	adds	r6, #1
 802d768:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d76c:	e7f0      	b.n	802d750 <__kernel_rem_pio2f+0x2cc>
 802d76e:	3c01      	subs	r4, #1
 802d770:	e777      	b.n	802d662 <__kernel_rem_pio2f+0x1de>
 802d772:	bf00      	nop
 802d774:	080353ac 	.word	0x080353ac
 802d778:	08035380 	.word	0x08035380
 802d77c:	43800000 	.word	0x43800000
 802d780:	3b800000 	.word	0x3b800000
 802d784:	00000000 	.word	0x00000000
 802d788:	9b03      	ldr	r3, [sp, #12]
 802d78a:	eeb0 0a48 	vmov.f32	s0, s16
 802d78e:	1a98      	subs	r0, r3, r2
 802d790:	f7ff fac4 	bl	802cd1c <scalbnf>
 802d794:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802d77c <__kernel_rem_pio2f+0x2f8>
 802d798:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802d79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d7a0:	db19      	blt.n	802d7d6 <__kernel_rem_pio2f+0x352>
 802d7a2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802d780 <__kernel_rem_pio2f+0x2fc>
 802d7a6:	ee60 7a27 	vmul.f32	s15, s0, s15
 802d7aa:	aa08      	add	r2, sp, #32
 802d7ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d7b0:	1c74      	adds	r4, r6, #1
 802d7b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d7b6:	3508      	adds	r5, #8
 802d7b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802d7bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d7c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d7c4:	ee10 3a10 	vmov	r3, s0
 802d7c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802d7cc:	ee17 3a90 	vmov	r3, s15
 802d7d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802d7d4:	e74b      	b.n	802d66e <__kernel_rem_pio2f+0x1ea>
 802d7d6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d7da:	aa08      	add	r2, sp, #32
 802d7dc:	ee10 3a10 	vmov	r3, s0
 802d7e0:	4634      	mov	r4, r6
 802d7e2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802d7e6:	e742      	b.n	802d66e <__kernel_rem_pio2f+0x1ea>
 802d7e8:	a808      	add	r0, sp, #32
 802d7ea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802d7ee:	9001      	str	r0, [sp, #4]
 802d7f0:	ee07 0a90 	vmov	s15, r0
 802d7f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d7f8:	3b01      	subs	r3, #1
 802d7fa:	ee67 7a80 	vmul.f32	s15, s15, s0
 802d7fe:	ee20 0a07 	vmul.f32	s0, s0, s14
 802d802:	ed62 7a01 	vstmdb	r2!, {s15}
 802d806:	e73f      	b.n	802d688 <__kernel_rem_pio2f+0x204>
 802d808:	ecf6 6a01 	vldmia	r6!, {s13}
 802d80c:	ecb5 7a01 	vldmia	r5!, {s14}
 802d810:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d814:	3001      	adds	r0, #1
 802d816:	4550      	cmp	r0, sl
 802d818:	dc01      	bgt.n	802d81e <__kernel_rem_pio2f+0x39a>
 802d81a:	4290      	cmp	r0, r2
 802d81c:	ddf4      	ble.n	802d808 <__kernel_rem_pio2f+0x384>
 802d81e:	a858      	add	r0, sp, #352	; 0x160
 802d820:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802d824:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 802d828:	3b01      	subs	r3, #1
 802d82a:	e731      	b.n	802d690 <__kernel_rem_pio2f+0x20c>
 802d82c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802d82e:	2b02      	cmp	r3, #2
 802d830:	dc09      	bgt.n	802d846 <__kernel_rem_pio2f+0x3c2>
 802d832:	2b00      	cmp	r3, #0
 802d834:	dc2b      	bgt.n	802d88e <__kernel_rem_pio2f+0x40a>
 802d836:	d044      	beq.n	802d8c2 <__kernel_rem_pio2f+0x43e>
 802d838:	f009 0007 	and.w	r0, r9, #7
 802d83c:	b059      	add	sp, #356	; 0x164
 802d83e:	ecbd 8b04 	vpop	{d8-d9}
 802d842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d846:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802d848:	2b03      	cmp	r3, #3
 802d84a:	d1f5      	bne.n	802d838 <__kernel_rem_pio2f+0x3b4>
 802d84c:	aa30      	add	r2, sp, #192	; 0xc0
 802d84e:	1f0b      	subs	r3, r1, #4
 802d850:	4413      	add	r3, r2
 802d852:	461a      	mov	r2, r3
 802d854:	4620      	mov	r0, r4
 802d856:	2800      	cmp	r0, #0
 802d858:	f1a2 0204 	sub.w	r2, r2, #4
 802d85c:	dc52      	bgt.n	802d904 <__kernel_rem_pio2f+0x480>
 802d85e:	4622      	mov	r2, r4
 802d860:	2a01      	cmp	r2, #1
 802d862:	f1a3 0304 	sub.w	r3, r3, #4
 802d866:	dc5d      	bgt.n	802d924 <__kernel_rem_pio2f+0x4a0>
 802d868:	ab30      	add	r3, sp, #192	; 0xc0
 802d86a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 802d784 <__kernel_rem_pio2f+0x300>
 802d86e:	440b      	add	r3, r1
 802d870:	2c01      	cmp	r4, #1
 802d872:	dc67      	bgt.n	802d944 <__kernel_rem_pio2f+0x4c0>
 802d874:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 802d878:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 802d87c:	2f00      	cmp	r7, #0
 802d87e:	d167      	bne.n	802d950 <__kernel_rem_pio2f+0x4cc>
 802d880:	edc8 6a00 	vstr	s13, [r8]
 802d884:	ed88 7a01 	vstr	s14, [r8, #4]
 802d888:	edc8 7a02 	vstr	s15, [r8, #8]
 802d88c:	e7d4      	b.n	802d838 <__kernel_rem_pio2f+0x3b4>
 802d88e:	ab30      	add	r3, sp, #192	; 0xc0
 802d890:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 802d784 <__kernel_rem_pio2f+0x300>
 802d894:	440b      	add	r3, r1
 802d896:	4622      	mov	r2, r4
 802d898:	2a00      	cmp	r2, #0
 802d89a:	da24      	bge.n	802d8e6 <__kernel_rem_pio2f+0x462>
 802d89c:	b34f      	cbz	r7, 802d8f2 <__kernel_rem_pio2f+0x46e>
 802d89e:	eef1 7a47 	vneg.f32	s15, s14
 802d8a2:	edc8 7a00 	vstr	s15, [r8]
 802d8a6:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802d8aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d8ae:	aa31      	add	r2, sp, #196	; 0xc4
 802d8b0:	2301      	movs	r3, #1
 802d8b2:	429c      	cmp	r4, r3
 802d8b4:	da20      	bge.n	802d8f8 <__kernel_rem_pio2f+0x474>
 802d8b6:	b10f      	cbz	r7, 802d8bc <__kernel_rem_pio2f+0x438>
 802d8b8:	eef1 7a67 	vneg.f32	s15, s15
 802d8bc:	edc8 7a01 	vstr	s15, [r8, #4]
 802d8c0:	e7ba      	b.n	802d838 <__kernel_rem_pio2f+0x3b4>
 802d8c2:	ab30      	add	r3, sp, #192	; 0xc0
 802d8c4:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 802d784 <__kernel_rem_pio2f+0x300>
 802d8c8:	440b      	add	r3, r1
 802d8ca:	2c00      	cmp	r4, #0
 802d8cc:	da05      	bge.n	802d8da <__kernel_rem_pio2f+0x456>
 802d8ce:	b10f      	cbz	r7, 802d8d4 <__kernel_rem_pio2f+0x450>
 802d8d0:	eef1 7a67 	vneg.f32	s15, s15
 802d8d4:	edc8 7a00 	vstr	s15, [r8]
 802d8d8:	e7ae      	b.n	802d838 <__kernel_rem_pio2f+0x3b4>
 802d8da:	ed33 7a01 	vldmdb	r3!, {s14}
 802d8de:	3c01      	subs	r4, #1
 802d8e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d8e4:	e7f1      	b.n	802d8ca <__kernel_rem_pio2f+0x446>
 802d8e6:	ed73 7a01 	vldmdb	r3!, {s15}
 802d8ea:	3a01      	subs	r2, #1
 802d8ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 802d8f0:	e7d2      	b.n	802d898 <__kernel_rem_pio2f+0x414>
 802d8f2:	eef0 7a47 	vmov.f32	s15, s14
 802d8f6:	e7d4      	b.n	802d8a2 <__kernel_rem_pio2f+0x41e>
 802d8f8:	ecb2 7a01 	vldmia	r2!, {s14}
 802d8fc:	3301      	adds	r3, #1
 802d8fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d902:	e7d6      	b.n	802d8b2 <__kernel_rem_pio2f+0x42e>
 802d904:	edd2 7a00 	vldr	s15, [r2]
 802d908:	edd2 6a01 	vldr	s13, [r2, #4]
 802d90c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802d910:	3801      	subs	r0, #1
 802d912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d916:	ed82 7a00 	vstr	s14, [r2]
 802d91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d91e:	edc2 7a01 	vstr	s15, [r2, #4]
 802d922:	e798      	b.n	802d856 <__kernel_rem_pio2f+0x3d2>
 802d924:	edd3 7a00 	vldr	s15, [r3]
 802d928:	edd3 6a01 	vldr	s13, [r3, #4]
 802d92c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802d930:	3a01      	subs	r2, #1
 802d932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d936:	ed83 7a00 	vstr	s14, [r3]
 802d93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d93e:	edc3 7a01 	vstr	s15, [r3, #4]
 802d942:	e78d      	b.n	802d860 <__kernel_rem_pio2f+0x3dc>
 802d944:	ed33 7a01 	vldmdb	r3!, {s14}
 802d948:	3c01      	subs	r4, #1
 802d94a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d94e:	e78f      	b.n	802d870 <__kernel_rem_pio2f+0x3ec>
 802d950:	eef1 6a66 	vneg.f32	s13, s13
 802d954:	eeb1 7a47 	vneg.f32	s14, s14
 802d958:	edc8 6a00 	vstr	s13, [r8]
 802d95c:	ed88 7a01 	vstr	s14, [r8, #4]
 802d960:	eef1 7a67 	vneg.f32	s15, s15
 802d964:	e790      	b.n	802d888 <__kernel_rem_pio2f+0x404>
 802d966:	bf00      	nop

0802d968 <abort>:
 802d968:	b508      	push	{r3, lr}
 802d96a:	2006      	movs	r0, #6
 802d96c:	f000 ff1a 	bl	802e7a4 <raise>
 802d970:	2001      	movs	r0, #1
 802d972:	f7dd ff3b 	bl	800b7ec <_exit>
	...

0802d978 <__assert_func>:
 802d978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802d97a:	4614      	mov	r4, r2
 802d97c:	461a      	mov	r2, r3
 802d97e:	4b09      	ldr	r3, [pc, #36]	; (802d9a4 <__assert_func+0x2c>)
 802d980:	681b      	ldr	r3, [r3, #0]
 802d982:	4605      	mov	r5, r0
 802d984:	68d8      	ldr	r0, [r3, #12]
 802d986:	b14c      	cbz	r4, 802d99c <__assert_func+0x24>
 802d988:	4b07      	ldr	r3, [pc, #28]	; (802d9a8 <__assert_func+0x30>)
 802d98a:	9100      	str	r1, [sp, #0]
 802d98c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802d990:	4906      	ldr	r1, [pc, #24]	; (802d9ac <__assert_func+0x34>)
 802d992:	462b      	mov	r3, r5
 802d994:	f000 fe28 	bl	802e5e8 <fiprintf>
 802d998:	f7ff ffe6 	bl	802d968 <abort>
 802d99c:	4b04      	ldr	r3, [pc, #16]	; (802d9b0 <__assert_func+0x38>)
 802d99e:	461c      	mov	r4, r3
 802d9a0:	e7f3      	b.n	802d98a <__assert_func+0x12>
 802d9a2:	bf00      	nop
 802d9a4:	2000063c 	.word	0x2000063c
 802d9a8:	080353b8 	.word	0x080353b8
 802d9ac:	080353c5 	.word	0x080353c5
 802d9b0:	080353f3 	.word	0x080353f3

0802d9b4 <atexit>:
 802d9b4:	2300      	movs	r3, #0
 802d9b6:	4601      	mov	r1, r0
 802d9b8:	461a      	mov	r2, r3
 802d9ba:	4618      	mov	r0, r3
 802d9bc:	f000 bfa4 	b.w	802e908 <__register_exitproc>

0802d9c0 <calloc>:
 802d9c0:	4b02      	ldr	r3, [pc, #8]	; (802d9cc <calloc+0xc>)
 802d9c2:	460a      	mov	r2, r1
 802d9c4:	4601      	mov	r1, r0
 802d9c6:	6818      	ldr	r0, [r3, #0]
 802d9c8:	f000 b802 	b.w	802d9d0 <_calloc_r>
 802d9cc:	2000063c 	.word	0x2000063c

0802d9d0 <_calloc_r>:
 802d9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802d9d2:	fba1 2402 	umull	r2, r4, r1, r2
 802d9d6:	b94c      	cbnz	r4, 802d9ec <_calloc_r+0x1c>
 802d9d8:	4611      	mov	r1, r2
 802d9da:	9201      	str	r2, [sp, #4]
 802d9dc:	f000 f83e 	bl	802da5c <_malloc_r>
 802d9e0:	9a01      	ldr	r2, [sp, #4]
 802d9e2:	4605      	mov	r5, r0
 802d9e4:	b930      	cbnz	r0, 802d9f4 <_calloc_r+0x24>
 802d9e6:	4628      	mov	r0, r5
 802d9e8:	b003      	add	sp, #12
 802d9ea:	bd30      	pop	{r4, r5, pc}
 802d9ec:	220c      	movs	r2, #12
 802d9ee:	6002      	str	r2, [r0, #0]
 802d9f0:	2500      	movs	r5, #0
 802d9f2:	e7f8      	b.n	802d9e6 <_calloc_r+0x16>
 802d9f4:	4621      	mov	r1, r4
 802d9f6:	f000 fea5 	bl	802e744 <memset>
 802d9fa:	e7f4      	b.n	802d9e6 <_calloc_r+0x16>

0802d9fc <malloc>:
 802d9fc:	4b02      	ldr	r3, [pc, #8]	; (802da08 <malloc+0xc>)
 802d9fe:	4601      	mov	r1, r0
 802da00:	6818      	ldr	r0, [r3, #0]
 802da02:	f000 b82b 	b.w	802da5c <_malloc_r>
 802da06:	bf00      	nop
 802da08:	2000063c 	.word	0x2000063c

0802da0c <free>:
 802da0c:	4b02      	ldr	r3, [pc, #8]	; (802da18 <free+0xc>)
 802da0e:	4601      	mov	r1, r0
 802da10:	6818      	ldr	r0, [r3, #0]
 802da12:	f001 be53 	b.w	802f6bc <_free_r>
 802da16:	bf00      	nop
 802da18:	2000063c 	.word	0x2000063c

0802da1c <sbrk_aligned>:
 802da1c:	b570      	push	{r4, r5, r6, lr}
 802da1e:	4e0e      	ldr	r6, [pc, #56]	; (802da58 <sbrk_aligned+0x3c>)
 802da20:	460c      	mov	r4, r1
 802da22:	6831      	ldr	r1, [r6, #0]
 802da24:	4605      	mov	r5, r0
 802da26:	b911      	cbnz	r1, 802da2e <sbrk_aligned+0x12>
 802da28:	f000 ff10 	bl	802e84c <_sbrk_r>
 802da2c:	6030      	str	r0, [r6, #0]
 802da2e:	4621      	mov	r1, r4
 802da30:	4628      	mov	r0, r5
 802da32:	f000 ff0b 	bl	802e84c <_sbrk_r>
 802da36:	1c43      	adds	r3, r0, #1
 802da38:	d00a      	beq.n	802da50 <sbrk_aligned+0x34>
 802da3a:	1cc4      	adds	r4, r0, #3
 802da3c:	f024 0403 	bic.w	r4, r4, #3
 802da40:	42a0      	cmp	r0, r4
 802da42:	d007      	beq.n	802da54 <sbrk_aligned+0x38>
 802da44:	1a21      	subs	r1, r4, r0
 802da46:	4628      	mov	r0, r5
 802da48:	f000 ff00 	bl	802e84c <_sbrk_r>
 802da4c:	3001      	adds	r0, #1
 802da4e:	d101      	bne.n	802da54 <sbrk_aligned+0x38>
 802da50:	f04f 34ff 	mov.w	r4, #4294967295
 802da54:	4620      	mov	r0, r4
 802da56:	bd70      	pop	{r4, r5, r6, pc}
 802da58:	20006f08 	.word	0x20006f08

0802da5c <_malloc_r>:
 802da5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802da60:	1ccd      	adds	r5, r1, #3
 802da62:	f025 0503 	bic.w	r5, r5, #3
 802da66:	3508      	adds	r5, #8
 802da68:	2d0c      	cmp	r5, #12
 802da6a:	bf38      	it	cc
 802da6c:	250c      	movcc	r5, #12
 802da6e:	2d00      	cmp	r5, #0
 802da70:	4607      	mov	r7, r0
 802da72:	db01      	blt.n	802da78 <_malloc_r+0x1c>
 802da74:	42a9      	cmp	r1, r5
 802da76:	d905      	bls.n	802da84 <_malloc_r+0x28>
 802da78:	230c      	movs	r3, #12
 802da7a:	603b      	str	r3, [r7, #0]
 802da7c:	2600      	movs	r6, #0
 802da7e:	4630      	mov	r0, r6
 802da80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802da84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802db58 <_malloc_r+0xfc>
 802da88:	f000 f868 	bl	802db5c <__malloc_lock>
 802da8c:	f8d8 3000 	ldr.w	r3, [r8]
 802da90:	461c      	mov	r4, r3
 802da92:	bb5c      	cbnz	r4, 802daec <_malloc_r+0x90>
 802da94:	4629      	mov	r1, r5
 802da96:	4638      	mov	r0, r7
 802da98:	f7ff ffc0 	bl	802da1c <sbrk_aligned>
 802da9c:	1c43      	adds	r3, r0, #1
 802da9e:	4604      	mov	r4, r0
 802daa0:	d155      	bne.n	802db4e <_malloc_r+0xf2>
 802daa2:	f8d8 4000 	ldr.w	r4, [r8]
 802daa6:	4626      	mov	r6, r4
 802daa8:	2e00      	cmp	r6, #0
 802daaa:	d145      	bne.n	802db38 <_malloc_r+0xdc>
 802daac:	2c00      	cmp	r4, #0
 802daae:	d048      	beq.n	802db42 <_malloc_r+0xe6>
 802dab0:	6823      	ldr	r3, [r4, #0]
 802dab2:	4631      	mov	r1, r6
 802dab4:	4638      	mov	r0, r7
 802dab6:	eb04 0903 	add.w	r9, r4, r3
 802daba:	f000 fec7 	bl	802e84c <_sbrk_r>
 802dabe:	4581      	cmp	r9, r0
 802dac0:	d13f      	bne.n	802db42 <_malloc_r+0xe6>
 802dac2:	6821      	ldr	r1, [r4, #0]
 802dac4:	1a6d      	subs	r5, r5, r1
 802dac6:	4629      	mov	r1, r5
 802dac8:	4638      	mov	r0, r7
 802daca:	f7ff ffa7 	bl	802da1c <sbrk_aligned>
 802dace:	3001      	adds	r0, #1
 802dad0:	d037      	beq.n	802db42 <_malloc_r+0xe6>
 802dad2:	6823      	ldr	r3, [r4, #0]
 802dad4:	442b      	add	r3, r5
 802dad6:	6023      	str	r3, [r4, #0]
 802dad8:	f8d8 3000 	ldr.w	r3, [r8]
 802dadc:	2b00      	cmp	r3, #0
 802dade:	d038      	beq.n	802db52 <_malloc_r+0xf6>
 802dae0:	685a      	ldr	r2, [r3, #4]
 802dae2:	42a2      	cmp	r2, r4
 802dae4:	d12b      	bne.n	802db3e <_malloc_r+0xe2>
 802dae6:	2200      	movs	r2, #0
 802dae8:	605a      	str	r2, [r3, #4]
 802daea:	e00f      	b.n	802db0c <_malloc_r+0xb0>
 802daec:	6822      	ldr	r2, [r4, #0]
 802daee:	1b52      	subs	r2, r2, r5
 802daf0:	d41f      	bmi.n	802db32 <_malloc_r+0xd6>
 802daf2:	2a0b      	cmp	r2, #11
 802daf4:	d917      	bls.n	802db26 <_malloc_r+0xca>
 802daf6:	1961      	adds	r1, r4, r5
 802daf8:	42a3      	cmp	r3, r4
 802dafa:	6025      	str	r5, [r4, #0]
 802dafc:	bf18      	it	ne
 802dafe:	6059      	strne	r1, [r3, #4]
 802db00:	6863      	ldr	r3, [r4, #4]
 802db02:	bf08      	it	eq
 802db04:	f8c8 1000 	streq.w	r1, [r8]
 802db08:	5162      	str	r2, [r4, r5]
 802db0a:	604b      	str	r3, [r1, #4]
 802db0c:	4638      	mov	r0, r7
 802db0e:	f104 060b 	add.w	r6, r4, #11
 802db12:	f000 f829 	bl	802db68 <__malloc_unlock>
 802db16:	f026 0607 	bic.w	r6, r6, #7
 802db1a:	1d23      	adds	r3, r4, #4
 802db1c:	1af2      	subs	r2, r6, r3
 802db1e:	d0ae      	beq.n	802da7e <_malloc_r+0x22>
 802db20:	1b9b      	subs	r3, r3, r6
 802db22:	50a3      	str	r3, [r4, r2]
 802db24:	e7ab      	b.n	802da7e <_malloc_r+0x22>
 802db26:	42a3      	cmp	r3, r4
 802db28:	6862      	ldr	r2, [r4, #4]
 802db2a:	d1dd      	bne.n	802dae8 <_malloc_r+0x8c>
 802db2c:	f8c8 2000 	str.w	r2, [r8]
 802db30:	e7ec      	b.n	802db0c <_malloc_r+0xb0>
 802db32:	4623      	mov	r3, r4
 802db34:	6864      	ldr	r4, [r4, #4]
 802db36:	e7ac      	b.n	802da92 <_malloc_r+0x36>
 802db38:	4634      	mov	r4, r6
 802db3a:	6876      	ldr	r6, [r6, #4]
 802db3c:	e7b4      	b.n	802daa8 <_malloc_r+0x4c>
 802db3e:	4613      	mov	r3, r2
 802db40:	e7cc      	b.n	802dadc <_malloc_r+0x80>
 802db42:	230c      	movs	r3, #12
 802db44:	603b      	str	r3, [r7, #0]
 802db46:	4638      	mov	r0, r7
 802db48:	f000 f80e 	bl	802db68 <__malloc_unlock>
 802db4c:	e797      	b.n	802da7e <_malloc_r+0x22>
 802db4e:	6025      	str	r5, [r4, #0]
 802db50:	e7dc      	b.n	802db0c <_malloc_r+0xb0>
 802db52:	605b      	str	r3, [r3, #4]
 802db54:	deff      	udf	#255	; 0xff
 802db56:	bf00      	nop
 802db58:	20006f04 	.word	0x20006f04

0802db5c <__malloc_lock>:
 802db5c:	4801      	ldr	r0, [pc, #4]	; (802db64 <__malloc_lock+0x8>)
 802db5e:	f000 bec2 	b.w	802e8e6 <__retarget_lock_acquire_recursive>
 802db62:	bf00      	nop
 802db64:	2000704d 	.word	0x2000704d

0802db68 <__malloc_unlock>:
 802db68:	4801      	ldr	r0, [pc, #4]	; (802db70 <__malloc_unlock+0x8>)
 802db6a:	f000 bebd 	b.w	802e8e8 <__retarget_lock_release_recursive>
 802db6e:	bf00      	nop
 802db70:	2000704d 	.word	0x2000704d

0802db74 <_realloc_r>:
 802db74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802db78:	4680      	mov	r8, r0
 802db7a:	4614      	mov	r4, r2
 802db7c:	460e      	mov	r6, r1
 802db7e:	b921      	cbnz	r1, 802db8a <_realloc_r+0x16>
 802db80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802db84:	4611      	mov	r1, r2
 802db86:	f7ff bf69 	b.w	802da5c <_malloc_r>
 802db8a:	b92a      	cbnz	r2, 802db98 <_realloc_r+0x24>
 802db8c:	f001 fd96 	bl	802f6bc <_free_r>
 802db90:	4625      	mov	r5, r4
 802db92:	4628      	mov	r0, r5
 802db94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802db98:	f002 f96a 	bl	802fe70 <_malloc_usable_size_r>
 802db9c:	4284      	cmp	r4, r0
 802db9e:	4607      	mov	r7, r0
 802dba0:	d802      	bhi.n	802dba8 <_realloc_r+0x34>
 802dba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802dba6:	d812      	bhi.n	802dbce <_realloc_r+0x5a>
 802dba8:	4621      	mov	r1, r4
 802dbaa:	4640      	mov	r0, r8
 802dbac:	f7ff ff56 	bl	802da5c <_malloc_r>
 802dbb0:	4605      	mov	r5, r0
 802dbb2:	2800      	cmp	r0, #0
 802dbb4:	d0ed      	beq.n	802db92 <_realloc_r+0x1e>
 802dbb6:	42bc      	cmp	r4, r7
 802dbb8:	4622      	mov	r2, r4
 802dbba:	4631      	mov	r1, r6
 802dbbc:	bf28      	it	cs
 802dbbe:	463a      	movcs	r2, r7
 802dbc0:	f000 fe93 	bl	802e8ea <memcpy>
 802dbc4:	4631      	mov	r1, r6
 802dbc6:	4640      	mov	r0, r8
 802dbc8:	f001 fd78 	bl	802f6bc <_free_r>
 802dbcc:	e7e1      	b.n	802db92 <_realloc_r+0x1e>
 802dbce:	4635      	mov	r5, r6
 802dbd0:	e7df      	b.n	802db92 <_realloc_r+0x1e>

0802dbd2 <__cvt>:
 802dbd2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802dbd6:	ec55 4b10 	vmov	r4, r5, d0
 802dbda:	2d00      	cmp	r5, #0
 802dbdc:	460e      	mov	r6, r1
 802dbde:	4619      	mov	r1, r3
 802dbe0:	462b      	mov	r3, r5
 802dbe2:	bfbb      	ittet	lt
 802dbe4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802dbe8:	461d      	movlt	r5, r3
 802dbea:	2300      	movge	r3, #0
 802dbec:	232d      	movlt	r3, #45	; 0x2d
 802dbee:	700b      	strb	r3, [r1, #0]
 802dbf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802dbf2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802dbf6:	4691      	mov	r9, r2
 802dbf8:	f023 0820 	bic.w	r8, r3, #32
 802dbfc:	bfbc      	itt	lt
 802dbfe:	4622      	movlt	r2, r4
 802dc00:	4614      	movlt	r4, r2
 802dc02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802dc06:	d005      	beq.n	802dc14 <__cvt+0x42>
 802dc08:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802dc0c:	d100      	bne.n	802dc10 <__cvt+0x3e>
 802dc0e:	3601      	adds	r6, #1
 802dc10:	2102      	movs	r1, #2
 802dc12:	e000      	b.n	802dc16 <__cvt+0x44>
 802dc14:	2103      	movs	r1, #3
 802dc16:	ab03      	add	r3, sp, #12
 802dc18:	9301      	str	r3, [sp, #4]
 802dc1a:	ab02      	add	r3, sp, #8
 802dc1c:	9300      	str	r3, [sp, #0]
 802dc1e:	ec45 4b10 	vmov	d0, r4, r5
 802dc22:	4653      	mov	r3, sl
 802dc24:	4632      	mov	r2, r6
 802dc26:	f000 ff57 	bl	802ead8 <_dtoa_r>
 802dc2a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 802dc2e:	4607      	mov	r7, r0
 802dc30:	d102      	bne.n	802dc38 <__cvt+0x66>
 802dc32:	f019 0f01 	tst.w	r9, #1
 802dc36:	d022      	beq.n	802dc7e <__cvt+0xac>
 802dc38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802dc3c:	eb07 0906 	add.w	r9, r7, r6
 802dc40:	d110      	bne.n	802dc64 <__cvt+0x92>
 802dc42:	783b      	ldrb	r3, [r7, #0]
 802dc44:	2b30      	cmp	r3, #48	; 0x30
 802dc46:	d10a      	bne.n	802dc5e <__cvt+0x8c>
 802dc48:	2200      	movs	r2, #0
 802dc4a:	2300      	movs	r3, #0
 802dc4c:	4620      	mov	r0, r4
 802dc4e:	4629      	mov	r1, r5
 802dc50:	f7d2 ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 802dc54:	b918      	cbnz	r0, 802dc5e <__cvt+0x8c>
 802dc56:	f1c6 0601 	rsb	r6, r6, #1
 802dc5a:	f8ca 6000 	str.w	r6, [sl]
 802dc5e:	f8da 3000 	ldr.w	r3, [sl]
 802dc62:	4499      	add	r9, r3
 802dc64:	2200      	movs	r2, #0
 802dc66:	2300      	movs	r3, #0
 802dc68:	4620      	mov	r0, r4
 802dc6a:	4629      	mov	r1, r5
 802dc6c:	f7d2 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 802dc70:	b108      	cbz	r0, 802dc76 <__cvt+0xa4>
 802dc72:	f8cd 900c 	str.w	r9, [sp, #12]
 802dc76:	2230      	movs	r2, #48	; 0x30
 802dc78:	9b03      	ldr	r3, [sp, #12]
 802dc7a:	454b      	cmp	r3, r9
 802dc7c:	d307      	bcc.n	802dc8e <__cvt+0xbc>
 802dc7e:	9b03      	ldr	r3, [sp, #12]
 802dc80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802dc82:	1bdb      	subs	r3, r3, r7
 802dc84:	4638      	mov	r0, r7
 802dc86:	6013      	str	r3, [r2, #0]
 802dc88:	b004      	add	sp, #16
 802dc8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802dc8e:	1c59      	adds	r1, r3, #1
 802dc90:	9103      	str	r1, [sp, #12]
 802dc92:	701a      	strb	r2, [r3, #0]
 802dc94:	e7f0      	b.n	802dc78 <__cvt+0xa6>

0802dc96 <__exponent>:
 802dc96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802dc98:	4603      	mov	r3, r0
 802dc9a:	2900      	cmp	r1, #0
 802dc9c:	bfb8      	it	lt
 802dc9e:	4249      	neglt	r1, r1
 802dca0:	f803 2b02 	strb.w	r2, [r3], #2
 802dca4:	bfb4      	ite	lt
 802dca6:	222d      	movlt	r2, #45	; 0x2d
 802dca8:	222b      	movge	r2, #43	; 0x2b
 802dcaa:	2909      	cmp	r1, #9
 802dcac:	7042      	strb	r2, [r0, #1]
 802dcae:	dd2a      	ble.n	802dd06 <__exponent+0x70>
 802dcb0:	f10d 0207 	add.w	r2, sp, #7
 802dcb4:	4617      	mov	r7, r2
 802dcb6:	260a      	movs	r6, #10
 802dcb8:	4694      	mov	ip, r2
 802dcba:	fb91 f5f6 	sdiv	r5, r1, r6
 802dcbe:	fb06 1415 	mls	r4, r6, r5, r1
 802dcc2:	3430      	adds	r4, #48	; 0x30
 802dcc4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 802dcc8:	460c      	mov	r4, r1
 802dcca:	2c63      	cmp	r4, #99	; 0x63
 802dccc:	f102 32ff 	add.w	r2, r2, #4294967295
 802dcd0:	4629      	mov	r1, r5
 802dcd2:	dcf1      	bgt.n	802dcb8 <__exponent+0x22>
 802dcd4:	3130      	adds	r1, #48	; 0x30
 802dcd6:	f1ac 0402 	sub.w	r4, ip, #2
 802dcda:	f802 1c01 	strb.w	r1, [r2, #-1]
 802dcde:	1c41      	adds	r1, r0, #1
 802dce0:	4622      	mov	r2, r4
 802dce2:	42ba      	cmp	r2, r7
 802dce4:	d30a      	bcc.n	802dcfc <__exponent+0x66>
 802dce6:	f10d 0209 	add.w	r2, sp, #9
 802dcea:	eba2 020c 	sub.w	r2, r2, ip
 802dcee:	42bc      	cmp	r4, r7
 802dcf0:	bf88      	it	hi
 802dcf2:	2200      	movhi	r2, #0
 802dcf4:	4413      	add	r3, r2
 802dcf6:	1a18      	subs	r0, r3, r0
 802dcf8:	b003      	add	sp, #12
 802dcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802dcfc:	f812 5b01 	ldrb.w	r5, [r2], #1
 802dd00:	f801 5f01 	strb.w	r5, [r1, #1]!
 802dd04:	e7ed      	b.n	802dce2 <__exponent+0x4c>
 802dd06:	2330      	movs	r3, #48	; 0x30
 802dd08:	3130      	adds	r1, #48	; 0x30
 802dd0a:	7083      	strb	r3, [r0, #2]
 802dd0c:	70c1      	strb	r1, [r0, #3]
 802dd0e:	1d03      	adds	r3, r0, #4
 802dd10:	e7f1      	b.n	802dcf6 <__exponent+0x60>
	...

0802dd14 <_printf_float>:
 802dd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dd18:	ed2d 8b02 	vpush	{d8}
 802dd1c:	b08d      	sub	sp, #52	; 0x34
 802dd1e:	460c      	mov	r4, r1
 802dd20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802dd24:	4616      	mov	r6, r2
 802dd26:	461f      	mov	r7, r3
 802dd28:	4605      	mov	r5, r0
 802dd2a:	f000 fd43 	bl	802e7b4 <_localeconv_r>
 802dd2e:	f8d0 a000 	ldr.w	sl, [r0]
 802dd32:	4650      	mov	r0, sl
 802dd34:	f7d2 fa9c 	bl	8000270 <strlen>
 802dd38:	2300      	movs	r3, #0
 802dd3a:	930a      	str	r3, [sp, #40]	; 0x28
 802dd3c:	6823      	ldr	r3, [r4, #0]
 802dd3e:	9305      	str	r3, [sp, #20]
 802dd40:	f8d8 3000 	ldr.w	r3, [r8]
 802dd44:	f894 b018 	ldrb.w	fp, [r4, #24]
 802dd48:	3307      	adds	r3, #7
 802dd4a:	f023 0307 	bic.w	r3, r3, #7
 802dd4e:	f103 0208 	add.w	r2, r3, #8
 802dd52:	f8c8 2000 	str.w	r2, [r8]
 802dd56:	e9d3 8900 	ldrd	r8, r9, [r3]
 802dd5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802dd5e:	9307      	str	r3, [sp, #28]
 802dd60:	f8cd 8018 	str.w	r8, [sp, #24]
 802dd64:	ee08 0a10 	vmov	s16, r0
 802dd68:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 802dd6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802dd70:	4b9e      	ldr	r3, [pc, #632]	; (802dfec <_printf_float+0x2d8>)
 802dd72:	f04f 32ff 	mov.w	r2, #4294967295
 802dd76:	f7d2 fed9 	bl	8000b2c <__aeabi_dcmpun>
 802dd7a:	bb88      	cbnz	r0, 802dde0 <_printf_float+0xcc>
 802dd7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802dd80:	4b9a      	ldr	r3, [pc, #616]	; (802dfec <_printf_float+0x2d8>)
 802dd82:	f04f 32ff 	mov.w	r2, #4294967295
 802dd86:	f7d2 feb3 	bl	8000af0 <__aeabi_dcmple>
 802dd8a:	bb48      	cbnz	r0, 802dde0 <_printf_float+0xcc>
 802dd8c:	2200      	movs	r2, #0
 802dd8e:	2300      	movs	r3, #0
 802dd90:	4640      	mov	r0, r8
 802dd92:	4649      	mov	r1, r9
 802dd94:	f7d2 fea2 	bl	8000adc <__aeabi_dcmplt>
 802dd98:	b110      	cbz	r0, 802dda0 <_printf_float+0x8c>
 802dd9a:	232d      	movs	r3, #45	; 0x2d
 802dd9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802dda0:	4a93      	ldr	r2, [pc, #588]	; (802dff0 <_printf_float+0x2dc>)
 802dda2:	4b94      	ldr	r3, [pc, #592]	; (802dff4 <_printf_float+0x2e0>)
 802dda4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802dda8:	bf94      	ite	ls
 802ddaa:	4690      	movls	r8, r2
 802ddac:	4698      	movhi	r8, r3
 802ddae:	2303      	movs	r3, #3
 802ddb0:	6123      	str	r3, [r4, #16]
 802ddb2:	9b05      	ldr	r3, [sp, #20]
 802ddb4:	f023 0304 	bic.w	r3, r3, #4
 802ddb8:	6023      	str	r3, [r4, #0]
 802ddba:	f04f 0900 	mov.w	r9, #0
 802ddbe:	9700      	str	r7, [sp, #0]
 802ddc0:	4633      	mov	r3, r6
 802ddc2:	aa0b      	add	r2, sp, #44	; 0x2c
 802ddc4:	4621      	mov	r1, r4
 802ddc6:	4628      	mov	r0, r5
 802ddc8:	f000 f9da 	bl	802e180 <_printf_common>
 802ddcc:	3001      	adds	r0, #1
 802ddce:	f040 8090 	bne.w	802def2 <_printf_float+0x1de>
 802ddd2:	f04f 30ff 	mov.w	r0, #4294967295
 802ddd6:	b00d      	add	sp, #52	; 0x34
 802ddd8:	ecbd 8b02 	vpop	{d8}
 802dddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dde0:	4642      	mov	r2, r8
 802dde2:	464b      	mov	r3, r9
 802dde4:	4640      	mov	r0, r8
 802dde6:	4649      	mov	r1, r9
 802dde8:	f7d2 fea0 	bl	8000b2c <__aeabi_dcmpun>
 802ddec:	b140      	cbz	r0, 802de00 <_printf_float+0xec>
 802ddee:	464b      	mov	r3, r9
 802ddf0:	2b00      	cmp	r3, #0
 802ddf2:	bfbc      	itt	lt
 802ddf4:	232d      	movlt	r3, #45	; 0x2d
 802ddf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802ddfa:	4a7f      	ldr	r2, [pc, #508]	; (802dff8 <_printf_float+0x2e4>)
 802ddfc:	4b7f      	ldr	r3, [pc, #508]	; (802dffc <_printf_float+0x2e8>)
 802ddfe:	e7d1      	b.n	802dda4 <_printf_float+0x90>
 802de00:	6863      	ldr	r3, [r4, #4]
 802de02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802de06:	9206      	str	r2, [sp, #24]
 802de08:	1c5a      	adds	r2, r3, #1
 802de0a:	d13f      	bne.n	802de8c <_printf_float+0x178>
 802de0c:	2306      	movs	r3, #6
 802de0e:	6063      	str	r3, [r4, #4]
 802de10:	9b05      	ldr	r3, [sp, #20]
 802de12:	6861      	ldr	r1, [r4, #4]
 802de14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802de18:	2300      	movs	r3, #0
 802de1a:	9303      	str	r3, [sp, #12]
 802de1c:	ab0a      	add	r3, sp, #40	; 0x28
 802de1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 802de22:	ab09      	add	r3, sp, #36	; 0x24
 802de24:	ec49 8b10 	vmov	d0, r8, r9
 802de28:	9300      	str	r3, [sp, #0]
 802de2a:	6022      	str	r2, [r4, #0]
 802de2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802de30:	4628      	mov	r0, r5
 802de32:	f7ff fece 	bl	802dbd2 <__cvt>
 802de36:	9b06      	ldr	r3, [sp, #24]
 802de38:	9909      	ldr	r1, [sp, #36]	; 0x24
 802de3a:	2b47      	cmp	r3, #71	; 0x47
 802de3c:	4680      	mov	r8, r0
 802de3e:	d108      	bne.n	802de52 <_printf_float+0x13e>
 802de40:	1cc8      	adds	r0, r1, #3
 802de42:	db02      	blt.n	802de4a <_printf_float+0x136>
 802de44:	6863      	ldr	r3, [r4, #4]
 802de46:	4299      	cmp	r1, r3
 802de48:	dd41      	ble.n	802dece <_printf_float+0x1ba>
 802de4a:	f1ab 0302 	sub.w	r3, fp, #2
 802de4e:	fa5f fb83 	uxtb.w	fp, r3
 802de52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802de56:	d820      	bhi.n	802de9a <_printf_float+0x186>
 802de58:	3901      	subs	r1, #1
 802de5a:	465a      	mov	r2, fp
 802de5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802de60:	9109      	str	r1, [sp, #36]	; 0x24
 802de62:	f7ff ff18 	bl	802dc96 <__exponent>
 802de66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802de68:	1813      	adds	r3, r2, r0
 802de6a:	2a01      	cmp	r2, #1
 802de6c:	4681      	mov	r9, r0
 802de6e:	6123      	str	r3, [r4, #16]
 802de70:	dc02      	bgt.n	802de78 <_printf_float+0x164>
 802de72:	6822      	ldr	r2, [r4, #0]
 802de74:	07d2      	lsls	r2, r2, #31
 802de76:	d501      	bpl.n	802de7c <_printf_float+0x168>
 802de78:	3301      	adds	r3, #1
 802de7a:	6123      	str	r3, [r4, #16]
 802de7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802de80:	2b00      	cmp	r3, #0
 802de82:	d09c      	beq.n	802ddbe <_printf_float+0xaa>
 802de84:	232d      	movs	r3, #45	; 0x2d
 802de86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802de8a:	e798      	b.n	802ddbe <_printf_float+0xaa>
 802de8c:	9a06      	ldr	r2, [sp, #24]
 802de8e:	2a47      	cmp	r2, #71	; 0x47
 802de90:	d1be      	bne.n	802de10 <_printf_float+0xfc>
 802de92:	2b00      	cmp	r3, #0
 802de94:	d1bc      	bne.n	802de10 <_printf_float+0xfc>
 802de96:	2301      	movs	r3, #1
 802de98:	e7b9      	b.n	802de0e <_printf_float+0xfa>
 802de9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802de9e:	d118      	bne.n	802ded2 <_printf_float+0x1be>
 802dea0:	2900      	cmp	r1, #0
 802dea2:	6863      	ldr	r3, [r4, #4]
 802dea4:	dd0b      	ble.n	802debe <_printf_float+0x1aa>
 802dea6:	6121      	str	r1, [r4, #16]
 802dea8:	b913      	cbnz	r3, 802deb0 <_printf_float+0x19c>
 802deaa:	6822      	ldr	r2, [r4, #0]
 802deac:	07d0      	lsls	r0, r2, #31
 802deae:	d502      	bpl.n	802deb6 <_printf_float+0x1a2>
 802deb0:	3301      	adds	r3, #1
 802deb2:	440b      	add	r3, r1
 802deb4:	6123      	str	r3, [r4, #16]
 802deb6:	65a1      	str	r1, [r4, #88]	; 0x58
 802deb8:	f04f 0900 	mov.w	r9, #0
 802debc:	e7de      	b.n	802de7c <_printf_float+0x168>
 802debe:	b913      	cbnz	r3, 802dec6 <_printf_float+0x1b2>
 802dec0:	6822      	ldr	r2, [r4, #0]
 802dec2:	07d2      	lsls	r2, r2, #31
 802dec4:	d501      	bpl.n	802deca <_printf_float+0x1b6>
 802dec6:	3302      	adds	r3, #2
 802dec8:	e7f4      	b.n	802deb4 <_printf_float+0x1a0>
 802deca:	2301      	movs	r3, #1
 802decc:	e7f2      	b.n	802deb4 <_printf_float+0x1a0>
 802dece:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802ded2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ded4:	4299      	cmp	r1, r3
 802ded6:	db05      	blt.n	802dee4 <_printf_float+0x1d0>
 802ded8:	6823      	ldr	r3, [r4, #0]
 802deda:	6121      	str	r1, [r4, #16]
 802dedc:	07d8      	lsls	r0, r3, #31
 802dede:	d5ea      	bpl.n	802deb6 <_printf_float+0x1a2>
 802dee0:	1c4b      	adds	r3, r1, #1
 802dee2:	e7e7      	b.n	802deb4 <_printf_float+0x1a0>
 802dee4:	2900      	cmp	r1, #0
 802dee6:	bfd4      	ite	le
 802dee8:	f1c1 0202 	rsble	r2, r1, #2
 802deec:	2201      	movgt	r2, #1
 802deee:	4413      	add	r3, r2
 802def0:	e7e0      	b.n	802deb4 <_printf_float+0x1a0>
 802def2:	6823      	ldr	r3, [r4, #0]
 802def4:	055a      	lsls	r2, r3, #21
 802def6:	d407      	bmi.n	802df08 <_printf_float+0x1f4>
 802def8:	6923      	ldr	r3, [r4, #16]
 802defa:	4642      	mov	r2, r8
 802defc:	4631      	mov	r1, r6
 802defe:	4628      	mov	r0, r5
 802df00:	47b8      	blx	r7
 802df02:	3001      	adds	r0, #1
 802df04:	d12c      	bne.n	802df60 <_printf_float+0x24c>
 802df06:	e764      	b.n	802ddd2 <_printf_float+0xbe>
 802df08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802df0c:	f240 80e0 	bls.w	802e0d0 <_printf_float+0x3bc>
 802df10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802df14:	2200      	movs	r2, #0
 802df16:	2300      	movs	r3, #0
 802df18:	f7d2 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 802df1c:	2800      	cmp	r0, #0
 802df1e:	d034      	beq.n	802df8a <_printf_float+0x276>
 802df20:	4a37      	ldr	r2, [pc, #220]	; (802e000 <_printf_float+0x2ec>)
 802df22:	2301      	movs	r3, #1
 802df24:	4631      	mov	r1, r6
 802df26:	4628      	mov	r0, r5
 802df28:	47b8      	blx	r7
 802df2a:	3001      	adds	r0, #1
 802df2c:	f43f af51 	beq.w	802ddd2 <_printf_float+0xbe>
 802df30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802df34:	429a      	cmp	r2, r3
 802df36:	db02      	blt.n	802df3e <_printf_float+0x22a>
 802df38:	6823      	ldr	r3, [r4, #0]
 802df3a:	07d8      	lsls	r0, r3, #31
 802df3c:	d510      	bpl.n	802df60 <_printf_float+0x24c>
 802df3e:	ee18 3a10 	vmov	r3, s16
 802df42:	4652      	mov	r2, sl
 802df44:	4631      	mov	r1, r6
 802df46:	4628      	mov	r0, r5
 802df48:	47b8      	blx	r7
 802df4a:	3001      	adds	r0, #1
 802df4c:	f43f af41 	beq.w	802ddd2 <_printf_float+0xbe>
 802df50:	f04f 0800 	mov.w	r8, #0
 802df54:	f104 091a 	add.w	r9, r4, #26
 802df58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802df5a:	3b01      	subs	r3, #1
 802df5c:	4543      	cmp	r3, r8
 802df5e:	dc09      	bgt.n	802df74 <_printf_float+0x260>
 802df60:	6823      	ldr	r3, [r4, #0]
 802df62:	079b      	lsls	r3, r3, #30
 802df64:	f100 8107 	bmi.w	802e176 <_printf_float+0x462>
 802df68:	68e0      	ldr	r0, [r4, #12]
 802df6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802df6c:	4298      	cmp	r0, r3
 802df6e:	bfb8      	it	lt
 802df70:	4618      	movlt	r0, r3
 802df72:	e730      	b.n	802ddd6 <_printf_float+0xc2>
 802df74:	2301      	movs	r3, #1
 802df76:	464a      	mov	r2, r9
 802df78:	4631      	mov	r1, r6
 802df7a:	4628      	mov	r0, r5
 802df7c:	47b8      	blx	r7
 802df7e:	3001      	adds	r0, #1
 802df80:	f43f af27 	beq.w	802ddd2 <_printf_float+0xbe>
 802df84:	f108 0801 	add.w	r8, r8, #1
 802df88:	e7e6      	b.n	802df58 <_printf_float+0x244>
 802df8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802df8c:	2b00      	cmp	r3, #0
 802df8e:	dc39      	bgt.n	802e004 <_printf_float+0x2f0>
 802df90:	4a1b      	ldr	r2, [pc, #108]	; (802e000 <_printf_float+0x2ec>)
 802df92:	2301      	movs	r3, #1
 802df94:	4631      	mov	r1, r6
 802df96:	4628      	mov	r0, r5
 802df98:	47b8      	blx	r7
 802df9a:	3001      	adds	r0, #1
 802df9c:	f43f af19 	beq.w	802ddd2 <_printf_float+0xbe>
 802dfa0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802dfa4:	4313      	orrs	r3, r2
 802dfa6:	d102      	bne.n	802dfae <_printf_float+0x29a>
 802dfa8:	6823      	ldr	r3, [r4, #0]
 802dfaa:	07d9      	lsls	r1, r3, #31
 802dfac:	d5d8      	bpl.n	802df60 <_printf_float+0x24c>
 802dfae:	ee18 3a10 	vmov	r3, s16
 802dfb2:	4652      	mov	r2, sl
 802dfb4:	4631      	mov	r1, r6
 802dfb6:	4628      	mov	r0, r5
 802dfb8:	47b8      	blx	r7
 802dfba:	3001      	adds	r0, #1
 802dfbc:	f43f af09 	beq.w	802ddd2 <_printf_float+0xbe>
 802dfc0:	f04f 0900 	mov.w	r9, #0
 802dfc4:	f104 0a1a 	add.w	sl, r4, #26
 802dfc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802dfca:	425b      	negs	r3, r3
 802dfcc:	454b      	cmp	r3, r9
 802dfce:	dc01      	bgt.n	802dfd4 <_printf_float+0x2c0>
 802dfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802dfd2:	e792      	b.n	802defa <_printf_float+0x1e6>
 802dfd4:	2301      	movs	r3, #1
 802dfd6:	4652      	mov	r2, sl
 802dfd8:	4631      	mov	r1, r6
 802dfda:	4628      	mov	r0, r5
 802dfdc:	47b8      	blx	r7
 802dfde:	3001      	adds	r0, #1
 802dfe0:	f43f aef7 	beq.w	802ddd2 <_printf_float+0xbe>
 802dfe4:	f109 0901 	add.w	r9, r9, #1
 802dfe8:	e7ee      	b.n	802dfc8 <_printf_float+0x2b4>
 802dfea:	bf00      	nop
 802dfec:	7fefffff 	.word	0x7fefffff
 802dff0:	080354f5 	.word	0x080354f5
 802dff4:	080354f9 	.word	0x080354f9
 802dff8:	080354fd 	.word	0x080354fd
 802dffc:	08035501 	.word	0x08035501
 802e000:	08035505 	.word	0x08035505
 802e004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802e006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802e008:	429a      	cmp	r2, r3
 802e00a:	bfa8      	it	ge
 802e00c:	461a      	movge	r2, r3
 802e00e:	2a00      	cmp	r2, #0
 802e010:	4691      	mov	r9, r2
 802e012:	dc37      	bgt.n	802e084 <_printf_float+0x370>
 802e014:	f04f 0b00 	mov.w	fp, #0
 802e018:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802e01c:	f104 021a 	add.w	r2, r4, #26
 802e020:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802e022:	9305      	str	r3, [sp, #20]
 802e024:	eba3 0309 	sub.w	r3, r3, r9
 802e028:	455b      	cmp	r3, fp
 802e02a:	dc33      	bgt.n	802e094 <_printf_float+0x380>
 802e02c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802e030:	429a      	cmp	r2, r3
 802e032:	db3b      	blt.n	802e0ac <_printf_float+0x398>
 802e034:	6823      	ldr	r3, [r4, #0]
 802e036:	07da      	lsls	r2, r3, #31
 802e038:	d438      	bmi.n	802e0ac <_printf_float+0x398>
 802e03a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802e03e:	eba2 0903 	sub.w	r9, r2, r3
 802e042:	9b05      	ldr	r3, [sp, #20]
 802e044:	1ad2      	subs	r2, r2, r3
 802e046:	4591      	cmp	r9, r2
 802e048:	bfa8      	it	ge
 802e04a:	4691      	movge	r9, r2
 802e04c:	f1b9 0f00 	cmp.w	r9, #0
 802e050:	dc35      	bgt.n	802e0be <_printf_float+0x3aa>
 802e052:	f04f 0800 	mov.w	r8, #0
 802e056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802e05a:	f104 0a1a 	add.w	sl, r4, #26
 802e05e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802e062:	1a9b      	subs	r3, r3, r2
 802e064:	eba3 0309 	sub.w	r3, r3, r9
 802e068:	4543      	cmp	r3, r8
 802e06a:	f77f af79 	ble.w	802df60 <_printf_float+0x24c>
 802e06e:	2301      	movs	r3, #1
 802e070:	4652      	mov	r2, sl
 802e072:	4631      	mov	r1, r6
 802e074:	4628      	mov	r0, r5
 802e076:	47b8      	blx	r7
 802e078:	3001      	adds	r0, #1
 802e07a:	f43f aeaa 	beq.w	802ddd2 <_printf_float+0xbe>
 802e07e:	f108 0801 	add.w	r8, r8, #1
 802e082:	e7ec      	b.n	802e05e <_printf_float+0x34a>
 802e084:	4613      	mov	r3, r2
 802e086:	4631      	mov	r1, r6
 802e088:	4642      	mov	r2, r8
 802e08a:	4628      	mov	r0, r5
 802e08c:	47b8      	blx	r7
 802e08e:	3001      	adds	r0, #1
 802e090:	d1c0      	bne.n	802e014 <_printf_float+0x300>
 802e092:	e69e      	b.n	802ddd2 <_printf_float+0xbe>
 802e094:	2301      	movs	r3, #1
 802e096:	4631      	mov	r1, r6
 802e098:	4628      	mov	r0, r5
 802e09a:	9205      	str	r2, [sp, #20]
 802e09c:	47b8      	blx	r7
 802e09e:	3001      	adds	r0, #1
 802e0a0:	f43f ae97 	beq.w	802ddd2 <_printf_float+0xbe>
 802e0a4:	9a05      	ldr	r2, [sp, #20]
 802e0a6:	f10b 0b01 	add.w	fp, fp, #1
 802e0aa:	e7b9      	b.n	802e020 <_printf_float+0x30c>
 802e0ac:	ee18 3a10 	vmov	r3, s16
 802e0b0:	4652      	mov	r2, sl
 802e0b2:	4631      	mov	r1, r6
 802e0b4:	4628      	mov	r0, r5
 802e0b6:	47b8      	blx	r7
 802e0b8:	3001      	adds	r0, #1
 802e0ba:	d1be      	bne.n	802e03a <_printf_float+0x326>
 802e0bc:	e689      	b.n	802ddd2 <_printf_float+0xbe>
 802e0be:	9a05      	ldr	r2, [sp, #20]
 802e0c0:	464b      	mov	r3, r9
 802e0c2:	4442      	add	r2, r8
 802e0c4:	4631      	mov	r1, r6
 802e0c6:	4628      	mov	r0, r5
 802e0c8:	47b8      	blx	r7
 802e0ca:	3001      	adds	r0, #1
 802e0cc:	d1c1      	bne.n	802e052 <_printf_float+0x33e>
 802e0ce:	e680      	b.n	802ddd2 <_printf_float+0xbe>
 802e0d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802e0d2:	2a01      	cmp	r2, #1
 802e0d4:	dc01      	bgt.n	802e0da <_printf_float+0x3c6>
 802e0d6:	07db      	lsls	r3, r3, #31
 802e0d8:	d53a      	bpl.n	802e150 <_printf_float+0x43c>
 802e0da:	2301      	movs	r3, #1
 802e0dc:	4642      	mov	r2, r8
 802e0de:	4631      	mov	r1, r6
 802e0e0:	4628      	mov	r0, r5
 802e0e2:	47b8      	blx	r7
 802e0e4:	3001      	adds	r0, #1
 802e0e6:	f43f ae74 	beq.w	802ddd2 <_printf_float+0xbe>
 802e0ea:	ee18 3a10 	vmov	r3, s16
 802e0ee:	4652      	mov	r2, sl
 802e0f0:	4631      	mov	r1, r6
 802e0f2:	4628      	mov	r0, r5
 802e0f4:	47b8      	blx	r7
 802e0f6:	3001      	adds	r0, #1
 802e0f8:	f43f ae6b 	beq.w	802ddd2 <_printf_float+0xbe>
 802e0fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802e100:	2200      	movs	r2, #0
 802e102:	2300      	movs	r3, #0
 802e104:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802e108:	f7d2 fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 802e10c:	b9d8      	cbnz	r0, 802e146 <_printf_float+0x432>
 802e10e:	f10a 33ff 	add.w	r3, sl, #4294967295
 802e112:	f108 0201 	add.w	r2, r8, #1
 802e116:	4631      	mov	r1, r6
 802e118:	4628      	mov	r0, r5
 802e11a:	47b8      	blx	r7
 802e11c:	3001      	adds	r0, #1
 802e11e:	d10e      	bne.n	802e13e <_printf_float+0x42a>
 802e120:	e657      	b.n	802ddd2 <_printf_float+0xbe>
 802e122:	2301      	movs	r3, #1
 802e124:	4652      	mov	r2, sl
 802e126:	4631      	mov	r1, r6
 802e128:	4628      	mov	r0, r5
 802e12a:	47b8      	blx	r7
 802e12c:	3001      	adds	r0, #1
 802e12e:	f43f ae50 	beq.w	802ddd2 <_printf_float+0xbe>
 802e132:	f108 0801 	add.w	r8, r8, #1
 802e136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e138:	3b01      	subs	r3, #1
 802e13a:	4543      	cmp	r3, r8
 802e13c:	dcf1      	bgt.n	802e122 <_printf_float+0x40e>
 802e13e:	464b      	mov	r3, r9
 802e140:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802e144:	e6da      	b.n	802defc <_printf_float+0x1e8>
 802e146:	f04f 0800 	mov.w	r8, #0
 802e14a:	f104 0a1a 	add.w	sl, r4, #26
 802e14e:	e7f2      	b.n	802e136 <_printf_float+0x422>
 802e150:	2301      	movs	r3, #1
 802e152:	4642      	mov	r2, r8
 802e154:	e7df      	b.n	802e116 <_printf_float+0x402>
 802e156:	2301      	movs	r3, #1
 802e158:	464a      	mov	r2, r9
 802e15a:	4631      	mov	r1, r6
 802e15c:	4628      	mov	r0, r5
 802e15e:	47b8      	blx	r7
 802e160:	3001      	adds	r0, #1
 802e162:	f43f ae36 	beq.w	802ddd2 <_printf_float+0xbe>
 802e166:	f108 0801 	add.w	r8, r8, #1
 802e16a:	68e3      	ldr	r3, [r4, #12]
 802e16c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802e16e:	1a5b      	subs	r3, r3, r1
 802e170:	4543      	cmp	r3, r8
 802e172:	dcf0      	bgt.n	802e156 <_printf_float+0x442>
 802e174:	e6f8      	b.n	802df68 <_printf_float+0x254>
 802e176:	f04f 0800 	mov.w	r8, #0
 802e17a:	f104 0919 	add.w	r9, r4, #25
 802e17e:	e7f4      	b.n	802e16a <_printf_float+0x456>

0802e180 <_printf_common>:
 802e180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e184:	4616      	mov	r6, r2
 802e186:	4699      	mov	r9, r3
 802e188:	688a      	ldr	r2, [r1, #8]
 802e18a:	690b      	ldr	r3, [r1, #16]
 802e18c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e190:	4293      	cmp	r3, r2
 802e192:	bfb8      	it	lt
 802e194:	4613      	movlt	r3, r2
 802e196:	6033      	str	r3, [r6, #0]
 802e198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e19c:	4607      	mov	r7, r0
 802e19e:	460c      	mov	r4, r1
 802e1a0:	b10a      	cbz	r2, 802e1a6 <_printf_common+0x26>
 802e1a2:	3301      	adds	r3, #1
 802e1a4:	6033      	str	r3, [r6, #0]
 802e1a6:	6823      	ldr	r3, [r4, #0]
 802e1a8:	0699      	lsls	r1, r3, #26
 802e1aa:	bf42      	ittt	mi
 802e1ac:	6833      	ldrmi	r3, [r6, #0]
 802e1ae:	3302      	addmi	r3, #2
 802e1b0:	6033      	strmi	r3, [r6, #0]
 802e1b2:	6825      	ldr	r5, [r4, #0]
 802e1b4:	f015 0506 	ands.w	r5, r5, #6
 802e1b8:	d106      	bne.n	802e1c8 <_printf_common+0x48>
 802e1ba:	f104 0a19 	add.w	sl, r4, #25
 802e1be:	68e3      	ldr	r3, [r4, #12]
 802e1c0:	6832      	ldr	r2, [r6, #0]
 802e1c2:	1a9b      	subs	r3, r3, r2
 802e1c4:	42ab      	cmp	r3, r5
 802e1c6:	dc26      	bgt.n	802e216 <_printf_common+0x96>
 802e1c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802e1cc:	1e13      	subs	r3, r2, #0
 802e1ce:	6822      	ldr	r2, [r4, #0]
 802e1d0:	bf18      	it	ne
 802e1d2:	2301      	movne	r3, #1
 802e1d4:	0692      	lsls	r2, r2, #26
 802e1d6:	d42b      	bmi.n	802e230 <_printf_common+0xb0>
 802e1d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e1dc:	4649      	mov	r1, r9
 802e1de:	4638      	mov	r0, r7
 802e1e0:	47c0      	blx	r8
 802e1e2:	3001      	adds	r0, #1
 802e1e4:	d01e      	beq.n	802e224 <_printf_common+0xa4>
 802e1e6:	6823      	ldr	r3, [r4, #0]
 802e1e8:	6922      	ldr	r2, [r4, #16]
 802e1ea:	f003 0306 	and.w	r3, r3, #6
 802e1ee:	2b04      	cmp	r3, #4
 802e1f0:	bf02      	ittt	eq
 802e1f2:	68e5      	ldreq	r5, [r4, #12]
 802e1f4:	6833      	ldreq	r3, [r6, #0]
 802e1f6:	1aed      	subeq	r5, r5, r3
 802e1f8:	68a3      	ldr	r3, [r4, #8]
 802e1fa:	bf0c      	ite	eq
 802e1fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e200:	2500      	movne	r5, #0
 802e202:	4293      	cmp	r3, r2
 802e204:	bfc4      	itt	gt
 802e206:	1a9b      	subgt	r3, r3, r2
 802e208:	18ed      	addgt	r5, r5, r3
 802e20a:	2600      	movs	r6, #0
 802e20c:	341a      	adds	r4, #26
 802e20e:	42b5      	cmp	r5, r6
 802e210:	d11a      	bne.n	802e248 <_printf_common+0xc8>
 802e212:	2000      	movs	r0, #0
 802e214:	e008      	b.n	802e228 <_printf_common+0xa8>
 802e216:	2301      	movs	r3, #1
 802e218:	4652      	mov	r2, sl
 802e21a:	4649      	mov	r1, r9
 802e21c:	4638      	mov	r0, r7
 802e21e:	47c0      	blx	r8
 802e220:	3001      	adds	r0, #1
 802e222:	d103      	bne.n	802e22c <_printf_common+0xac>
 802e224:	f04f 30ff 	mov.w	r0, #4294967295
 802e228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e22c:	3501      	adds	r5, #1
 802e22e:	e7c6      	b.n	802e1be <_printf_common+0x3e>
 802e230:	18e1      	adds	r1, r4, r3
 802e232:	1c5a      	adds	r2, r3, #1
 802e234:	2030      	movs	r0, #48	; 0x30
 802e236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802e23a:	4422      	add	r2, r4
 802e23c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802e240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802e244:	3302      	adds	r3, #2
 802e246:	e7c7      	b.n	802e1d8 <_printf_common+0x58>
 802e248:	2301      	movs	r3, #1
 802e24a:	4622      	mov	r2, r4
 802e24c:	4649      	mov	r1, r9
 802e24e:	4638      	mov	r0, r7
 802e250:	47c0      	blx	r8
 802e252:	3001      	adds	r0, #1
 802e254:	d0e6      	beq.n	802e224 <_printf_common+0xa4>
 802e256:	3601      	adds	r6, #1
 802e258:	e7d9      	b.n	802e20e <_printf_common+0x8e>
	...

0802e25c <_printf_i>:
 802e25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e260:	7e0f      	ldrb	r7, [r1, #24]
 802e262:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802e264:	2f78      	cmp	r7, #120	; 0x78
 802e266:	4691      	mov	r9, r2
 802e268:	4680      	mov	r8, r0
 802e26a:	460c      	mov	r4, r1
 802e26c:	469a      	mov	sl, r3
 802e26e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802e272:	d807      	bhi.n	802e284 <_printf_i+0x28>
 802e274:	2f62      	cmp	r7, #98	; 0x62
 802e276:	d80a      	bhi.n	802e28e <_printf_i+0x32>
 802e278:	2f00      	cmp	r7, #0
 802e27a:	f000 80d4 	beq.w	802e426 <_printf_i+0x1ca>
 802e27e:	2f58      	cmp	r7, #88	; 0x58
 802e280:	f000 80c0 	beq.w	802e404 <_printf_i+0x1a8>
 802e284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802e28c:	e03a      	b.n	802e304 <_printf_i+0xa8>
 802e28e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802e292:	2b15      	cmp	r3, #21
 802e294:	d8f6      	bhi.n	802e284 <_printf_i+0x28>
 802e296:	a101      	add	r1, pc, #4	; (adr r1, 802e29c <_printf_i+0x40>)
 802e298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802e29c:	0802e2f5 	.word	0x0802e2f5
 802e2a0:	0802e309 	.word	0x0802e309
 802e2a4:	0802e285 	.word	0x0802e285
 802e2a8:	0802e285 	.word	0x0802e285
 802e2ac:	0802e285 	.word	0x0802e285
 802e2b0:	0802e285 	.word	0x0802e285
 802e2b4:	0802e309 	.word	0x0802e309
 802e2b8:	0802e285 	.word	0x0802e285
 802e2bc:	0802e285 	.word	0x0802e285
 802e2c0:	0802e285 	.word	0x0802e285
 802e2c4:	0802e285 	.word	0x0802e285
 802e2c8:	0802e40d 	.word	0x0802e40d
 802e2cc:	0802e335 	.word	0x0802e335
 802e2d0:	0802e3c7 	.word	0x0802e3c7
 802e2d4:	0802e285 	.word	0x0802e285
 802e2d8:	0802e285 	.word	0x0802e285
 802e2dc:	0802e42f 	.word	0x0802e42f
 802e2e0:	0802e285 	.word	0x0802e285
 802e2e4:	0802e335 	.word	0x0802e335
 802e2e8:	0802e285 	.word	0x0802e285
 802e2ec:	0802e285 	.word	0x0802e285
 802e2f0:	0802e3cf 	.word	0x0802e3cf
 802e2f4:	682b      	ldr	r3, [r5, #0]
 802e2f6:	1d1a      	adds	r2, r3, #4
 802e2f8:	681b      	ldr	r3, [r3, #0]
 802e2fa:	602a      	str	r2, [r5, #0]
 802e2fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e304:	2301      	movs	r3, #1
 802e306:	e09f      	b.n	802e448 <_printf_i+0x1ec>
 802e308:	6820      	ldr	r0, [r4, #0]
 802e30a:	682b      	ldr	r3, [r5, #0]
 802e30c:	0607      	lsls	r7, r0, #24
 802e30e:	f103 0104 	add.w	r1, r3, #4
 802e312:	6029      	str	r1, [r5, #0]
 802e314:	d501      	bpl.n	802e31a <_printf_i+0xbe>
 802e316:	681e      	ldr	r6, [r3, #0]
 802e318:	e003      	b.n	802e322 <_printf_i+0xc6>
 802e31a:	0646      	lsls	r6, r0, #25
 802e31c:	d5fb      	bpl.n	802e316 <_printf_i+0xba>
 802e31e:	f9b3 6000 	ldrsh.w	r6, [r3]
 802e322:	2e00      	cmp	r6, #0
 802e324:	da03      	bge.n	802e32e <_printf_i+0xd2>
 802e326:	232d      	movs	r3, #45	; 0x2d
 802e328:	4276      	negs	r6, r6
 802e32a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e32e:	485a      	ldr	r0, [pc, #360]	; (802e498 <_printf_i+0x23c>)
 802e330:	230a      	movs	r3, #10
 802e332:	e012      	b.n	802e35a <_printf_i+0xfe>
 802e334:	682b      	ldr	r3, [r5, #0]
 802e336:	6820      	ldr	r0, [r4, #0]
 802e338:	1d19      	adds	r1, r3, #4
 802e33a:	6029      	str	r1, [r5, #0]
 802e33c:	0605      	lsls	r5, r0, #24
 802e33e:	d501      	bpl.n	802e344 <_printf_i+0xe8>
 802e340:	681e      	ldr	r6, [r3, #0]
 802e342:	e002      	b.n	802e34a <_printf_i+0xee>
 802e344:	0641      	lsls	r1, r0, #25
 802e346:	d5fb      	bpl.n	802e340 <_printf_i+0xe4>
 802e348:	881e      	ldrh	r6, [r3, #0]
 802e34a:	4853      	ldr	r0, [pc, #332]	; (802e498 <_printf_i+0x23c>)
 802e34c:	2f6f      	cmp	r7, #111	; 0x6f
 802e34e:	bf0c      	ite	eq
 802e350:	2308      	moveq	r3, #8
 802e352:	230a      	movne	r3, #10
 802e354:	2100      	movs	r1, #0
 802e356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802e35a:	6865      	ldr	r5, [r4, #4]
 802e35c:	60a5      	str	r5, [r4, #8]
 802e35e:	2d00      	cmp	r5, #0
 802e360:	bfa2      	ittt	ge
 802e362:	6821      	ldrge	r1, [r4, #0]
 802e364:	f021 0104 	bicge.w	r1, r1, #4
 802e368:	6021      	strge	r1, [r4, #0]
 802e36a:	b90e      	cbnz	r6, 802e370 <_printf_i+0x114>
 802e36c:	2d00      	cmp	r5, #0
 802e36e:	d04b      	beq.n	802e408 <_printf_i+0x1ac>
 802e370:	4615      	mov	r5, r2
 802e372:	fbb6 f1f3 	udiv	r1, r6, r3
 802e376:	fb03 6711 	mls	r7, r3, r1, r6
 802e37a:	5dc7      	ldrb	r7, [r0, r7]
 802e37c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802e380:	4637      	mov	r7, r6
 802e382:	42bb      	cmp	r3, r7
 802e384:	460e      	mov	r6, r1
 802e386:	d9f4      	bls.n	802e372 <_printf_i+0x116>
 802e388:	2b08      	cmp	r3, #8
 802e38a:	d10b      	bne.n	802e3a4 <_printf_i+0x148>
 802e38c:	6823      	ldr	r3, [r4, #0]
 802e38e:	07de      	lsls	r6, r3, #31
 802e390:	d508      	bpl.n	802e3a4 <_printf_i+0x148>
 802e392:	6923      	ldr	r3, [r4, #16]
 802e394:	6861      	ldr	r1, [r4, #4]
 802e396:	4299      	cmp	r1, r3
 802e398:	bfde      	ittt	le
 802e39a:	2330      	movle	r3, #48	; 0x30
 802e39c:	f805 3c01 	strble.w	r3, [r5, #-1]
 802e3a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 802e3a4:	1b52      	subs	r2, r2, r5
 802e3a6:	6122      	str	r2, [r4, #16]
 802e3a8:	f8cd a000 	str.w	sl, [sp]
 802e3ac:	464b      	mov	r3, r9
 802e3ae:	aa03      	add	r2, sp, #12
 802e3b0:	4621      	mov	r1, r4
 802e3b2:	4640      	mov	r0, r8
 802e3b4:	f7ff fee4 	bl	802e180 <_printf_common>
 802e3b8:	3001      	adds	r0, #1
 802e3ba:	d14a      	bne.n	802e452 <_printf_i+0x1f6>
 802e3bc:	f04f 30ff 	mov.w	r0, #4294967295
 802e3c0:	b004      	add	sp, #16
 802e3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e3c6:	6823      	ldr	r3, [r4, #0]
 802e3c8:	f043 0320 	orr.w	r3, r3, #32
 802e3cc:	6023      	str	r3, [r4, #0]
 802e3ce:	4833      	ldr	r0, [pc, #204]	; (802e49c <_printf_i+0x240>)
 802e3d0:	2778      	movs	r7, #120	; 0x78
 802e3d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802e3d6:	6823      	ldr	r3, [r4, #0]
 802e3d8:	6829      	ldr	r1, [r5, #0]
 802e3da:	061f      	lsls	r7, r3, #24
 802e3dc:	f851 6b04 	ldr.w	r6, [r1], #4
 802e3e0:	d402      	bmi.n	802e3e8 <_printf_i+0x18c>
 802e3e2:	065f      	lsls	r7, r3, #25
 802e3e4:	bf48      	it	mi
 802e3e6:	b2b6      	uxthmi	r6, r6
 802e3e8:	07df      	lsls	r7, r3, #31
 802e3ea:	bf48      	it	mi
 802e3ec:	f043 0320 	orrmi.w	r3, r3, #32
 802e3f0:	6029      	str	r1, [r5, #0]
 802e3f2:	bf48      	it	mi
 802e3f4:	6023      	strmi	r3, [r4, #0]
 802e3f6:	b91e      	cbnz	r6, 802e400 <_printf_i+0x1a4>
 802e3f8:	6823      	ldr	r3, [r4, #0]
 802e3fa:	f023 0320 	bic.w	r3, r3, #32
 802e3fe:	6023      	str	r3, [r4, #0]
 802e400:	2310      	movs	r3, #16
 802e402:	e7a7      	b.n	802e354 <_printf_i+0xf8>
 802e404:	4824      	ldr	r0, [pc, #144]	; (802e498 <_printf_i+0x23c>)
 802e406:	e7e4      	b.n	802e3d2 <_printf_i+0x176>
 802e408:	4615      	mov	r5, r2
 802e40a:	e7bd      	b.n	802e388 <_printf_i+0x12c>
 802e40c:	682b      	ldr	r3, [r5, #0]
 802e40e:	6826      	ldr	r6, [r4, #0]
 802e410:	6961      	ldr	r1, [r4, #20]
 802e412:	1d18      	adds	r0, r3, #4
 802e414:	6028      	str	r0, [r5, #0]
 802e416:	0635      	lsls	r5, r6, #24
 802e418:	681b      	ldr	r3, [r3, #0]
 802e41a:	d501      	bpl.n	802e420 <_printf_i+0x1c4>
 802e41c:	6019      	str	r1, [r3, #0]
 802e41e:	e002      	b.n	802e426 <_printf_i+0x1ca>
 802e420:	0670      	lsls	r0, r6, #25
 802e422:	d5fb      	bpl.n	802e41c <_printf_i+0x1c0>
 802e424:	8019      	strh	r1, [r3, #0]
 802e426:	2300      	movs	r3, #0
 802e428:	6123      	str	r3, [r4, #16]
 802e42a:	4615      	mov	r5, r2
 802e42c:	e7bc      	b.n	802e3a8 <_printf_i+0x14c>
 802e42e:	682b      	ldr	r3, [r5, #0]
 802e430:	1d1a      	adds	r2, r3, #4
 802e432:	602a      	str	r2, [r5, #0]
 802e434:	681d      	ldr	r5, [r3, #0]
 802e436:	6862      	ldr	r2, [r4, #4]
 802e438:	2100      	movs	r1, #0
 802e43a:	4628      	mov	r0, r5
 802e43c:	f7d1 fec8 	bl	80001d0 <memchr>
 802e440:	b108      	cbz	r0, 802e446 <_printf_i+0x1ea>
 802e442:	1b40      	subs	r0, r0, r5
 802e444:	6060      	str	r0, [r4, #4]
 802e446:	6863      	ldr	r3, [r4, #4]
 802e448:	6123      	str	r3, [r4, #16]
 802e44a:	2300      	movs	r3, #0
 802e44c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e450:	e7aa      	b.n	802e3a8 <_printf_i+0x14c>
 802e452:	6923      	ldr	r3, [r4, #16]
 802e454:	462a      	mov	r2, r5
 802e456:	4649      	mov	r1, r9
 802e458:	4640      	mov	r0, r8
 802e45a:	47d0      	blx	sl
 802e45c:	3001      	adds	r0, #1
 802e45e:	d0ad      	beq.n	802e3bc <_printf_i+0x160>
 802e460:	6823      	ldr	r3, [r4, #0]
 802e462:	079b      	lsls	r3, r3, #30
 802e464:	d413      	bmi.n	802e48e <_printf_i+0x232>
 802e466:	68e0      	ldr	r0, [r4, #12]
 802e468:	9b03      	ldr	r3, [sp, #12]
 802e46a:	4298      	cmp	r0, r3
 802e46c:	bfb8      	it	lt
 802e46e:	4618      	movlt	r0, r3
 802e470:	e7a6      	b.n	802e3c0 <_printf_i+0x164>
 802e472:	2301      	movs	r3, #1
 802e474:	4632      	mov	r2, r6
 802e476:	4649      	mov	r1, r9
 802e478:	4640      	mov	r0, r8
 802e47a:	47d0      	blx	sl
 802e47c:	3001      	adds	r0, #1
 802e47e:	d09d      	beq.n	802e3bc <_printf_i+0x160>
 802e480:	3501      	adds	r5, #1
 802e482:	68e3      	ldr	r3, [r4, #12]
 802e484:	9903      	ldr	r1, [sp, #12]
 802e486:	1a5b      	subs	r3, r3, r1
 802e488:	42ab      	cmp	r3, r5
 802e48a:	dcf2      	bgt.n	802e472 <_printf_i+0x216>
 802e48c:	e7eb      	b.n	802e466 <_printf_i+0x20a>
 802e48e:	2500      	movs	r5, #0
 802e490:	f104 0619 	add.w	r6, r4, #25
 802e494:	e7f5      	b.n	802e482 <_printf_i+0x226>
 802e496:	bf00      	nop
 802e498:	08035507 	.word	0x08035507
 802e49c:	08035518 	.word	0x08035518

0802e4a0 <std>:
 802e4a0:	2300      	movs	r3, #0
 802e4a2:	b510      	push	{r4, lr}
 802e4a4:	4604      	mov	r4, r0
 802e4a6:	e9c0 3300 	strd	r3, r3, [r0]
 802e4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802e4ae:	6083      	str	r3, [r0, #8]
 802e4b0:	8181      	strh	r1, [r0, #12]
 802e4b2:	6643      	str	r3, [r0, #100]	; 0x64
 802e4b4:	81c2      	strh	r2, [r0, #14]
 802e4b6:	6183      	str	r3, [r0, #24]
 802e4b8:	4619      	mov	r1, r3
 802e4ba:	2208      	movs	r2, #8
 802e4bc:	305c      	adds	r0, #92	; 0x5c
 802e4be:	f000 f941 	bl	802e744 <memset>
 802e4c2:	4b0d      	ldr	r3, [pc, #52]	; (802e4f8 <std+0x58>)
 802e4c4:	6263      	str	r3, [r4, #36]	; 0x24
 802e4c6:	4b0d      	ldr	r3, [pc, #52]	; (802e4fc <std+0x5c>)
 802e4c8:	62a3      	str	r3, [r4, #40]	; 0x28
 802e4ca:	4b0d      	ldr	r3, [pc, #52]	; (802e500 <std+0x60>)
 802e4cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 802e4ce:	4b0d      	ldr	r3, [pc, #52]	; (802e504 <std+0x64>)
 802e4d0:	6323      	str	r3, [r4, #48]	; 0x30
 802e4d2:	4b0d      	ldr	r3, [pc, #52]	; (802e508 <std+0x68>)
 802e4d4:	6224      	str	r4, [r4, #32]
 802e4d6:	429c      	cmp	r4, r3
 802e4d8:	d006      	beq.n	802e4e8 <std+0x48>
 802e4da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802e4de:	4294      	cmp	r4, r2
 802e4e0:	d002      	beq.n	802e4e8 <std+0x48>
 802e4e2:	33d0      	adds	r3, #208	; 0xd0
 802e4e4:	429c      	cmp	r4, r3
 802e4e6:	d105      	bne.n	802e4f4 <std+0x54>
 802e4e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802e4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e4f0:	f000 b9f8 	b.w	802e8e4 <__retarget_lock_init_recursive>
 802e4f4:	bd10      	pop	{r4, pc}
 802e4f6:	bf00      	nop
 802e4f8:	0802e649 	.word	0x0802e649
 802e4fc:	0802e66b 	.word	0x0802e66b
 802e500:	0802e6a3 	.word	0x0802e6a3
 802e504:	0802e6c7 	.word	0x0802e6c7
 802e508:	20006f0c 	.word	0x20006f0c

0802e50c <stdio_exit_handler>:
 802e50c:	4a02      	ldr	r2, [pc, #8]	; (802e518 <stdio_exit_handler+0xc>)
 802e50e:	4903      	ldr	r1, [pc, #12]	; (802e51c <stdio_exit_handler+0x10>)
 802e510:	4803      	ldr	r0, [pc, #12]	; (802e520 <stdio_exit_handler+0x14>)
 802e512:	f000 b87b 	b.w	802e60c <_fwalk_sglue>
 802e516:	bf00      	nop
 802e518:	20000478 	.word	0x20000478
 802e51c:	080304e1 	.word	0x080304e1
 802e520:	200005f0 	.word	0x200005f0

0802e524 <cleanup_stdio>:
 802e524:	6841      	ldr	r1, [r0, #4]
 802e526:	4b0c      	ldr	r3, [pc, #48]	; (802e558 <cleanup_stdio+0x34>)
 802e528:	4299      	cmp	r1, r3
 802e52a:	b510      	push	{r4, lr}
 802e52c:	4604      	mov	r4, r0
 802e52e:	d001      	beq.n	802e534 <cleanup_stdio+0x10>
 802e530:	f001 ffd6 	bl	80304e0 <_fflush_r>
 802e534:	68a1      	ldr	r1, [r4, #8]
 802e536:	4b09      	ldr	r3, [pc, #36]	; (802e55c <cleanup_stdio+0x38>)
 802e538:	4299      	cmp	r1, r3
 802e53a:	d002      	beq.n	802e542 <cleanup_stdio+0x1e>
 802e53c:	4620      	mov	r0, r4
 802e53e:	f001 ffcf 	bl	80304e0 <_fflush_r>
 802e542:	68e1      	ldr	r1, [r4, #12]
 802e544:	4b06      	ldr	r3, [pc, #24]	; (802e560 <cleanup_stdio+0x3c>)
 802e546:	4299      	cmp	r1, r3
 802e548:	d004      	beq.n	802e554 <cleanup_stdio+0x30>
 802e54a:	4620      	mov	r0, r4
 802e54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e550:	f001 bfc6 	b.w	80304e0 <_fflush_r>
 802e554:	bd10      	pop	{r4, pc}
 802e556:	bf00      	nop
 802e558:	20006f0c 	.word	0x20006f0c
 802e55c:	20006f74 	.word	0x20006f74
 802e560:	20006fdc 	.word	0x20006fdc

0802e564 <global_stdio_init.part.0>:
 802e564:	b510      	push	{r4, lr}
 802e566:	4b0b      	ldr	r3, [pc, #44]	; (802e594 <global_stdio_init.part.0+0x30>)
 802e568:	4c0b      	ldr	r4, [pc, #44]	; (802e598 <global_stdio_init.part.0+0x34>)
 802e56a:	4a0c      	ldr	r2, [pc, #48]	; (802e59c <global_stdio_init.part.0+0x38>)
 802e56c:	601a      	str	r2, [r3, #0]
 802e56e:	4620      	mov	r0, r4
 802e570:	2200      	movs	r2, #0
 802e572:	2104      	movs	r1, #4
 802e574:	f7ff ff94 	bl	802e4a0 <std>
 802e578:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802e57c:	2201      	movs	r2, #1
 802e57e:	2109      	movs	r1, #9
 802e580:	f7ff ff8e 	bl	802e4a0 <std>
 802e584:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802e588:	2202      	movs	r2, #2
 802e58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e58e:	2112      	movs	r1, #18
 802e590:	f7ff bf86 	b.w	802e4a0 <std>
 802e594:	20007044 	.word	0x20007044
 802e598:	20006f0c 	.word	0x20006f0c
 802e59c:	0802e50d 	.word	0x0802e50d

0802e5a0 <__sfp_lock_acquire>:
 802e5a0:	4801      	ldr	r0, [pc, #4]	; (802e5a8 <__sfp_lock_acquire+0x8>)
 802e5a2:	f000 b9a0 	b.w	802e8e6 <__retarget_lock_acquire_recursive>
 802e5a6:	bf00      	nop
 802e5a8:	2000704e 	.word	0x2000704e

0802e5ac <__sfp_lock_release>:
 802e5ac:	4801      	ldr	r0, [pc, #4]	; (802e5b4 <__sfp_lock_release+0x8>)
 802e5ae:	f000 b99b 	b.w	802e8e8 <__retarget_lock_release_recursive>
 802e5b2:	bf00      	nop
 802e5b4:	2000704e 	.word	0x2000704e

0802e5b8 <__sinit>:
 802e5b8:	b510      	push	{r4, lr}
 802e5ba:	4604      	mov	r4, r0
 802e5bc:	f7ff fff0 	bl	802e5a0 <__sfp_lock_acquire>
 802e5c0:	6a23      	ldr	r3, [r4, #32]
 802e5c2:	b11b      	cbz	r3, 802e5cc <__sinit+0x14>
 802e5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e5c8:	f7ff bff0 	b.w	802e5ac <__sfp_lock_release>
 802e5cc:	4b04      	ldr	r3, [pc, #16]	; (802e5e0 <__sinit+0x28>)
 802e5ce:	6223      	str	r3, [r4, #32]
 802e5d0:	4b04      	ldr	r3, [pc, #16]	; (802e5e4 <__sinit+0x2c>)
 802e5d2:	681b      	ldr	r3, [r3, #0]
 802e5d4:	2b00      	cmp	r3, #0
 802e5d6:	d1f5      	bne.n	802e5c4 <__sinit+0xc>
 802e5d8:	f7ff ffc4 	bl	802e564 <global_stdio_init.part.0>
 802e5dc:	e7f2      	b.n	802e5c4 <__sinit+0xc>
 802e5de:	bf00      	nop
 802e5e0:	0802e525 	.word	0x0802e525
 802e5e4:	20007044 	.word	0x20007044

0802e5e8 <fiprintf>:
 802e5e8:	b40e      	push	{r1, r2, r3}
 802e5ea:	b503      	push	{r0, r1, lr}
 802e5ec:	4601      	mov	r1, r0
 802e5ee:	ab03      	add	r3, sp, #12
 802e5f0:	4805      	ldr	r0, [pc, #20]	; (802e608 <fiprintf+0x20>)
 802e5f2:	f853 2b04 	ldr.w	r2, [r3], #4
 802e5f6:	6800      	ldr	r0, [r0, #0]
 802e5f8:	9301      	str	r3, [sp, #4]
 802e5fa:	f001 fdd1 	bl	80301a0 <_vfiprintf_r>
 802e5fe:	b002      	add	sp, #8
 802e600:	f85d eb04 	ldr.w	lr, [sp], #4
 802e604:	b003      	add	sp, #12
 802e606:	4770      	bx	lr
 802e608:	2000063c 	.word	0x2000063c

0802e60c <_fwalk_sglue>:
 802e60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e610:	4607      	mov	r7, r0
 802e612:	4688      	mov	r8, r1
 802e614:	4614      	mov	r4, r2
 802e616:	2600      	movs	r6, #0
 802e618:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802e61c:	f1b9 0901 	subs.w	r9, r9, #1
 802e620:	d505      	bpl.n	802e62e <_fwalk_sglue+0x22>
 802e622:	6824      	ldr	r4, [r4, #0]
 802e624:	2c00      	cmp	r4, #0
 802e626:	d1f7      	bne.n	802e618 <_fwalk_sglue+0xc>
 802e628:	4630      	mov	r0, r6
 802e62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e62e:	89ab      	ldrh	r3, [r5, #12]
 802e630:	2b01      	cmp	r3, #1
 802e632:	d907      	bls.n	802e644 <_fwalk_sglue+0x38>
 802e634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e638:	3301      	adds	r3, #1
 802e63a:	d003      	beq.n	802e644 <_fwalk_sglue+0x38>
 802e63c:	4629      	mov	r1, r5
 802e63e:	4638      	mov	r0, r7
 802e640:	47c0      	blx	r8
 802e642:	4306      	orrs	r6, r0
 802e644:	3568      	adds	r5, #104	; 0x68
 802e646:	e7e9      	b.n	802e61c <_fwalk_sglue+0x10>

0802e648 <__sread>:
 802e648:	b510      	push	{r4, lr}
 802e64a:	460c      	mov	r4, r1
 802e64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e650:	f000 f8d6 	bl	802e800 <_read_r>
 802e654:	2800      	cmp	r0, #0
 802e656:	bfab      	itete	ge
 802e658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802e65a:	89a3      	ldrhlt	r3, [r4, #12]
 802e65c:	181b      	addge	r3, r3, r0
 802e65e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802e662:	bfac      	ite	ge
 802e664:	6563      	strge	r3, [r4, #84]	; 0x54
 802e666:	81a3      	strhlt	r3, [r4, #12]
 802e668:	bd10      	pop	{r4, pc}

0802e66a <__swrite>:
 802e66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e66e:	461f      	mov	r7, r3
 802e670:	898b      	ldrh	r3, [r1, #12]
 802e672:	05db      	lsls	r3, r3, #23
 802e674:	4605      	mov	r5, r0
 802e676:	460c      	mov	r4, r1
 802e678:	4616      	mov	r6, r2
 802e67a:	d505      	bpl.n	802e688 <__swrite+0x1e>
 802e67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e680:	2302      	movs	r3, #2
 802e682:	2200      	movs	r2, #0
 802e684:	f000 f8aa 	bl	802e7dc <_lseek_r>
 802e688:	89a3      	ldrh	r3, [r4, #12]
 802e68a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e68e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802e692:	81a3      	strh	r3, [r4, #12]
 802e694:	4632      	mov	r2, r6
 802e696:	463b      	mov	r3, r7
 802e698:	4628      	mov	r0, r5
 802e69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e69e:	f000 b8e5 	b.w	802e86c <_write_r>

0802e6a2 <__sseek>:
 802e6a2:	b510      	push	{r4, lr}
 802e6a4:	460c      	mov	r4, r1
 802e6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e6aa:	f000 f897 	bl	802e7dc <_lseek_r>
 802e6ae:	1c43      	adds	r3, r0, #1
 802e6b0:	89a3      	ldrh	r3, [r4, #12]
 802e6b2:	bf15      	itete	ne
 802e6b4:	6560      	strne	r0, [r4, #84]	; 0x54
 802e6b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802e6ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802e6be:	81a3      	strheq	r3, [r4, #12]
 802e6c0:	bf18      	it	ne
 802e6c2:	81a3      	strhne	r3, [r4, #12]
 802e6c4:	bd10      	pop	{r4, pc}

0802e6c6 <__sclose>:
 802e6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e6ca:	f000 b877 	b.w	802e7bc <_close_r>
	...

0802e6d0 <_vsiprintf_r>:
 802e6d0:	b500      	push	{lr}
 802e6d2:	b09b      	sub	sp, #108	; 0x6c
 802e6d4:	9100      	str	r1, [sp, #0]
 802e6d6:	9104      	str	r1, [sp, #16]
 802e6d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802e6dc:	9105      	str	r1, [sp, #20]
 802e6de:	9102      	str	r1, [sp, #8]
 802e6e0:	4905      	ldr	r1, [pc, #20]	; (802e6f8 <_vsiprintf_r+0x28>)
 802e6e2:	9103      	str	r1, [sp, #12]
 802e6e4:	4669      	mov	r1, sp
 802e6e6:	f001 fc33 	bl	802ff50 <_svfiprintf_r>
 802e6ea:	9b00      	ldr	r3, [sp, #0]
 802e6ec:	2200      	movs	r2, #0
 802e6ee:	701a      	strb	r2, [r3, #0]
 802e6f0:	b01b      	add	sp, #108	; 0x6c
 802e6f2:	f85d fb04 	ldr.w	pc, [sp], #4
 802e6f6:	bf00      	nop
 802e6f8:	ffff0208 	.word	0xffff0208

0802e6fc <vsiprintf>:
 802e6fc:	4613      	mov	r3, r2
 802e6fe:	460a      	mov	r2, r1
 802e700:	4601      	mov	r1, r0
 802e702:	4802      	ldr	r0, [pc, #8]	; (802e70c <vsiprintf+0x10>)
 802e704:	6800      	ldr	r0, [r0, #0]
 802e706:	f7ff bfe3 	b.w	802e6d0 <_vsiprintf_r>
 802e70a:	bf00      	nop
 802e70c:	2000063c 	.word	0x2000063c

0802e710 <memmove>:
 802e710:	4288      	cmp	r0, r1
 802e712:	b510      	push	{r4, lr}
 802e714:	eb01 0402 	add.w	r4, r1, r2
 802e718:	d902      	bls.n	802e720 <memmove+0x10>
 802e71a:	4284      	cmp	r4, r0
 802e71c:	4623      	mov	r3, r4
 802e71e:	d807      	bhi.n	802e730 <memmove+0x20>
 802e720:	1e43      	subs	r3, r0, #1
 802e722:	42a1      	cmp	r1, r4
 802e724:	d008      	beq.n	802e738 <memmove+0x28>
 802e726:	f811 2b01 	ldrb.w	r2, [r1], #1
 802e72a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802e72e:	e7f8      	b.n	802e722 <memmove+0x12>
 802e730:	4402      	add	r2, r0
 802e732:	4601      	mov	r1, r0
 802e734:	428a      	cmp	r2, r1
 802e736:	d100      	bne.n	802e73a <memmove+0x2a>
 802e738:	bd10      	pop	{r4, pc}
 802e73a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802e73e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802e742:	e7f7      	b.n	802e734 <memmove+0x24>

0802e744 <memset>:
 802e744:	4402      	add	r2, r0
 802e746:	4603      	mov	r3, r0
 802e748:	4293      	cmp	r3, r2
 802e74a:	d100      	bne.n	802e74e <memset+0xa>
 802e74c:	4770      	bx	lr
 802e74e:	f803 1b01 	strb.w	r1, [r3], #1
 802e752:	e7f9      	b.n	802e748 <memset+0x4>

0802e754 <_raise_r>:
 802e754:	291f      	cmp	r1, #31
 802e756:	b538      	push	{r3, r4, r5, lr}
 802e758:	4604      	mov	r4, r0
 802e75a:	460d      	mov	r5, r1
 802e75c:	d904      	bls.n	802e768 <_raise_r+0x14>
 802e75e:	2316      	movs	r3, #22
 802e760:	6003      	str	r3, [r0, #0]
 802e762:	f04f 30ff 	mov.w	r0, #4294967295
 802e766:	bd38      	pop	{r3, r4, r5, pc}
 802e768:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802e76a:	b112      	cbz	r2, 802e772 <_raise_r+0x1e>
 802e76c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e770:	b94b      	cbnz	r3, 802e786 <_raise_r+0x32>
 802e772:	4620      	mov	r0, r4
 802e774:	f000 f868 	bl	802e848 <_getpid_r>
 802e778:	462a      	mov	r2, r5
 802e77a:	4601      	mov	r1, r0
 802e77c:	4620      	mov	r0, r4
 802e77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e782:	f000 b84f 	b.w	802e824 <_kill_r>
 802e786:	2b01      	cmp	r3, #1
 802e788:	d00a      	beq.n	802e7a0 <_raise_r+0x4c>
 802e78a:	1c59      	adds	r1, r3, #1
 802e78c:	d103      	bne.n	802e796 <_raise_r+0x42>
 802e78e:	2316      	movs	r3, #22
 802e790:	6003      	str	r3, [r0, #0]
 802e792:	2001      	movs	r0, #1
 802e794:	e7e7      	b.n	802e766 <_raise_r+0x12>
 802e796:	2400      	movs	r4, #0
 802e798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802e79c:	4628      	mov	r0, r5
 802e79e:	4798      	blx	r3
 802e7a0:	2000      	movs	r0, #0
 802e7a2:	e7e0      	b.n	802e766 <_raise_r+0x12>

0802e7a4 <raise>:
 802e7a4:	4b02      	ldr	r3, [pc, #8]	; (802e7b0 <raise+0xc>)
 802e7a6:	4601      	mov	r1, r0
 802e7a8:	6818      	ldr	r0, [r3, #0]
 802e7aa:	f7ff bfd3 	b.w	802e754 <_raise_r>
 802e7ae:	bf00      	nop
 802e7b0:	2000063c 	.word	0x2000063c

0802e7b4 <_localeconv_r>:
 802e7b4:	4800      	ldr	r0, [pc, #0]	; (802e7b8 <_localeconv_r+0x4>)
 802e7b6:	4770      	bx	lr
 802e7b8:	20000574 	.word	0x20000574

0802e7bc <_close_r>:
 802e7bc:	b538      	push	{r3, r4, r5, lr}
 802e7be:	4d06      	ldr	r5, [pc, #24]	; (802e7d8 <_close_r+0x1c>)
 802e7c0:	2300      	movs	r3, #0
 802e7c2:	4604      	mov	r4, r0
 802e7c4:	4608      	mov	r0, r1
 802e7c6:	602b      	str	r3, [r5, #0]
 802e7c8:	f7dd f853 	bl	800b872 <_close>
 802e7cc:	1c43      	adds	r3, r0, #1
 802e7ce:	d102      	bne.n	802e7d6 <_close_r+0x1a>
 802e7d0:	682b      	ldr	r3, [r5, #0]
 802e7d2:	b103      	cbz	r3, 802e7d6 <_close_r+0x1a>
 802e7d4:	6023      	str	r3, [r4, #0]
 802e7d6:	bd38      	pop	{r3, r4, r5, pc}
 802e7d8:	20007048 	.word	0x20007048

0802e7dc <_lseek_r>:
 802e7dc:	b538      	push	{r3, r4, r5, lr}
 802e7de:	4d07      	ldr	r5, [pc, #28]	; (802e7fc <_lseek_r+0x20>)
 802e7e0:	4604      	mov	r4, r0
 802e7e2:	4608      	mov	r0, r1
 802e7e4:	4611      	mov	r1, r2
 802e7e6:	2200      	movs	r2, #0
 802e7e8:	602a      	str	r2, [r5, #0]
 802e7ea:	461a      	mov	r2, r3
 802e7ec:	f7dd f868 	bl	800b8c0 <_lseek>
 802e7f0:	1c43      	adds	r3, r0, #1
 802e7f2:	d102      	bne.n	802e7fa <_lseek_r+0x1e>
 802e7f4:	682b      	ldr	r3, [r5, #0]
 802e7f6:	b103      	cbz	r3, 802e7fa <_lseek_r+0x1e>
 802e7f8:	6023      	str	r3, [r4, #0]
 802e7fa:	bd38      	pop	{r3, r4, r5, pc}
 802e7fc:	20007048 	.word	0x20007048

0802e800 <_read_r>:
 802e800:	b538      	push	{r3, r4, r5, lr}
 802e802:	4d07      	ldr	r5, [pc, #28]	; (802e820 <_read_r+0x20>)
 802e804:	4604      	mov	r4, r0
 802e806:	4608      	mov	r0, r1
 802e808:	4611      	mov	r1, r2
 802e80a:	2200      	movs	r2, #0
 802e80c:	602a      	str	r2, [r5, #0]
 802e80e:	461a      	mov	r2, r3
 802e810:	f7dc fff6 	bl	800b800 <_read>
 802e814:	1c43      	adds	r3, r0, #1
 802e816:	d102      	bne.n	802e81e <_read_r+0x1e>
 802e818:	682b      	ldr	r3, [r5, #0]
 802e81a:	b103      	cbz	r3, 802e81e <_read_r+0x1e>
 802e81c:	6023      	str	r3, [r4, #0]
 802e81e:	bd38      	pop	{r3, r4, r5, pc}
 802e820:	20007048 	.word	0x20007048

0802e824 <_kill_r>:
 802e824:	b538      	push	{r3, r4, r5, lr}
 802e826:	4d07      	ldr	r5, [pc, #28]	; (802e844 <_kill_r+0x20>)
 802e828:	2300      	movs	r3, #0
 802e82a:	4604      	mov	r4, r0
 802e82c:	4608      	mov	r0, r1
 802e82e:	4611      	mov	r1, r2
 802e830:	602b      	str	r3, [r5, #0]
 802e832:	f7dc ffcb 	bl	800b7cc <_kill>
 802e836:	1c43      	adds	r3, r0, #1
 802e838:	d102      	bne.n	802e840 <_kill_r+0x1c>
 802e83a:	682b      	ldr	r3, [r5, #0]
 802e83c:	b103      	cbz	r3, 802e840 <_kill_r+0x1c>
 802e83e:	6023      	str	r3, [r4, #0]
 802e840:	bd38      	pop	{r3, r4, r5, pc}
 802e842:	bf00      	nop
 802e844:	20007048 	.word	0x20007048

0802e848 <_getpid_r>:
 802e848:	f7dc bfb8 	b.w	800b7bc <_getpid>

0802e84c <_sbrk_r>:
 802e84c:	b538      	push	{r3, r4, r5, lr}
 802e84e:	4d06      	ldr	r5, [pc, #24]	; (802e868 <_sbrk_r+0x1c>)
 802e850:	2300      	movs	r3, #0
 802e852:	4604      	mov	r4, r0
 802e854:	4608      	mov	r0, r1
 802e856:	602b      	str	r3, [r5, #0]
 802e858:	f7dd f840 	bl	800b8dc <_sbrk>
 802e85c:	1c43      	adds	r3, r0, #1
 802e85e:	d102      	bne.n	802e866 <_sbrk_r+0x1a>
 802e860:	682b      	ldr	r3, [r5, #0]
 802e862:	b103      	cbz	r3, 802e866 <_sbrk_r+0x1a>
 802e864:	6023      	str	r3, [r4, #0]
 802e866:	bd38      	pop	{r3, r4, r5, pc}
 802e868:	20007048 	.word	0x20007048

0802e86c <_write_r>:
 802e86c:	b538      	push	{r3, r4, r5, lr}
 802e86e:	4d07      	ldr	r5, [pc, #28]	; (802e88c <_write_r+0x20>)
 802e870:	4604      	mov	r4, r0
 802e872:	4608      	mov	r0, r1
 802e874:	4611      	mov	r1, r2
 802e876:	2200      	movs	r2, #0
 802e878:	602a      	str	r2, [r5, #0]
 802e87a:	461a      	mov	r2, r3
 802e87c:	f7dc ffdd 	bl	800b83a <_write>
 802e880:	1c43      	adds	r3, r0, #1
 802e882:	d102      	bne.n	802e88a <_write_r+0x1e>
 802e884:	682b      	ldr	r3, [r5, #0]
 802e886:	b103      	cbz	r3, 802e88a <_write_r+0x1e>
 802e888:	6023      	str	r3, [r4, #0]
 802e88a:	bd38      	pop	{r3, r4, r5, pc}
 802e88c:	20007048 	.word	0x20007048

0802e890 <__errno>:
 802e890:	4b01      	ldr	r3, [pc, #4]	; (802e898 <__errno+0x8>)
 802e892:	6818      	ldr	r0, [r3, #0]
 802e894:	4770      	bx	lr
 802e896:	bf00      	nop
 802e898:	2000063c 	.word	0x2000063c

0802e89c <__libc_init_array>:
 802e89c:	b570      	push	{r4, r5, r6, lr}
 802e89e:	4d0d      	ldr	r5, [pc, #52]	; (802e8d4 <__libc_init_array+0x38>)
 802e8a0:	4c0d      	ldr	r4, [pc, #52]	; (802e8d8 <__libc_init_array+0x3c>)
 802e8a2:	1b64      	subs	r4, r4, r5
 802e8a4:	10a4      	asrs	r4, r4, #2
 802e8a6:	2600      	movs	r6, #0
 802e8a8:	42a6      	cmp	r6, r4
 802e8aa:	d109      	bne.n	802e8c0 <__libc_init_array+0x24>
 802e8ac:	4d0b      	ldr	r5, [pc, #44]	; (802e8dc <__libc_init_array+0x40>)
 802e8ae:	4c0c      	ldr	r4, [pc, #48]	; (802e8e0 <__libc_init_array+0x44>)
 802e8b0:	f001 ff58 	bl	8030764 <_init>
 802e8b4:	1b64      	subs	r4, r4, r5
 802e8b6:	10a4      	asrs	r4, r4, #2
 802e8b8:	2600      	movs	r6, #0
 802e8ba:	42a6      	cmp	r6, r4
 802e8bc:	d105      	bne.n	802e8ca <__libc_init_array+0x2e>
 802e8be:	bd70      	pop	{r4, r5, r6, pc}
 802e8c0:	f855 3b04 	ldr.w	r3, [r5], #4
 802e8c4:	4798      	blx	r3
 802e8c6:	3601      	adds	r6, #1
 802e8c8:	e7ee      	b.n	802e8a8 <__libc_init_array+0xc>
 802e8ca:	f855 3b04 	ldr.w	r3, [r5], #4
 802e8ce:	4798      	blx	r3
 802e8d0:	3601      	adds	r6, #1
 802e8d2:	e7f2      	b.n	802e8ba <__libc_init_array+0x1e>
 802e8d4:	08035738 	.word	0x08035738
 802e8d8:	08035738 	.word	0x08035738
 802e8dc:	08035738 	.word	0x08035738
 802e8e0:	08035744 	.word	0x08035744

0802e8e4 <__retarget_lock_init_recursive>:
 802e8e4:	4770      	bx	lr

0802e8e6 <__retarget_lock_acquire_recursive>:
 802e8e6:	4770      	bx	lr

0802e8e8 <__retarget_lock_release_recursive>:
 802e8e8:	4770      	bx	lr

0802e8ea <memcpy>:
 802e8ea:	440a      	add	r2, r1
 802e8ec:	4291      	cmp	r1, r2
 802e8ee:	f100 33ff 	add.w	r3, r0, #4294967295
 802e8f2:	d100      	bne.n	802e8f6 <memcpy+0xc>
 802e8f4:	4770      	bx	lr
 802e8f6:	b510      	push	{r4, lr}
 802e8f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e8fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e900:	4291      	cmp	r1, r2
 802e902:	d1f9      	bne.n	802e8f8 <memcpy+0xe>
 802e904:	bd10      	pop	{r4, pc}
	...

0802e908 <__register_exitproc>:
 802e908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e90c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 802e9c0 <__register_exitproc+0xb8>
 802e910:	4606      	mov	r6, r0
 802e912:	f8d8 0000 	ldr.w	r0, [r8]
 802e916:	461f      	mov	r7, r3
 802e918:	460d      	mov	r5, r1
 802e91a:	4691      	mov	r9, r2
 802e91c:	f7ff ffe3 	bl	802e8e6 <__retarget_lock_acquire_recursive>
 802e920:	4b23      	ldr	r3, [pc, #140]	; (802e9b0 <__register_exitproc+0xa8>)
 802e922:	681c      	ldr	r4, [r3, #0]
 802e924:	b934      	cbnz	r4, 802e934 <__register_exitproc+0x2c>
 802e926:	4c23      	ldr	r4, [pc, #140]	; (802e9b4 <__register_exitproc+0xac>)
 802e928:	601c      	str	r4, [r3, #0]
 802e92a:	4b23      	ldr	r3, [pc, #140]	; (802e9b8 <__register_exitproc+0xb0>)
 802e92c:	b113      	cbz	r3, 802e934 <__register_exitproc+0x2c>
 802e92e:	681b      	ldr	r3, [r3, #0]
 802e930:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802e934:	6863      	ldr	r3, [r4, #4]
 802e936:	2b1f      	cmp	r3, #31
 802e938:	dd07      	ble.n	802e94a <__register_exitproc+0x42>
 802e93a:	f8d8 0000 	ldr.w	r0, [r8]
 802e93e:	f7ff ffd3 	bl	802e8e8 <__retarget_lock_release_recursive>
 802e942:	f04f 30ff 	mov.w	r0, #4294967295
 802e946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e94a:	b32e      	cbz	r6, 802e998 <__register_exitproc+0x90>
 802e94c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802e950:	b968      	cbnz	r0, 802e96e <__register_exitproc+0x66>
 802e952:	4b1a      	ldr	r3, [pc, #104]	; (802e9bc <__register_exitproc+0xb4>)
 802e954:	2b00      	cmp	r3, #0
 802e956:	d0f0      	beq.n	802e93a <__register_exitproc+0x32>
 802e958:	f44f 7084 	mov.w	r0, #264	; 0x108
 802e95c:	f7ff f84e 	bl	802d9fc <malloc>
 802e960:	2800      	cmp	r0, #0
 802e962:	d0ea      	beq.n	802e93a <__register_exitproc+0x32>
 802e964:	2300      	movs	r3, #0
 802e966:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802e96a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802e96e:	6863      	ldr	r3, [r4, #4]
 802e970:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802e974:	2201      	movs	r2, #1
 802e976:	409a      	lsls	r2, r3
 802e978:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802e97c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802e980:	4313      	orrs	r3, r2
 802e982:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802e986:	2e02      	cmp	r6, #2
 802e988:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802e98c:	bf02      	ittt	eq
 802e98e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802e992:	4313      	orreq	r3, r2
 802e994:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802e998:	6863      	ldr	r3, [r4, #4]
 802e99a:	f8d8 0000 	ldr.w	r0, [r8]
 802e99e:	1c5a      	adds	r2, r3, #1
 802e9a0:	3302      	adds	r3, #2
 802e9a2:	6062      	str	r2, [r4, #4]
 802e9a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802e9a8:	f7ff ff9e 	bl	802e8e8 <__retarget_lock_release_recursive>
 802e9ac:	2000      	movs	r0, #0
 802e9ae:	e7ca      	b.n	802e946 <__register_exitproc+0x3e>
 802e9b0:	200070dc 	.word	0x200070dc
 802e9b4:	20007050 	.word	0x20007050
 802e9b8:	00000000 	.word	0x00000000
 802e9bc:	0802d9fd 	.word	0x0802d9fd
 802e9c0:	20000640 	.word	0x20000640

0802e9c4 <quorem>:
 802e9c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e9c8:	6903      	ldr	r3, [r0, #16]
 802e9ca:	690c      	ldr	r4, [r1, #16]
 802e9cc:	42a3      	cmp	r3, r4
 802e9ce:	4607      	mov	r7, r0
 802e9d0:	db7e      	blt.n	802ead0 <quorem+0x10c>
 802e9d2:	3c01      	subs	r4, #1
 802e9d4:	f101 0814 	add.w	r8, r1, #20
 802e9d8:	f100 0514 	add.w	r5, r0, #20
 802e9dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e9e0:	9301      	str	r3, [sp, #4]
 802e9e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802e9e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e9ea:	3301      	adds	r3, #1
 802e9ec:	429a      	cmp	r2, r3
 802e9ee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802e9f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802e9f6:	fbb2 f6f3 	udiv	r6, r2, r3
 802e9fa:	d331      	bcc.n	802ea60 <quorem+0x9c>
 802e9fc:	f04f 0e00 	mov.w	lr, #0
 802ea00:	4640      	mov	r0, r8
 802ea02:	46ac      	mov	ip, r5
 802ea04:	46f2      	mov	sl, lr
 802ea06:	f850 2b04 	ldr.w	r2, [r0], #4
 802ea0a:	b293      	uxth	r3, r2
 802ea0c:	fb06 e303 	mla	r3, r6, r3, lr
 802ea10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802ea14:	0c1a      	lsrs	r2, r3, #16
 802ea16:	b29b      	uxth	r3, r3
 802ea18:	ebaa 0303 	sub.w	r3, sl, r3
 802ea1c:	f8dc a000 	ldr.w	sl, [ip]
 802ea20:	fa13 f38a 	uxtah	r3, r3, sl
 802ea24:	fb06 220e 	mla	r2, r6, lr, r2
 802ea28:	9300      	str	r3, [sp, #0]
 802ea2a:	9b00      	ldr	r3, [sp, #0]
 802ea2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802ea30:	b292      	uxth	r2, r2
 802ea32:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802ea36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802ea3a:	f8bd 3000 	ldrh.w	r3, [sp]
 802ea3e:	4581      	cmp	r9, r0
 802ea40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802ea44:	f84c 3b04 	str.w	r3, [ip], #4
 802ea48:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802ea4c:	d2db      	bcs.n	802ea06 <quorem+0x42>
 802ea4e:	f855 300b 	ldr.w	r3, [r5, fp]
 802ea52:	b92b      	cbnz	r3, 802ea60 <quorem+0x9c>
 802ea54:	9b01      	ldr	r3, [sp, #4]
 802ea56:	3b04      	subs	r3, #4
 802ea58:	429d      	cmp	r5, r3
 802ea5a:	461a      	mov	r2, r3
 802ea5c:	d32c      	bcc.n	802eab8 <quorem+0xf4>
 802ea5e:	613c      	str	r4, [r7, #16]
 802ea60:	4638      	mov	r0, r7
 802ea62:	f001 f905 	bl	802fc70 <__mcmp>
 802ea66:	2800      	cmp	r0, #0
 802ea68:	db22      	blt.n	802eab0 <quorem+0xec>
 802ea6a:	3601      	adds	r6, #1
 802ea6c:	4629      	mov	r1, r5
 802ea6e:	2000      	movs	r0, #0
 802ea70:	f858 2b04 	ldr.w	r2, [r8], #4
 802ea74:	f8d1 c000 	ldr.w	ip, [r1]
 802ea78:	b293      	uxth	r3, r2
 802ea7a:	1ac3      	subs	r3, r0, r3
 802ea7c:	0c12      	lsrs	r2, r2, #16
 802ea7e:	fa13 f38c 	uxtah	r3, r3, ip
 802ea82:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802ea86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802ea8a:	b29b      	uxth	r3, r3
 802ea8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802ea90:	45c1      	cmp	r9, r8
 802ea92:	f841 3b04 	str.w	r3, [r1], #4
 802ea96:	ea4f 4022 	mov.w	r0, r2, asr #16
 802ea9a:	d2e9      	bcs.n	802ea70 <quorem+0xac>
 802ea9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802eaa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802eaa4:	b922      	cbnz	r2, 802eab0 <quorem+0xec>
 802eaa6:	3b04      	subs	r3, #4
 802eaa8:	429d      	cmp	r5, r3
 802eaaa:	461a      	mov	r2, r3
 802eaac:	d30a      	bcc.n	802eac4 <quorem+0x100>
 802eaae:	613c      	str	r4, [r7, #16]
 802eab0:	4630      	mov	r0, r6
 802eab2:	b003      	add	sp, #12
 802eab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802eab8:	6812      	ldr	r2, [r2, #0]
 802eaba:	3b04      	subs	r3, #4
 802eabc:	2a00      	cmp	r2, #0
 802eabe:	d1ce      	bne.n	802ea5e <quorem+0x9a>
 802eac0:	3c01      	subs	r4, #1
 802eac2:	e7c9      	b.n	802ea58 <quorem+0x94>
 802eac4:	6812      	ldr	r2, [r2, #0]
 802eac6:	3b04      	subs	r3, #4
 802eac8:	2a00      	cmp	r2, #0
 802eaca:	d1f0      	bne.n	802eaae <quorem+0xea>
 802eacc:	3c01      	subs	r4, #1
 802eace:	e7eb      	b.n	802eaa8 <quorem+0xe4>
 802ead0:	2000      	movs	r0, #0
 802ead2:	e7ee      	b.n	802eab2 <quorem+0xee>
 802ead4:	0000      	movs	r0, r0
	...

0802ead8 <_dtoa_r>:
 802ead8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eadc:	ed2d 8b04 	vpush	{d8-d9}
 802eae0:	69c5      	ldr	r5, [r0, #28]
 802eae2:	b093      	sub	sp, #76	; 0x4c
 802eae4:	ed8d 0b02 	vstr	d0, [sp, #8]
 802eae8:	ec57 6b10 	vmov	r6, r7, d0
 802eaec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802eaf0:	9107      	str	r1, [sp, #28]
 802eaf2:	4604      	mov	r4, r0
 802eaf4:	920a      	str	r2, [sp, #40]	; 0x28
 802eaf6:	930d      	str	r3, [sp, #52]	; 0x34
 802eaf8:	b975      	cbnz	r5, 802eb18 <_dtoa_r+0x40>
 802eafa:	2010      	movs	r0, #16
 802eafc:	f7fe ff7e 	bl	802d9fc <malloc>
 802eb00:	4602      	mov	r2, r0
 802eb02:	61e0      	str	r0, [r4, #28]
 802eb04:	b920      	cbnz	r0, 802eb10 <_dtoa_r+0x38>
 802eb06:	4bae      	ldr	r3, [pc, #696]	; (802edc0 <_dtoa_r+0x2e8>)
 802eb08:	21ef      	movs	r1, #239	; 0xef
 802eb0a:	48ae      	ldr	r0, [pc, #696]	; (802edc4 <_dtoa_r+0x2ec>)
 802eb0c:	f7fe ff34 	bl	802d978 <__assert_func>
 802eb10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802eb14:	6005      	str	r5, [r0, #0]
 802eb16:	60c5      	str	r5, [r0, #12]
 802eb18:	69e3      	ldr	r3, [r4, #28]
 802eb1a:	6819      	ldr	r1, [r3, #0]
 802eb1c:	b151      	cbz	r1, 802eb34 <_dtoa_r+0x5c>
 802eb1e:	685a      	ldr	r2, [r3, #4]
 802eb20:	604a      	str	r2, [r1, #4]
 802eb22:	2301      	movs	r3, #1
 802eb24:	4093      	lsls	r3, r2
 802eb26:	608b      	str	r3, [r1, #8]
 802eb28:	4620      	mov	r0, r4
 802eb2a:	f000 fe65 	bl	802f7f8 <_Bfree>
 802eb2e:	69e3      	ldr	r3, [r4, #28]
 802eb30:	2200      	movs	r2, #0
 802eb32:	601a      	str	r2, [r3, #0]
 802eb34:	1e3b      	subs	r3, r7, #0
 802eb36:	bfbb      	ittet	lt
 802eb38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802eb3c:	9303      	strlt	r3, [sp, #12]
 802eb3e:	2300      	movge	r3, #0
 802eb40:	2201      	movlt	r2, #1
 802eb42:	bfac      	ite	ge
 802eb44:	f8c8 3000 	strge.w	r3, [r8]
 802eb48:	f8c8 2000 	strlt.w	r2, [r8]
 802eb4c:	4b9e      	ldr	r3, [pc, #632]	; (802edc8 <_dtoa_r+0x2f0>)
 802eb4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802eb52:	ea33 0308 	bics.w	r3, r3, r8
 802eb56:	d11b      	bne.n	802eb90 <_dtoa_r+0xb8>
 802eb58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802eb5a:	f242 730f 	movw	r3, #9999	; 0x270f
 802eb5e:	6013      	str	r3, [r2, #0]
 802eb60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802eb64:	4333      	orrs	r3, r6
 802eb66:	f000 8593 	beq.w	802f690 <_dtoa_r+0xbb8>
 802eb6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802eb6c:	b963      	cbnz	r3, 802eb88 <_dtoa_r+0xb0>
 802eb6e:	4b97      	ldr	r3, [pc, #604]	; (802edcc <_dtoa_r+0x2f4>)
 802eb70:	e027      	b.n	802ebc2 <_dtoa_r+0xea>
 802eb72:	4b97      	ldr	r3, [pc, #604]	; (802edd0 <_dtoa_r+0x2f8>)
 802eb74:	9300      	str	r3, [sp, #0]
 802eb76:	3308      	adds	r3, #8
 802eb78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802eb7a:	6013      	str	r3, [r2, #0]
 802eb7c:	9800      	ldr	r0, [sp, #0]
 802eb7e:	b013      	add	sp, #76	; 0x4c
 802eb80:	ecbd 8b04 	vpop	{d8-d9}
 802eb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802eb88:	4b90      	ldr	r3, [pc, #576]	; (802edcc <_dtoa_r+0x2f4>)
 802eb8a:	9300      	str	r3, [sp, #0]
 802eb8c:	3303      	adds	r3, #3
 802eb8e:	e7f3      	b.n	802eb78 <_dtoa_r+0xa0>
 802eb90:	ed9d 7b02 	vldr	d7, [sp, #8]
 802eb94:	2200      	movs	r2, #0
 802eb96:	ec51 0b17 	vmov	r0, r1, d7
 802eb9a:	eeb0 8a47 	vmov.f32	s16, s14
 802eb9e:	eef0 8a67 	vmov.f32	s17, s15
 802eba2:	2300      	movs	r3, #0
 802eba4:	f7d1 ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 802eba8:	4681      	mov	r9, r0
 802ebaa:	b160      	cbz	r0, 802ebc6 <_dtoa_r+0xee>
 802ebac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802ebae:	2301      	movs	r3, #1
 802ebb0:	6013      	str	r3, [r2, #0]
 802ebb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802ebb4:	2b00      	cmp	r3, #0
 802ebb6:	f000 8568 	beq.w	802f68a <_dtoa_r+0xbb2>
 802ebba:	4b86      	ldr	r3, [pc, #536]	; (802edd4 <_dtoa_r+0x2fc>)
 802ebbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802ebbe:	6013      	str	r3, [r2, #0]
 802ebc0:	3b01      	subs	r3, #1
 802ebc2:	9300      	str	r3, [sp, #0]
 802ebc4:	e7da      	b.n	802eb7c <_dtoa_r+0xa4>
 802ebc6:	aa10      	add	r2, sp, #64	; 0x40
 802ebc8:	a911      	add	r1, sp, #68	; 0x44
 802ebca:	4620      	mov	r0, r4
 802ebcc:	eeb0 0a48 	vmov.f32	s0, s16
 802ebd0:	eef0 0a68 	vmov.f32	s1, s17
 802ebd4:	f001 f8f2 	bl	802fdbc <__d2b>
 802ebd8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802ebdc:	4682      	mov	sl, r0
 802ebde:	2d00      	cmp	r5, #0
 802ebe0:	d07f      	beq.n	802ece2 <_dtoa_r+0x20a>
 802ebe2:	ee18 3a90 	vmov	r3, s17
 802ebe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802ebea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802ebee:	ec51 0b18 	vmov	r0, r1, d8
 802ebf2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802ebf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802ebfa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802ebfe:	4619      	mov	r1, r3
 802ec00:	2200      	movs	r2, #0
 802ec02:	4b75      	ldr	r3, [pc, #468]	; (802edd8 <_dtoa_r+0x300>)
 802ec04:	f7d1 fb40 	bl	8000288 <__aeabi_dsub>
 802ec08:	a367      	add	r3, pc, #412	; (adr r3, 802eda8 <_dtoa_r+0x2d0>)
 802ec0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec0e:	f7d1 fcf3 	bl	80005f8 <__aeabi_dmul>
 802ec12:	a367      	add	r3, pc, #412	; (adr r3, 802edb0 <_dtoa_r+0x2d8>)
 802ec14:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec18:	f7d1 fb38 	bl	800028c <__adddf3>
 802ec1c:	4606      	mov	r6, r0
 802ec1e:	4628      	mov	r0, r5
 802ec20:	460f      	mov	r7, r1
 802ec22:	f7d1 fc7f 	bl	8000524 <__aeabi_i2d>
 802ec26:	a364      	add	r3, pc, #400	; (adr r3, 802edb8 <_dtoa_r+0x2e0>)
 802ec28:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec2c:	f7d1 fce4 	bl	80005f8 <__aeabi_dmul>
 802ec30:	4602      	mov	r2, r0
 802ec32:	460b      	mov	r3, r1
 802ec34:	4630      	mov	r0, r6
 802ec36:	4639      	mov	r1, r7
 802ec38:	f7d1 fb28 	bl	800028c <__adddf3>
 802ec3c:	4606      	mov	r6, r0
 802ec3e:	460f      	mov	r7, r1
 802ec40:	f7d1 ff8a 	bl	8000b58 <__aeabi_d2iz>
 802ec44:	2200      	movs	r2, #0
 802ec46:	4683      	mov	fp, r0
 802ec48:	2300      	movs	r3, #0
 802ec4a:	4630      	mov	r0, r6
 802ec4c:	4639      	mov	r1, r7
 802ec4e:	f7d1 ff45 	bl	8000adc <__aeabi_dcmplt>
 802ec52:	b148      	cbz	r0, 802ec68 <_dtoa_r+0x190>
 802ec54:	4658      	mov	r0, fp
 802ec56:	f7d1 fc65 	bl	8000524 <__aeabi_i2d>
 802ec5a:	4632      	mov	r2, r6
 802ec5c:	463b      	mov	r3, r7
 802ec5e:	f7d1 ff33 	bl	8000ac8 <__aeabi_dcmpeq>
 802ec62:	b908      	cbnz	r0, 802ec68 <_dtoa_r+0x190>
 802ec64:	f10b 3bff 	add.w	fp, fp, #4294967295
 802ec68:	f1bb 0f16 	cmp.w	fp, #22
 802ec6c:	d857      	bhi.n	802ed1e <_dtoa_r+0x246>
 802ec6e:	4b5b      	ldr	r3, [pc, #364]	; (802eddc <_dtoa_r+0x304>)
 802ec70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802ec74:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec78:	ec51 0b18 	vmov	r0, r1, d8
 802ec7c:	f7d1 ff2e 	bl	8000adc <__aeabi_dcmplt>
 802ec80:	2800      	cmp	r0, #0
 802ec82:	d04e      	beq.n	802ed22 <_dtoa_r+0x24a>
 802ec84:	f10b 3bff 	add.w	fp, fp, #4294967295
 802ec88:	2300      	movs	r3, #0
 802ec8a:	930c      	str	r3, [sp, #48]	; 0x30
 802ec8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802ec8e:	1b5b      	subs	r3, r3, r5
 802ec90:	1e5a      	subs	r2, r3, #1
 802ec92:	bf45      	ittet	mi
 802ec94:	f1c3 0301 	rsbmi	r3, r3, #1
 802ec98:	9305      	strmi	r3, [sp, #20]
 802ec9a:	2300      	movpl	r3, #0
 802ec9c:	2300      	movmi	r3, #0
 802ec9e:	9206      	str	r2, [sp, #24]
 802eca0:	bf54      	ite	pl
 802eca2:	9305      	strpl	r3, [sp, #20]
 802eca4:	9306      	strmi	r3, [sp, #24]
 802eca6:	f1bb 0f00 	cmp.w	fp, #0
 802ecaa:	db3c      	blt.n	802ed26 <_dtoa_r+0x24e>
 802ecac:	9b06      	ldr	r3, [sp, #24]
 802ecae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802ecb2:	445b      	add	r3, fp
 802ecb4:	9306      	str	r3, [sp, #24]
 802ecb6:	2300      	movs	r3, #0
 802ecb8:	9308      	str	r3, [sp, #32]
 802ecba:	9b07      	ldr	r3, [sp, #28]
 802ecbc:	2b09      	cmp	r3, #9
 802ecbe:	d868      	bhi.n	802ed92 <_dtoa_r+0x2ba>
 802ecc0:	2b05      	cmp	r3, #5
 802ecc2:	bfc4      	itt	gt
 802ecc4:	3b04      	subgt	r3, #4
 802ecc6:	9307      	strgt	r3, [sp, #28]
 802ecc8:	9b07      	ldr	r3, [sp, #28]
 802ecca:	f1a3 0302 	sub.w	r3, r3, #2
 802ecce:	bfcc      	ite	gt
 802ecd0:	2500      	movgt	r5, #0
 802ecd2:	2501      	movle	r5, #1
 802ecd4:	2b03      	cmp	r3, #3
 802ecd6:	f200 8085 	bhi.w	802ede4 <_dtoa_r+0x30c>
 802ecda:	e8df f003 	tbb	[pc, r3]
 802ecde:	3b2e      	.short	0x3b2e
 802ece0:	5839      	.short	0x5839
 802ece2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 802ece6:	441d      	add	r5, r3
 802ece8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802ecec:	2b20      	cmp	r3, #32
 802ecee:	bfc1      	itttt	gt
 802ecf0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802ecf4:	fa08 f803 	lslgt.w	r8, r8, r3
 802ecf8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 802ecfc:	fa26 f303 	lsrgt.w	r3, r6, r3
 802ed00:	bfd6      	itet	le
 802ed02:	f1c3 0320 	rsble	r3, r3, #32
 802ed06:	ea48 0003 	orrgt.w	r0, r8, r3
 802ed0a:	fa06 f003 	lslle.w	r0, r6, r3
 802ed0e:	f7d1 fbf9 	bl	8000504 <__aeabi_ui2d>
 802ed12:	2201      	movs	r2, #1
 802ed14:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 802ed18:	3d01      	subs	r5, #1
 802ed1a:	920e      	str	r2, [sp, #56]	; 0x38
 802ed1c:	e76f      	b.n	802ebfe <_dtoa_r+0x126>
 802ed1e:	2301      	movs	r3, #1
 802ed20:	e7b3      	b.n	802ec8a <_dtoa_r+0x1b2>
 802ed22:	900c      	str	r0, [sp, #48]	; 0x30
 802ed24:	e7b2      	b.n	802ec8c <_dtoa_r+0x1b4>
 802ed26:	9b05      	ldr	r3, [sp, #20]
 802ed28:	eba3 030b 	sub.w	r3, r3, fp
 802ed2c:	9305      	str	r3, [sp, #20]
 802ed2e:	f1cb 0300 	rsb	r3, fp, #0
 802ed32:	9308      	str	r3, [sp, #32]
 802ed34:	2300      	movs	r3, #0
 802ed36:	930b      	str	r3, [sp, #44]	; 0x2c
 802ed38:	e7bf      	b.n	802ecba <_dtoa_r+0x1e2>
 802ed3a:	2300      	movs	r3, #0
 802ed3c:	9309      	str	r3, [sp, #36]	; 0x24
 802ed3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ed40:	2b00      	cmp	r3, #0
 802ed42:	dc52      	bgt.n	802edea <_dtoa_r+0x312>
 802ed44:	2301      	movs	r3, #1
 802ed46:	9301      	str	r3, [sp, #4]
 802ed48:	9304      	str	r3, [sp, #16]
 802ed4a:	461a      	mov	r2, r3
 802ed4c:	920a      	str	r2, [sp, #40]	; 0x28
 802ed4e:	e00b      	b.n	802ed68 <_dtoa_r+0x290>
 802ed50:	2301      	movs	r3, #1
 802ed52:	e7f3      	b.n	802ed3c <_dtoa_r+0x264>
 802ed54:	2300      	movs	r3, #0
 802ed56:	9309      	str	r3, [sp, #36]	; 0x24
 802ed58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ed5a:	445b      	add	r3, fp
 802ed5c:	9301      	str	r3, [sp, #4]
 802ed5e:	3301      	adds	r3, #1
 802ed60:	2b01      	cmp	r3, #1
 802ed62:	9304      	str	r3, [sp, #16]
 802ed64:	bfb8      	it	lt
 802ed66:	2301      	movlt	r3, #1
 802ed68:	69e0      	ldr	r0, [r4, #28]
 802ed6a:	2100      	movs	r1, #0
 802ed6c:	2204      	movs	r2, #4
 802ed6e:	f102 0614 	add.w	r6, r2, #20
 802ed72:	429e      	cmp	r6, r3
 802ed74:	d93d      	bls.n	802edf2 <_dtoa_r+0x31a>
 802ed76:	6041      	str	r1, [r0, #4]
 802ed78:	4620      	mov	r0, r4
 802ed7a:	f000 fcfd 	bl	802f778 <_Balloc>
 802ed7e:	9000      	str	r0, [sp, #0]
 802ed80:	2800      	cmp	r0, #0
 802ed82:	d139      	bne.n	802edf8 <_dtoa_r+0x320>
 802ed84:	4b16      	ldr	r3, [pc, #88]	; (802ede0 <_dtoa_r+0x308>)
 802ed86:	4602      	mov	r2, r0
 802ed88:	f240 11af 	movw	r1, #431	; 0x1af
 802ed8c:	e6bd      	b.n	802eb0a <_dtoa_r+0x32>
 802ed8e:	2301      	movs	r3, #1
 802ed90:	e7e1      	b.n	802ed56 <_dtoa_r+0x27e>
 802ed92:	2501      	movs	r5, #1
 802ed94:	2300      	movs	r3, #0
 802ed96:	9307      	str	r3, [sp, #28]
 802ed98:	9509      	str	r5, [sp, #36]	; 0x24
 802ed9a:	f04f 33ff 	mov.w	r3, #4294967295
 802ed9e:	9301      	str	r3, [sp, #4]
 802eda0:	9304      	str	r3, [sp, #16]
 802eda2:	2200      	movs	r2, #0
 802eda4:	2312      	movs	r3, #18
 802eda6:	e7d1      	b.n	802ed4c <_dtoa_r+0x274>
 802eda8:	636f4361 	.word	0x636f4361
 802edac:	3fd287a7 	.word	0x3fd287a7
 802edb0:	8b60c8b3 	.word	0x8b60c8b3
 802edb4:	3fc68a28 	.word	0x3fc68a28
 802edb8:	509f79fb 	.word	0x509f79fb
 802edbc:	3fd34413 	.word	0x3fd34413
 802edc0:	08035540 	.word	0x08035540
 802edc4:	08035557 	.word	0x08035557
 802edc8:	7ff00000 	.word	0x7ff00000
 802edcc:	0803553c 	.word	0x0803553c
 802edd0:	08035533 	.word	0x08035533
 802edd4:	08035506 	.word	0x08035506
 802edd8:	3ff80000 	.word	0x3ff80000
 802eddc:	08035648 	.word	0x08035648
 802ede0:	080355af 	.word	0x080355af
 802ede4:	2301      	movs	r3, #1
 802ede6:	9309      	str	r3, [sp, #36]	; 0x24
 802ede8:	e7d7      	b.n	802ed9a <_dtoa_r+0x2c2>
 802edea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802edec:	9301      	str	r3, [sp, #4]
 802edee:	9304      	str	r3, [sp, #16]
 802edf0:	e7ba      	b.n	802ed68 <_dtoa_r+0x290>
 802edf2:	3101      	adds	r1, #1
 802edf4:	0052      	lsls	r2, r2, #1
 802edf6:	e7ba      	b.n	802ed6e <_dtoa_r+0x296>
 802edf8:	69e3      	ldr	r3, [r4, #28]
 802edfa:	9a00      	ldr	r2, [sp, #0]
 802edfc:	601a      	str	r2, [r3, #0]
 802edfe:	9b04      	ldr	r3, [sp, #16]
 802ee00:	2b0e      	cmp	r3, #14
 802ee02:	f200 80a8 	bhi.w	802ef56 <_dtoa_r+0x47e>
 802ee06:	2d00      	cmp	r5, #0
 802ee08:	f000 80a5 	beq.w	802ef56 <_dtoa_r+0x47e>
 802ee0c:	f1bb 0f00 	cmp.w	fp, #0
 802ee10:	dd38      	ble.n	802ee84 <_dtoa_r+0x3ac>
 802ee12:	4bc0      	ldr	r3, [pc, #768]	; (802f114 <_dtoa_r+0x63c>)
 802ee14:	f00b 020f 	and.w	r2, fp, #15
 802ee18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ee1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802ee20:	e9d3 6700 	ldrd	r6, r7, [r3]
 802ee24:	ea4f 182b 	mov.w	r8, fp, asr #4
 802ee28:	d019      	beq.n	802ee5e <_dtoa_r+0x386>
 802ee2a:	4bbb      	ldr	r3, [pc, #748]	; (802f118 <_dtoa_r+0x640>)
 802ee2c:	ec51 0b18 	vmov	r0, r1, d8
 802ee30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802ee34:	f7d1 fd0a 	bl	800084c <__aeabi_ddiv>
 802ee38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ee3c:	f008 080f 	and.w	r8, r8, #15
 802ee40:	2503      	movs	r5, #3
 802ee42:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 802f118 <_dtoa_r+0x640>
 802ee46:	f1b8 0f00 	cmp.w	r8, #0
 802ee4a:	d10a      	bne.n	802ee62 <_dtoa_r+0x38a>
 802ee4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ee50:	4632      	mov	r2, r6
 802ee52:	463b      	mov	r3, r7
 802ee54:	f7d1 fcfa 	bl	800084c <__aeabi_ddiv>
 802ee58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ee5c:	e02b      	b.n	802eeb6 <_dtoa_r+0x3de>
 802ee5e:	2502      	movs	r5, #2
 802ee60:	e7ef      	b.n	802ee42 <_dtoa_r+0x36a>
 802ee62:	f018 0f01 	tst.w	r8, #1
 802ee66:	d008      	beq.n	802ee7a <_dtoa_r+0x3a2>
 802ee68:	4630      	mov	r0, r6
 802ee6a:	4639      	mov	r1, r7
 802ee6c:	e9d9 2300 	ldrd	r2, r3, [r9]
 802ee70:	f7d1 fbc2 	bl	80005f8 <__aeabi_dmul>
 802ee74:	3501      	adds	r5, #1
 802ee76:	4606      	mov	r6, r0
 802ee78:	460f      	mov	r7, r1
 802ee7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 802ee7e:	f109 0908 	add.w	r9, r9, #8
 802ee82:	e7e0      	b.n	802ee46 <_dtoa_r+0x36e>
 802ee84:	f000 809f 	beq.w	802efc6 <_dtoa_r+0x4ee>
 802ee88:	f1cb 0600 	rsb	r6, fp, #0
 802ee8c:	4ba1      	ldr	r3, [pc, #644]	; (802f114 <_dtoa_r+0x63c>)
 802ee8e:	4fa2      	ldr	r7, [pc, #648]	; (802f118 <_dtoa_r+0x640>)
 802ee90:	f006 020f 	and.w	r2, r6, #15
 802ee94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ee98:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ee9c:	ec51 0b18 	vmov	r0, r1, d8
 802eea0:	f7d1 fbaa 	bl	80005f8 <__aeabi_dmul>
 802eea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802eea8:	1136      	asrs	r6, r6, #4
 802eeaa:	2300      	movs	r3, #0
 802eeac:	2502      	movs	r5, #2
 802eeae:	2e00      	cmp	r6, #0
 802eeb0:	d17e      	bne.n	802efb0 <_dtoa_r+0x4d8>
 802eeb2:	2b00      	cmp	r3, #0
 802eeb4:	d1d0      	bne.n	802ee58 <_dtoa_r+0x380>
 802eeb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802eeb8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802eebc:	2b00      	cmp	r3, #0
 802eebe:	f000 8084 	beq.w	802efca <_dtoa_r+0x4f2>
 802eec2:	4b96      	ldr	r3, [pc, #600]	; (802f11c <_dtoa_r+0x644>)
 802eec4:	2200      	movs	r2, #0
 802eec6:	4640      	mov	r0, r8
 802eec8:	4649      	mov	r1, r9
 802eeca:	f7d1 fe07 	bl	8000adc <__aeabi_dcmplt>
 802eece:	2800      	cmp	r0, #0
 802eed0:	d07b      	beq.n	802efca <_dtoa_r+0x4f2>
 802eed2:	9b04      	ldr	r3, [sp, #16]
 802eed4:	2b00      	cmp	r3, #0
 802eed6:	d078      	beq.n	802efca <_dtoa_r+0x4f2>
 802eed8:	9b01      	ldr	r3, [sp, #4]
 802eeda:	2b00      	cmp	r3, #0
 802eedc:	dd39      	ble.n	802ef52 <_dtoa_r+0x47a>
 802eede:	4b90      	ldr	r3, [pc, #576]	; (802f120 <_dtoa_r+0x648>)
 802eee0:	2200      	movs	r2, #0
 802eee2:	4640      	mov	r0, r8
 802eee4:	4649      	mov	r1, r9
 802eee6:	f7d1 fb87 	bl	80005f8 <__aeabi_dmul>
 802eeea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802eeee:	9e01      	ldr	r6, [sp, #4]
 802eef0:	f10b 37ff 	add.w	r7, fp, #4294967295
 802eef4:	3501      	adds	r5, #1
 802eef6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802eefa:	4628      	mov	r0, r5
 802eefc:	f7d1 fb12 	bl	8000524 <__aeabi_i2d>
 802ef00:	4642      	mov	r2, r8
 802ef02:	464b      	mov	r3, r9
 802ef04:	f7d1 fb78 	bl	80005f8 <__aeabi_dmul>
 802ef08:	4b86      	ldr	r3, [pc, #536]	; (802f124 <_dtoa_r+0x64c>)
 802ef0a:	2200      	movs	r2, #0
 802ef0c:	f7d1 f9be 	bl	800028c <__adddf3>
 802ef10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802ef14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ef18:	9303      	str	r3, [sp, #12]
 802ef1a:	2e00      	cmp	r6, #0
 802ef1c:	d158      	bne.n	802efd0 <_dtoa_r+0x4f8>
 802ef1e:	4b82      	ldr	r3, [pc, #520]	; (802f128 <_dtoa_r+0x650>)
 802ef20:	2200      	movs	r2, #0
 802ef22:	4640      	mov	r0, r8
 802ef24:	4649      	mov	r1, r9
 802ef26:	f7d1 f9af 	bl	8000288 <__aeabi_dsub>
 802ef2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802ef2e:	4680      	mov	r8, r0
 802ef30:	4689      	mov	r9, r1
 802ef32:	f7d1 fdf1 	bl	8000b18 <__aeabi_dcmpgt>
 802ef36:	2800      	cmp	r0, #0
 802ef38:	f040 8296 	bne.w	802f468 <_dtoa_r+0x990>
 802ef3c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802ef40:	4640      	mov	r0, r8
 802ef42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802ef46:	4649      	mov	r1, r9
 802ef48:	f7d1 fdc8 	bl	8000adc <__aeabi_dcmplt>
 802ef4c:	2800      	cmp	r0, #0
 802ef4e:	f040 8289 	bne.w	802f464 <_dtoa_r+0x98c>
 802ef52:	ed8d 8b02 	vstr	d8, [sp, #8]
 802ef56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802ef58:	2b00      	cmp	r3, #0
 802ef5a:	f2c0 814e 	blt.w	802f1fa <_dtoa_r+0x722>
 802ef5e:	f1bb 0f0e 	cmp.w	fp, #14
 802ef62:	f300 814a 	bgt.w	802f1fa <_dtoa_r+0x722>
 802ef66:	4b6b      	ldr	r3, [pc, #428]	; (802f114 <_dtoa_r+0x63c>)
 802ef68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802ef6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 802ef70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ef72:	2b00      	cmp	r3, #0
 802ef74:	f280 80dc 	bge.w	802f130 <_dtoa_r+0x658>
 802ef78:	9b04      	ldr	r3, [sp, #16]
 802ef7a:	2b00      	cmp	r3, #0
 802ef7c:	f300 80d8 	bgt.w	802f130 <_dtoa_r+0x658>
 802ef80:	f040 826f 	bne.w	802f462 <_dtoa_r+0x98a>
 802ef84:	4b68      	ldr	r3, [pc, #416]	; (802f128 <_dtoa_r+0x650>)
 802ef86:	2200      	movs	r2, #0
 802ef88:	4640      	mov	r0, r8
 802ef8a:	4649      	mov	r1, r9
 802ef8c:	f7d1 fb34 	bl	80005f8 <__aeabi_dmul>
 802ef90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802ef94:	f7d1 fdb6 	bl	8000b04 <__aeabi_dcmpge>
 802ef98:	9e04      	ldr	r6, [sp, #16]
 802ef9a:	4637      	mov	r7, r6
 802ef9c:	2800      	cmp	r0, #0
 802ef9e:	f040 8245 	bne.w	802f42c <_dtoa_r+0x954>
 802efa2:	9d00      	ldr	r5, [sp, #0]
 802efa4:	2331      	movs	r3, #49	; 0x31
 802efa6:	f805 3b01 	strb.w	r3, [r5], #1
 802efaa:	f10b 0b01 	add.w	fp, fp, #1
 802efae:	e241      	b.n	802f434 <_dtoa_r+0x95c>
 802efb0:	07f2      	lsls	r2, r6, #31
 802efb2:	d505      	bpl.n	802efc0 <_dtoa_r+0x4e8>
 802efb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 802efb8:	f7d1 fb1e 	bl	80005f8 <__aeabi_dmul>
 802efbc:	3501      	adds	r5, #1
 802efbe:	2301      	movs	r3, #1
 802efc0:	1076      	asrs	r6, r6, #1
 802efc2:	3708      	adds	r7, #8
 802efc4:	e773      	b.n	802eeae <_dtoa_r+0x3d6>
 802efc6:	2502      	movs	r5, #2
 802efc8:	e775      	b.n	802eeb6 <_dtoa_r+0x3de>
 802efca:	9e04      	ldr	r6, [sp, #16]
 802efcc:	465f      	mov	r7, fp
 802efce:	e792      	b.n	802eef6 <_dtoa_r+0x41e>
 802efd0:	9900      	ldr	r1, [sp, #0]
 802efd2:	4b50      	ldr	r3, [pc, #320]	; (802f114 <_dtoa_r+0x63c>)
 802efd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 802efd8:	4431      	add	r1, r6
 802efda:	9102      	str	r1, [sp, #8]
 802efdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 802efde:	eeb0 9a47 	vmov.f32	s18, s14
 802efe2:	eef0 9a67 	vmov.f32	s19, s15
 802efe6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802efea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802efee:	2900      	cmp	r1, #0
 802eff0:	d044      	beq.n	802f07c <_dtoa_r+0x5a4>
 802eff2:	494e      	ldr	r1, [pc, #312]	; (802f12c <_dtoa_r+0x654>)
 802eff4:	2000      	movs	r0, #0
 802eff6:	f7d1 fc29 	bl	800084c <__aeabi_ddiv>
 802effa:	ec53 2b19 	vmov	r2, r3, d9
 802effe:	f7d1 f943 	bl	8000288 <__aeabi_dsub>
 802f002:	9d00      	ldr	r5, [sp, #0]
 802f004:	ec41 0b19 	vmov	d9, r0, r1
 802f008:	4649      	mov	r1, r9
 802f00a:	4640      	mov	r0, r8
 802f00c:	f7d1 fda4 	bl	8000b58 <__aeabi_d2iz>
 802f010:	4606      	mov	r6, r0
 802f012:	f7d1 fa87 	bl	8000524 <__aeabi_i2d>
 802f016:	4602      	mov	r2, r0
 802f018:	460b      	mov	r3, r1
 802f01a:	4640      	mov	r0, r8
 802f01c:	4649      	mov	r1, r9
 802f01e:	f7d1 f933 	bl	8000288 <__aeabi_dsub>
 802f022:	3630      	adds	r6, #48	; 0x30
 802f024:	f805 6b01 	strb.w	r6, [r5], #1
 802f028:	ec53 2b19 	vmov	r2, r3, d9
 802f02c:	4680      	mov	r8, r0
 802f02e:	4689      	mov	r9, r1
 802f030:	f7d1 fd54 	bl	8000adc <__aeabi_dcmplt>
 802f034:	2800      	cmp	r0, #0
 802f036:	d164      	bne.n	802f102 <_dtoa_r+0x62a>
 802f038:	4642      	mov	r2, r8
 802f03a:	464b      	mov	r3, r9
 802f03c:	4937      	ldr	r1, [pc, #220]	; (802f11c <_dtoa_r+0x644>)
 802f03e:	2000      	movs	r0, #0
 802f040:	f7d1 f922 	bl	8000288 <__aeabi_dsub>
 802f044:	ec53 2b19 	vmov	r2, r3, d9
 802f048:	f7d1 fd48 	bl	8000adc <__aeabi_dcmplt>
 802f04c:	2800      	cmp	r0, #0
 802f04e:	f040 80b6 	bne.w	802f1be <_dtoa_r+0x6e6>
 802f052:	9b02      	ldr	r3, [sp, #8]
 802f054:	429d      	cmp	r5, r3
 802f056:	f43f af7c 	beq.w	802ef52 <_dtoa_r+0x47a>
 802f05a:	4b31      	ldr	r3, [pc, #196]	; (802f120 <_dtoa_r+0x648>)
 802f05c:	ec51 0b19 	vmov	r0, r1, d9
 802f060:	2200      	movs	r2, #0
 802f062:	f7d1 fac9 	bl	80005f8 <__aeabi_dmul>
 802f066:	4b2e      	ldr	r3, [pc, #184]	; (802f120 <_dtoa_r+0x648>)
 802f068:	ec41 0b19 	vmov	d9, r0, r1
 802f06c:	2200      	movs	r2, #0
 802f06e:	4640      	mov	r0, r8
 802f070:	4649      	mov	r1, r9
 802f072:	f7d1 fac1 	bl	80005f8 <__aeabi_dmul>
 802f076:	4680      	mov	r8, r0
 802f078:	4689      	mov	r9, r1
 802f07a:	e7c5      	b.n	802f008 <_dtoa_r+0x530>
 802f07c:	ec51 0b17 	vmov	r0, r1, d7
 802f080:	f7d1 faba 	bl	80005f8 <__aeabi_dmul>
 802f084:	9b02      	ldr	r3, [sp, #8]
 802f086:	9d00      	ldr	r5, [sp, #0]
 802f088:	930f      	str	r3, [sp, #60]	; 0x3c
 802f08a:	ec41 0b19 	vmov	d9, r0, r1
 802f08e:	4649      	mov	r1, r9
 802f090:	4640      	mov	r0, r8
 802f092:	f7d1 fd61 	bl	8000b58 <__aeabi_d2iz>
 802f096:	4606      	mov	r6, r0
 802f098:	f7d1 fa44 	bl	8000524 <__aeabi_i2d>
 802f09c:	3630      	adds	r6, #48	; 0x30
 802f09e:	4602      	mov	r2, r0
 802f0a0:	460b      	mov	r3, r1
 802f0a2:	4640      	mov	r0, r8
 802f0a4:	4649      	mov	r1, r9
 802f0a6:	f7d1 f8ef 	bl	8000288 <__aeabi_dsub>
 802f0aa:	f805 6b01 	strb.w	r6, [r5], #1
 802f0ae:	9b02      	ldr	r3, [sp, #8]
 802f0b0:	429d      	cmp	r5, r3
 802f0b2:	4680      	mov	r8, r0
 802f0b4:	4689      	mov	r9, r1
 802f0b6:	f04f 0200 	mov.w	r2, #0
 802f0ba:	d124      	bne.n	802f106 <_dtoa_r+0x62e>
 802f0bc:	4b1b      	ldr	r3, [pc, #108]	; (802f12c <_dtoa_r+0x654>)
 802f0be:	ec51 0b19 	vmov	r0, r1, d9
 802f0c2:	f7d1 f8e3 	bl	800028c <__adddf3>
 802f0c6:	4602      	mov	r2, r0
 802f0c8:	460b      	mov	r3, r1
 802f0ca:	4640      	mov	r0, r8
 802f0cc:	4649      	mov	r1, r9
 802f0ce:	f7d1 fd23 	bl	8000b18 <__aeabi_dcmpgt>
 802f0d2:	2800      	cmp	r0, #0
 802f0d4:	d173      	bne.n	802f1be <_dtoa_r+0x6e6>
 802f0d6:	ec53 2b19 	vmov	r2, r3, d9
 802f0da:	4914      	ldr	r1, [pc, #80]	; (802f12c <_dtoa_r+0x654>)
 802f0dc:	2000      	movs	r0, #0
 802f0de:	f7d1 f8d3 	bl	8000288 <__aeabi_dsub>
 802f0e2:	4602      	mov	r2, r0
 802f0e4:	460b      	mov	r3, r1
 802f0e6:	4640      	mov	r0, r8
 802f0e8:	4649      	mov	r1, r9
 802f0ea:	f7d1 fcf7 	bl	8000adc <__aeabi_dcmplt>
 802f0ee:	2800      	cmp	r0, #0
 802f0f0:	f43f af2f 	beq.w	802ef52 <_dtoa_r+0x47a>
 802f0f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802f0f6:	1e6b      	subs	r3, r5, #1
 802f0f8:	930f      	str	r3, [sp, #60]	; 0x3c
 802f0fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802f0fe:	2b30      	cmp	r3, #48	; 0x30
 802f100:	d0f8      	beq.n	802f0f4 <_dtoa_r+0x61c>
 802f102:	46bb      	mov	fp, r7
 802f104:	e04a      	b.n	802f19c <_dtoa_r+0x6c4>
 802f106:	4b06      	ldr	r3, [pc, #24]	; (802f120 <_dtoa_r+0x648>)
 802f108:	f7d1 fa76 	bl	80005f8 <__aeabi_dmul>
 802f10c:	4680      	mov	r8, r0
 802f10e:	4689      	mov	r9, r1
 802f110:	e7bd      	b.n	802f08e <_dtoa_r+0x5b6>
 802f112:	bf00      	nop
 802f114:	08035648 	.word	0x08035648
 802f118:	08035620 	.word	0x08035620
 802f11c:	3ff00000 	.word	0x3ff00000
 802f120:	40240000 	.word	0x40240000
 802f124:	401c0000 	.word	0x401c0000
 802f128:	40140000 	.word	0x40140000
 802f12c:	3fe00000 	.word	0x3fe00000
 802f130:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802f134:	9d00      	ldr	r5, [sp, #0]
 802f136:	4642      	mov	r2, r8
 802f138:	464b      	mov	r3, r9
 802f13a:	4630      	mov	r0, r6
 802f13c:	4639      	mov	r1, r7
 802f13e:	f7d1 fb85 	bl	800084c <__aeabi_ddiv>
 802f142:	f7d1 fd09 	bl	8000b58 <__aeabi_d2iz>
 802f146:	9001      	str	r0, [sp, #4]
 802f148:	f7d1 f9ec 	bl	8000524 <__aeabi_i2d>
 802f14c:	4642      	mov	r2, r8
 802f14e:	464b      	mov	r3, r9
 802f150:	f7d1 fa52 	bl	80005f8 <__aeabi_dmul>
 802f154:	4602      	mov	r2, r0
 802f156:	460b      	mov	r3, r1
 802f158:	4630      	mov	r0, r6
 802f15a:	4639      	mov	r1, r7
 802f15c:	f7d1 f894 	bl	8000288 <__aeabi_dsub>
 802f160:	9e01      	ldr	r6, [sp, #4]
 802f162:	9f04      	ldr	r7, [sp, #16]
 802f164:	3630      	adds	r6, #48	; 0x30
 802f166:	f805 6b01 	strb.w	r6, [r5], #1
 802f16a:	9e00      	ldr	r6, [sp, #0]
 802f16c:	1bae      	subs	r6, r5, r6
 802f16e:	42b7      	cmp	r7, r6
 802f170:	4602      	mov	r2, r0
 802f172:	460b      	mov	r3, r1
 802f174:	d134      	bne.n	802f1e0 <_dtoa_r+0x708>
 802f176:	f7d1 f889 	bl	800028c <__adddf3>
 802f17a:	4642      	mov	r2, r8
 802f17c:	464b      	mov	r3, r9
 802f17e:	4606      	mov	r6, r0
 802f180:	460f      	mov	r7, r1
 802f182:	f7d1 fcc9 	bl	8000b18 <__aeabi_dcmpgt>
 802f186:	b9c8      	cbnz	r0, 802f1bc <_dtoa_r+0x6e4>
 802f188:	4642      	mov	r2, r8
 802f18a:	464b      	mov	r3, r9
 802f18c:	4630      	mov	r0, r6
 802f18e:	4639      	mov	r1, r7
 802f190:	f7d1 fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 802f194:	b110      	cbz	r0, 802f19c <_dtoa_r+0x6c4>
 802f196:	9b01      	ldr	r3, [sp, #4]
 802f198:	07db      	lsls	r3, r3, #31
 802f19a:	d40f      	bmi.n	802f1bc <_dtoa_r+0x6e4>
 802f19c:	4651      	mov	r1, sl
 802f19e:	4620      	mov	r0, r4
 802f1a0:	f000 fb2a 	bl	802f7f8 <_Bfree>
 802f1a4:	2300      	movs	r3, #0
 802f1a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802f1a8:	702b      	strb	r3, [r5, #0]
 802f1aa:	f10b 0301 	add.w	r3, fp, #1
 802f1ae:	6013      	str	r3, [r2, #0]
 802f1b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802f1b2:	2b00      	cmp	r3, #0
 802f1b4:	f43f ace2 	beq.w	802eb7c <_dtoa_r+0xa4>
 802f1b8:	601d      	str	r5, [r3, #0]
 802f1ba:	e4df      	b.n	802eb7c <_dtoa_r+0xa4>
 802f1bc:	465f      	mov	r7, fp
 802f1be:	462b      	mov	r3, r5
 802f1c0:	461d      	mov	r5, r3
 802f1c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802f1c6:	2a39      	cmp	r2, #57	; 0x39
 802f1c8:	d106      	bne.n	802f1d8 <_dtoa_r+0x700>
 802f1ca:	9a00      	ldr	r2, [sp, #0]
 802f1cc:	429a      	cmp	r2, r3
 802f1ce:	d1f7      	bne.n	802f1c0 <_dtoa_r+0x6e8>
 802f1d0:	9900      	ldr	r1, [sp, #0]
 802f1d2:	2230      	movs	r2, #48	; 0x30
 802f1d4:	3701      	adds	r7, #1
 802f1d6:	700a      	strb	r2, [r1, #0]
 802f1d8:	781a      	ldrb	r2, [r3, #0]
 802f1da:	3201      	adds	r2, #1
 802f1dc:	701a      	strb	r2, [r3, #0]
 802f1de:	e790      	b.n	802f102 <_dtoa_r+0x62a>
 802f1e0:	4ba3      	ldr	r3, [pc, #652]	; (802f470 <_dtoa_r+0x998>)
 802f1e2:	2200      	movs	r2, #0
 802f1e4:	f7d1 fa08 	bl	80005f8 <__aeabi_dmul>
 802f1e8:	2200      	movs	r2, #0
 802f1ea:	2300      	movs	r3, #0
 802f1ec:	4606      	mov	r6, r0
 802f1ee:	460f      	mov	r7, r1
 802f1f0:	f7d1 fc6a 	bl	8000ac8 <__aeabi_dcmpeq>
 802f1f4:	2800      	cmp	r0, #0
 802f1f6:	d09e      	beq.n	802f136 <_dtoa_r+0x65e>
 802f1f8:	e7d0      	b.n	802f19c <_dtoa_r+0x6c4>
 802f1fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802f1fc:	2a00      	cmp	r2, #0
 802f1fe:	f000 80ca 	beq.w	802f396 <_dtoa_r+0x8be>
 802f202:	9a07      	ldr	r2, [sp, #28]
 802f204:	2a01      	cmp	r2, #1
 802f206:	f300 80ad 	bgt.w	802f364 <_dtoa_r+0x88c>
 802f20a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802f20c:	2a00      	cmp	r2, #0
 802f20e:	f000 80a5 	beq.w	802f35c <_dtoa_r+0x884>
 802f212:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802f216:	9e08      	ldr	r6, [sp, #32]
 802f218:	9d05      	ldr	r5, [sp, #20]
 802f21a:	9a05      	ldr	r2, [sp, #20]
 802f21c:	441a      	add	r2, r3
 802f21e:	9205      	str	r2, [sp, #20]
 802f220:	9a06      	ldr	r2, [sp, #24]
 802f222:	2101      	movs	r1, #1
 802f224:	441a      	add	r2, r3
 802f226:	4620      	mov	r0, r4
 802f228:	9206      	str	r2, [sp, #24]
 802f22a:	f000 fb9b 	bl	802f964 <__i2b>
 802f22e:	4607      	mov	r7, r0
 802f230:	b165      	cbz	r5, 802f24c <_dtoa_r+0x774>
 802f232:	9b06      	ldr	r3, [sp, #24]
 802f234:	2b00      	cmp	r3, #0
 802f236:	dd09      	ble.n	802f24c <_dtoa_r+0x774>
 802f238:	42ab      	cmp	r3, r5
 802f23a:	9a05      	ldr	r2, [sp, #20]
 802f23c:	bfa8      	it	ge
 802f23e:	462b      	movge	r3, r5
 802f240:	1ad2      	subs	r2, r2, r3
 802f242:	9205      	str	r2, [sp, #20]
 802f244:	9a06      	ldr	r2, [sp, #24]
 802f246:	1aed      	subs	r5, r5, r3
 802f248:	1ad3      	subs	r3, r2, r3
 802f24a:	9306      	str	r3, [sp, #24]
 802f24c:	9b08      	ldr	r3, [sp, #32]
 802f24e:	b1f3      	cbz	r3, 802f28e <_dtoa_r+0x7b6>
 802f250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f252:	2b00      	cmp	r3, #0
 802f254:	f000 80a3 	beq.w	802f39e <_dtoa_r+0x8c6>
 802f258:	2e00      	cmp	r6, #0
 802f25a:	dd10      	ble.n	802f27e <_dtoa_r+0x7a6>
 802f25c:	4639      	mov	r1, r7
 802f25e:	4632      	mov	r2, r6
 802f260:	4620      	mov	r0, r4
 802f262:	f000 fc3f 	bl	802fae4 <__pow5mult>
 802f266:	4652      	mov	r2, sl
 802f268:	4601      	mov	r1, r0
 802f26a:	4607      	mov	r7, r0
 802f26c:	4620      	mov	r0, r4
 802f26e:	f000 fb8f 	bl	802f990 <__multiply>
 802f272:	4651      	mov	r1, sl
 802f274:	4680      	mov	r8, r0
 802f276:	4620      	mov	r0, r4
 802f278:	f000 fabe 	bl	802f7f8 <_Bfree>
 802f27c:	46c2      	mov	sl, r8
 802f27e:	9b08      	ldr	r3, [sp, #32]
 802f280:	1b9a      	subs	r2, r3, r6
 802f282:	d004      	beq.n	802f28e <_dtoa_r+0x7b6>
 802f284:	4651      	mov	r1, sl
 802f286:	4620      	mov	r0, r4
 802f288:	f000 fc2c 	bl	802fae4 <__pow5mult>
 802f28c:	4682      	mov	sl, r0
 802f28e:	2101      	movs	r1, #1
 802f290:	4620      	mov	r0, r4
 802f292:	f000 fb67 	bl	802f964 <__i2b>
 802f296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f298:	2b00      	cmp	r3, #0
 802f29a:	4606      	mov	r6, r0
 802f29c:	f340 8081 	ble.w	802f3a2 <_dtoa_r+0x8ca>
 802f2a0:	461a      	mov	r2, r3
 802f2a2:	4601      	mov	r1, r0
 802f2a4:	4620      	mov	r0, r4
 802f2a6:	f000 fc1d 	bl	802fae4 <__pow5mult>
 802f2aa:	9b07      	ldr	r3, [sp, #28]
 802f2ac:	2b01      	cmp	r3, #1
 802f2ae:	4606      	mov	r6, r0
 802f2b0:	dd7a      	ble.n	802f3a8 <_dtoa_r+0x8d0>
 802f2b2:	f04f 0800 	mov.w	r8, #0
 802f2b6:	6933      	ldr	r3, [r6, #16]
 802f2b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802f2bc:	6918      	ldr	r0, [r3, #16]
 802f2be:	f000 fb03 	bl	802f8c8 <__hi0bits>
 802f2c2:	f1c0 0020 	rsb	r0, r0, #32
 802f2c6:	9b06      	ldr	r3, [sp, #24]
 802f2c8:	4418      	add	r0, r3
 802f2ca:	f010 001f 	ands.w	r0, r0, #31
 802f2ce:	f000 8094 	beq.w	802f3fa <_dtoa_r+0x922>
 802f2d2:	f1c0 0320 	rsb	r3, r0, #32
 802f2d6:	2b04      	cmp	r3, #4
 802f2d8:	f340 8085 	ble.w	802f3e6 <_dtoa_r+0x90e>
 802f2dc:	9b05      	ldr	r3, [sp, #20]
 802f2de:	f1c0 001c 	rsb	r0, r0, #28
 802f2e2:	4403      	add	r3, r0
 802f2e4:	9305      	str	r3, [sp, #20]
 802f2e6:	9b06      	ldr	r3, [sp, #24]
 802f2e8:	4403      	add	r3, r0
 802f2ea:	4405      	add	r5, r0
 802f2ec:	9306      	str	r3, [sp, #24]
 802f2ee:	9b05      	ldr	r3, [sp, #20]
 802f2f0:	2b00      	cmp	r3, #0
 802f2f2:	dd05      	ble.n	802f300 <_dtoa_r+0x828>
 802f2f4:	4651      	mov	r1, sl
 802f2f6:	461a      	mov	r2, r3
 802f2f8:	4620      	mov	r0, r4
 802f2fa:	f000 fc4d 	bl	802fb98 <__lshift>
 802f2fe:	4682      	mov	sl, r0
 802f300:	9b06      	ldr	r3, [sp, #24]
 802f302:	2b00      	cmp	r3, #0
 802f304:	dd05      	ble.n	802f312 <_dtoa_r+0x83a>
 802f306:	4631      	mov	r1, r6
 802f308:	461a      	mov	r2, r3
 802f30a:	4620      	mov	r0, r4
 802f30c:	f000 fc44 	bl	802fb98 <__lshift>
 802f310:	4606      	mov	r6, r0
 802f312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802f314:	2b00      	cmp	r3, #0
 802f316:	d072      	beq.n	802f3fe <_dtoa_r+0x926>
 802f318:	4631      	mov	r1, r6
 802f31a:	4650      	mov	r0, sl
 802f31c:	f000 fca8 	bl	802fc70 <__mcmp>
 802f320:	2800      	cmp	r0, #0
 802f322:	da6c      	bge.n	802f3fe <_dtoa_r+0x926>
 802f324:	2300      	movs	r3, #0
 802f326:	4651      	mov	r1, sl
 802f328:	220a      	movs	r2, #10
 802f32a:	4620      	mov	r0, r4
 802f32c:	f000 fa86 	bl	802f83c <__multadd>
 802f330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f332:	f10b 3bff 	add.w	fp, fp, #4294967295
 802f336:	4682      	mov	sl, r0
 802f338:	2b00      	cmp	r3, #0
 802f33a:	f000 81b0 	beq.w	802f69e <_dtoa_r+0xbc6>
 802f33e:	2300      	movs	r3, #0
 802f340:	4639      	mov	r1, r7
 802f342:	220a      	movs	r2, #10
 802f344:	4620      	mov	r0, r4
 802f346:	f000 fa79 	bl	802f83c <__multadd>
 802f34a:	9b01      	ldr	r3, [sp, #4]
 802f34c:	2b00      	cmp	r3, #0
 802f34e:	4607      	mov	r7, r0
 802f350:	f300 8096 	bgt.w	802f480 <_dtoa_r+0x9a8>
 802f354:	9b07      	ldr	r3, [sp, #28]
 802f356:	2b02      	cmp	r3, #2
 802f358:	dc59      	bgt.n	802f40e <_dtoa_r+0x936>
 802f35a:	e091      	b.n	802f480 <_dtoa_r+0x9a8>
 802f35c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802f35e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802f362:	e758      	b.n	802f216 <_dtoa_r+0x73e>
 802f364:	9b04      	ldr	r3, [sp, #16]
 802f366:	1e5e      	subs	r6, r3, #1
 802f368:	9b08      	ldr	r3, [sp, #32]
 802f36a:	42b3      	cmp	r3, r6
 802f36c:	bfbf      	itttt	lt
 802f36e:	9b08      	ldrlt	r3, [sp, #32]
 802f370:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802f372:	9608      	strlt	r6, [sp, #32]
 802f374:	1af3      	sublt	r3, r6, r3
 802f376:	bfb4      	ite	lt
 802f378:	18d2      	addlt	r2, r2, r3
 802f37a:	1b9e      	subge	r6, r3, r6
 802f37c:	9b04      	ldr	r3, [sp, #16]
 802f37e:	bfbc      	itt	lt
 802f380:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802f382:	2600      	movlt	r6, #0
 802f384:	2b00      	cmp	r3, #0
 802f386:	bfb7      	itett	lt
 802f388:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802f38c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 802f390:	1a9d      	sublt	r5, r3, r2
 802f392:	2300      	movlt	r3, #0
 802f394:	e741      	b.n	802f21a <_dtoa_r+0x742>
 802f396:	9e08      	ldr	r6, [sp, #32]
 802f398:	9d05      	ldr	r5, [sp, #20]
 802f39a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802f39c:	e748      	b.n	802f230 <_dtoa_r+0x758>
 802f39e:	9a08      	ldr	r2, [sp, #32]
 802f3a0:	e770      	b.n	802f284 <_dtoa_r+0x7ac>
 802f3a2:	9b07      	ldr	r3, [sp, #28]
 802f3a4:	2b01      	cmp	r3, #1
 802f3a6:	dc19      	bgt.n	802f3dc <_dtoa_r+0x904>
 802f3a8:	9b02      	ldr	r3, [sp, #8]
 802f3aa:	b9bb      	cbnz	r3, 802f3dc <_dtoa_r+0x904>
 802f3ac:	9b03      	ldr	r3, [sp, #12]
 802f3ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802f3b2:	b99b      	cbnz	r3, 802f3dc <_dtoa_r+0x904>
 802f3b4:	9b03      	ldr	r3, [sp, #12]
 802f3b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802f3ba:	0d1b      	lsrs	r3, r3, #20
 802f3bc:	051b      	lsls	r3, r3, #20
 802f3be:	b183      	cbz	r3, 802f3e2 <_dtoa_r+0x90a>
 802f3c0:	9b05      	ldr	r3, [sp, #20]
 802f3c2:	3301      	adds	r3, #1
 802f3c4:	9305      	str	r3, [sp, #20]
 802f3c6:	9b06      	ldr	r3, [sp, #24]
 802f3c8:	3301      	adds	r3, #1
 802f3ca:	9306      	str	r3, [sp, #24]
 802f3cc:	f04f 0801 	mov.w	r8, #1
 802f3d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f3d2:	2b00      	cmp	r3, #0
 802f3d4:	f47f af6f 	bne.w	802f2b6 <_dtoa_r+0x7de>
 802f3d8:	2001      	movs	r0, #1
 802f3da:	e774      	b.n	802f2c6 <_dtoa_r+0x7ee>
 802f3dc:	f04f 0800 	mov.w	r8, #0
 802f3e0:	e7f6      	b.n	802f3d0 <_dtoa_r+0x8f8>
 802f3e2:	4698      	mov	r8, r3
 802f3e4:	e7f4      	b.n	802f3d0 <_dtoa_r+0x8f8>
 802f3e6:	d082      	beq.n	802f2ee <_dtoa_r+0x816>
 802f3e8:	9a05      	ldr	r2, [sp, #20]
 802f3ea:	331c      	adds	r3, #28
 802f3ec:	441a      	add	r2, r3
 802f3ee:	9205      	str	r2, [sp, #20]
 802f3f0:	9a06      	ldr	r2, [sp, #24]
 802f3f2:	441a      	add	r2, r3
 802f3f4:	441d      	add	r5, r3
 802f3f6:	9206      	str	r2, [sp, #24]
 802f3f8:	e779      	b.n	802f2ee <_dtoa_r+0x816>
 802f3fa:	4603      	mov	r3, r0
 802f3fc:	e7f4      	b.n	802f3e8 <_dtoa_r+0x910>
 802f3fe:	9b04      	ldr	r3, [sp, #16]
 802f400:	2b00      	cmp	r3, #0
 802f402:	dc37      	bgt.n	802f474 <_dtoa_r+0x99c>
 802f404:	9b07      	ldr	r3, [sp, #28]
 802f406:	2b02      	cmp	r3, #2
 802f408:	dd34      	ble.n	802f474 <_dtoa_r+0x99c>
 802f40a:	9b04      	ldr	r3, [sp, #16]
 802f40c:	9301      	str	r3, [sp, #4]
 802f40e:	9b01      	ldr	r3, [sp, #4]
 802f410:	b963      	cbnz	r3, 802f42c <_dtoa_r+0x954>
 802f412:	4631      	mov	r1, r6
 802f414:	2205      	movs	r2, #5
 802f416:	4620      	mov	r0, r4
 802f418:	f000 fa10 	bl	802f83c <__multadd>
 802f41c:	4601      	mov	r1, r0
 802f41e:	4606      	mov	r6, r0
 802f420:	4650      	mov	r0, sl
 802f422:	f000 fc25 	bl	802fc70 <__mcmp>
 802f426:	2800      	cmp	r0, #0
 802f428:	f73f adbb 	bgt.w	802efa2 <_dtoa_r+0x4ca>
 802f42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f42e:	9d00      	ldr	r5, [sp, #0]
 802f430:	ea6f 0b03 	mvn.w	fp, r3
 802f434:	f04f 0800 	mov.w	r8, #0
 802f438:	4631      	mov	r1, r6
 802f43a:	4620      	mov	r0, r4
 802f43c:	f000 f9dc 	bl	802f7f8 <_Bfree>
 802f440:	2f00      	cmp	r7, #0
 802f442:	f43f aeab 	beq.w	802f19c <_dtoa_r+0x6c4>
 802f446:	f1b8 0f00 	cmp.w	r8, #0
 802f44a:	d005      	beq.n	802f458 <_dtoa_r+0x980>
 802f44c:	45b8      	cmp	r8, r7
 802f44e:	d003      	beq.n	802f458 <_dtoa_r+0x980>
 802f450:	4641      	mov	r1, r8
 802f452:	4620      	mov	r0, r4
 802f454:	f000 f9d0 	bl	802f7f8 <_Bfree>
 802f458:	4639      	mov	r1, r7
 802f45a:	4620      	mov	r0, r4
 802f45c:	f000 f9cc 	bl	802f7f8 <_Bfree>
 802f460:	e69c      	b.n	802f19c <_dtoa_r+0x6c4>
 802f462:	2600      	movs	r6, #0
 802f464:	4637      	mov	r7, r6
 802f466:	e7e1      	b.n	802f42c <_dtoa_r+0x954>
 802f468:	46bb      	mov	fp, r7
 802f46a:	4637      	mov	r7, r6
 802f46c:	e599      	b.n	802efa2 <_dtoa_r+0x4ca>
 802f46e:	bf00      	nop
 802f470:	40240000 	.word	0x40240000
 802f474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f476:	2b00      	cmp	r3, #0
 802f478:	f000 80c8 	beq.w	802f60c <_dtoa_r+0xb34>
 802f47c:	9b04      	ldr	r3, [sp, #16]
 802f47e:	9301      	str	r3, [sp, #4]
 802f480:	2d00      	cmp	r5, #0
 802f482:	dd05      	ble.n	802f490 <_dtoa_r+0x9b8>
 802f484:	4639      	mov	r1, r7
 802f486:	462a      	mov	r2, r5
 802f488:	4620      	mov	r0, r4
 802f48a:	f000 fb85 	bl	802fb98 <__lshift>
 802f48e:	4607      	mov	r7, r0
 802f490:	f1b8 0f00 	cmp.w	r8, #0
 802f494:	d05b      	beq.n	802f54e <_dtoa_r+0xa76>
 802f496:	6879      	ldr	r1, [r7, #4]
 802f498:	4620      	mov	r0, r4
 802f49a:	f000 f96d 	bl	802f778 <_Balloc>
 802f49e:	4605      	mov	r5, r0
 802f4a0:	b928      	cbnz	r0, 802f4ae <_dtoa_r+0x9d6>
 802f4a2:	4b83      	ldr	r3, [pc, #524]	; (802f6b0 <_dtoa_r+0xbd8>)
 802f4a4:	4602      	mov	r2, r0
 802f4a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 802f4aa:	f7ff bb2e 	b.w	802eb0a <_dtoa_r+0x32>
 802f4ae:	693a      	ldr	r2, [r7, #16]
 802f4b0:	3202      	adds	r2, #2
 802f4b2:	0092      	lsls	r2, r2, #2
 802f4b4:	f107 010c 	add.w	r1, r7, #12
 802f4b8:	300c      	adds	r0, #12
 802f4ba:	f7ff fa16 	bl	802e8ea <memcpy>
 802f4be:	2201      	movs	r2, #1
 802f4c0:	4629      	mov	r1, r5
 802f4c2:	4620      	mov	r0, r4
 802f4c4:	f000 fb68 	bl	802fb98 <__lshift>
 802f4c8:	9b00      	ldr	r3, [sp, #0]
 802f4ca:	3301      	adds	r3, #1
 802f4cc:	9304      	str	r3, [sp, #16]
 802f4ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 802f4d2:	4413      	add	r3, r2
 802f4d4:	9308      	str	r3, [sp, #32]
 802f4d6:	9b02      	ldr	r3, [sp, #8]
 802f4d8:	f003 0301 	and.w	r3, r3, #1
 802f4dc:	46b8      	mov	r8, r7
 802f4de:	9306      	str	r3, [sp, #24]
 802f4e0:	4607      	mov	r7, r0
 802f4e2:	9b04      	ldr	r3, [sp, #16]
 802f4e4:	4631      	mov	r1, r6
 802f4e6:	3b01      	subs	r3, #1
 802f4e8:	4650      	mov	r0, sl
 802f4ea:	9301      	str	r3, [sp, #4]
 802f4ec:	f7ff fa6a 	bl	802e9c4 <quorem>
 802f4f0:	4641      	mov	r1, r8
 802f4f2:	9002      	str	r0, [sp, #8]
 802f4f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802f4f8:	4650      	mov	r0, sl
 802f4fa:	f000 fbb9 	bl	802fc70 <__mcmp>
 802f4fe:	463a      	mov	r2, r7
 802f500:	9005      	str	r0, [sp, #20]
 802f502:	4631      	mov	r1, r6
 802f504:	4620      	mov	r0, r4
 802f506:	f000 fbcf 	bl	802fca8 <__mdiff>
 802f50a:	68c2      	ldr	r2, [r0, #12]
 802f50c:	4605      	mov	r5, r0
 802f50e:	bb02      	cbnz	r2, 802f552 <_dtoa_r+0xa7a>
 802f510:	4601      	mov	r1, r0
 802f512:	4650      	mov	r0, sl
 802f514:	f000 fbac 	bl	802fc70 <__mcmp>
 802f518:	4602      	mov	r2, r0
 802f51a:	4629      	mov	r1, r5
 802f51c:	4620      	mov	r0, r4
 802f51e:	9209      	str	r2, [sp, #36]	; 0x24
 802f520:	f000 f96a 	bl	802f7f8 <_Bfree>
 802f524:	9b07      	ldr	r3, [sp, #28]
 802f526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802f528:	9d04      	ldr	r5, [sp, #16]
 802f52a:	ea43 0102 	orr.w	r1, r3, r2
 802f52e:	9b06      	ldr	r3, [sp, #24]
 802f530:	4319      	orrs	r1, r3
 802f532:	d110      	bne.n	802f556 <_dtoa_r+0xa7e>
 802f534:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802f538:	d029      	beq.n	802f58e <_dtoa_r+0xab6>
 802f53a:	9b05      	ldr	r3, [sp, #20]
 802f53c:	2b00      	cmp	r3, #0
 802f53e:	dd02      	ble.n	802f546 <_dtoa_r+0xa6e>
 802f540:	9b02      	ldr	r3, [sp, #8]
 802f542:	f103 0931 	add.w	r9, r3, #49	; 0x31
 802f546:	9b01      	ldr	r3, [sp, #4]
 802f548:	f883 9000 	strb.w	r9, [r3]
 802f54c:	e774      	b.n	802f438 <_dtoa_r+0x960>
 802f54e:	4638      	mov	r0, r7
 802f550:	e7ba      	b.n	802f4c8 <_dtoa_r+0x9f0>
 802f552:	2201      	movs	r2, #1
 802f554:	e7e1      	b.n	802f51a <_dtoa_r+0xa42>
 802f556:	9b05      	ldr	r3, [sp, #20]
 802f558:	2b00      	cmp	r3, #0
 802f55a:	db04      	blt.n	802f566 <_dtoa_r+0xa8e>
 802f55c:	9907      	ldr	r1, [sp, #28]
 802f55e:	430b      	orrs	r3, r1
 802f560:	9906      	ldr	r1, [sp, #24]
 802f562:	430b      	orrs	r3, r1
 802f564:	d120      	bne.n	802f5a8 <_dtoa_r+0xad0>
 802f566:	2a00      	cmp	r2, #0
 802f568:	dded      	ble.n	802f546 <_dtoa_r+0xa6e>
 802f56a:	4651      	mov	r1, sl
 802f56c:	2201      	movs	r2, #1
 802f56e:	4620      	mov	r0, r4
 802f570:	f000 fb12 	bl	802fb98 <__lshift>
 802f574:	4631      	mov	r1, r6
 802f576:	4682      	mov	sl, r0
 802f578:	f000 fb7a 	bl	802fc70 <__mcmp>
 802f57c:	2800      	cmp	r0, #0
 802f57e:	dc03      	bgt.n	802f588 <_dtoa_r+0xab0>
 802f580:	d1e1      	bne.n	802f546 <_dtoa_r+0xa6e>
 802f582:	f019 0f01 	tst.w	r9, #1
 802f586:	d0de      	beq.n	802f546 <_dtoa_r+0xa6e>
 802f588:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802f58c:	d1d8      	bne.n	802f540 <_dtoa_r+0xa68>
 802f58e:	9a01      	ldr	r2, [sp, #4]
 802f590:	2339      	movs	r3, #57	; 0x39
 802f592:	7013      	strb	r3, [r2, #0]
 802f594:	462b      	mov	r3, r5
 802f596:	461d      	mov	r5, r3
 802f598:	3b01      	subs	r3, #1
 802f59a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802f59e:	2a39      	cmp	r2, #57	; 0x39
 802f5a0:	d06c      	beq.n	802f67c <_dtoa_r+0xba4>
 802f5a2:	3201      	adds	r2, #1
 802f5a4:	701a      	strb	r2, [r3, #0]
 802f5a6:	e747      	b.n	802f438 <_dtoa_r+0x960>
 802f5a8:	2a00      	cmp	r2, #0
 802f5aa:	dd07      	ble.n	802f5bc <_dtoa_r+0xae4>
 802f5ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802f5b0:	d0ed      	beq.n	802f58e <_dtoa_r+0xab6>
 802f5b2:	9a01      	ldr	r2, [sp, #4]
 802f5b4:	f109 0301 	add.w	r3, r9, #1
 802f5b8:	7013      	strb	r3, [r2, #0]
 802f5ba:	e73d      	b.n	802f438 <_dtoa_r+0x960>
 802f5bc:	9b04      	ldr	r3, [sp, #16]
 802f5be:	9a08      	ldr	r2, [sp, #32]
 802f5c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 802f5c4:	4293      	cmp	r3, r2
 802f5c6:	d043      	beq.n	802f650 <_dtoa_r+0xb78>
 802f5c8:	4651      	mov	r1, sl
 802f5ca:	2300      	movs	r3, #0
 802f5cc:	220a      	movs	r2, #10
 802f5ce:	4620      	mov	r0, r4
 802f5d0:	f000 f934 	bl	802f83c <__multadd>
 802f5d4:	45b8      	cmp	r8, r7
 802f5d6:	4682      	mov	sl, r0
 802f5d8:	f04f 0300 	mov.w	r3, #0
 802f5dc:	f04f 020a 	mov.w	r2, #10
 802f5e0:	4641      	mov	r1, r8
 802f5e2:	4620      	mov	r0, r4
 802f5e4:	d107      	bne.n	802f5f6 <_dtoa_r+0xb1e>
 802f5e6:	f000 f929 	bl	802f83c <__multadd>
 802f5ea:	4680      	mov	r8, r0
 802f5ec:	4607      	mov	r7, r0
 802f5ee:	9b04      	ldr	r3, [sp, #16]
 802f5f0:	3301      	adds	r3, #1
 802f5f2:	9304      	str	r3, [sp, #16]
 802f5f4:	e775      	b.n	802f4e2 <_dtoa_r+0xa0a>
 802f5f6:	f000 f921 	bl	802f83c <__multadd>
 802f5fa:	4639      	mov	r1, r7
 802f5fc:	4680      	mov	r8, r0
 802f5fe:	2300      	movs	r3, #0
 802f600:	220a      	movs	r2, #10
 802f602:	4620      	mov	r0, r4
 802f604:	f000 f91a 	bl	802f83c <__multadd>
 802f608:	4607      	mov	r7, r0
 802f60a:	e7f0      	b.n	802f5ee <_dtoa_r+0xb16>
 802f60c:	9b04      	ldr	r3, [sp, #16]
 802f60e:	9301      	str	r3, [sp, #4]
 802f610:	9d00      	ldr	r5, [sp, #0]
 802f612:	4631      	mov	r1, r6
 802f614:	4650      	mov	r0, sl
 802f616:	f7ff f9d5 	bl	802e9c4 <quorem>
 802f61a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802f61e:	9b00      	ldr	r3, [sp, #0]
 802f620:	f805 9b01 	strb.w	r9, [r5], #1
 802f624:	1aea      	subs	r2, r5, r3
 802f626:	9b01      	ldr	r3, [sp, #4]
 802f628:	4293      	cmp	r3, r2
 802f62a:	dd07      	ble.n	802f63c <_dtoa_r+0xb64>
 802f62c:	4651      	mov	r1, sl
 802f62e:	2300      	movs	r3, #0
 802f630:	220a      	movs	r2, #10
 802f632:	4620      	mov	r0, r4
 802f634:	f000 f902 	bl	802f83c <__multadd>
 802f638:	4682      	mov	sl, r0
 802f63a:	e7ea      	b.n	802f612 <_dtoa_r+0xb3a>
 802f63c:	9b01      	ldr	r3, [sp, #4]
 802f63e:	2b00      	cmp	r3, #0
 802f640:	bfc8      	it	gt
 802f642:	461d      	movgt	r5, r3
 802f644:	9b00      	ldr	r3, [sp, #0]
 802f646:	bfd8      	it	le
 802f648:	2501      	movle	r5, #1
 802f64a:	441d      	add	r5, r3
 802f64c:	f04f 0800 	mov.w	r8, #0
 802f650:	4651      	mov	r1, sl
 802f652:	2201      	movs	r2, #1
 802f654:	4620      	mov	r0, r4
 802f656:	f000 fa9f 	bl	802fb98 <__lshift>
 802f65a:	4631      	mov	r1, r6
 802f65c:	4682      	mov	sl, r0
 802f65e:	f000 fb07 	bl	802fc70 <__mcmp>
 802f662:	2800      	cmp	r0, #0
 802f664:	dc96      	bgt.n	802f594 <_dtoa_r+0xabc>
 802f666:	d102      	bne.n	802f66e <_dtoa_r+0xb96>
 802f668:	f019 0f01 	tst.w	r9, #1
 802f66c:	d192      	bne.n	802f594 <_dtoa_r+0xabc>
 802f66e:	462b      	mov	r3, r5
 802f670:	461d      	mov	r5, r3
 802f672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802f676:	2a30      	cmp	r2, #48	; 0x30
 802f678:	d0fa      	beq.n	802f670 <_dtoa_r+0xb98>
 802f67a:	e6dd      	b.n	802f438 <_dtoa_r+0x960>
 802f67c:	9a00      	ldr	r2, [sp, #0]
 802f67e:	429a      	cmp	r2, r3
 802f680:	d189      	bne.n	802f596 <_dtoa_r+0xabe>
 802f682:	f10b 0b01 	add.w	fp, fp, #1
 802f686:	2331      	movs	r3, #49	; 0x31
 802f688:	e796      	b.n	802f5b8 <_dtoa_r+0xae0>
 802f68a:	4b0a      	ldr	r3, [pc, #40]	; (802f6b4 <_dtoa_r+0xbdc>)
 802f68c:	f7ff ba99 	b.w	802ebc2 <_dtoa_r+0xea>
 802f690:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802f692:	2b00      	cmp	r3, #0
 802f694:	f47f aa6d 	bne.w	802eb72 <_dtoa_r+0x9a>
 802f698:	4b07      	ldr	r3, [pc, #28]	; (802f6b8 <_dtoa_r+0xbe0>)
 802f69a:	f7ff ba92 	b.w	802ebc2 <_dtoa_r+0xea>
 802f69e:	9b01      	ldr	r3, [sp, #4]
 802f6a0:	2b00      	cmp	r3, #0
 802f6a2:	dcb5      	bgt.n	802f610 <_dtoa_r+0xb38>
 802f6a4:	9b07      	ldr	r3, [sp, #28]
 802f6a6:	2b02      	cmp	r3, #2
 802f6a8:	f73f aeb1 	bgt.w	802f40e <_dtoa_r+0x936>
 802f6ac:	e7b0      	b.n	802f610 <_dtoa_r+0xb38>
 802f6ae:	bf00      	nop
 802f6b0:	080355af 	.word	0x080355af
 802f6b4:	08035505 	.word	0x08035505
 802f6b8:	08035533 	.word	0x08035533

0802f6bc <_free_r>:
 802f6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802f6be:	2900      	cmp	r1, #0
 802f6c0:	d044      	beq.n	802f74c <_free_r+0x90>
 802f6c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802f6c6:	9001      	str	r0, [sp, #4]
 802f6c8:	2b00      	cmp	r3, #0
 802f6ca:	f1a1 0404 	sub.w	r4, r1, #4
 802f6ce:	bfb8      	it	lt
 802f6d0:	18e4      	addlt	r4, r4, r3
 802f6d2:	f7fe fa43 	bl	802db5c <__malloc_lock>
 802f6d6:	4a1e      	ldr	r2, [pc, #120]	; (802f750 <_free_r+0x94>)
 802f6d8:	9801      	ldr	r0, [sp, #4]
 802f6da:	6813      	ldr	r3, [r2, #0]
 802f6dc:	b933      	cbnz	r3, 802f6ec <_free_r+0x30>
 802f6de:	6063      	str	r3, [r4, #4]
 802f6e0:	6014      	str	r4, [r2, #0]
 802f6e2:	b003      	add	sp, #12
 802f6e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802f6e8:	f7fe ba3e 	b.w	802db68 <__malloc_unlock>
 802f6ec:	42a3      	cmp	r3, r4
 802f6ee:	d908      	bls.n	802f702 <_free_r+0x46>
 802f6f0:	6825      	ldr	r5, [r4, #0]
 802f6f2:	1961      	adds	r1, r4, r5
 802f6f4:	428b      	cmp	r3, r1
 802f6f6:	bf01      	itttt	eq
 802f6f8:	6819      	ldreq	r1, [r3, #0]
 802f6fa:	685b      	ldreq	r3, [r3, #4]
 802f6fc:	1949      	addeq	r1, r1, r5
 802f6fe:	6021      	streq	r1, [r4, #0]
 802f700:	e7ed      	b.n	802f6de <_free_r+0x22>
 802f702:	461a      	mov	r2, r3
 802f704:	685b      	ldr	r3, [r3, #4]
 802f706:	b10b      	cbz	r3, 802f70c <_free_r+0x50>
 802f708:	42a3      	cmp	r3, r4
 802f70a:	d9fa      	bls.n	802f702 <_free_r+0x46>
 802f70c:	6811      	ldr	r1, [r2, #0]
 802f70e:	1855      	adds	r5, r2, r1
 802f710:	42a5      	cmp	r5, r4
 802f712:	d10b      	bne.n	802f72c <_free_r+0x70>
 802f714:	6824      	ldr	r4, [r4, #0]
 802f716:	4421      	add	r1, r4
 802f718:	1854      	adds	r4, r2, r1
 802f71a:	42a3      	cmp	r3, r4
 802f71c:	6011      	str	r1, [r2, #0]
 802f71e:	d1e0      	bne.n	802f6e2 <_free_r+0x26>
 802f720:	681c      	ldr	r4, [r3, #0]
 802f722:	685b      	ldr	r3, [r3, #4]
 802f724:	6053      	str	r3, [r2, #4]
 802f726:	440c      	add	r4, r1
 802f728:	6014      	str	r4, [r2, #0]
 802f72a:	e7da      	b.n	802f6e2 <_free_r+0x26>
 802f72c:	d902      	bls.n	802f734 <_free_r+0x78>
 802f72e:	230c      	movs	r3, #12
 802f730:	6003      	str	r3, [r0, #0]
 802f732:	e7d6      	b.n	802f6e2 <_free_r+0x26>
 802f734:	6825      	ldr	r5, [r4, #0]
 802f736:	1961      	adds	r1, r4, r5
 802f738:	428b      	cmp	r3, r1
 802f73a:	bf04      	itt	eq
 802f73c:	6819      	ldreq	r1, [r3, #0]
 802f73e:	685b      	ldreq	r3, [r3, #4]
 802f740:	6063      	str	r3, [r4, #4]
 802f742:	bf04      	itt	eq
 802f744:	1949      	addeq	r1, r1, r5
 802f746:	6021      	streq	r1, [r4, #0]
 802f748:	6054      	str	r4, [r2, #4]
 802f74a:	e7ca      	b.n	802f6e2 <_free_r+0x26>
 802f74c:	b003      	add	sp, #12
 802f74e:	bd30      	pop	{r4, r5, pc}
 802f750:	20006f04 	.word	0x20006f04

0802f754 <__ascii_mbtowc>:
 802f754:	b082      	sub	sp, #8
 802f756:	b901      	cbnz	r1, 802f75a <__ascii_mbtowc+0x6>
 802f758:	a901      	add	r1, sp, #4
 802f75a:	b142      	cbz	r2, 802f76e <__ascii_mbtowc+0x1a>
 802f75c:	b14b      	cbz	r3, 802f772 <__ascii_mbtowc+0x1e>
 802f75e:	7813      	ldrb	r3, [r2, #0]
 802f760:	600b      	str	r3, [r1, #0]
 802f762:	7812      	ldrb	r2, [r2, #0]
 802f764:	1e10      	subs	r0, r2, #0
 802f766:	bf18      	it	ne
 802f768:	2001      	movne	r0, #1
 802f76a:	b002      	add	sp, #8
 802f76c:	4770      	bx	lr
 802f76e:	4610      	mov	r0, r2
 802f770:	e7fb      	b.n	802f76a <__ascii_mbtowc+0x16>
 802f772:	f06f 0001 	mvn.w	r0, #1
 802f776:	e7f8      	b.n	802f76a <__ascii_mbtowc+0x16>

0802f778 <_Balloc>:
 802f778:	b570      	push	{r4, r5, r6, lr}
 802f77a:	69c6      	ldr	r6, [r0, #28]
 802f77c:	4604      	mov	r4, r0
 802f77e:	460d      	mov	r5, r1
 802f780:	b976      	cbnz	r6, 802f7a0 <_Balloc+0x28>
 802f782:	2010      	movs	r0, #16
 802f784:	f7fe f93a 	bl	802d9fc <malloc>
 802f788:	4602      	mov	r2, r0
 802f78a:	61e0      	str	r0, [r4, #28]
 802f78c:	b920      	cbnz	r0, 802f798 <_Balloc+0x20>
 802f78e:	4b18      	ldr	r3, [pc, #96]	; (802f7f0 <_Balloc+0x78>)
 802f790:	4818      	ldr	r0, [pc, #96]	; (802f7f4 <_Balloc+0x7c>)
 802f792:	216b      	movs	r1, #107	; 0x6b
 802f794:	f7fe f8f0 	bl	802d978 <__assert_func>
 802f798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802f79c:	6006      	str	r6, [r0, #0]
 802f79e:	60c6      	str	r6, [r0, #12]
 802f7a0:	69e6      	ldr	r6, [r4, #28]
 802f7a2:	68f3      	ldr	r3, [r6, #12]
 802f7a4:	b183      	cbz	r3, 802f7c8 <_Balloc+0x50>
 802f7a6:	69e3      	ldr	r3, [r4, #28]
 802f7a8:	68db      	ldr	r3, [r3, #12]
 802f7aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802f7ae:	b9b8      	cbnz	r0, 802f7e0 <_Balloc+0x68>
 802f7b0:	2101      	movs	r1, #1
 802f7b2:	fa01 f605 	lsl.w	r6, r1, r5
 802f7b6:	1d72      	adds	r2, r6, #5
 802f7b8:	0092      	lsls	r2, r2, #2
 802f7ba:	4620      	mov	r0, r4
 802f7bc:	f7fe f908 	bl	802d9d0 <_calloc_r>
 802f7c0:	b160      	cbz	r0, 802f7dc <_Balloc+0x64>
 802f7c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802f7c6:	e00e      	b.n	802f7e6 <_Balloc+0x6e>
 802f7c8:	2221      	movs	r2, #33	; 0x21
 802f7ca:	2104      	movs	r1, #4
 802f7cc:	4620      	mov	r0, r4
 802f7ce:	f7fe f8ff 	bl	802d9d0 <_calloc_r>
 802f7d2:	69e3      	ldr	r3, [r4, #28]
 802f7d4:	60f0      	str	r0, [r6, #12]
 802f7d6:	68db      	ldr	r3, [r3, #12]
 802f7d8:	2b00      	cmp	r3, #0
 802f7da:	d1e4      	bne.n	802f7a6 <_Balloc+0x2e>
 802f7dc:	2000      	movs	r0, #0
 802f7de:	bd70      	pop	{r4, r5, r6, pc}
 802f7e0:	6802      	ldr	r2, [r0, #0]
 802f7e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802f7e6:	2300      	movs	r3, #0
 802f7e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802f7ec:	e7f7      	b.n	802f7de <_Balloc+0x66>
 802f7ee:	bf00      	nop
 802f7f0:	08035540 	.word	0x08035540
 802f7f4:	080355c0 	.word	0x080355c0

0802f7f8 <_Bfree>:
 802f7f8:	b570      	push	{r4, r5, r6, lr}
 802f7fa:	69c6      	ldr	r6, [r0, #28]
 802f7fc:	4605      	mov	r5, r0
 802f7fe:	460c      	mov	r4, r1
 802f800:	b976      	cbnz	r6, 802f820 <_Bfree+0x28>
 802f802:	2010      	movs	r0, #16
 802f804:	f7fe f8fa 	bl	802d9fc <malloc>
 802f808:	4602      	mov	r2, r0
 802f80a:	61e8      	str	r0, [r5, #28]
 802f80c:	b920      	cbnz	r0, 802f818 <_Bfree+0x20>
 802f80e:	4b09      	ldr	r3, [pc, #36]	; (802f834 <_Bfree+0x3c>)
 802f810:	4809      	ldr	r0, [pc, #36]	; (802f838 <_Bfree+0x40>)
 802f812:	218f      	movs	r1, #143	; 0x8f
 802f814:	f7fe f8b0 	bl	802d978 <__assert_func>
 802f818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802f81c:	6006      	str	r6, [r0, #0]
 802f81e:	60c6      	str	r6, [r0, #12]
 802f820:	b13c      	cbz	r4, 802f832 <_Bfree+0x3a>
 802f822:	69eb      	ldr	r3, [r5, #28]
 802f824:	6862      	ldr	r2, [r4, #4]
 802f826:	68db      	ldr	r3, [r3, #12]
 802f828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802f82c:	6021      	str	r1, [r4, #0]
 802f82e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802f832:	bd70      	pop	{r4, r5, r6, pc}
 802f834:	08035540 	.word	0x08035540
 802f838:	080355c0 	.word	0x080355c0

0802f83c <__multadd>:
 802f83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f840:	690d      	ldr	r5, [r1, #16]
 802f842:	4607      	mov	r7, r0
 802f844:	460c      	mov	r4, r1
 802f846:	461e      	mov	r6, r3
 802f848:	f101 0c14 	add.w	ip, r1, #20
 802f84c:	2000      	movs	r0, #0
 802f84e:	f8dc 3000 	ldr.w	r3, [ip]
 802f852:	b299      	uxth	r1, r3
 802f854:	fb02 6101 	mla	r1, r2, r1, r6
 802f858:	0c1e      	lsrs	r6, r3, #16
 802f85a:	0c0b      	lsrs	r3, r1, #16
 802f85c:	fb02 3306 	mla	r3, r2, r6, r3
 802f860:	b289      	uxth	r1, r1
 802f862:	3001      	adds	r0, #1
 802f864:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802f868:	4285      	cmp	r5, r0
 802f86a:	f84c 1b04 	str.w	r1, [ip], #4
 802f86e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802f872:	dcec      	bgt.n	802f84e <__multadd+0x12>
 802f874:	b30e      	cbz	r6, 802f8ba <__multadd+0x7e>
 802f876:	68a3      	ldr	r3, [r4, #8]
 802f878:	42ab      	cmp	r3, r5
 802f87a:	dc19      	bgt.n	802f8b0 <__multadd+0x74>
 802f87c:	6861      	ldr	r1, [r4, #4]
 802f87e:	4638      	mov	r0, r7
 802f880:	3101      	adds	r1, #1
 802f882:	f7ff ff79 	bl	802f778 <_Balloc>
 802f886:	4680      	mov	r8, r0
 802f888:	b928      	cbnz	r0, 802f896 <__multadd+0x5a>
 802f88a:	4602      	mov	r2, r0
 802f88c:	4b0c      	ldr	r3, [pc, #48]	; (802f8c0 <__multadd+0x84>)
 802f88e:	480d      	ldr	r0, [pc, #52]	; (802f8c4 <__multadd+0x88>)
 802f890:	21ba      	movs	r1, #186	; 0xba
 802f892:	f7fe f871 	bl	802d978 <__assert_func>
 802f896:	6922      	ldr	r2, [r4, #16]
 802f898:	3202      	adds	r2, #2
 802f89a:	f104 010c 	add.w	r1, r4, #12
 802f89e:	0092      	lsls	r2, r2, #2
 802f8a0:	300c      	adds	r0, #12
 802f8a2:	f7ff f822 	bl	802e8ea <memcpy>
 802f8a6:	4621      	mov	r1, r4
 802f8a8:	4638      	mov	r0, r7
 802f8aa:	f7ff ffa5 	bl	802f7f8 <_Bfree>
 802f8ae:	4644      	mov	r4, r8
 802f8b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802f8b4:	3501      	adds	r5, #1
 802f8b6:	615e      	str	r6, [r3, #20]
 802f8b8:	6125      	str	r5, [r4, #16]
 802f8ba:	4620      	mov	r0, r4
 802f8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f8c0:	080355af 	.word	0x080355af
 802f8c4:	080355c0 	.word	0x080355c0

0802f8c8 <__hi0bits>:
 802f8c8:	0c03      	lsrs	r3, r0, #16
 802f8ca:	041b      	lsls	r3, r3, #16
 802f8cc:	b9d3      	cbnz	r3, 802f904 <__hi0bits+0x3c>
 802f8ce:	0400      	lsls	r0, r0, #16
 802f8d0:	2310      	movs	r3, #16
 802f8d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802f8d6:	bf04      	itt	eq
 802f8d8:	0200      	lsleq	r0, r0, #8
 802f8da:	3308      	addeq	r3, #8
 802f8dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802f8e0:	bf04      	itt	eq
 802f8e2:	0100      	lsleq	r0, r0, #4
 802f8e4:	3304      	addeq	r3, #4
 802f8e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802f8ea:	bf04      	itt	eq
 802f8ec:	0080      	lsleq	r0, r0, #2
 802f8ee:	3302      	addeq	r3, #2
 802f8f0:	2800      	cmp	r0, #0
 802f8f2:	db05      	blt.n	802f900 <__hi0bits+0x38>
 802f8f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802f8f8:	f103 0301 	add.w	r3, r3, #1
 802f8fc:	bf08      	it	eq
 802f8fe:	2320      	moveq	r3, #32
 802f900:	4618      	mov	r0, r3
 802f902:	4770      	bx	lr
 802f904:	2300      	movs	r3, #0
 802f906:	e7e4      	b.n	802f8d2 <__hi0bits+0xa>

0802f908 <__lo0bits>:
 802f908:	6803      	ldr	r3, [r0, #0]
 802f90a:	f013 0207 	ands.w	r2, r3, #7
 802f90e:	d00c      	beq.n	802f92a <__lo0bits+0x22>
 802f910:	07d9      	lsls	r1, r3, #31
 802f912:	d422      	bmi.n	802f95a <__lo0bits+0x52>
 802f914:	079a      	lsls	r2, r3, #30
 802f916:	bf49      	itett	mi
 802f918:	085b      	lsrmi	r3, r3, #1
 802f91a:	089b      	lsrpl	r3, r3, #2
 802f91c:	6003      	strmi	r3, [r0, #0]
 802f91e:	2201      	movmi	r2, #1
 802f920:	bf5c      	itt	pl
 802f922:	6003      	strpl	r3, [r0, #0]
 802f924:	2202      	movpl	r2, #2
 802f926:	4610      	mov	r0, r2
 802f928:	4770      	bx	lr
 802f92a:	b299      	uxth	r1, r3
 802f92c:	b909      	cbnz	r1, 802f932 <__lo0bits+0x2a>
 802f92e:	0c1b      	lsrs	r3, r3, #16
 802f930:	2210      	movs	r2, #16
 802f932:	b2d9      	uxtb	r1, r3
 802f934:	b909      	cbnz	r1, 802f93a <__lo0bits+0x32>
 802f936:	3208      	adds	r2, #8
 802f938:	0a1b      	lsrs	r3, r3, #8
 802f93a:	0719      	lsls	r1, r3, #28
 802f93c:	bf04      	itt	eq
 802f93e:	091b      	lsreq	r3, r3, #4
 802f940:	3204      	addeq	r2, #4
 802f942:	0799      	lsls	r1, r3, #30
 802f944:	bf04      	itt	eq
 802f946:	089b      	lsreq	r3, r3, #2
 802f948:	3202      	addeq	r2, #2
 802f94a:	07d9      	lsls	r1, r3, #31
 802f94c:	d403      	bmi.n	802f956 <__lo0bits+0x4e>
 802f94e:	085b      	lsrs	r3, r3, #1
 802f950:	f102 0201 	add.w	r2, r2, #1
 802f954:	d003      	beq.n	802f95e <__lo0bits+0x56>
 802f956:	6003      	str	r3, [r0, #0]
 802f958:	e7e5      	b.n	802f926 <__lo0bits+0x1e>
 802f95a:	2200      	movs	r2, #0
 802f95c:	e7e3      	b.n	802f926 <__lo0bits+0x1e>
 802f95e:	2220      	movs	r2, #32
 802f960:	e7e1      	b.n	802f926 <__lo0bits+0x1e>
	...

0802f964 <__i2b>:
 802f964:	b510      	push	{r4, lr}
 802f966:	460c      	mov	r4, r1
 802f968:	2101      	movs	r1, #1
 802f96a:	f7ff ff05 	bl	802f778 <_Balloc>
 802f96e:	4602      	mov	r2, r0
 802f970:	b928      	cbnz	r0, 802f97e <__i2b+0x1a>
 802f972:	4b05      	ldr	r3, [pc, #20]	; (802f988 <__i2b+0x24>)
 802f974:	4805      	ldr	r0, [pc, #20]	; (802f98c <__i2b+0x28>)
 802f976:	f240 1145 	movw	r1, #325	; 0x145
 802f97a:	f7fd fffd 	bl	802d978 <__assert_func>
 802f97e:	2301      	movs	r3, #1
 802f980:	6144      	str	r4, [r0, #20]
 802f982:	6103      	str	r3, [r0, #16]
 802f984:	bd10      	pop	{r4, pc}
 802f986:	bf00      	nop
 802f988:	080355af 	.word	0x080355af
 802f98c:	080355c0 	.word	0x080355c0

0802f990 <__multiply>:
 802f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f994:	4691      	mov	r9, r2
 802f996:	690a      	ldr	r2, [r1, #16]
 802f998:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802f99c:	429a      	cmp	r2, r3
 802f99e:	bfb8      	it	lt
 802f9a0:	460b      	movlt	r3, r1
 802f9a2:	460c      	mov	r4, r1
 802f9a4:	bfbc      	itt	lt
 802f9a6:	464c      	movlt	r4, r9
 802f9a8:	4699      	movlt	r9, r3
 802f9aa:	6927      	ldr	r7, [r4, #16]
 802f9ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802f9b0:	68a3      	ldr	r3, [r4, #8]
 802f9b2:	6861      	ldr	r1, [r4, #4]
 802f9b4:	eb07 060a 	add.w	r6, r7, sl
 802f9b8:	42b3      	cmp	r3, r6
 802f9ba:	b085      	sub	sp, #20
 802f9bc:	bfb8      	it	lt
 802f9be:	3101      	addlt	r1, #1
 802f9c0:	f7ff feda 	bl	802f778 <_Balloc>
 802f9c4:	b930      	cbnz	r0, 802f9d4 <__multiply+0x44>
 802f9c6:	4602      	mov	r2, r0
 802f9c8:	4b44      	ldr	r3, [pc, #272]	; (802fadc <__multiply+0x14c>)
 802f9ca:	4845      	ldr	r0, [pc, #276]	; (802fae0 <__multiply+0x150>)
 802f9cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 802f9d0:	f7fd ffd2 	bl	802d978 <__assert_func>
 802f9d4:	f100 0514 	add.w	r5, r0, #20
 802f9d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802f9dc:	462b      	mov	r3, r5
 802f9de:	2200      	movs	r2, #0
 802f9e0:	4543      	cmp	r3, r8
 802f9e2:	d321      	bcc.n	802fa28 <__multiply+0x98>
 802f9e4:	f104 0314 	add.w	r3, r4, #20
 802f9e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802f9ec:	f109 0314 	add.w	r3, r9, #20
 802f9f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802f9f4:	9202      	str	r2, [sp, #8]
 802f9f6:	1b3a      	subs	r2, r7, r4
 802f9f8:	3a15      	subs	r2, #21
 802f9fa:	f022 0203 	bic.w	r2, r2, #3
 802f9fe:	3204      	adds	r2, #4
 802fa00:	f104 0115 	add.w	r1, r4, #21
 802fa04:	428f      	cmp	r7, r1
 802fa06:	bf38      	it	cc
 802fa08:	2204      	movcc	r2, #4
 802fa0a:	9201      	str	r2, [sp, #4]
 802fa0c:	9a02      	ldr	r2, [sp, #8]
 802fa0e:	9303      	str	r3, [sp, #12]
 802fa10:	429a      	cmp	r2, r3
 802fa12:	d80c      	bhi.n	802fa2e <__multiply+0x9e>
 802fa14:	2e00      	cmp	r6, #0
 802fa16:	dd03      	ble.n	802fa20 <__multiply+0x90>
 802fa18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802fa1c:	2b00      	cmp	r3, #0
 802fa1e:	d05b      	beq.n	802fad8 <__multiply+0x148>
 802fa20:	6106      	str	r6, [r0, #16]
 802fa22:	b005      	add	sp, #20
 802fa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fa28:	f843 2b04 	str.w	r2, [r3], #4
 802fa2c:	e7d8      	b.n	802f9e0 <__multiply+0x50>
 802fa2e:	f8b3 a000 	ldrh.w	sl, [r3]
 802fa32:	f1ba 0f00 	cmp.w	sl, #0
 802fa36:	d024      	beq.n	802fa82 <__multiply+0xf2>
 802fa38:	f104 0e14 	add.w	lr, r4, #20
 802fa3c:	46a9      	mov	r9, r5
 802fa3e:	f04f 0c00 	mov.w	ip, #0
 802fa42:	f85e 2b04 	ldr.w	r2, [lr], #4
 802fa46:	f8d9 1000 	ldr.w	r1, [r9]
 802fa4a:	fa1f fb82 	uxth.w	fp, r2
 802fa4e:	b289      	uxth	r1, r1
 802fa50:	fb0a 110b 	mla	r1, sl, fp, r1
 802fa54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802fa58:	f8d9 2000 	ldr.w	r2, [r9]
 802fa5c:	4461      	add	r1, ip
 802fa5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802fa62:	fb0a c20b 	mla	r2, sl, fp, ip
 802fa66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802fa6a:	b289      	uxth	r1, r1
 802fa6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802fa70:	4577      	cmp	r7, lr
 802fa72:	f849 1b04 	str.w	r1, [r9], #4
 802fa76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802fa7a:	d8e2      	bhi.n	802fa42 <__multiply+0xb2>
 802fa7c:	9a01      	ldr	r2, [sp, #4]
 802fa7e:	f845 c002 	str.w	ip, [r5, r2]
 802fa82:	9a03      	ldr	r2, [sp, #12]
 802fa84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802fa88:	3304      	adds	r3, #4
 802fa8a:	f1b9 0f00 	cmp.w	r9, #0
 802fa8e:	d021      	beq.n	802fad4 <__multiply+0x144>
 802fa90:	6829      	ldr	r1, [r5, #0]
 802fa92:	f104 0c14 	add.w	ip, r4, #20
 802fa96:	46ae      	mov	lr, r5
 802fa98:	f04f 0a00 	mov.w	sl, #0
 802fa9c:	f8bc b000 	ldrh.w	fp, [ip]
 802faa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802faa4:	fb09 220b 	mla	r2, r9, fp, r2
 802faa8:	4452      	add	r2, sl
 802faaa:	b289      	uxth	r1, r1
 802faac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802fab0:	f84e 1b04 	str.w	r1, [lr], #4
 802fab4:	f85c 1b04 	ldr.w	r1, [ip], #4
 802fab8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802fabc:	f8be 1000 	ldrh.w	r1, [lr]
 802fac0:	fb09 110a 	mla	r1, r9, sl, r1
 802fac4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802fac8:	4567      	cmp	r7, ip
 802faca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802face:	d8e5      	bhi.n	802fa9c <__multiply+0x10c>
 802fad0:	9a01      	ldr	r2, [sp, #4]
 802fad2:	50a9      	str	r1, [r5, r2]
 802fad4:	3504      	adds	r5, #4
 802fad6:	e799      	b.n	802fa0c <__multiply+0x7c>
 802fad8:	3e01      	subs	r6, #1
 802fada:	e79b      	b.n	802fa14 <__multiply+0x84>
 802fadc:	080355af 	.word	0x080355af
 802fae0:	080355c0 	.word	0x080355c0

0802fae4 <__pow5mult>:
 802fae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802fae8:	4615      	mov	r5, r2
 802faea:	f012 0203 	ands.w	r2, r2, #3
 802faee:	4606      	mov	r6, r0
 802faf0:	460f      	mov	r7, r1
 802faf2:	d007      	beq.n	802fb04 <__pow5mult+0x20>
 802faf4:	4c25      	ldr	r4, [pc, #148]	; (802fb8c <__pow5mult+0xa8>)
 802faf6:	3a01      	subs	r2, #1
 802faf8:	2300      	movs	r3, #0
 802fafa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802fafe:	f7ff fe9d 	bl	802f83c <__multadd>
 802fb02:	4607      	mov	r7, r0
 802fb04:	10ad      	asrs	r5, r5, #2
 802fb06:	d03d      	beq.n	802fb84 <__pow5mult+0xa0>
 802fb08:	69f4      	ldr	r4, [r6, #28]
 802fb0a:	b97c      	cbnz	r4, 802fb2c <__pow5mult+0x48>
 802fb0c:	2010      	movs	r0, #16
 802fb0e:	f7fd ff75 	bl	802d9fc <malloc>
 802fb12:	4602      	mov	r2, r0
 802fb14:	61f0      	str	r0, [r6, #28]
 802fb16:	b928      	cbnz	r0, 802fb24 <__pow5mult+0x40>
 802fb18:	4b1d      	ldr	r3, [pc, #116]	; (802fb90 <__pow5mult+0xac>)
 802fb1a:	481e      	ldr	r0, [pc, #120]	; (802fb94 <__pow5mult+0xb0>)
 802fb1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 802fb20:	f7fd ff2a 	bl	802d978 <__assert_func>
 802fb24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802fb28:	6004      	str	r4, [r0, #0]
 802fb2a:	60c4      	str	r4, [r0, #12]
 802fb2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802fb30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802fb34:	b94c      	cbnz	r4, 802fb4a <__pow5mult+0x66>
 802fb36:	f240 2171 	movw	r1, #625	; 0x271
 802fb3a:	4630      	mov	r0, r6
 802fb3c:	f7ff ff12 	bl	802f964 <__i2b>
 802fb40:	2300      	movs	r3, #0
 802fb42:	f8c8 0008 	str.w	r0, [r8, #8]
 802fb46:	4604      	mov	r4, r0
 802fb48:	6003      	str	r3, [r0, #0]
 802fb4a:	f04f 0900 	mov.w	r9, #0
 802fb4e:	07eb      	lsls	r3, r5, #31
 802fb50:	d50a      	bpl.n	802fb68 <__pow5mult+0x84>
 802fb52:	4639      	mov	r1, r7
 802fb54:	4622      	mov	r2, r4
 802fb56:	4630      	mov	r0, r6
 802fb58:	f7ff ff1a 	bl	802f990 <__multiply>
 802fb5c:	4639      	mov	r1, r7
 802fb5e:	4680      	mov	r8, r0
 802fb60:	4630      	mov	r0, r6
 802fb62:	f7ff fe49 	bl	802f7f8 <_Bfree>
 802fb66:	4647      	mov	r7, r8
 802fb68:	106d      	asrs	r5, r5, #1
 802fb6a:	d00b      	beq.n	802fb84 <__pow5mult+0xa0>
 802fb6c:	6820      	ldr	r0, [r4, #0]
 802fb6e:	b938      	cbnz	r0, 802fb80 <__pow5mult+0x9c>
 802fb70:	4622      	mov	r2, r4
 802fb72:	4621      	mov	r1, r4
 802fb74:	4630      	mov	r0, r6
 802fb76:	f7ff ff0b 	bl	802f990 <__multiply>
 802fb7a:	6020      	str	r0, [r4, #0]
 802fb7c:	f8c0 9000 	str.w	r9, [r0]
 802fb80:	4604      	mov	r4, r0
 802fb82:	e7e4      	b.n	802fb4e <__pow5mult+0x6a>
 802fb84:	4638      	mov	r0, r7
 802fb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802fb8a:	bf00      	nop
 802fb8c:	08035710 	.word	0x08035710
 802fb90:	08035540 	.word	0x08035540
 802fb94:	080355c0 	.word	0x080355c0

0802fb98 <__lshift>:
 802fb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fb9c:	460c      	mov	r4, r1
 802fb9e:	6849      	ldr	r1, [r1, #4]
 802fba0:	6923      	ldr	r3, [r4, #16]
 802fba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802fba6:	68a3      	ldr	r3, [r4, #8]
 802fba8:	4607      	mov	r7, r0
 802fbaa:	4691      	mov	r9, r2
 802fbac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802fbb0:	f108 0601 	add.w	r6, r8, #1
 802fbb4:	42b3      	cmp	r3, r6
 802fbb6:	db0b      	blt.n	802fbd0 <__lshift+0x38>
 802fbb8:	4638      	mov	r0, r7
 802fbba:	f7ff fddd 	bl	802f778 <_Balloc>
 802fbbe:	4605      	mov	r5, r0
 802fbc0:	b948      	cbnz	r0, 802fbd6 <__lshift+0x3e>
 802fbc2:	4602      	mov	r2, r0
 802fbc4:	4b28      	ldr	r3, [pc, #160]	; (802fc68 <__lshift+0xd0>)
 802fbc6:	4829      	ldr	r0, [pc, #164]	; (802fc6c <__lshift+0xd4>)
 802fbc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802fbcc:	f7fd fed4 	bl	802d978 <__assert_func>
 802fbd0:	3101      	adds	r1, #1
 802fbd2:	005b      	lsls	r3, r3, #1
 802fbd4:	e7ee      	b.n	802fbb4 <__lshift+0x1c>
 802fbd6:	2300      	movs	r3, #0
 802fbd8:	f100 0114 	add.w	r1, r0, #20
 802fbdc:	f100 0210 	add.w	r2, r0, #16
 802fbe0:	4618      	mov	r0, r3
 802fbe2:	4553      	cmp	r3, sl
 802fbe4:	db33      	blt.n	802fc4e <__lshift+0xb6>
 802fbe6:	6920      	ldr	r0, [r4, #16]
 802fbe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802fbec:	f104 0314 	add.w	r3, r4, #20
 802fbf0:	f019 091f 	ands.w	r9, r9, #31
 802fbf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802fbf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802fbfc:	d02b      	beq.n	802fc56 <__lshift+0xbe>
 802fbfe:	f1c9 0e20 	rsb	lr, r9, #32
 802fc02:	468a      	mov	sl, r1
 802fc04:	2200      	movs	r2, #0
 802fc06:	6818      	ldr	r0, [r3, #0]
 802fc08:	fa00 f009 	lsl.w	r0, r0, r9
 802fc0c:	4310      	orrs	r0, r2
 802fc0e:	f84a 0b04 	str.w	r0, [sl], #4
 802fc12:	f853 2b04 	ldr.w	r2, [r3], #4
 802fc16:	459c      	cmp	ip, r3
 802fc18:	fa22 f20e 	lsr.w	r2, r2, lr
 802fc1c:	d8f3      	bhi.n	802fc06 <__lshift+0x6e>
 802fc1e:	ebac 0304 	sub.w	r3, ip, r4
 802fc22:	3b15      	subs	r3, #21
 802fc24:	f023 0303 	bic.w	r3, r3, #3
 802fc28:	3304      	adds	r3, #4
 802fc2a:	f104 0015 	add.w	r0, r4, #21
 802fc2e:	4584      	cmp	ip, r0
 802fc30:	bf38      	it	cc
 802fc32:	2304      	movcc	r3, #4
 802fc34:	50ca      	str	r2, [r1, r3]
 802fc36:	b10a      	cbz	r2, 802fc3c <__lshift+0xa4>
 802fc38:	f108 0602 	add.w	r6, r8, #2
 802fc3c:	3e01      	subs	r6, #1
 802fc3e:	4638      	mov	r0, r7
 802fc40:	612e      	str	r6, [r5, #16]
 802fc42:	4621      	mov	r1, r4
 802fc44:	f7ff fdd8 	bl	802f7f8 <_Bfree>
 802fc48:	4628      	mov	r0, r5
 802fc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802fc4e:	f842 0f04 	str.w	r0, [r2, #4]!
 802fc52:	3301      	adds	r3, #1
 802fc54:	e7c5      	b.n	802fbe2 <__lshift+0x4a>
 802fc56:	3904      	subs	r1, #4
 802fc58:	f853 2b04 	ldr.w	r2, [r3], #4
 802fc5c:	f841 2f04 	str.w	r2, [r1, #4]!
 802fc60:	459c      	cmp	ip, r3
 802fc62:	d8f9      	bhi.n	802fc58 <__lshift+0xc0>
 802fc64:	e7ea      	b.n	802fc3c <__lshift+0xa4>
 802fc66:	bf00      	nop
 802fc68:	080355af 	.word	0x080355af
 802fc6c:	080355c0 	.word	0x080355c0

0802fc70 <__mcmp>:
 802fc70:	b530      	push	{r4, r5, lr}
 802fc72:	6902      	ldr	r2, [r0, #16]
 802fc74:	690c      	ldr	r4, [r1, #16]
 802fc76:	1b12      	subs	r2, r2, r4
 802fc78:	d10e      	bne.n	802fc98 <__mcmp+0x28>
 802fc7a:	f100 0314 	add.w	r3, r0, #20
 802fc7e:	3114      	adds	r1, #20
 802fc80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802fc84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802fc88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802fc8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802fc90:	42a5      	cmp	r5, r4
 802fc92:	d003      	beq.n	802fc9c <__mcmp+0x2c>
 802fc94:	d305      	bcc.n	802fca2 <__mcmp+0x32>
 802fc96:	2201      	movs	r2, #1
 802fc98:	4610      	mov	r0, r2
 802fc9a:	bd30      	pop	{r4, r5, pc}
 802fc9c:	4283      	cmp	r3, r0
 802fc9e:	d3f3      	bcc.n	802fc88 <__mcmp+0x18>
 802fca0:	e7fa      	b.n	802fc98 <__mcmp+0x28>
 802fca2:	f04f 32ff 	mov.w	r2, #4294967295
 802fca6:	e7f7      	b.n	802fc98 <__mcmp+0x28>

0802fca8 <__mdiff>:
 802fca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fcac:	460c      	mov	r4, r1
 802fcae:	4606      	mov	r6, r0
 802fcb0:	4611      	mov	r1, r2
 802fcb2:	4620      	mov	r0, r4
 802fcb4:	4690      	mov	r8, r2
 802fcb6:	f7ff ffdb 	bl	802fc70 <__mcmp>
 802fcba:	1e05      	subs	r5, r0, #0
 802fcbc:	d110      	bne.n	802fce0 <__mdiff+0x38>
 802fcbe:	4629      	mov	r1, r5
 802fcc0:	4630      	mov	r0, r6
 802fcc2:	f7ff fd59 	bl	802f778 <_Balloc>
 802fcc6:	b930      	cbnz	r0, 802fcd6 <__mdiff+0x2e>
 802fcc8:	4b3a      	ldr	r3, [pc, #232]	; (802fdb4 <__mdiff+0x10c>)
 802fcca:	4602      	mov	r2, r0
 802fccc:	f240 2137 	movw	r1, #567	; 0x237
 802fcd0:	4839      	ldr	r0, [pc, #228]	; (802fdb8 <__mdiff+0x110>)
 802fcd2:	f7fd fe51 	bl	802d978 <__assert_func>
 802fcd6:	2301      	movs	r3, #1
 802fcd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802fcdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fce0:	bfa4      	itt	ge
 802fce2:	4643      	movge	r3, r8
 802fce4:	46a0      	movge	r8, r4
 802fce6:	4630      	mov	r0, r6
 802fce8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802fcec:	bfa6      	itte	ge
 802fcee:	461c      	movge	r4, r3
 802fcf0:	2500      	movge	r5, #0
 802fcf2:	2501      	movlt	r5, #1
 802fcf4:	f7ff fd40 	bl	802f778 <_Balloc>
 802fcf8:	b920      	cbnz	r0, 802fd04 <__mdiff+0x5c>
 802fcfa:	4b2e      	ldr	r3, [pc, #184]	; (802fdb4 <__mdiff+0x10c>)
 802fcfc:	4602      	mov	r2, r0
 802fcfe:	f240 2145 	movw	r1, #581	; 0x245
 802fd02:	e7e5      	b.n	802fcd0 <__mdiff+0x28>
 802fd04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802fd08:	6926      	ldr	r6, [r4, #16]
 802fd0a:	60c5      	str	r5, [r0, #12]
 802fd0c:	f104 0914 	add.w	r9, r4, #20
 802fd10:	f108 0514 	add.w	r5, r8, #20
 802fd14:	f100 0e14 	add.w	lr, r0, #20
 802fd18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802fd1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802fd20:	f108 0210 	add.w	r2, r8, #16
 802fd24:	46f2      	mov	sl, lr
 802fd26:	2100      	movs	r1, #0
 802fd28:	f859 3b04 	ldr.w	r3, [r9], #4
 802fd2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802fd30:	fa11 f88b 	uxtah	r8, r1, fp
 802fd34:	b299      	uxth	r1, r3
 802fd36:	0c1b      	lsrs	r3, r3, #16
 802fd38:	eba8 0801 	sub.w	r8, r8, r1
 802fd3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802fd40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802fd44:	fa1f f888 	uxth.w	r8, r8
 802fd48:	1419      	asrs	r1, r3, #16
 802fd4a:	454e      	cmp	r6, r9
 802fd4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802fd50:	f84a 3b04 	str.w	r3, [sl], #4
 802fd54:	d8e8      	bhi.n	802fd28 <__mdiff+0x80>
 802fd56:	1b33      	subs	r3, r6, r4
 802fd58:	3b15      	subs	r3, #21
 802fd5a:	f023 0303 	bic.w	r3, r3, #3
 802fd5e:	3304      	adds	r3, #4
 802fd60:	3415      	adds	r4, #21
 802fd62:	42a6      	cmp	r6, r4
 802fd64:	bf38      	it	cc
 802fd66:	2304      	movcc	r3, #4
 802fd68:	441d      	add	r5, r3
 802fd6a:	4473      	add	r3, lr
 802fd6c:	469e      	mov	lr, r3
 802fd6e:	462e      	mov	r6, r5
 802fd70:	4566      	cmp	r6, ip
 802fd72:	d30e      	bcc.n	802fd92 <__mdiff+0xea>
 802fd74:	f10c 0203 	add.w	r2, ip, #3
 802fd78:	1b52      	subs	r2, r2, r5
 802fd7a:	f022 0203 	bic.w	r2, r2, #3
 802fd7e:	3d03      	subs	r5, #3
 802fd80:	45ac      	cmp	ip, r5
 802fd82:	bf38      	it	cc
 802fd84:	2200      	movcc	r2, #0
 802fd86:	4413      	add	r3, r2
 802fd88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802fd8c:	b17a      	cbz	r2, 802fdae <__mdiff+0x106>
 802fd8e:	6107      	str	r7, [r0, #16]
 802fd90:	e7a4      	b.n	802fcdc <__mdiff+0x34>
 802fd92:	f856 8b04 	ldr.w	r8, [r6], #4
 802fd96:	fa11 f288 	uxtah	r2, r1, r8
 802fd9a:	1414      	asrs	r4, r2, #16
 802fd9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802fda0:	b292      	uxth	r2, r2
 802fda2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802fda6:	f84e 2b04 	str.w	r2, [lr], #4
 802fdaa:	1421      	asrs	r1, r4, #16
 802fdac:	e7e0      	b.n	802fd70 <__mdiff+0xc8>
 802fdae:	3f01      	subs	r7, #1
 802fdb0:	e7ea      	b.n	802fd88 <__mdiff+0xe0>
 802fdb2:	bf00      	nop
 802fdb4:	080355af 	.word	0x080355af
 802fdb8:	080355c0 	.word	0x080355c0

0802fdbc <__d2b>:
 802fdbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802fdc0:	460f      	mov	r7, r1
 802fdc2:	2101      	movs	r1, #1
 802fdc4:	ec59 8b10 	vmov	r8, r9, d0
 802fdc8:	4616      	mov	r6, r2
 802fdca:	f7ff fcd5 	bl	802f778 <_Balloc>
 802fdce:	4604      	mov	r4, r0
 802fdd0:	b930      	cbnz	r0, 802fde0 <__d2b+0x24>
 802fdd2:	4602      	mov	r2, r0
 802fdd4:	4b24      	ldr	r3, [pc, #144]	; (802fe68 <__d2b+0xac>)
 802fdd6:	4825      	ldr	r0, [pc, #148]	; (802fe6c <__d2b+0xb0>)
 802fdd8:	f240 310f 	movw	r1, #783	; 0x30f
 802fddc:	f7fd fdcc 	bl	802d978 <__assert_func>
 802fde0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802fde4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fde8:	bb2d      	cbnz	r5, 802fe36 <__d2b+0x7a>
 802fdea:	9301      	str	r3, [sp, #4]
 802fdec:	f1b8 0300 	subs.w	r3, r8, #0
 802fdf0:	d026      	beq.n	802fe40 <__d2b+0x84>
 802fdf2:	4668      	mov	r0, sp
 802fdf4:	9300      	str	r3, [sp, #0]
 802fdf6:	f7ff fd87 	bl	802f908 <__lo0bits>
 802fdfa:	e9dd 1200 	ldrd	r1, r2, [sp]
 802fdfe:	b1e8      	cbz	r0, 802fe3c <__d2b+0x80>
 802fe00:	f1c0 0320 	rsb	r3, r0, #32
 802fe04:	fa02 f303 	lsl.w	r3, r2, r3
 802fe08:	430b      	orrs	r3, r1
 802fe0a:	40c2      	lsrs	r2, r0
 802fe0c:	6163      	str	r3, [r4, #20]
 802fe0e:	9201      	str	r2, [sp, #4]
 802fe10:	9b01      	ldr	r3, [sp, #4]
 802fe12:	61a3      	str	r3, [r4, #24]
 802fe14:	2b00      	cmp	r3, #0
 802fe16:	bf14      	ite	ne
 802fe18:	2202      	movne	r2, #2
 802fe1a:	2201      	moveq	r2, #1
 802fe1c:	6122      	str	r2, [r4, #16]
 802fe1e:	b1bd      	cbz	r5, 802fe50 <__d2b+0x94>
 802fe20:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802fe24:	4405      	add	r5, r0
 802fe26:	603d      	str	r5, [r7, #0]
 802fe28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802fe2c:	6030      	str	r0, [r6, #0]
 802fe2e:	4620      	mov	r0, r4
 802fe30:	b003      	add	sp, #12
 802fe32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802fe36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802fe3a:	e7d6      	b.n	802fdea <__d2b+0x2e>
 802fe3c:	6161      	str	r1, [r4, #20]
 802fe3e:	e7e7      	b.n	802fe10 <__d2b+0x54>
 802fe40:	a801      	add	r0, sp, #4
 802fe42:	f7ff fd61 	bl	802f908 <__lo0bits>
 802fe46:	9b01      	ldr	r3, [sp, #4]
 802fe48:	6163      	str	r3, [r4, #20]
 802fe4a:	3020      	adds	r0, #32
 802fe4c:	2201      	movs	r2, #1
 802fe4e:	e7e5      	b.n	802fe1c <__d2b+0x60>
 802fe50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802fe54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802fe58:	6038      	str	r0, [r7, #0]
 802fe5a:	6918      	ldr	r0, [r3, #16]
 802fe5c:	f7ff fd34 	bl	802f8c8 <__hi0bits>
 802fe60:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802fe64:	e7e2      	b.n	802fe2c <__d2b+0x70>
 802fe66:	bf00      	nop
 802fe68:	080355af 	.word	0x080355af
 802fe6c:	080355c0 	.word	0x080355c0

0802fe70 <_malloc_usable_size_r>:
 802fe70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802fe74:	1f18      	subs	r0, r3, #4
 802fe76:	2b00      	cmp	r3, #0
 802fe78:	bfbc      	itt	lt
 802fe7a:	580b      	ldrlt	r3, [r1, r0]
 802fe7c:	18c0      	addlt	r0, r0, r3
 802fe7e:	4770      	bx	lr

0802fe80 <__ascii_wctomb>:
 802fe80:	b149      	cbz	r1, 802fe96 <__ascii_wctomb+0x16>
 802fe82:	2aff      	cmp	r2, #255	; 0xff
 802fe84:	bf85      	ittet	hi
 802fe86:	238a      	movhi	r3, #138	; 0x8a
 802fe88:	6003      	strhi	r3, [r0, #0]
 802fe8a:	700a      	strbls	r2, [r1, #0]
 802fe8c:	f04f 30ff 	movhi.w	r0, #4294967295
 802fe90:	bf98      	it	ls
 802fe92:	2001      	movls	r0, #1
 802fe94:	4770      	bx	lr
 802fe96:	4608      	mov	r0, r1
 802fe98:	4770      	bx	lr

0802fe9a <__ssputs_r>:
 802fe9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fe9e:	688e      	ldr	r6, [r1, #8]
 802fea0:	461f      	mov	r7, r3
 802fea2:	42be      	cmp	r6, r7
 802fea4:	680b      	ldr	r3, [r1, #0]
 802fea6:	4682      	mov	sl, r0
 802fea8:	460c      	mov	r4, r1
 802feaa:	4690      	mov	r8, r2
 802feac:	d82c      	bhi.n	802ff08 <__ssputs_r+0x6e>
 802feae:	898a      	ldrh	r2, [r1, #12]
 802feb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802feb4:	d026      	beq.n	802ff04 <__ssputs_r+0x6a>
 802feb6:	6965      	ldr	r5, [r4, #20]
 802feb8:	6909      	ldr	r1, [r1, #16]
 802feba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802febe:	eba3 0901 	sub.w	r9, r3, r1
 802fec2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802fec6:	1c7b      	adds	r3, r7, #1
 802fec8:	444b      	add	r3, r9
 802feca:	106d      	asrs	r5, r5, #1
 802fecc:	429d      	cmp	r5, r3
 802fece:	bf38      	it	cc
 802fed0:	461d      	movcc	r5, r3
 802fed2:	0553      	lsls	r3, r2, #21
 802fed4:	d527      	bpl.n	802ff26 <__ssputs_r+0x8c>
 802fed6:	4629      	mov	r1, r5
 802fed8:	f7fd fdc0 	bl	802da5c <_malloc_r>
 802fedc:	4606      	mov	r6, r0
 802fede:	b360      	cbz	r0, 802ff3a <__ssputs_r+0xa0>
 802fee0:	6921      	ldr	r1, [r4, #16]
 802fee2:	464a      	mov	r2, r9
 802fee4:	f7fe fd01 	bl	802e8ea <memcpy>
 802fee8:	89a3      	ldrh	r3, [r4, #12]
 802feea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802feee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802fef2:	81a3      	strh	r3, [r4, #12]
 802fef4:	6126      	str	r6, [r4, #16]
 802fef6:	6165      	str	r5, [r4, #20]
 802fef8:	444e      	add	r6, r9
 802fefa:	eba5 0509 	sub.w	r5, r5, r9
 802fefe:	6026      	str	r6, [r4, #0]
 802ff00:	60a5      	str	r5, [r4, #8]
 802ff02:	463e      	mov	r6, r7
 802ff04:	42be      	cmp	r6, r7
 802ff06:	d900      	bls.n	802ff0a <__ssputs_r+0x70>
 802ff08:	463e      	mov	r6, r7
 802ff0a:	6820      	ldr	r0, [r4, #0]
 802ff0c:	4632      	mov	r2, r6
 802ff0e:	4641      	mov	r1, r8
 802ff10:	f7fe fbfe 	bl	802e710 <memmove>
 802ff14:	68a3      	ldr	r3, [r4, #8]
 802ff16:	1b9b      	subs	r3, r3, r6
 802ff18:	60a3      	str	r3, [r4, #8]
 802ff1a:	6823      	ldr	r3, [r4, #0]
 802ff1c:	4433      	add	r3, r6
 802ff1e:	6023      	str	r3, [r4, #0]
 802ff20:	2000      	movs	r0, #0
 802ff22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ff26:	462a      	mov	r2, r5
 802ff28:	f7fd fe24 	bl	802db74 <_realloc_r>
 802ff2c:	4606      	mov	r6, r0
 802ff2e:	2800      	cmp	r0, #0
 802ff30:	d1e0      	bne.n	802fef4 <__ssputs_r+0x5a>
 802ff32:	6921      	ldr	r1, [r4, #16]
 802ff34:	4650      	mov	r0, sl
 802ff36:	f7ff fbc1 	bl	802f6bc <_free_r>
 802ff3a:	230c      	movs	r3, #12
 802ff3c:	f8ca 3000 	str.w	r3, [sl]
 802ff40:	89a3      	ldrh	r3, [r4, #12]
 802ff42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ff46:	81a3      	strh	r3, [r4, #12]
 802ff48:	f04f 30ff 	mov.w	r0, #4294967295
 802ff4c:	e7e9      	b.n	802ff22 <__ssputs_r+0x88>
	...

0802ff50 <_svfiprintf_r>:
 802ff50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ff54:	4698      	mov	r8, r3
 802ff56:	898b      	ldrh	r3, [r1, #12]
 802ff58:	061b      	lsls	r3, r3, #24
 802ff5a:	b09d      	sub	sp, #116	; 0x74
 802ff5c:	4607      	mov	r7, r0
 802ff5e:	460d      	mov	r5, r1
 802ff60:	4614      	mov	r4, r2
 802ff62:	d50e      	bpl.n	802ff82 <_svfiprintf_r+0x32>
 802ff64:	690b      	ldr	r3, [r1, #16]
 802ff66:	b963      	cbnz	r3, 802ff82 <_svfiprintf_r+0x32>
 802ff68:	2140      	movs	r1, #64	; 0x40
 802ff6a:	f7fd fd77 	bl	802da5c <_malloc_r>
 802ff6e:	6028      	str	r0, [r5, #0]
 802ff70:	6128      	str	r0, [r5, #16]
 802ff72:	b920      	cbnz	r0, 802ff7e <_svfiprintf_r+0x2e>
 802ff74:	230c      	movs	r3, #12
 802ff76:	603b      	str	r3, [r7, #0]
 802ff78:	f04f 30ff 	mov.w	r0, #4294967295
 802ff7c:	e0d0      	b.n	8030120 <_svfiprintf_r+0x1d0>
 802ff7e:	2340      	movs	r3, #64	; 0x40
 802ff80:	616b      	str	r3, [r5, #20]
 802ff82:	2300      	movs	r3, #0
 802ff84:	9309      	str	r3, [sp, #36]	; 0x24
 802ff86:	2320      	movs	r3, #32
 802ff88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ff8c:	f8cd 800c 	str.w	r8, [sp, #12]
 802ff90:	2330      	movs	r3, #48	; 0x30
 802ff92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8030138 <_svfiprintf_r+0x1e8>
 802ff96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ff9a:	f04f 0901 	mov.w	r9, #1
 802ff9e:	4623      	mov	r3, r4
 802ffa0:	469a      	mov	sl, r3
 802ffa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ffa6:	b10a      	cbz	r2, 802ffac <_svfiprintf_r+0x5c>
 802ffa8:	2a25      	cmp	r2, #37	; 0x25
 802ffaa:	d1f9      	bne.n	802ffa0 <_svfiprintf_r+0x50>
 802ffac:	ebba 0b04 	subs.w	fp, sl, r4
 802ffb0:	d00b      	beq.n	802ffca <_svfiprintf_r+0x7a>
 802ffb2:	465b      	mov	r3, fp
 802ffb4:	4622      	mov	r2, r4
 802ffb6:	4629      	mov	r1, r5
 802ffb8:	4638      	mov	r0, r7
 802ffba:	f7ff ff6e 	bl	802fe9a <__ssputs_r>
 802ffbe:	3001      	adds	r0, #1
 802ffc0:	f000 80a9 	beq.w	8030116 <_svfiprintf_r+0x1c6>
 802ffc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ffc6:	445a      	add	r2, fp
 802ffc8:	9209      	str	r2, [sp, #36]	; 0x24
 802ffca:	f89a 3000 	ldrb.w	r3, [sl]
 802ffce:	2b00      	cmp	r3, #0
 802ffd0:	f000 80a1 	beq.w	8030116 <_svfiprintf_r+0x1c6>
 802ffd4:	2300      	movs	r3, #0
 802ffd6:	f04f 32ff 	mov.w	r2, #4294967295
 802ffda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ffde:	f10a 0a01 	add.w	sl, sl, #1
 802ffe2:	9304      	str	r3, [sp, #16]
 802ffe4:	9307      	str	r3, [sp, #28]
 802ffe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ffea:	931a      	str	r3, [sp, #104]	; 0x68
 802ffec:	4654      	mov	r4, sl
 802ffee:	2205      	movs	r2, #5
 802fff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802fff4:	4850      	ldr	r0, [pc, #320]	; (8030138 <_svfiprintf_r+0x1e8>)
 802fff6:	f7d0 f8eb 	bl	80001d0 <memchr>
 802fffa:	9a04      	ldr	r2, [sp, #16]
 802fffc:	b9d8      	cbnz	r0, 8030036 <_svfiprintf_r+0xe6>
 802fffe:	06d0      	lsls	r0, r2, #27
 8030000:	bf44      	itt	mi
 8030002:	2320      	movmi	r3, #32
 8030004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030008:	0711      	lsls	r1, r2, #28
 803000a:	bf44      	itt	mi
 803000c:	232b      	movmi	r3, #43	; 0x2b
 803000e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030012:	f89a 3000 	ldrb.w	r3, [sl]
 8030016:	2b2a      	cmp	r3, #42	; 0x2a
 8030018:	d015      	beq.n	8030046 <_svfiprintf_r+0xf6>
 803001a:	9a07      	ldr	r2, [sp, #28]
 803001c:	4654      	mov	r4, sl
 803001e:	2000      	movs	r0, #0
 8030020:	f04f 0c0a 	mov.w	ip, #10
 8030024:	4621      	mov	r1, r4
 8030026:	f811 3b01 	ldrb.w	r3, [r1], #1
 803002a:	3b30      	subs	r3, #48	; 0x30
 803002c:	2b09      	cmp	r3, #9
 803002e:	d94d      	bls.n	80300cc <_svfiprintf_r+0x17c>
 8030030:	b1b0      	cbz	r0, 8030060 <_svfiprintf_r+0x110>
 8030032:	9207      	str	r2, [sp, #28]
 8030034:	e014      	b.n	8030060 <_svfiprintf_r+0x110>
 8030036:	eba0 0308 	sub.w	r3, r0, r8
 803003a:	fa09 f303 	lsl.w	r3, r9, r3
 803003e:	4313      	orrs	r3, r2
 8030040:	9304      	str	r3, [sp, #16]
 8030042:	46a2      	mov	sl, r4
 8030044:	e7d2      	b.n	802ffec <_svfiprintf_r+0x9c>
 8030046:	9b03      	ldr	r3, [sp, #12]
 8030048:	1d19      	adds	r1, r3, #4
 803004a:	681b      	ldr	r3, [r3, #0]
 803004c:	9103      	str	r1, [sp, #12]
 803004e:	2b00      	cmp	r3, #0
 8030050:	bfbb      	ittet	lt
 8030052:	425b      	neglt	r3, r3
 8030054:	f042 0202 	orrlt.w	r2, r2, #2
 8030058:	9307      	strge	r3, [sp, #28]
 803005a:	9307      	strlt	r3, [sp, #28]
 803005c:	bfb8      	it	lt
 803005e:	9204      	strlt	r2, [sp, #16]
 8030060:	7823      	ldrb	r3, [r4, #0]
 8030062:	2b2e      	cmp	r3, #46	; 0x2e
 8030064:	d10c      	bne.n	8030080 <_svfiprintf_r+0x130>
 8030066:	7863      	ldrb	r3, [r4, #1]
 8030068:	2b2a      	cmp	r3, #42	; 0x2a
 803006a:	d134      	bne.n	80300d6 <_svfiprintf_r+0x186>
 803006c:	9b03      	ldr	r3, [sp, #12]
 803006e:	1d1a      	adds	r2, r3, #4
 8030070:	681b      	ldr	r3, [r3, #0]
 8030072:	9203      	str	r2, [sp, #12]
 8030074:	2b00      	cmp	r3, #0
 8030076:	bfb8      	it	lt
 8030078:	f04f 33ff 	movlt.w	r3, #4294967295
 803007c:	3402      	adds	r4, #2
 803007e:	9305      	str	r3, [sp, #20]
 8030080:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8030148 <_svfiprintf_r+0x1f8>
 8030084:	7821      	ldrb	r1, [r4, #0]
 8030086:	2203      	movs	r2, #3
 8030088:	4650      	mov	r0, sl
 803008a:	f7d0 f8a1 	bl	80001d0 <memchr>
 803008e:	b138      	cbz	r0, 80300a0 <_svfiprintf_r+0x150>
 8030090:	9b04      	ldr	r3, [sp, #16]
 8030092:	eba0 000a 	sub.w	r0, r0, sl
 8030096:	2240      	movs	r2, #64	; 0x40
 8030098:	4082      	lsls	r2, r0
 803009a:	4313      	orrs	r3, r2
 803009c:	3401      	adds	r4, #1
 803009e:	9304      	str	r3, [sp, #16]
 80300a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80300a4:	4825      	ldr	r0, [pc, #148]	; (803013c <_svfiprintf_r+0x1ec>)
 80300a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80300aa:	2206      	movs	r2, #6
 80300ac:	f7d0 f890 	bl	80001d0 <memchr>
 80300b0:	2800      	cmp	r0, #0
 80300b2:	d038      	beq.n	8030126 <_svfiprintf_r+0x1d6>
 80300b4:	4b22      	ldr	r3, [pc, #136]	; (8030140 <_svfiprintf_r+0x1f0>)
 80300b6:	bb1b      	cbnz	r3, 8030100 <_svfiprintf_r+0x1b0>
 80300b8:	9b03      	ldr	r3, [sp, #12]
 80300ba:	3307      	adds	r3, #7
 80300bc:	f023 0307 	bic.w	r3, r3, #7
 80300c0:	3308      	adds	r3, #8
 80300c2:	9303      	str	r3, [sp, #12]
 80300c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80300c6:	4433      	add	r3, r6
 80300c8:	9309      	str	r3, [sp, #36]	; 0x24
 80300ca:	e768      	b.n	802ff9e <_svfiprintf_r+0x4e>
 80300cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80300d0:	460c      	mov	r4, r1
 80300d2:	2001      	movs	r0, #1
 80300d4:	e7a6      	b.n	8030024 <_svfiprintf_r+0xd4>
 80300d6:	2300      	movs	r3, #0
 80300d8:	3401      	adds	r4, #1
 80300da:	9305      	str	r3, [sp, #20]
 80300dc:	4619      	mov	r1, r3
 80300de:	f04f 0c0a 	mov.w	ip, #10
 80300e2:	4620      	mov	r0, r4
 80300e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80300e8:	3a30      	subs	r2, #48	; 0x30
 80300ea:	2a09      	cmp	r2, #9
 80300ec:	d903      	bls.n	80300f6 <_svfiprintf_r+0x1a6>
 80300ee:	2b00      	cmp	r3, #0
 80300f0:	d0c6      	beq.n	8030080 <_svfiprintf_r+0x130>
 80300f2:	9105      	str	r1, [sp, #20]
 80300f4:	e7c4      	b.n	8030080 <_svfiprintf_r+0x130>
 80300f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80300fa:	4604      	mov	r4, r0
 80300fc:	2301      	movs	r3, #1
 80300fe:	e7f0      	b.n	80300e2 <_svfiprintf_r+0x192>
 8030100:	ab03      	add	r3, sp, #12
 8030102:	9300      	str	r3, [sp, #0]
 8030104:	462a      	mov	r2, r5
 8030106:	4b0f      	ldr	r3, [pc, #60]	; (8030144 <_svfiprintf_r+0x1f4>)
 8030108:	a904      	add	r1, sp, #16
 803010a:	4638      	mov	r0, r7
 803010c:	f7fd fe02 	bl	802dd14 <_printf_float>
 8030110:	1c42      	adds	r2, r0, #1
 8030112:	4606      	mov	r6, r0
 8030114:	d1d6      	bne.n	80300c4 <_svfiprintf_r+0x174>
 8030116:	89ab      	ldrh	r3, [r5, #12]
 8030118:	065b      	lsls	r3, r3, #25
 803011a:	f53f af2d 	bmi.w	802ff78 <_svfiprintf_r+0x28>
 803011e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030120:	b01d      	add	sp, #116	; 0x74
 8030122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030126:	ab03      	add	r3, sp, #12
 8030128:	9300      	str	r3, [sp, #0]
 803012a:	462a      	mov	r2, r5
 803012c:	4b05      	ldr	r3, [pc, #20]	; (8030144 <_svfiprintf_r+0x1f4>)
 803012e:	a904      	add	r1, sp, #16
 8030130:	4638      	mov	r0, r7
 8030132:	f7fe f893 	bl	802e25c <_printf_i>
 8030136:	e7eb      	b.n	8030110 <_svfiprintf_r+0x1c0>
 8030138:	0803571c 	.word	0x0803571c
 803013c:	08035726 	.word	0x08035726
 8030140:	0802dd15 	.word	0x0802dd15
 8030144:	0802fe9b 	.word	0x0802fe9b
 8030148:	08035722 	.word	0x08035722

0803014c <__sfputc_r>:
 803014c:	6893      	ldr	r3, [r2, #8]
 803014e:	3b01      	subs	r3, #1
 8030150:	2b00      	cmp	r3, #0
 8030152:	b410      	push	{r4}
 8030154:	6093      	str	r3, [r2, #8]
 8030156:	da08      	bge.n	803016a <__sfputc_r+0x1e>
 8030158:	6994      	ldr	r4, [r2, #24]
 803015a:	42a3      	cmp	r3, r4
 803015c:	db01      	blt.n	8030162 <__sfputc_r+0x16>
 803015e:	290a      	cmp	r1, #10
 8030160:	d103      	bne.n	803016a <__sfputc_r+0x1e>
 8030162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030166:	f000 b9e3 	b.w	8030530 <__swbuf_r>
 803016a:	6813      	ldr	r3, [r2, #0]
 803016c:	1c58      	adds	r0, r3, #1
 803016e:	6010      	str	r0, [r2, #0]
 8030170:	7019      	strb	r1, [r3, #0]
 8030172:	4608      	mov	r0, r1
 8030174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030178:	4770      	bx	lr

0803017a <__sfputs_r>:
 803017a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803017c:	4606      	mov	r6, r0
 803017e:	460f      	mov	r7, r1
 8030180:	4614      	mov	r4, r2
 8030182:	18d5      	adds	r5, r2, r3
 8030184:	42ac      	cmp	r4, r5
 8030186:	d101      	bne.n	803018c <__sfputs_r+0x12>
 8030188:	2000      	movs	r0, #0
 803018a:	e007      	b.n	803019c <__sfputs_r+0x22>
 803018c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030190:	463a      	mov	r2, r7
 8030192:	4630      	mov	r0, r6
 8030194:	f7ff ffda 	bl	803014c <__sfputc_r>
 8030198:	1c43      	adds	r3, r0, #1
 803019a:	d1f3      	bne.n	8030184 <__sfputs_r+0xa>
 803019c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080301a0 <_vfiprintf_r>:
 80301a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80301a4:	460d      	mov	r5, r1
 80301a6:	b09d      	sub	sp, #116	; 0x74
 80301a8:	4614      	mov	r4, r2
 80301aa:	4698      	mov	r8, r3
 80301ac:	4606      	mov	r6, r0
 80301ae:	b118      	cbz	r0, 80301b8 <_vfiprintf_r+0x18>
 80301b0:	6a03      	ldr	r3, [r0, #32]
 80301b2:	b90b      	cbnz	r3, 80301b8 <_vfiprintf_r+0x18>
 80301b4:	f7fe fa00 	bl	802e5b8 <__sinit>
 80301b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80301ba:	07d9      	lsls	r1, r3, #31
 80301bc:	d405      	bmi.n	80301ca <_vfiprintf_r+0x2a>
 80301be:	89ab      	ldrh	r3, [r5, #12]
 80301c0:	059a      	lsls	r2, r3, #22
 80301c2:	d402      	bmi.n	80301ca <_vfiprintf_r+0x2a>
 80301c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80301c6:	f7fe fb8e 	bl	802e8e6 <__retarget_lock_acquire_recursive>
 80301ca:	89ab      	ldrh	r3, [r5, #12]
 80301cc:	071b      	lsls	r3, r3, #28
 80301ce:	d501      	bpl.n	80301d4 <_vfiprintf_r+0x34>
 80301d0:	692b      	ldr	r3, [r5, #16]
 80301d2:	b99b      	cbnz	r3, 80301fc <_vfiprintf_r+0x5c>
 80301d4:	4629      	mov	r1, r5
 80301d6:	4630      	mov	r0, r6
 80301d8:	f000 f9e8 	bl	80305ac <__swsetup_r>
 80301dc:	b170      	cbz	r0, 80301fc <_vfiprintf_r+0x5c>
 80301de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80301e0:	07dc      	lsls	r4, r3, #31
 80301e2:	d504      	bpl.n	80301ee <_vfiprintf_r+0x4e>
 80301e4:	f04f 30ff 	mov.w	r0, #4294967295
 80301e8:	b01d      	add	sp, #116	; 0x74
 80301ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80301ee:	89ab      	ldrh	r3, [r5, #12]
 80301f0:	0598      	lsls	r0, r3, #22
 80301f2:	d4f7      	bmi.n	80301e4 <_vfiprintf_r+0x44>
 80301f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80301f6:	f7fe fb77 	bl	802e8e8 <__retarget_lock_release_recursive>
 80301fa:	e7f3      	b.n	80301e4 <_vfiprintf_r+0x44>
 80301fc:	2300      	movs	r3, #0
 80301fe:	9309      	str	r3, [sp, #36]	; 0x24
 8030200:	2320      	movs	r3, #32
 8030202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8030206:	f8cd 800c 	str.w	r8, [sp, #12]
 803020a:	2330      	movs	r3, #48	; 0x30
 803020c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80303c0 <_vfiprintf_r+0x220>
 8030210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8030214:	f04f 0901 	mov.w	r9, #1
 8030218:	4623      	mov	r3, r4
 803021a:	469a      	mov	sl, r3
 803021c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030220:	b10a      	cbz	r2, 8030226 <_vfiprintf_r+0x86>
 8030222:	2a25      	cmp	r2, #37	; 0x25
 8030224:	d1f9      	bne.n	803021a <_vfiprintf_r+0x7a>
 8030226:	ebba 0b04 	subs.w	fp, sl, r4
 803022a:	d00b      	beq.n	8030244 <_vfiprintf_r+0xa4>
 803022c:	465b      	mov	r3, fp
 803022e:	4622      	mov	r2, r4
 8030230:	4629      	mov	r1, r5
 8030232:	4630      	mov	r0, r6
 8030234:	f7ff ffa1 	bl	803017a <__sfputs_r>
 8030238:	3001      	adds	r0, #1
 803023a:	f000 80a9 	beq.w	8030390 <_vfiprintf_r+0x1f0>
 803023e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8030240:	445a      	add	r2, fp
 8030242:	9209      	str	r2, [sp, #36]	; 0x24
 8030244:	f89a 3000 	ldrb.w	r3, [sl]
 8030248:	2b00      	cmp	r3, #0
 803024a:	f000 80a1 	beq.w	8030390 <_vfiprintf_r+0x1f0>
 803024e:	2300      	movs	r3, #0
 8030250:	f04f 32ff 	mov.w	r2, #4294967295
 8030254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030258:	f10a 0a01 	add.w	sl, sl, #1
 803025c:	9304      	str	r3, [sp, #16]
 803025e:	9307      	str	r3, [sp, #28]
 8030260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030264:	931a      	str	r3, [sp, #104]	; 0x68
 8030266:	4654      	mov	r4, sl
 8030268:	2205      	movs	r2, #5
 803026a:	f814 1b01 	ldrb.w	r1, [r4], #1
 803026e:	4854      	ldr	r0, [pc, #336]	; (80303c0 <_vfiprintf_r+0x220>)
 8030270:	f7cf ffae 	bl	80001d0 <memchr>
 8030274:	9a04      	ldr	r2, [sp, #16]
 8030276:	b9d8      	cbnz	r0, 80302b0 <_vfiprintf_r+0x110>
 8030278:	06d1      	lsls	r1, r2, #27
 803027a:	bf44      	itt	mi
 803027c:	2320      	movmi	r3, #32
 803027e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030282:	0713      	lsls	r3, r2, #28
 8030284:	bf44      	itt	mi
 8030286:	232b      	movmi	r3, #43	; 0x2b
 8030288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803028c:	f89a 3000 	ldrb.w	r3, [sl]
 8030290:	2b2a      	cmp	r3, #42	; 0x2a
 8030292:	d015      	beq.n	80302c0 <_vfiprintf_r+0x120>
 8030294:	9a07      	ldr	r2, [sp, #28]
 8030296:	4654      	mov	r4, sl
 8030298:	2000      	movs	r0, #0
 803029a:	f04f 0c0a 	mov.w	ip, #10
 803029e:	4621      	mov	r1, r4
 80302a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80302a4:	3b30      	subs	r3, #48	; 0x30
 80302a6:	2b09      	cmp	r3, #9
 80302a8:	d94d      	bls.n	8030346 <_vfiprintf_r+0x1a6>
 80302aa:	b1b0      	cbz	r0, 80302da <_vfiprintf_r+0x13a>
 80302ac:	9207      	str	r2, [sp, #28]
 80302ae:	e014      	b.n	80302da <_vfiprintf_r+0x13a>
 80302b0:	eba0 0308 	sub.w	r3, r0, r8
 80302b4:	fa09 f303 	lsl.w	r3, r9, r3
 80302b8:	4313      	orrs	r3, r2
 80302ba:	9304      	str	r3, [sp, #16]
 80302bc:	46a2      	mov	sl, r4
 80302be:	e7d2      	b.n	8030266 <_vfiprintf_r+0xc6>
 80302c0:	9b03      	ldr	r3, [sp, #12]
 80302c2:	1d19      	adds	r1, r3, #4
 80302c4:	681b      	ldr	r3, [r3, #0]
 80302c6:	9103      	str	r1, [sp, #12]
 80302c8:	2b00      	cmp	r3, #0
 80302ca:	bfbb      	ittet	lt
 80302cc:	425b      	neglt	r3, r3
 80302ce:	f042 0202 	orrlt.w	r2, r2, #2
 80302d2:	9307      	strge	r3, [sp, #28]
 80302d4:	9307      	strlt	r3, [sp, #28]
 80302d6:	bfb8      	it	lt
 80302d8:	9204      	strlt	r2, [sp, #16]
 80302da:	7823      	ldrb	r3, [r4, #0]
 80302dc:	2b2e      	cmp	r3, #46	; 0x2e
 80302de:	d10c      	bne.n	80302fa <_vfiprintf_r+0x15a>
 80302e0:	7863      	ldrb	r3, [r4, #1]
 80302e2:	2b2a      	cmp	r3, #42	; 0x2a
 80302e4:	d134      	bne.n	8030350 <_vfiprintf_r+0x1b0>
 80302e6:	9b03      	ldr	r3, [sp, #12]
 80302e8:	1d1a      	adds	r2, r3, #4
 80302ea:	681b      	ldr	r3, [r3, #0]
 80302ec:	9203      	str	r2, [sp, #12]
 80302ee:	2b00      	cmp	r3, #0
 80302f0:	bfb8      	it	lt
 80302f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80302f6:	3402      	adds	r4, #2
 80302f8:	9305      	str	r3, [sp, #20]
 80302fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80303d0 <_vfiprintf_r+0x230>
 80302fe:	7821      	ldrb	r1, [r4, #0]
 8030300:	2203      	movs	r2, #3
 8030302:	4650      	mov	r0, sl
 8030304:	f7cf ff64 	bl	80001d0 <memchr>
 8030308:	b138      	cbz	r0, 803031a <_vfiprintf_r+0x17a>
 803030a:	9b04      	ldr	r3, [sp, #16]
 803030c:	eba0 000a 	sub.w	r0, r0, sl
 8030310:	2240      	movs	r2, #64	; 0x40
 8030312:	4082      	lsls	r2, r0
 8030314:	4313      	orrs	r3, r2
 8030316:	3401      	adds	r4, #1
 8030318:	9304      	str	r3, [sp, #16]
 803031a:	f814 1b01 	ldrb.w	r1, [r4], #1
 803031e:	4829      	ldr	r0, [pc, #164]	; (80303c4 <_vfiprintf_r+0x224>)
 8030320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8030324:	2206      	movs	r2, #6
 8030326:	f7cf ff53 	bl	80001d0 <memchr>
 803032a:	2800      	cmp	r0, #0
 803032c:	d03f      	beq.n	80303ae <_vfiprintf_r+0x20e>
 803032e:	4b26      	ldr	r3, [pc, #152]	; (80303c8 <_vfiprintf_r+0x228>)
 8030330:	bb1b      	cbnz	r3, 803037a <_vfiprintf_r+0x1da>
 8030332:	9b03      	ldr	r3, [sp, #12]
 8030334:	3307      	adds	r3, #7
 8030336:	f023 0307 	bic.w	r3, r3, #7
 803033a:	3308      	adds	r3, #8
 803033c:	9303      	str	r3, [sp, #12]
 803033e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8030340:	443b      	add	r3, r7
 8030342:	9309      	str	r3, [sp, #36]	; 0x24
 8030344:	e768      	b.n	8030218 <_vfiprintf_r+0x78>
 8030346:	fb0c 3202 	mla	r2, ip, r2, r3
 803034a:	460c      	mov	r4, r1
 803034c:	2001      	movs	r0, #1
 803034e:	e7a6      	b.n	803029e <_vfiprintf_r+0xfe>
 8030350:	2300      	movs	r3, #0
 8030352:	3401      	adds	r4, #1
 8030354:	9305      	str	r3, [sp, #20]
 8030356:	4619      	mov	r1, r3
 8030358:	f04f 0c0a 	mov.w	ip, #10
 803035c:	4620      	mov	r0, r4
 803035e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8030362:	3a30      	subs	r2, #48	; 0x30
 8030364:	2a09      	cmp	r2, #9
 8030366:	d903      	bls.n	8030370 <_vfiprintf_r+0x1d0>
 8030368:	2b00      	cmp	r3, #0
 803036a:	d0c6      	beq.n	80302fa <_vfiprintf_r+0x15a>
 803036c:	9105      	str	r1, [sp, #20]
 803036e:	e7c4      	b.n	80302fa <_vfiprintf_r+0x15a>
 8030370:	fb0c 2101 	mla	r1, ip, r1, r2
 8030374:	4604      	mov	r4, r0
 8030376:	2301      	movs	r3, #1
 8030378:	e7f0      	b.n	803035c <_vfiprintf_r+0x1bc>
 803037a:	ab03      	add	r3, sp, #12
 803037c:	9300      	str	r3, [sp, #0]
 803037e:	462a      	mov	r2, r5
 8030380:	4b12      	ldr	r3, [pc, #72]	; (80303cc <_vfiprintf_r+0x22c>)
 8030382:	a904      	add	r1, sp, #16
 8030384:	4630      	mov	r0, r6
 8030386:	f7fd fcc5 	bl	802dd14 <_printf_float>
 803038a:	4607      	mov	r7, r0
 803038c:	1c78      	adds	r0, r7, #1
 803038e:	d1d6      	bne.n	803033e <_vfiprintf_r+0x19e>
 8030390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8030392:	07d9      	lsls	r1, r3, #31
 8030394:	d405      	bmi.n	80303a2 <_vfiprintf_r+0x202>
 8030396:	89ab      	ldrh	r3, [r5, #12]
 8030398:	059a      	lsls	r2, r3, #22
 803039a:	d402      	bmi.n	80303a2 <_vfiprintf_r+0x202>
 803039c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803039e:	f7fe faa3 	bl	802e8e8 <__retarget_lock_release_recursive>
 80303a2:	89ab      	ldrh	r3, [r5, #12]
 80303a4:	065b      	lsls	r3, r3, #25
 80303a6:	f53f af1d 	bmi.w	80301e4 <_vfiprintf_r+0x44>
 80303aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80303ac:	e71c      	b.n	80301e8 <_vfiprintf_r+0x48>
 80303ae:	ab03      	add	r3, sp, #12
 80303b0:	9300      	str	r3, [sp, #0]
 80303b2:	462a      	mov	r2, r5
 80303b4:	4b05      	ldr	r3, [pc, #20]	; (80303cc <_vfiprintf_r+0x22c>)
 80303b6:	a904      	add	r1, sp, #16
 80303b8:	4630      	mov	r0, r6
 80303ba:	f7fd ff4f 	bl	802e25c <_printf_i>
 80303be:	e7e4      	b.n	803038a <_vfiprintf_r+0x1ea>
 80303c0:	0803571c 	.word	0x0803571c
 80303c4:	08035726 	.word	0x08035726
 80303c8:	0802dd15 	.word	0x0802dd15
 80303cc:	0803017b 	.word	0x0803017b
 80303d0:	08035722 	.word	0x08035722

080303d4 <__sflush_r>:
 80303d4:	898a      	ldrh	r2, [r1, #12]
 80303d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80303da:	4605      	mov	r5, r0
 80303dc:	0710      	lsls	r0, r2, #28
 80303de:	460c      	mov	r4, r1
 80303e0:	d458      	bmi.n	8030494 <__sflush_r+0xc0>
 80303e2:	684b      	ldr	r3, [r1, #4]
 80303e4:	2b00      	cmp	r3, #0
 80303e6:	dc05      	bgt.n	80303f4 <__sflush_r+0x20>
 80303e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80303ea:	2b00      	cmp	r3, #0
 80303ec:	dc02      	bgt.n	80303f4 <__sflush_r+0x20>
 80303ee:	2000      	movs	r0, #0
 80303f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80303f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80303f6:	2e00      	cmp	r6, #0
 80303f8:	d0f9      	beq.n	80303ee <__sflush_r+0x1a>
 80303fa:	2300      	movs	r3, #0
 80303fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8030400:	682f      	ldr	r7, [r5, #0]
 8030402:	6a21      	ldr	r1, [r4, #32]
 8030404:	602b      	str	r3, [r5, #0]
 8030406:	d032      	beq.n	803046e <__sflush_r+0x9a>
 8030408:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803040a:	89a3      	ldrh	r3, [r4, #12]
 803040c:	075a      	lsls	r2, r3, #29
 803040e:	d505      	bpl.n	803041c <__sflush_r+0x48>
 8030410:	6863      	ldr	r3, [r4, #4]
 8030412:	1ac0      	subs	r0, r0, r3
 8030414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8030416:	b10b      	cbz	r3, 803041c <__sflush_r+0x48>
 8030418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803041a:	1ac0      	subs	r0, r0, r3
 803041c:	2300      	movs	r3, #0
 803041e:	4602      	mov	r2, r0
 8030420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030422:	6a21      	ldr	r1, [r4, #32]
 8030424:	4628      	mov	r0, r5
 8030426:	47b0      	blx	r6
 8030428:	1c43      	adds	r3, r0, #1
 803042a:	89a3      	ldrh	r3, [r4, #12]
 803042c:	d106      	bne.n	803043c <__sflush_r+0x68>
 803042e:	6829      	ldr	r1, [r5, #0]
 8030430:	291d      	cmp	r1, #29
 8030432:	d82b      	bhi.n	803048c <__sflush_r+0xb8>
 8030434:	4a29      	ldr	r2, [pc, #164]	; (80304dc <__sflush_r+0x108>)
 8030436:	410a      	asrs	r2, r1
 8030438:	07d6      	lsls	r6, r2, #31
 803043a:	d427      	bmi.n	803048c <__sflush_r+0xb8>
 803043c:	2200      	movs	r2, #0
 803043e:	6062      	str	r2, [r4, #4]
 8030440:	04d9      	lsls	r1, r3, #19
 8030442:	6922      	ldr	r2, [r4, #16]
 8030444:	6022      	str	r2, [r4, #0]
 8030446:	d504      	bpl.n	8030452 <__sflush_r+0x7e>
 8030448:	1c42      	adds	r2, r0, #1
 803044a:	d101      	bne.n	8030450 <__sflush_r+0x7c>
 803044c:	682b      	ldr	r3, [r5, #0]
 803044e:	b903      	cbnz	r3, 8030452 <__sflush_r+0x7e>
 8030450:	6560      	str	r0, [r4, #84]	; 0x54
 8030452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8030454:	602f      	str	r7, [r5, #0]
 8030456:	2900      	cmp	r1, #0
 8030458:	d0c9      	beq.n	80303ee <__sflush_r+0x1a>
 803045a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803045e:	4299      	cmp	r1, r3
 8030460:	d002      	beq.n	8030468 <__sflush_r+0x94>
 8030462:	4628      	mov	r0, r5
 8030464:	f7ff f92a 	bl	802f6bc <_free_r>
 8030468:	2000      	movs	r0, #0
 803046a:	6360      	str	r0, [r4, #52]	; 0x34
 803046c:	e7c0      	b.n	80303f0 <__sflush_r+0x1c>
 803046e:	2301      	movs	r3, #1
 8030470:	4628      	mov	r0, r5
 8030472:	47b0      	blx	r6
 8030474:	1c41      	adds	r1, r0, #1
 8030476:	d1c8      	bne.n	803040a <__sflush_r+0x36>
 8030478:	682b      	ldr	r3, [r5, #0]
 803047a:	2b00      	cmp	r3, #0
 803047c:	d0c5      	beq.n	803040a <__sflush_r+0x36>
 803047e:	2b1d      	cmp	r3, #29
 8030480:	d001      	beq.n	8030486 <__sflush_r+0xb2>
 8030482:	2b16      	cmp	r3, #22
 8030484:	d101      	bne.n	803048a <__sflush_r+0xb6>
 8030486:	602f      	str	r7, [r5, #0]
 8030488:	e7b1      	b.n	80303ee <__sflush_r+0x1a>
 803048a:	89a3      	ldrh	r3, [r4, #12]
 803048c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030490:	81a3      	strh	r3, [r4, #12]
 8030492:	e7ad      	b.n	80303f0 <__sflush_r+0x1c>
 8030494:	690f      	ldr	r7, [r1, #16]
 8030496:	2f00      	cmp	r7, #0
 8030498:	d0a9      	beq.n	80303ee <__sflush_r+0x1a>
 803049a:	0793      	lsls	r3, r2, #30
 803049c:	680e      	ldr	r6, [r1, #0]
 803049e:	bf08      	it	eq
 80304a0:	694b      	ldreq	r3, [r1, #20]
 80304a2:	600f      	str	r7, [r1, #0]
 80304a4:	bf18      	it	ne
 80304a6:	2300      	movne	r3, #0
 80304a8:	eba6 0807 	sub.w	r8, r6, r7
 80304ac:	608b      	str	r3, [r1, #8]
 80304ae:	f1b8 0f00 	cmp.w	r8, #0
 80304b2:	dd9c      	ble.n	80303ee <__sflush_r+0x1a>
 80304b4:	6a21      	ldr	r1, [r4, #32]
 80304b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80304b8:	4643      	mov	r3, r8
 80304ba:	463a      	mov	r2, r7
 80304bc:	4628      	mov	r0, r5
 80304be:	47b0      	blx	r6
 80304c0:	2800      	cmp	r0, #0
 80304c2:	dc06      	bgt.n	80304d2 <__sflush_r+0xfe>
 80304c4:	89a3      	ldrh	r3, [r4, #12]
 80304c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80304ca:	81a3      	strh	r3, [r4, #12]
 80304cc:	f04f 30ff 	mov.w	r0, #4294967295
 80304d0:	e78e      	b.n	80303f0 <__sflush_r+0x1c>
 80304d2:	4407      	add	r7, r0
 80304d4:	eba8 0800 	sub.w	r8, r8, r0
 80304d8:	e7e9      	b.n	80304ae <__sflush_r+0xda>
 80304da:	bf00      	nop
 80304dc:	dfbffffe 	.word	0xdfbffffe

080304e0 <_fflush_r>:
 80304e0:	b538      	push	{r3, r4, r5, lr}
 80304e2:	690b      	ldr	r3, [r1, #16]
 80304e4:	4605      	mov	r5, r0
 80304e6:	460c      	mov	r4, r1
 80304e8:	b913      	cbnz	r3, 80304f0 <_fflush_r+0x10>
 80304ea:	2500      	movs	r5, #0
 80304ec:	4628      	mov	r0, r5
 80304ee:	bd38      	pop	{r3, r4, r5, pc}
 80304f0:	b118      	cbz	r0, 80304fa <_fflush_r+0x1a>
 80304f2:	6a03      	ldr	r3, [r0, #32]
 80304f4:	b90b      	cbnz	r3, 80304fa <_fflush_r+0x1a>
 80304f6:	f7fe f85f 	bl	802e5b8 <__sinit>
 80304fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80304fe:	2b00      	cmp	r3, #0
 8030500:	d0f3      	beq.n	80304ea <_fflush_r+0xa>
 8030502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8030504:	07d0      	lsls	r0, r2, #31
 8030506:	d404      	bmi.n	8030512 <_fflush_r+0x32>
 8030508:	0599      	lsls	r1, r3, #22
 803050a:	d402      	bmi.n	8030512 <_fflush_r+0x32>
 803050c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803050e:	f7fe f9ea 	bl	802e8e6 <__retarget_lock_acquire_recursive>
 8030512:	4628      	mov	r0, r5
 8030514:	4621      	mov	r1, r4
 8030516:	f7ff ff5d 	bl	80303d4 <__sflush_r>
 803051a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803051c:	07da      	lsls	r2, r3, #31
 803051e:	4605      	mov	r5, r0
 8030520:	d4e4      	bmi.n	80304ec <_fflush_r+0xc>
 8030522:	89a3      	ldrh	r3, [r4, #12]
 8030524:	059b      	lsls	r3, r3, #22
 8030526:	d4e1      	bmi.n	80304ec <_fflush_r+0xc>
 8030528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803052a:	f7fe f9dd 	bl	802e8e8 <__retarget_lock_release_recursive>
 803052e:	e7dd      	b.n	80304ec <_fflush_r+0xc>

08030530 <__swbuf_r>:
 8030530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030532:	460e      	mov	r6, r1
 8030534:	4614      	mov	r4, r2
 8030536:	4605      	mov	r5, r0
 8030538:	b118      	cbz	r0, 8030542 <__swbuf_r+0x12>
 803053a:	6a03      	ldr	r3, [r0, #32]
 803053c:	b90b      	cbnz	r3, 8030542 <__swbuf_r+0x12>
 803053e:	f7fe f83b 	bl	802e5b8 <__sinit>
 8030542:	69a3      	ldr	r3, [r4, #24]
 8030544:	60a3      	str	r3, [r4, #8]
 8030546:	89a3      	ldrh	r3, [r4, #12]
 8030548:	071a      	lsls	r2, r3, #28
 803054a:	d525      	bpl.n	8030598 <__swbuf_r+0x68>
 803054c:	6923      	ldr	r3, [r4, #16]
 803054e:	b31b      	cbz	r3, 8030598 <__swbuf_r+0x68>
 8030550:	6823      	ldr	r3, [r4, #0]
 8030552:	6922      	ldr	r2, [r4, #16]
 8030554:	1a98      	subs	r0, r3, r2
 8030556:	6963      	ldr	r3, [r4, #20]
 8030558:	b2f6      	uxtb	r6, r6
 803055a:	4283      	cmp	r3, r0
 803055c:	4637      	mov	r7, r6
 803055e:	dc04      	bgt.n	803056a <__swbuf_r+0x3a>
 8030560:	4621      	mov	r1, r4
 8030562:	4628      	mov	r0, r5
 8030564:	f7ff ffbc 	bl	80304e0 <_fflush_r>
 8030568:	b9e0      	cbnz	r0, 80305a4 <__swbuf_r+0x74>
 803056a:	68a3      	ldr	r3, [r4, #8]
 803056c:	3b01      	subs	r3, #1
 803056e:	60a3      	str	r3, [r4, #8]
 8030570:	6823      	ldr	r3, [r4, #0]
 8030572:	1c5a      	adds	r2, r3, #1
 8030574:	6022      	str	r2, [r4, #0]
 8030576:	701e      	strb	r6, [r3, #0]
 8030578:	6962      	ldr	r2, [r4, #20]
 803057a:	1c43      	adds	r3, r0, #1
 803057c:	429a      	cmp	r2, r3
 803057e:	d004      	beq.n	803058a <__swbuf_r+0x5a>
 8030580:	89a3      	ldrh	r3, [r4, #12]
 8030582:	07db      	lsls	r3, r3, #31
 8030584:	d506      	bpl.n	8030594 <__swbuf_r+0x64>
 8030586:	2e0a      	cmp	r6, #10
 8030588:	d104      	bne.n	8030594 <__swbuf_r+0x64>
 803058a:	4621      	mov	r1, r4
 803058c:	4628      	mov	r0, r5
 803058e:	f7ff ffa7 	bl	80304e0 <_fflush_r>
 8030592:	b938      	cbnz	r0, 80305a4 <__swbuf_r+0x74>
 8030594:	4638      	mov	r0, r7
 8030596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8030598:	4621      	mov	r1, r4
 803059a:	4628      	mov	r0, r5
 803059c:	f000 f806 	bl	80305ac <__swsetup_r>
 80305a0:	2800      	cmp	r0, #0
 80305a2:	d0d5      	beq.n	8030550 <__swbuf_r+0x20>
 80305a4:	f04f 37ff 	mov.w	r7, #4294967295
 80305a8:	e7f4      	b.n	8030594 <__swbuf_r+0x64>
	...

080305ac <__swsetup_r>:
 80305ac:	b538      	push	{r3, r4, r5, lr}
 80305ae:	4b2a      	ldr	r3, [pc, #168]	; (8030658 <__swsetup_r+0xac>)
 80305b0:	4605      	mov	r5, r0
 80305b2:	6818      	ldr	r0, [r3, #0]
 80305b4:	460c      	mov	r4, r1
 80305b6:	b118      	cbz	r0, 80305c0 <__swsetup_r+0x14>
 80305b8:	6a03      	ldr	r3, [r0, #32]
 80305ba:	b90b      	cbnz	r3, 80305c0 <__swsetup_r+0x14>
 80305bc:	f7fd fffc 	bl	802e5b8 <__sinit>
 80305c0:	89a3      	ldrh	r3, [r4, #12]
 80305c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80305c6:	0718      	lsls	r0, r3, #28
 80305c8:	d422      	bmi.n	8030610 <__swsetup_r+0x64>
 80305ca:	06d9      	lsls	r1, r3, #27
 80305cc:	d407      	bmi.n	80305de <__swsetup_r+0x32>
 80305ce:	2309      	movs	r3, #9
 80305d0:	602b      	str	r3, [r5, #0]
 80305d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80305d6:	81a3      	strh	r3, [r4, #12]
 80305d8:	f04f 30ff 	mov.w	r0, #4294967295
 80305dc:	e034      	b.n	8030648 <__swsetup_r+0x9c>
 80305de:	0758      	lsls	r0, r3, #29
 80305e0:	d512      	bpl.n	8030608 <__swsetup_r+0x5c>
 80305e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80305e4:	b141      	cbz	r1, 80305f8 <__swsetup_r+0x4c>
 80305e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80305ea:	4299      	cmp	r1, r3
 80305ec:	d002      	beq.n	80305f4 <__swsetup_r+0x48>
 80305ee:	4628      	mov	r0, r5
 80305f0:	f7ff f864 	bl	802f6bc <_free_r>
 80305f4:	2300      	movs	r3, #0
 80305f6:	6363      	str	r3, [r4, #52]	; 0x34
 80305f8:	89a3      	ldrh	r3, [r4, #12]
 80305fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80305fe:	81a3      	strh	r3, [r4, #12]
 8030600:	2300      	movs	r3, #0
 8030602:	6063      	str	r3, [r4, #4]
 8030604:	6923      	ldr	r3, [r4, #16]
 8030606:	6023      	str	r3, [r4, #0]
 8030608:	89a3      	ldrh	r3, [r4, #12]
 803060a:	f043 0308 	orr.w	r3, r3, #8
 803060e:	81a3      	strh	r3, [r4, #12]
 8030610:	6923      	ldr	r3, [r4, #16]
 8030612:	b94b      	cbnz	r3, 8030628 <__swsetup_r+0x7c>
 8030614:	89a3      	ldrh	r3, [r4, #12]
 8030616:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803061a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803061e:	d003      	beq.n	8030628 <__swsetup_r+0x7c>
 8030620:	4621      	mov	r1, r4
 8030622:	4628      	mov	r0, r5
 8030624:	f000 f840 	bl	80306a8 <__smakebuf_r>
 8030628:	89a0      	ldrh	r0, [r4, #12]
 803062a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803062e:	f010 0301 	ands.w	r3, r0, #1
 8030632:	d00a      	beq.n	803064a <__swsetup_r+0x9e>
 8030634:	2300      	movs	r3, #0
 8030636:	60a3      	str	r3, [r4, #8]
 8030638:	6963      	ldr	r3, [r4, #20]
 803063a:	425b      	negs	r3, r3
 803063c:	61a3      	str	r3, [r4, #24]
 803063e:	6923      	ldr	r3, [r4, #16]
 8030640:	b943      	cbnz	r3, 8030654 <__swsetup_r+0xa8>
 8030642:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8030646:	d1c4      	bne.n	80305d2 <__swsetup_r+0x26>
 8030648:	bd38      	pop	{r3, r4, r5, pc}
 803064a:	0781      	lsls	r1, r0, #30
 803064c:	bf58      	it	pl
 803064e:	6963      	ldrpl	r3, [r4, #20]
 8030650:	60a3      	str	r3, [r4, #8]
 8030652:	e7f4      	b.n	803063e <__swsetup_r+0x92>
 8030654:	2000      	movs	r0, #0
 8030656:	e7f7      	b.n	8030648 <__swsetup_r+0x9c>
 8030658:	2000063c 	.word	0x2000063c

0803065c <__swhatbuf_r>:
 803065c:	b570      	push	{r4, r5, r6, lr}
 803065e:	460c      	mov	r4, r1
 8030660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030664:	2900      	cmp	r1, #0
 8030666:	b096      	sub	sp, #88	; 0x58
 8030668:	4615      	mov	r5, r2
 803066a:	461e      	mov	r6, r3
 803066c:	da0d      	bge.n	803068a <__swhatbuf_r+0x2e>
 803066e:	89a3      	ldrh	r3, [r4, #12]
 8030670:	f013 0f80 	tst.w	r3, #128	; 0x80
 8030674:	f04f 0100 	mov.w	r1, #0
 8030678:	bf0c      	ite	eq
 803067a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 803067e:	2340      	movne	r3, #64	; 0x40
 8030680:	2000      	movs	r0, #0
 8030682:	6031      	str	r1, [r6, #0]
 8030684:	602b      	str	r3, [r5, #0]
 8030686:	b016      	add	sp, #88	; 0x58
 8030688:	bd70      	pop	{r4, r5, r6, pc}
 803068a:	466a      	mov	r2, sp
 803068c:	f000 f848 	bl	8030720 <_fstat_r>
 8030690:	2800      	cmp	r0, #0
 8030692:	dbec      	blt.n	803066e <__swhatbuf_r+0x12>
 8030694:	9901      	ldr	r1, [sp, #4]
 8030696:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 803069a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 803069e:	4259      	negs	r1, r3
 80306a0:	4159      	adcs	r1, r3
 80306a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80306a6:	e7eb      	b.n	8030680 <__swhatbuf_r+0x24>

080306a8 <__smakebuf_r>:
 80306a8:	898b      	ldrh	r3, [r1, #12]
 80306aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80306ac:	079d      	lsls	r5, r3, #30
 80306ae:	4606      	mov	r6, r0
 80306b0:	460c      	mov	r4, r1
 80306b2:	d507      	bpl.n	80306c4 <__smakebuf_r+0x1c>
 80306b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80306b8:	6023      	str	r3, [r4, #0]
 80306ba:	6123      	str	r3, [r4, #16]
 80306bc:	2301      	movs	r3, #1
 80306be:	6163      	str	r3, [r4, #20]
 80306c0:	b002      	add	sp, #8
 80306c2:	bd70      	pop	{r4, r5, r6, pc}
 80306c4:	ab01      	add	r3, sp, #4
 80306c6:	466a      	mov	r2, sp
 80306c8:	f7ff ffc8 	bl	803065c <__swhatbuf_r>
 80306cc:	9900      	ldr	r1, [sp, #0]
 80306ce:	4605      	mov	r5, r0
 80306d0:	4630      	mov	r0, r6
 80306d2:	f7fd f9c3 	bl	802da5c <_malloc_r>
 80306d6:	b948      	cbnz	r0, 80306ec <__smakebuf_r+0x44>
 80306d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80306dc:	059a      	lsls	r2, r3, #22
 80306de:	d4ef      	bmi.n	80306c0 <__smakebuf_r+0x18>
 80306e0:	f023 0303 	bic.w	r3, r3, #3
 80306e4:	f043 0302 	orr.w	r3, r3, #2
 80306e8:	81a3      	strh	r3, [r4, #12]
 80306ea:	e7e3      	b.n	80306b4 <__smakebuf_r+0xc>
 80306ec:	89a3      	ldrh	r3, [r4, #12]
 80306ee:	6020      	str	r0, [r4, #0]
 80306f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80306f4:	81a3      	strh	r3, [r4, #12]
 80306f6:	9b00      	ldr	r3, [sp, #0]
 80306f8:	6163      	str	r3, [r4, #20]
 80306fa:	9b01      	ldr	r3, [sp, #4]
 80306fc:	6120      	str	r0, [r4, #16]
 80306fe:	b15b      	cbz	r3, 8030718 <__smakebuf_r+0x70>
 8030700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8030704:	4630      	mov	r0, r6
 8030706:	f000 f81d 	bl	8030744 <_isatty_r>
 803070a:	b128      	cbz	r0, 8030718 <__smakebuf_r+0x70>
 803070c:	89a3      	ldrh	r3, [r4, #12]
 803070e:	f023 0303 	bic.w	r3, r3, #3
 8030712:	f043 0301 	orr.w	r3, r3, #1
 8030716:	81a3      	strh	r3, [r4, #12]
 8030718:	89a3      	ldrh	r3, [r4, #12]
 803071a:	431d      	orrs	r5, r3
 803071c:	81a5      	strh	r5, [r4, #12]
 803071e:	e7cf      	b.n	80306c0 <__smakebuf_r+0x18>

08030720 <_fstat_r>:
 8030720:	b538      	push	{r3, r4, r5, lr}
 8030722:	4d07      	ldr	r5, [pc, #28]	; (8030740 <_fstat_r+0x20>)
 8030724:	2300      	movs	r3, #0
 8030726:	4604      	mov	r4, r0
 8030728:	4608      	mov	r0, r1
 803072a:	4611      	mov	r1, r2
 803072c:	602b      	str	r3, [r5, #0]
 803072e:	f7db f8ac 	bl	800b88a <_fstat>
 8030732:	1c43      	adds	r3, r0, #1
 8030734:	d102      	bne.n	803073c <_fstat_r+0x1c>
 8030736:	682b      	ldr	r3, [r5, #0]
 8030738:	b103      	cbz	r3, 803073c <_fstat_r+0x1c>
 803073a:	6023      	str	r3, [r4, #0]
 803073c:	bd38      	pop	{r3, r4, r5, pc}
 803073e:	bf00      	nop
 8030740:	20007048 	.word	0x20007048

08030744 <_isatty_r>:
 8030744:	b538      	push	{r3, r4, r5, lr}
 8030746:	4d06      	ldr	r5, [pc, #24]	; (8030760 <_isatty_r+0x1c>)
 8030748:	2300      	movs	r3, #0
 803074a:	4604      	mov	r4, r0
 803074c:	4608      	mov	r0, r1
 803074e:	602b      	str	r3, [r5, #0]
 8030750:	f7db f8ab 	bl	800b8aa <_isatty>
 8030754:	1c43      	adds	r3, r0, #1
 8030756:	d102      	bne.n	803075e <_isatty_r+0x1a>
 8030758:	682b      	ldr	r3, [r5, #0]
 803075a:	b103      	cbz	r3, 803075e <_isatty_r+0x1a>
 803075c:	6023      	str	r3, [r4, #0]
 803075e:	bd38      	pop	{r3, r4, r5, pc}
 8030760:	20007048 	.word	0x20007048

08030764 <_init>:
 8030764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030766:	bf00      	nop
 8030768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803076a:	bc08      	pop	{r3}
 803076c:	469e      	mov	lr, r3
 803076e:	4770      	bx	lr

08030770 <_fini>:
 8030770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030772:	bf00      	nop
 8030774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8030776:	bc08      	pop	{r3}
 8030778:	469e      	mov	lr, r3
 803077a:	4770      	bx	lr
